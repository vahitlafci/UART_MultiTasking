
Uart_MultiTasking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005750  08005750  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005758  08005758  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000041c4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004238  20004238  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017260  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003044  00000000  00000000  00037304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  0003a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e8  00000000  00000000  0003b658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025aff  00000000  00000000  0003c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e16  00000000  00000000  0006233f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7322  00000000  00000000  00077155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015e477  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052f8  00000000  00000000  0015e4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800566c 	.word	0x0800566c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800566c 	.word	0x0800566c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <vApplicationGetIdleTaskMemory+0x2c>)
 8000504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <vApplicationGetIdleTaskMemory+0x30>)
 800050a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000090 	.word	0x20000090
 8000524:	20000144 	.word	0x20000144

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b08e      	sub	sp, #56	; 0x38
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fefb 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f843 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f99f 	bl	8000878 <MX_GPIO_Init>
  MX_FMC_Init();
 800053a:	f000 f94d 	bl	80007d8 <MX_FMC_Init>
  MX_TIM1_Init();
 800053e:	f000 f8a7 	bl	8000690 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000542:	f000 f91f 	bl	8000784 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000546:	f000 f8f3 	bl	8000730 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, buffer, BUFFER_LENGTH);
 800054a:	2232      	movs	r2, #50	; 0x32
 800054c:	4915      	ldr	r1, [pc, #84]	; (80005a4 <main+0x7c>)
 800054e:	4816      	ldr	r0, [pc, #88]	; (80005a8 <main+0x80>)
 8000550:	f002 fcc5 	bl	8002ede <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, LedTask_func, osPriorityNormal, 0, 256);
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0x84>)
 8000556:	f107 041c 	add.w	r4, r7, #28
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 8000568:	f107 031c 	add.w	r3, r7, #28
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fd33 	bl	8003fda <osThreadCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <main+0x88>)
 8000578:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, UartTask_func, osPriorityLow, 0, 1024);
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <main+0x8c>)
 800057c:	463c      	mov	r4, r7
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 800058c:	463b      	mov	r3, r7
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f003 fd22 	bl	8003fda <osThreadCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <main+0x90>)
 800059a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f003 fd16 	bl	8003fcc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x78>
 80005a2:	bf00      	nop
 80005a4:	20000454 	.word	0x20000454
 80005a8:	200003d0 	.word	0x200003d0
 80005ac:	08005698 	.word	0x08005698
 80005b0:	20000448 	.word	0x20000448
 80005b4:	080056b4 	.word	0x080056b4
 80005b8:	2000044c 	.word	0x2000044c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 ff84 	bl	80054d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000634:	2348      	movs	r3, #72	; 0x48
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800063c:	2303      	movs	r3, #3
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f9eb 	bl	8001a20 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 fbec 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2102      	movs	r1, #2
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fc4d 	bl	8001f10 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800067c:	f000 fbd6 	bl	8000e2c <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_TIM1_Init+0x98>)
 80006ae:	4a1f      	ldr	r2, [pc, #124]	; (800072c <MX_TIM1_Init+0x9c>)
 80006b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_TIM1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_TIM1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_TIM1_Init+0x98>)
 80006c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_TIM1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_TIM1_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_TIM1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006d8:	4813      	ldr	r0, [pc, #76]	; (8000728 <MX_TIM1_Init+0x98>)
 80006da:	f001 fe9f 	bl	800241c <HAL_TIM_Base_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006e4:	f000 fba2 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <MX_TIM1_Init+0x98>)
 80006f6:	f002 f859 	bl	80027ac <HAL_TIM_ConfigClockSource>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000700:	f000 fb94 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_TIM1_Init+0x98>)
 8000712:	f002 fa75 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800071c:	f000 fb86 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000344 	.word	0x20000344
 800072c:	40010000 	.word	0x40010000

08000730 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_UART5_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_UART5_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_UART5_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_UART5_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_UART5_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_UART5_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_UART5_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_UART5_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_UART5_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_UART5_Init+0x4c>)
 8000768:	f002 fada 	bl	8002d20 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 fb5b 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000038c 	.word	0x2000038c
 8000780:	40005000 	.word	0x40005000

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_USART1_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007bc:	f002 fab0 	bl	8002d20 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 fb31 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200003d0 	.word	0x200003d0
 80007d4:	40011000 	.word	0x40011000

080007d8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_FMC_Init+0x98>)
 80007f2:	4a20      	ldr	r2, [pc, #128]	; (8000874 <MX_FMC_Init+0x9c>)
 80007f4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_FMC_Init+0x98>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_FMC_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_FMC_Init+0x98>)
 8000804:	2204      	movs	r2, #4
 8000806:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_FMC_Init+0x98>)
 800080a:	2210      	movs	r2, #16
 800080c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_FMC_Init+0x98>)
 8000810:	2240      	movs	r2, #64	; 0x40
 8000812:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_FMC_Init+0x98>)
 8000816:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800081a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_FMC_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_FMC_Init+0x98>)
 8000824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000828:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_FMC_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_FMC_Init+0x98>)
 8000832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800083c:	2307      	movs	r3, #7
 800083e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000844:	2307      	movs	r3, #7
 8000846:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000848:	2303      	movs	r3, #3
 800084a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_FMC_Init+0x98>)
 800085a:	f001 fdab 	bl	80023b4 <HAL_SDRAM_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000864:	f000 fae2 	bl	8000e2c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000414 	.word	0x20000414
 8000874:	a0000140 	.word	0xa0000140

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	4bb2      	ldr	r3, [pc, #712]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4ab1      	ldr	r2, [pc, #708]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4baf      	ldr	r3, [pc, #700]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	623b      	str	r3, [r7, #32]
 80008a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	4bab      	ldr	r3, [pc, #684]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4aaa      	ldr	r2, [pc, #680]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4ba8      	ldr	r3, [pc, #672]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4ba4      	ldr	r3, [pc, #656]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4aa3      	ldr	r2, [pc, #652]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4ba1      	ldr	r3, [pc, #644]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b9d      	ldr	r3, [pc, #628]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a9c      	ldr	r2, [pc, #624]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b9a      	ldr	r3, [pc, #616]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b96      	ldr	r3, [pc, #600]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a95      	ldr	r2, [pc, #596]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b93      	ldr	r3, [pc, #588]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b8f      	ldr	r3, [pc, #572]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a8e      	ldr	r2, [pc, #568]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b8c      	ldr	r3, [pc, #560]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b88      	ldr	r3, [pc, #544]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a87      	ldr	r2, [pc, #540]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b85      	ldr	r3, [pc, #532]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b81      	ldr	r3, [pc, #516]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a80      	ldr	r2, [pc, #512]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b7e      	ldr	r3, [pc, #504]	; (8000b5c <MX_GPIO_Init+0x2e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2116      	movs	r1, #22
 8000972:	487b      	ldr	r0, [pc, #492]	; (8000b60 <MX_GPIO_Init+0x2e8>)
 8000974:	f001 f83a 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	4879      	ldr	r0, [pc, #484]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 800097e:	f001 f835 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000988:	4877      	ldr	r0, [pc, #476]	; (8000b68 <MX_GPIO_Init+0x2f0>)
 800098a:	f001 f82f 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000994:	4875      	ldr	r0, [pc, #468]	; (8000b6c <MX_GPIO_Init+0x2f4>)
 8000996:	f001 f829 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800099a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80009ac:	2305      	movs	r3, #5
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	486e      	ldr	r0, [pc, #440]	; (8000b70 <MX_GPIO_Init+0x2f8>)
 80009b8:	f000 fe6c 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80009bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ce:	230e      	movs	r3, #14
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4865      	ldr	r0, [pc, #404]	; (8000b70 <MX_GPIO_Init+0x2f8>)
 80009da:	f000 fe5b 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009de:	2316      	movs	r3, #22
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	485a      	ldr	r0, [pc, #360]	; (8000b60 <MX_GPIO_Init+0x2e8>)
 80009f6:	f000 fe4d 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009fa:	f248 0307 	movw	r3, #32775	; 0x8007
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4854      	ldr	r0, [pc, #336]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000a12:	f000 fe3f 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000a16:	f641 0358 	movw	r3, #6232	; 0x1858
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a28:	230e      	movs	r3, #14
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	484c      	ldr	r0, [pc, #304]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000a34:	f000 fe2e 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4845      	ldr	r0, [pc, #276]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000a50:	f000 fe20 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a54:	2320      	movs	r3, #32
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	483d      	ldr	r0, [pc, #244]	; (8000b60 <MX_GPIO_Init+0x2e8>)
 8000a6a:	f000 fe13 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a7e:	2309      	movs	r3, #9
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	483a      	ldr	r0, [pc, #232]	; (8000b74 <MX_GPIO_Init+0x2fc>)
 8000a8a:	f000 fe03 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4834      	ldr	r0, [pc, #208]	; (8000b74 <MX_GPIO_Init+0x2fc>)
 8000aa2:	f000 fdf7 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000aa6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ab8:	230e      	movs	r3, #14
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	482c      	ldr	r0, [pc, #176]	; (8000b74 <MX_GPIO_Init+0x2fc>)
 8000ac4:	f000 fde6 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000ac8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ada:	230c      	movs	r3, #12
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4823      	ldr	r0, [pc, #140]	; (8000b74 <MX_GPIO_Init+0x2fc>)
 8000ae6:	f000 fdd5 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	481d      	ldr	r0, [pc, #116]	; (8000b74 <MX_GPIO_Init+0x2fc>)
 8000b00:	f000 fdc8 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_GPIO_Init+0x2f0>)
 8000b1a:	f000 fdbb 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b1e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_GPIO_Init+0x2f0>)
 8000b38:	f000 fdac 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b3c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b4e:	230e      	movs	r3, #14
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	e00e      	b.n	8000b78 <MX_GPIO_Init+0x300>
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40020400 	.word	0x40020400
 8000b78:	4834      	ldr	r0, [pc, #208]	; (8000c4c <MX_GPIO_Init+0x3d4>)
 8000b7a:	f000 fd8b 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b7e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b90:	230e      	movs	r3, #14
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	482d      	ldr	r0, [pc, #180]	; (8000c50 <MX_GPIO_Init+0x3d8>)
 8000b9c:	f000 fd7a 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba6:	2312      	movs	r3, #18
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4824      	ldr	r0, [pc, #144]	; (8000c50 <MX_GPIO_Init+0x3d8>)
 8000bbe:	f000 fd69 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc8:	2312      	movs	r3, #18
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481d      	ldr	r0, [pc, #116]	; (8000c54 <MX_GPIO_Init+0x3dc>)
 8000be0:	f000 fd58 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000be4:	2348      	movs	r3, #72	; 0x48
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bf4:	230e      	movs	r3, #14
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4816      	ldr	r0, [pc, #88]	; (8000c58 <MX_GPIO_Init+0x3e0>)
 8000c00:	f000 fd48 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c16:	2309      	movs	r3, #9
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <MX_GPIO_Init+0x3d4>)
 8000c22:	f000 fd37 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <MX_GPIO_Init+0x3d4>)
 8000c40:	f000 fd28 	bl	8001694 <HAL_GPIO_Init>

}
 8000c44:	bf00      	nop
 8000c46:	3738      	adds	r7, #56	; 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40021800 	.word	0x40021800
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020c00 	.word	0x40020c00

08000c5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&huart1, buffer, BUFFER_LENGTH);
 8000c64:	2232      	movs	r2, #50	; 0x32
 8000c66:	4905      	ldr	r1, [pc, #20]	; (8000c7c <HAL_UART_RxCpltCallback+0x20>)
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_UART_RxCpltCallback+0x24>)
 8000c6a:	f002 f938 	bl	8002ede <HAL_UART_Receive_IT>
	  uartItFlag = 1;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_UART_RxCpltCallback+0x28>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]

}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000454 	.word	0x20000454
 8000c80:	200003d0 	.word	0x200003d0
 8000c84:	20000450 	.word	0x20000450

08000c88 <LedTask_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LedTask_func */
void LedTask_func(void const * argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f003 f9ee 	bl	8004072 <osDelay>
 8000c96:	e7fb      	b.n	8000c90 <LedTask_func+0x8>

08000c98 <UartTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UartTask_func */
void UartTask_func(void const * argument)
{
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b089      	sub	sp, #36	; 0x24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartTask_func */
  /* Infinite loop */
  for(;;)
  {
	  if(uartItFlag) {
 8000ca2:	4b50      	ldr	r3, [pc, #320]	; (8000de4 <UartTask_func+0x14c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d031      	beq.n	8000d0e <UartTask_func+0x76>
		  uartItFlag = 0;
 8000caa:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <UartTask_func+0x14c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
		  	start = cntr;
 8000cb0:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <UartTask_func+0x150>)
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <UartTask_func+0x154>)
 8000cb6:	701a      	strb	r2, [r3, #0]
		    for(int i = start; i < start+BUFFER_LENGTH; i++) {
 8000cb8:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <UartTask_func+0x154>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	e020      	b.n	8000d02 <UartTask_func+0x6a>
		  	  rcvd_data = buffer[i];
 8000cc0:	4a4b      	ldr	r2, [pc, #300]	; (8000df0 <UartTask_func+0x158>)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <UartTask_func+0x15c>)
 8000cca:	701a      	strb	r2, [r3, #0]
		  	 if(rcvd_data == 10) {
 8000ccc:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <UartTask_func+0x15c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b0a      	cmp	r3, #10
 8000cd2:	d10d      	bne.n	8000cf0 <UartTask_func+0x58>
		  		 rcvd_complete = 1;
 8000cd4:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <UartTask_func+0x160>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
		  		 end = cntr;
 8000cda:	4b43      	ldr	r3, [pc, #268]	; (8000de8 <UartTask_func+0x150>)
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <UartTask_func+0x164>)
 8000ce0:	701a      	strb	r2, [r3, #0]
			  	 cntr++;
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <UartTask_func+0x150>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b3f      	ldr	r3, [pc, #252]	; (8000de8 <UartTask_func+0x150>)
 8000cec:	701a      	strb	r2, [r3, #0]

		  		 break;
 8000cee:	e00e      	b.n	8000d0e <UartTask_func+0x76>
		  	 }
		  	 cntr++;
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <UartTask_func+0x150>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <UartTask_func+0x150>)
 8000cfa:	701a      	strb	r2, [r3, #0]
		    for(int i = start; i < start+BUFFER_LENGTH; i++) {
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <UartTask_func+0x154>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	3331      	adds	r3, #49	; 0x31
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	ddd8      	ble.n	8000cc0 <UartTask_func+0x28>
		    }
	  }
	  if(echo) {
 8000d0e:	4b3c      	ldr	r3, [pc, #240]	; (8000e00 <UartTask_func+0x168>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00b      	beq.n	8000d2e <UartTask_func+0x96>
		 uint8_t newLine = 10;
 8000d16:	230a      	movs	r3, #10
 8000d18:	72fb      	strb	r3, [r7, #11]
		 HAL_UART_Transmit(&huart1,&newLine,1,100);
 8000d1a:	f107 010b 	add.w	r1, r7, #11
 8000d1e:	2364      	movs	r3, #100	; 0x64
 8000d20:	2201      	movs	r2, #1
 8000d22:	4838      	ldr	r0, [pc, #224]	; (8000e04 <UartTask_func+0x16c>)
 8000d24:	f002 f849 	bl	8002dba <HAL_UART_Transmit>
		 echo = 0;
 8000d28:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <UartTask_func+0x168>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	  }
	  if(rcvd_complete) {
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <UartTask_func+0x160>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d051      	beq.n	8000dda <UartTask_func+0x142>
 8000d36:	466b      	mov	r3, sp
 8000d38:	461e      	mov	r6, r3
		  uint8_t length = end-start;
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <UartTask_func+0x164>)
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <UartTask_func+0x154>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	75fb      	strb	r3, [r7, #23]
		  uint8_t tmpData[length];
 8000d46:	7df9      	ldrb	r1, [r7, #23]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	b2cb      	uxtb	r3, r1
 8000d50:	2200      	movs	r2, #0
 8000d52:	461c      	mov	r4, r3
 8000d54:	4615      	mov	r5, r2
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	f04f 0300 	mov.w	r3, #0
 8000d5e:	00eb      	lsls	r3, r5, #3
 8000d60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d64:	00e2      	lsls	r2, r4, #3
 8000d66:	b2cb      	uxtb	r3, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	4691      	mov	r9, r2
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d82:	460b      	mov	r3, r1
 8000d84:	3307      	adds	r3, #7
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000d8e:	466b      	mov	r3, sp
 8000d90:	3300      	adds	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
		  for(int i = 0; i < length; i++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e00e      	b.n	8000db8 <UartTask_func+0x120>
			  tmpData[i] = buffer[start+i];
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <UartTask_func+0x154>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <UartTask_func+0x158>)
 8000da6:	5cd0      	ldrb	r0, [r2, r3]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	4413      	add	r3, r2
 8000dae:	4602      	mov	r2, r0
 8000db0:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < length; i++) {
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3301      	adds	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbec      	blt.n	8000d9a <UartTask_func+0x102>
		  }
		  HAL_UART_Transmit(&huart1,tmpData,sizeof(tmpData),100);
 8000dc0:	b28a      	uxth	r2, r1
 8000dc2:	2364      	movs	r3, #100	; 0x64
 8000dc4:	68f9      	ldr	r1, [r7, #12]
 8000dc6:	480f      	ldr	r0, [pc, #60]	; (8000e04 <UartTask_func+0x16c>)
 8000dc8:	f001 fff7 	bl	8002dba <HAL_UART_Transmit>
		  echo = 1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <UartTask_func+0x168>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
		  rcvd_complete = 0;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <UartTask_func+0x160>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	46b5      	mov	sp, r6
	  }
	  //HAL_UART_Transmit(&huart1,msg,sizeof(msg),100);
	  osDelay(20);
 8000dda:	2014      	movs	r0, #20
 8000ddc:	f003 f949 	bl	8004072 <osDelay>
	  if(uartItFlag) {
 8000de0:	e75f      	b.n	8000ca2 <UartTask_func+0xa>
 8000de2:	bf00      	nop
 8000de4:	20000450 	.word	0x20000450
 8000de8:	20000487 	.word	0x20000487
 8000dec:	20000489 	.word	0x20000489
 8000df0:	20000454 	.word	0x20000454
 8000df4:	20000486 	.word	0x20000486
 8000df8:	20000488 	.word	0x20000488
 8000dfc:	2000048a 	.word	0x2000048a
 8000e00:	2000048b 	.word	0x2000048b
 8000e04:	200003d0 	.word	0x200003d0

08000e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e1a:	f000 faa7 	bl	800136c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40001000 	.word	0x40001000

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_MspInit+0x54>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <HAL_MspInit+0x54>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x54>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_MspInit+0x54>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_MspInit+0x54>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_MspInit+0x54>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	210f      	movs	r1, #15
 8000e7a:	f06f 0001 	mvn.w	r0, #1
 8000e7e:	f000 fb4d 	bl	800151c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_TIM_Base_MspInit+0x3c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10d      	bne.n	8000ebe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_TIM_Base_MspInit+0x40>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_TIM_Base_MspInit+0x40>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_TIM_Base_MspInit+0x40>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_UART_MspInit+0x138>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d14b      	bne.n	8000f8e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	4b45      	ldr	r3, [pc, #276]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a44      	ldr	r2, [pc, #272]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b42      	ldr	r3, [pc, #264]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a3d      	ldr	r2, [pc, #244]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a36      	ldr	r2, [pc, #216]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	482b      	ldr	r0, [pc, #172]	; (8001014 <HAL_UART_MspInit+0x140>)
 8000f68:	f000 fb94 	bl	8001694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4824      	ldr	r0, [pc, #144]	; (8001018 <HAL_UART_MspInit+0x144>)
 8000f88:	f000 fb84 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f8c:	e039      	b.n	8001002 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_UART_MspInit+0x148>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d134      	bne.n	8001002 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <HAL_UART_MspInit+0x14c>)
 8000fee:	f000 fb51 	bl	8001694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	2025      	movs	r0, #37	; 0x25
 8000ff8:	f000 fa90 	bl	800151c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ffc:	2025      	movs	r0, #37	; 0x25
 8000ffe:	f000 faa9 	bl	8001554 <HAL_NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3730      	adds	r7, #48	; 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40005000 	.word	0x40005000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40011000 	.word	0x40011000
 8001020:	40020000 	.word	0x40020000

08001024 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001038:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <HAL_FMC_MspInit+0x104>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d16f      	bne.n	8001120 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001040:	4b39      	ldr	r3, [pc, #228]	; (8001128 <HAL_FMC_MspInit+0x104>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_FMC_MspInit+0x108>)
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	4a37      	ldr	r2, [pc, #220]	; (800112c <HAL_FMC_MspInit+0x108>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6393      	str	r3, [r2, #56]	; 0x38
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <HAL_FMC_MspInit+0x108>)
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001062:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001066:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001074:	230c      	movs	r3, #12
 8001076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	482c      	ldr	r0, [pc, #176]	; (8001130 <HAL_FMC_MspInit+0x10c>)
 800107e:	f000 fb09 	bl	8001694 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001082:	2301      	movs	r3, #1
 8001084:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001092:	230c      	movs	r3, #12
 8001094:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4826      	ldr	r0, [pc, #152]	; (8001134 <HAL_FMC_MspInit+0x110>)
 800109c:	f000 fafa 	bl	8001694 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80010a0:	f248 1333 	movw	r3, #33075	; 0x8133
 80010a4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010b2:	230c      	movs	r3, #12
 80010b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	481f      	ldr	r0, [pc, #124]	; (8001138 <HAL_FMC_MspInit+0x114>)
 80010bc:	f000 faea 	bl	8001694 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010c0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010c4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010d2:	230c      	movs	r3, #12
 80010d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4818      	ldr	r0, [pc, #96]	; (800113c <HAL_FMC_MspInit+0x118>)
 80010dc:	f000 fada 	bl	8001694 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80010e0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010e4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010f2:	230c      	movs	r3, #12
 80010f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <HAL_FMC_MspInit+0x11c>)
 80010fc:	f000 faca 	bl	8001694 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001100:	2360      	movs	r3, #96	; 0x60
 8001102:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001110:	230c      	movs	r3, #12
 8001112:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <HAL_FMC_MspInit+0x120>)
 800111a:	f000 fabb 	bl	8001694 <HAL_GPIO_Init>
 800111e:	e000      	b.n	8001122 <HAL_FMC_MspInit+0xfe>
    return;
 8001120:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000048c 	.word	0x2000048c
 800112c:	40023800 	.word	0x40023800
 8001130:	40021400 	.word	0x40021400
 8001134:	40020800 	.word	0x40020800
 8001138:	40021800 	.word	0x40021800
 800113c:	40021000 	.word	0x40021000
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40020400 	.word	0x40020400

08001148 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001150:	f7ff ff68 	bl	8001024 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <HAL_InitTick+0xe4>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a32      	ldr	r2, [pc, #200]	; (8001240 <HAL_InitTick+0xe4>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <HAL_InitTick+0xe4>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001188:	f107 0210 	add.w	r2, r7, #16
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f001 f8dc 	bl	8002350 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011a2:	f001 f8ad 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
 80011a6:	6378      	str	r0, [r7, #52]	; 0x34
 80011a8:	e004      	b.n	80011b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011aa:	f001 f8a9 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
 80011ae:	4603      	mov	r3, r0
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b6:	4a23      	ldr	r2, [pc, #140]	; (8001244 <HAL_InitTick+0xe8>)
 80011b8:	fba2 2303 	umull	r2, r3, r2, r3
 80011bc:	0c9b      	lsrs	r3, r3, #18
 80011be:	3b01      	subs	r3, #1
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_InitTick+0xec>)
 80011c4:	4a21      	ldr	r2, [pc, #132]	; (800124c <HAL_InitTick+0xf0>)
 80011c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HAL_InitTick+0xec>)
 80011ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <HAL_InitTick+0xec>)
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_InitTick+0xec>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_InitTick+0xec>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_InitTick+0xec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011e8:	4817      	ldr	r0, [pc, #92]	; (8001248 <HAL_InitTick+0xec>)
 80011ea:	f001 f917 	bl	800241c <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d11b      	bne.n	8001234 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011fc:	4812      	ldr	r0, [pc, #72]	; (8001248 <HAL_InitTick+0xec>)
 80011fe:	f001 f95d 	bl	80024bc <HAL_TIM_Base_Start_IT>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800120c:	2b00      	cmp	r3, #0
 800120e:	d111      	bne.n	8001234 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001210:	2036      	movs	r0, #54	; 0x36
 8001212:	f000 f99f 	bl	8001554 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d808      	bhi.n	800122e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	2036      	movs	r0, #54	; 0x36
 8001222:	f000 f97b 	bl	800151c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_InitTick+0xf4>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e002      	b.n	8001234 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001234:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001238:	4618      	mov	r0, r3
 800123a:	3738      	adds	r7, #56	; 0x38
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	431bde83 	.word	0x431bde83
 8001248:	20000490 	.word	0x20000490
 800124c:	40001000 	.word	0x40001000
 8001250:	20000004 	.word	0x20000004

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <USART1_IRQHandler+0x14>)
 8001286:	f001 fe5b 	bl	8002f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  uartItFlag = 1u;
 800128a:	4b03      	ldr	r3, [pc, #12]	; (8001298 <USART1_IRQHandler+0x18>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200003d0 	.word	0x200003d0
 8001298:	20000450 	.word	0x20000450

0800129c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM6_DAC_IRQHandler+0x10>)
 80012a2:	f001 f97b 	bl	800259c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000490 	.word	0x20000490

080012b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <SystemInit+0x20>)
 80012b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <SystemInit+0x20>)
 80012bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800130c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012da:	490e      	ldr	r1, [pc, #56]	; (8001314 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f0:	4c0b      	ldr	r4, [pc, #44]	; (8001320 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012fe:	f7ff ffd7 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001302:	f004 f8c3 	bl	800548c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001306:	f7ff f90f 	bl	8000528 <main>
  bx  lr    
 800130a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800130c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001318:	08005760 	.word	0x08005760
  ldr r2, =_sbss
 800131c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001320:	20004238 	.word	0x20004238

08001324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC_IRQHandler>
	...

08001328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <HAL_Init+0x40>)
 8001332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001336:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_Init+0x40>)
 800133e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001342:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_Init+0x40>)
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f8d8 	bl	8001506 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001356:	200f      	movs	r0, #15
 8001358:	f7ff ff00 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800135c:	f7ff fd6c 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023c00 	.word	0x40023c00

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	200004d8 	.word	0x200004d8

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200004d8 	.word	0x200004d8

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff4c 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152e:	f7ff ff61 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001532:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	6978      	ldr	r0, [r7, #20]
 800153a:	f7ff ffb1 	bl	80014a0 <NVIC_EncodePriority>
 800153e:	4602      	mov	r2, r0
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff80 	bl	800144c <__NVIC_SetPriority>
}
 800154c:	bf00      	nop
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff54 	bl	8001410 <__NVIC_EnableIRQ>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800157e:	f7ff ff09 	bl	8001394 <HAL_GetTick>
 8001582:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d008      	beq.n	80015a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e052      	b.n	8001648 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0216 	bic.w	r2, r2, #22
 80015b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <HAL_DMA_Abort+0x62>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0208 	bic.w	r2, r2, #8
 80015e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f2:	e013      	b.n	800161c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015f4:	f7ff fece 	bl	8001394 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d90c      	bls.n	800161c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2220      	movs	r2, #32
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e015      	b.n	8001648 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1e4      	bne.n	80015f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	223f      	movs	r2, #63	; 0x3f
 8001630:	409a      	lsls	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d004      	beq.n	800166e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00c      	b.n	8001688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2205      	movs	r2, #5
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	e177      	b.n	80019a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 8166 	bne.w	800199a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d005      	beq.n	80016e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d130      	bne.n	8001748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 0201 	and.w	r2, r3, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b03      	cmp	r3, #3
 8001752:	d017      	beq.n	8001784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d123      	bne.n	80017d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0203 	and.w	r2, r3, #3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80c0 	beq.w	800199a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <HAL_GPIO_Init+0x324>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a65      	ldr	r2, [pc, #404]	; (80019b8 <HAL_GPIO_Init+0x324>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_GPIO_Init+0x324>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001836:	4a61      	ldr	r2, [pc, #388]	; (80019bc <HAL_GPIO_Init+0x328>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <HAL_GPIO_Init+0x32c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d037      	beq.n	80018d2 <HAL_GPIO_Init+0x23e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a57      	ldr	r2, [pc, #348]	; (80019c4 <HAL_GPIO_Init+0x330>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d031      	beq.n	80018ce <HAL_GPIO_Init+0x23a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a56      	ldr	r2, [pc, #344]	; (80019c8 <HAL_GPIO_Init+0x334>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d02b      	beq.n	80018ca <HAL_GPIO_Init+0x236>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a55      	ldr	r2, [pc, #340]	; (80019cc <HAL_GPIO_Init+0x338>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d025      	beq.n	80018c6 <HAL_GPIO_Init+0x232>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a54      	ldr	r2, [pc, #336]	; (80019d0 <HAL_GPIO_Init+0x33c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01f      	beq.n	80018c2 <HAL_GPIO_Init+0x22e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a53      	ldr	r2, [pc, #332]	; (80019d4 <HAL_GPIO_Init+0x340>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d019      	beq.n	80018be <HAL_GPIO_Init+0x22a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_GPIO_Init+0x344>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_Init+0x226>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a51      	ldr	r2, [pc, #324]	; (80019dc <HAL_GPIO_Init+0x348>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00d      	beq.n	80018b6 <HAL_GPIO_Init+0x222>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a50      	ldr	r2, [pc, #320]	; (80019e0 <HAL_GPIO_Init+0x34c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d007      	beq.n	80018b2 <HAL_GPIO_Init+0x21e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4f      	ldr	r2, [pc, #316]	; (80019e4 <HAL_GPIO_Init+0x350>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_GPIO_Init+0x21a>
 80018aa:	2309      	movs	r3, #9
 80018ac:	e012      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018ae:	230a      	movs	r3, #10
 80018b0:	e010      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018b2:	2308      	movs	r3, #8
 80018b4:	e00e      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018b6:	2307      	movs	r3, #7
 80018b8:	e00c      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018ba:	2306      	movs	r3, #6
 80018bc:	e00a      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018be:	2305      	movs	r3, #5
 80018c0:	e008      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018c2:	2304      	movs	r3, #4
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x240>
 80018d2:	2300      	movs	r3, #0
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e4:	4935      	ldr	r1, [pc, #212]	; (80019bc <HAL_GPIO_Init+0x328>)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_GPIO_Init+0x354>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001916:	4a34      	ldr	r2, [pc, #208]	; (80019e8 <HAL_GPIO_Init+0x354>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800191c:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_GPIO_Init+0x354>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001940:	4a29      	ldr	r2, [pc, #164]	; (80019e8 <HAL_GPIO_Init+0x354>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_GPIO_Init+0x354>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196a:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <HAL_GPIO_Init+0x354>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_GPIO_Init+0x354>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_GPIO_Init+0x354>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3301      	adds	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	f67f ae84 	bls.w	80016b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40021400 	.word	0x40021400
 80019d8:	40021800 	.word	0x40021800
 80019dc:	40021c00 	.word	0x40021c00
 80019e0:	40022000 	.word	0x40022000
 80019e4:	40022400 	.word	0x40022400
 80019e8:	40013c00 	.word	0x40013c00

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e267      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d075      	beq.n	8001b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a3e:	4b88      	ldr	r3, [pc, #544]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d00c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4a:	4b85      	ldr	r3, [pc, #532]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d112      	bne.n	8001a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a56:	4b82      	ldr	r3, [pc, #520]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a62:	d10b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	4b7e      	ldr	r3, [pc, #504]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d05b      	beq.n	8001b28 <HAL_RCC_OscConfig+0x108>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d157      	bne.n	8001b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e242      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x74>
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a75      	ldr	r2, [pc, #468]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xb0>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001a9e:	4b70      	ldr	r3, [pc, #448]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6f      	ldr	r2, [pc, #444]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6c      	ldr	r2, [pc, #432]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xb0>
 8001ab8:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a68      	ldr	r2, [pc, #416]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b66      	ldr	r3, [pc, #408]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a65      	ldr	r2, [pc, #404]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fc5c 	bl	8001394 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fc58 	bl	8001394 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e207      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b5b      	ldr	r3, [pc, #364]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xc0>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fc48 	bl	8001394 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fc44 	bl	8001394 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1f3      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	4b51      	ldr	r3, [pc, #324]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0xe8>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d063      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b36:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d11c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4e:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d116      	bne.n	8001b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x152>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1c7      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4937      	ldr	r1, [pc, #220]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e03a      	b.n	8001bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_RCC_OscConfig+0x244>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff fbfd 	bl	8001394 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fbf9 	bl	8001394 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1a8      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4925      	ldr	r1, [pc, #148]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCC_OscConfig+0x244>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fbdc 	bl	8001394 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff fbd8 	bl	8001394 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e187      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d036      	beq.n	8001c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_RCC_OscConfig+0x248>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff fbbc 	bl	8001394 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff fbb8 	bl	8001394 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e167      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x200>
 8001c3e:	e01b      	b.n	8001c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_OscConfig+0x248>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff fba5 	bl	8001394 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	e00e      	b.n	8001c6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fba1 	bl	8001394 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d907      	bls.n	8001c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e150      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
 8001c60:	40023800 	.word	0x40023800
 8001c64:	42470000 	.word	0x42470000
 8001c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	4b88      	ldr	r3, [pc, #544]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1ea      	bne.n	8001c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8097 	beq.w	8001db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b81      	ldr	r3, [pc, #516]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10f      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b7d      	ldr	r3, [pc, #500]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a7c      	ldr	r2, [pc, #496]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b7a      	ldr	r3, [pc, #488]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	4b77      	ldr	r3, [pc, #476]	; (8001e94 <HAL_RCC_OscConfig+0x474>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc2:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <HAL_RCC_OscConfig+0x474>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a73      	ldr	r2, [pc, #460]	; (8001e94 <HAL_RCC_OscConfig+0x474>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cce:	f7ff fb61 	bl	8001394 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd6:	f7ff fb5d 	bl	8001394 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e10c      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <HAL_RCC_OscConfig+0x474>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x2ea>
 8001cfc:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	e01c      	b.n	8001d44 <HAL_RCC_OscConfig+0x324>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x30c>
 8001d12:	4b5f      	ldr	r3, [pc, #380]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	4a5e      	ldr	r2, [pc, #376]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	4a5b      	ldr	r2, [pc, #364]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0x324>
 8001d2c:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a57      	ldr	r2, [pc, #348]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	4b55      	ldr	r3, [pc, #340]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a54      	ldr	r2, [pc, #336]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d015      	beq.n	8001d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fb22 	bl	8001394 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7ff fb1e 	bl	8001394 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0cb      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ee      	beq.n	8001d54 <HAL_RCC_OscConfig+0x334>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7ff fb0c 	bl	8001394 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f7ff fb08 	bl	8001394 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e0b5      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ee      	bne.n	8001d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da8:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	4a38      	ldr	r2, [pc, #224]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a1 	beq.w	8001f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dbe:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d05c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d141      	bne.n	8001e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fadc 	bl	8001394 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff fad8 	bl	8001394 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e087      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	019b      	lsls	r3, r3, #6
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	085b      	lsrs	r3, r3, #1
 8001e16:	3b01      	subs	r3, #1
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	491b      	ldr	r1, [pc, #108]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fab1 	bl	8001394 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e36:	f7ff faad 	bl	8001394 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e05c      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x416>
 8001e54:	e054      	b.n	8001f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fa9a 	bl	8001394 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff fa96 	bl	8001394 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e045      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x470>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x444>
 8001e82:	e03d      	b.n	8001f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e038      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40007000 	.word	0x40007000
 8001e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_RCC_OscConfig+0x4ec>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d028      	beq.n	8001efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d121      	bne.n	8001efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d11a      	bne.n	8001efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ecc:	4013      	ands	r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0cc      	b.n	80020be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f24:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d90c      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b65      	ldr	r3, [pc, #404]	; (80020c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0b8      	b.n	80020be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d020      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f64:	4b59      	ldr	r3, [pc, #356]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a58      	ldr	r2, [pc, #352]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a52      	ldr	r2, [pc, #328]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f88:	4b50      	ldr	r3, [pc, #320]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	494d      	ldr	r1, [pc, #308]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d044      	beq.n	8002030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d119      	bne.n	8001fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e07f      	b.n	80020be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fce:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e06f      	b.n	80020be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e067      	b.n	80020be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fee:	4b37      	ldr	r3, [pc, #220]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f023 0203 	bic.w	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4934      	ldr	r1, [pc, #208]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002000:	f7ff f9c8 	bl	8001394 <HAL_GetTick>
 8002004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	e00a      	b.n	800201e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002008:	f7ff f9c4 	bl	8001394 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	f241 3288 	movw	r2, #5000	; 0x1388
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e04f      	b.n	80020be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 020c 	and.w	r2, r3, #12
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	429a      	cmp	r2, r3
 800202e:	d1eb      	bne.n	8002008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d20c      	bcs.n	8002058 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e032      	b.n	80020be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4916      	ldr	r1, [pc, #88]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	4313      	orrs	r3, r2
 8002074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	490e      	ldr	r1, [pc, #56]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002096:	f000 f821 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 800209a:	4602      	mov	r2, r0
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	490a      	ldr	r1, [pc, #40]	; (80020d0 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	5ccb      	ldrb	r3, [r1, r3]
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	4a09      	ldr	r2, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1c8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f850 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023c00 	.word	0x40023c00
 80020cc:	40023800 	.word	0x40023800
 80020d0:	080056d8 	.word	0x080056d8
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000004 	.word	0x20000004

080020dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020e0:	b094      	sub	sp, #80	; 0x50
 80020e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	647b      	str	r3, [r7, #68]	; 0x44
 80020e8:	2300      	movs	r3, #0
 80020ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020ec:	2300      	movs	r3, #0
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f4:	4b79      	ldr	r3, [pc, #484]	; (80022dc <HAL_RCC_GetSysClockFreq+0x200>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d00d      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x40>
 8002100:	2b08      	cmp	r3, #8
 8002102:	f200 80e1 	bhi.w	80022c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x34>
 800210a:	2b04      	cmp	r3, #4
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x3a>
 800210e:	e0db      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002110:	4b73      	ldr	r3, [pc, #460]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002114:	e0db      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002116:	4b73      	ldr	r3, [pc, #460]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800211a:	e0d8      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800211c:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_GetSysClockFreq+0x200>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002124:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002126:	4b6d      	ldr	r3, [pc, #436]	; (80022dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d063      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002132:	4b6a      	ldr	r3, [pc, #424]	; (80022dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	099b      	lsrs	r3, r3, #6
 8002138:	2200      	movs	r2, #0
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
 800213c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
 8002146:	2300      	movs	r3, #0
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
 800214a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800214e:	4622      	mov	r2, r4
 8002150:	462b      	mov	r3, r5
 8002152:	f04f 0000 	mov.w	r0, #0
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	0159      	lsls	r1, r3, #5
 800215c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002160:	0150      	lsls	r0, r2, #5
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4621      	mov	r1, r4
 8002168:	1a51      	subs	r1, r2, r1
 800216a:	6139      	str	r1, [r7, #16]
 800216c:	4629      	mov	r1, r5
 800216e:	eb63 0301 	sbc.w	r3, r3, r1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002180:	4659      	mov	r1, fp
 8002182:	018b      	lsls	r3, r1, #6
 8002184:	4651      	mov	r1, sl
 8002186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800218a:	4651      	mov	r1, sl
 800218c:	018a      	lsls	r2, r1, #6
 800218e:	4651      	mov	r1, sl
 8002190:	ebb2 0801 	subs.w	r8, r2, r1
 8002194:	4659      	mov	r1, fp
 8002196:	eb63 0901 	sbc.w	r9, r3, r1
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ae:	4690      	mov	r8, r2
 80021b0:	4699      	mov	r9, r3
 80021b2:	4623      	mov	r3, r4
 80021b4:	eb18 0303 	adds.w	r3, r8, r3
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	462b      	mov	r3, r5
 80021bc:	eb49 0303 	adc.w	r3, r9, r3
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021ce:	4629      	mov	r1, r5
 80021d0:	024b      	lsls	r3, r1, #9
 80021d2:	4621      	mov	r1, r4
 80021d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021d8:	4621      	mov	r1, r4
 80021da:	024a      	lsls	r2, r1, #9
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e2:	2200      	movs	r2, #0
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ec:	f7fe f800 	bl	80001f0 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4613      	mov	r3, r2
 80021f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f8:	e058      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fa:	4b38      	ldr	r3, [pc, #224]	; (80022dc <HAL_RCC_GetSysClockFreq+0x200>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	2200      	movs	r2, #0
 8002202:	4618      	mov	r0, r3
 8002204:	4611      	mov	r1, r2
 8002206:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800220a:	623b      	str	r3, [r7, #32]
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
 8002210:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002214:	4642      	mov	r2, r8
 8002216:	464b      	mov	r3, r9
 8002218:	f04f 0000 	mov.w	r0, #0
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	0159      	lsls	r1, r3, #5
 8002222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002226:	0150      	lsls	r0, r2, #5
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4641      	mov	r1, r8
 800222e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002232:	4649      	mov	r1, r9
 8002234:	eb63 0b01 	sbc.w	fp, r3, r1
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002244:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002248:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800224c:	ebb2 040a 	subs.w	r4, r2, sl
 8002250:	eb63 050b 	sbc.w	r5, r3, fp
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	00eb      	lsls	r3, r5, #3
 800225e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002262:	00e2      	lsls	r2, r4, #3
 8002264:	4614      	mov	r4, r2
 8002266:	461d      	mov	r5, r3
 8002268:	4643      	mov	r3, r8
 800226a:	18e3      	adds	r3, r4, r3
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	464b      	mov	r3, r9
 8002270:	eb45 0303 	adc.w	r3, r5, r3
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002282:	4629      	mov	r1, r5
 8002284:	028b      	lsls	r3, r1, #10
 8002286:	4621      	mov	r1, r4
 8002288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800228c:	4621      	mov	r1, r4
 800228e:	028a      	lsls	r2, r1, #10
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002296:	2200      	movs	r2, #0
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	61fa      	str	r2, [r7, #28]
 800229c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022a0:	f7fd ffa6 	bl	80001f0 <__aeabi_uldivmod>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4613      	mov	r3, r2
 80022aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_GetSysClockFreq+0x200>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	3301      	adds	r3, #1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022c6:	e002      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80022ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3750      	adds	r7, #80	; 0x50
 80022d4:	46bd      	mov	sp, r7
 80022d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	00f42400 	.word	0x00f42400
 80022e4:	007a1200 	.word	0x007a1200

080022e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_RCC_GetHCLKFreq+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000000 	.word	0x20000000

08002300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002304:	f7ff fff0 	bl	80022e8 <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	0a9b      	lsrs	r3, r3, #10
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4903      	ldr	r1, [pc, #12]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	080056e8 	.word	0x080056e8

08002328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800232c:	f7ff ffdc 	bl	80022e8 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0b5b      	lsrs	r3, r3, #13
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4903      	ldr	r1, [pc, #12]	; (800234c <HAL_RCC_GetPCLK2Freq+0x24>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	080056e8 	.word	0x080056e8

08002350 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	220f      	movs	r2, #15
 800235e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_GetClockConfig+0x5c>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0203 	and.w	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCC_GetClockConfig+0x5c>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <HAL_RCC_GetClockConfig+0x5c>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCC_GetClockConfig+0x5c>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	08db      	lsrs	r3, r3, #3
 800238a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_RCC_GetClockConfig+0x60>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	601a      	str	r2, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e025      	b.n	8002414 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d106      	bne.n	80023e2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe feb3 	bl	8001148 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3304      	adds	r3, #4
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f001 fd0b 	bl	8003e10 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	461a      	mov	r2, r3
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	f001 fd60 	bl	8003eca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e041      	b.n	80024b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fd24 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 fa96 	bl	800298c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d001      	beq.n	80024d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e04e      	b.n	8002572 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a23      	ldr	r2, [pc, #140]	; (8002580 <HAL_TIM_Base_Start_IT+0xc4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d022      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fe:	d01d      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_TIM_Base_Start_IT+0xc8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d018      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <HAL_TIM_Base_Start_IT+0xcc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d013      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1c      	ldr	r2, [pc, #112]	; (800258c <HAL_TIM_Base_Start_IT+0xd0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00e      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <HAL_TIM_Base_Start_IT+0xd4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d009      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_TIM_Base_Start_IT+0xd8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_TIM_Base_Start_IT+0xdc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b06      	cmp	r3, #6
 800254c:	d010      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	e007      	b.n	8002570 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40010000 	.word	0x40010000
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800
 800258c:	40000c00 	.word	0x40000c00
 8002590:	40010400 	.word	0x40010400
 8002594:	40014000 	.word	0x40014000
 8002598:	40001800 	.word	0x40001800

0800259c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d122      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d11b      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0202 	mvn.w	r2, #2
 80025c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f9b5 	bl	800294e <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f9a7 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f9b8 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d122      	bne.n	800264c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b04      	cmp	r3, #4
 8002612:	d11b      	bne.n	800264c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0204 	mvn.w	r2, #4
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f98b 	bl	800294e <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f97d 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f98e 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b08      	cmp	r3, #8
 8002658:	d122      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b08      	cmp	r3, #8
 8002666:	d11b      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0208 	mvn.w	r2, #8
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2204      	movs	r2, #4
 8002676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f961 	bl	800294e <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f953 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f964 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0210 	mvn.w	r2, #16
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2208      	movs	r2, #8
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f937 	bl	800294e <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f929 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f93a 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0201 	mvn.w	r2, #1
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fb74 	bl	8000e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b80      	cmp	r3, #128	; 0x80
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	2b80      	cmp	r3, #128	; 0x80
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fae0 	bl	8002d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d10e      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d107      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8ff 	bl	8002976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b20      	cmp	r3, #32
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b20      	cmp	r3, #32
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0220 	mvn.w	r2, #32
 800279c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 faaa 	bl	8002cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_TIM_ConfigClockSource+0x1c>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0b4      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x186>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002800:	d03e      	beq.n	8002880 <HAL_TIM_ConfigClockSource+0xd4>
 8002802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002806:	f200 8087 	bhi.w	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	f000 8086 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x172>
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	d87f      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d01a      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0xa6>
 800281c:	2b70      	cmp	r3, #112	; 0x70
 800281e:	d87b      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d050      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002824:	2b60      	cmp	r3, #96	; 0x60
 8002826:	d877      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b50      	cmp	r3, #80	; 0x50
 800282a:	d03c      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0xfa>
 800282c:	2b50      	cmp	r3, #80	; 0x50
 800282e:	d873      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d058      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d86f      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b30      	cmp	r3, #48	; 0x30
 800283a:	d064      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x15a>
 800283c:	2b30      	cmp	r3, #48	; 0x30
 800283e:	d86b      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b20      	cmp	r3, #32
 8002842:	d060      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x15a>
 8002844:	2b20      	cmp	r3, #32
 8002846:	d867      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d05c      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b10      	cmp	r3, #16
 800284e:	d05a      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x15a>
 8002850:	e062      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6899      	ldr	r1, [r3, #8]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f000 f9ad 	bl	8002bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	609a      	str	r2, [r3, #8]
      break;
 800287e:	e04f      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f000 f996 	bl	8002bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a2:	609a      	str	r2, [r3, #8]
      break;
 80028a4:	e03c      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 f90a 	bl	8002acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2150      	movs	r1, #80	; 0x50
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f963 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 80028c4:	e02c      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f000 f929 	bl	8002b2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2160      	movs	r1, #96	; 0x60
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f953 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 80028e4:	e01c      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 f8ea 	bl	8002acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2140      	movs	r1, #64	; 0x40
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f943 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 8002904:	e00c      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	4610      	mov	r0, r2
 8002912:	f000 f93a 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 8002916:	e003      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      break;
 800291c:	e000      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800291e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d00f      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3d      	ldr	r2, [pc, #244]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00b      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3c      	ldr	r2, [pc, #240]	; (8002aa8 <TIM_Base_SetConfig+0x11c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <TIM_Base_SetConfig+0x120>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3a      	ldr	r2, [pc, #232]	; (8002ab0 <TIM_Base_SetConfig+0x124>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d02b      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d027      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a2c      	ldr	r2, [pc, #176]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d023      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <TIM_Base_SetConfig+0x11c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01f      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <TIM_Base_SetConfig+0x120>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01b      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <TIM_Base_SetConfig+0x124>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d017      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <TIM_Base_SetConfig+0x128>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <TIM_Base_SetConfig+0x12c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00f      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <TIM_Base_SetConfig+0x130>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <TIM_Base_SetConfig+0x134>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <TIM_Base_SetConfig+0x138>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <TIM_Base_SetConfig+0x13c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_Base_SetConfig+0xf8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <TIM_Base_SetConfig+0x124>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d103      	bne.n	8002a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	615a      	str	r2, [r3, #20]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	40010400 	.word	0x40010400
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40014400 	.word	0x40014400
 8002abc:	40014800 	.word	0x40014800
 8002ac0:	40001800 	.word	0x40001800
 8002ac4:	40001c00 	.word	0x40001c00
 8002ac8:	40002000 	.word	0x40002000

08002acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0201 	bic.w	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 030a 	bic.w	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0210 	bic.w	r2, r3, #16
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	031b      	lsls	r3, r3, #12
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f043 0307 	orr.w	r3, r3, #7
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	021a      	lsls	r2, r3, #8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	609a      	str	r2, [r3, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e05a      	b.n	8002cce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a21      	ldr	r2, [pc, #132]	; (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d01d      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10c      	bne.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000c00 	.word	0x40000c00
 8002cec:	40010400 	.word	0x40010400
 8002cf0:	40014000 	.word	0x40014000
 8002cf4:	40001800 	.word	0x40001800

08002cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e03f      	b.n	8002db2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe f8c4 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fddf 	bl	8003928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b08a      	sub	sp, #40	; 0x28
 8002dbe:	af02      	add	r7, sp, #8
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d17c      	bne.n	8002ed4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_UART_Transmit+0x2c>
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e075      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_UART_Transmit+0x3e>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e06e      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2221      	movs	r2, #33	; 0x21
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e0e:	f7fe fac1 	bl	8001394 <HAL_GetTick>
 8002e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e28:	d108      	bne.n	8002e3c <HAL_UART_Transmit+0x82>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e003      	b.n	8002e44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e4c:	e02a      	b.n	8002ea4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fb1f 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e036      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10b      	bne.n	8002e86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	3302      	adds	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e007      	b.n	8002e96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	3301      	adds	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1cf      	bne.n	8002e4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 faef 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e006      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d11d      	bne.n	8002f34 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_UART_Receive_IT+0x26>
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e016      	b.n	8002f36 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_UART_Receive_IT+0x38>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e00f      	b.n	8002f36 <HAL_UART_Receive_IT+0x58>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fb24 	bl	8003578 <UART_Start_Receive_IT>
 8002f30:	4603      	mov	r3, r0
 8002f32:	e000      	b.n	8002f36 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b0ba      	sub	sp, #232	; 0xe8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x66>
 8002f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fc07 	bl	80037b2 <UART_Receive_IT>
      return;
 8002fa4:	e256      	b.n	8003454 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80de 	beq.w	800316c <HAL_UART_IRQHandler+0x22c>
 8002fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80d1 	beq.w	800316c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_UART_IRQHandler+0xae>
 8002fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_UART_IRQHandler+0xd2>
 8002ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f043 0202 	orr.w	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_UART_IRQHandler+0xf6>
 800301e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0204 	orr.w	r2, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d011      	beq.n	8003066 <HAL_UART_IRQHandler+0x126>
 8003042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800304e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0208 	orr.w	r2, r3, #8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 81ed 	beq.w	800344a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x14e>
 800307c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fb92 	bl	80037b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d103      	bne.n	80030ba <HAL_UART_IRQHandler+0x17a>
 80030b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d04f      	beq.n	800315a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fa9a 	bl	80035f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d141      	bne.n	8003152 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3314      	adds	r3, #20
 80030d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003106:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1d9      	bne.n	80030ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	2b00      	cmp	r3, #0
 8003120:	d013      	beq.n	800314a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4a7d      	ldr	r2, [pc, #500]	; (800331c <HAL_UART_IRQHandler+0x3dc>)
 8003128:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fa8e 	bl	8001650 <HAL_DMA_Abort_IT>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003144:	4610      	mov	r0, r2
 8003146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	e00e      	b.n	8003168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f990 	bl	8003470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003150:	e00a      	b.n	8003168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f98c 	bl	8003470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003158:	e006      	b.n	8003168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f988 	bl	8003470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003166:	e170      	b.n	800344a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	bf00      	nop
    return;
 800316a:	e16e      	b.n	800344a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 814a 	bne.w	800340a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8143 	beq.w	800340a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 813c 	beq.w	800340a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	f040 80b4 	bne.w	8003320 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8140 	beq.w	800344e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031d6:	429a      	cmp	r2, r3
 80031d8:	f080 8139 	bcs.w	800344e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ee:	f000 8088 	beq.w	8003302 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003208:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800320c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800321e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800322a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1d9      	bne.n	80031f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3314      	adds	r3, #20
 8003244:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800324e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3314      	adds	r3, #20
 800325e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003262:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003266:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800326a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e1      	bne.n	800323e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3314      	adds	r3, #20
 8003280:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800328a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800329e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e3      	bne.n	800327a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d2:	f023 0310 	bic.w	r3, r3, #16
 80032d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80032e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e3      	bne.n	80032c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe f937 	bl	8001570 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800330a:	b29b      	uxth	r3, r3
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	b29b      	uxth	r3, r3
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8b6 	bl	8003484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003318:	e099      	b.n	800344e <HAL_UART_IRQHandler+0x50e>
 800331a:	bf00      	nop
 800331c:	080036bb 	.word	0x080036bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003328:	b29b      	uxth	r3, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 808b 	beq.w	8003452 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800333c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8086 	beq.w	8003452 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800335c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800336a:	647a      	str	r2, [r7, #68]	; 0x44
 800336c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e3      	bne.n	8003346 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3314      	adds	r3, #20
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	623b      	str	r3, [r7, #32]
   return(result);
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033a2:	633a      	str	r2, [r7, #48]	; 0x30
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e3      	bne.n	800337e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0310 	bic.w	r3, r3, #16
 80033da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033e8:	61fa      	str	r2, [r7, #28]
 80033ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	69b9      	ldr	r1, [r7, #24]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	617b      	str	r3, [r7, #20]
   return(result);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e3      	bne.n	80033c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f83e 	bl	8003484 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003408:	e023      	b.n	8003452 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800340a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <HAL_UART_IRQHandler+0x4ea>
 8003416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f95d 	bl	80036e2 <UART_Transmit_IT>
    return;
 8003428:	e014      	b.n	8003454 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00e      	beq.n	8003454 <HAL_UART_IRQHandler+0x514>
 8003436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f99d 	bl	8003782 <UART_EndTransmit_IT>
    return;
 8003448:	e004      	b.n	8003454 <HAL_UART_IRQHandler+0x514>
    return;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <HAL_UART_IRQHandler+0x514>
      return;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <HAL_UART_IRQHandler+0x514>
      return;
 8003452:	bf00      	nop
  }
}
 8003454:	37e8      	adds	r7, #232	; 0xe8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop

0800345c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b090      	sub	sp, #64	; 0x40
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ac:	e050      	b.n	8003550 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d04c      	beq.n	8003550 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <UART_WaitOnFlagUntilTimeout+0x30>
 80034bc:	f7fd ff6a 	bl	8001394 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d241      	bcs.n	8003550 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ec:	637a      	str	r2, [r7, #52]	; 0x34
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e5      	bne.n	80034cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3314      	adds	r3, #20
 8003506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	613b      	str	r3, [r7, #16]
   return(result);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	63bb      	str	r3, [r7, #56]	; 0x38
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3314      	adds	r3, #20
 800351e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003520:	623a      	str	r2, [r7, #32]
 8003522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	69f9      	ldr	r1, [r7, #28]
 8003526:	6a3a      	ldr	r2, [r7, #32]
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	61bb      	str	r3, [r7, #24]
   return(result);
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e00f      	b.n	8003570 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	429a      	cmp	r2, r3
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	429a      	cmp	r2, r3
 800356c:	d09f      	beq.n	80034ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3740      	adds	r7, #64	; 0x40
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2222      	movs	r2, #34	; 0x22
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0220 	orr.w	r2, r2, #32
 80035e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b095      	sub	sp, #84	; 0x54
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003606:	e853 3f00 	ldrex	r3, [r3]
 800360a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800361c:	643a      	str	r2, [r7, #64]	; 0x40
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003620:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003624:	e841 2300 	strex	r3, r2, [r1]
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e5      	bne.n	80035fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3314      	adds	r3, #20
 8003636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f023 0301 	bic.w	r3, r3, #1
 8003646:	64bb      	str	r3, [r7, #72]	; 0x48
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3314      	adds	r3, #20
 800364e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e5      	bne.n	8003630 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	2b01      	cmp	r3, #1
 800366a:	d119      	bne.n	80036a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	60bb      	str	r3, [r7, #8]
   return(result);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f023 0310 	bic.w	r3, r3, #16
 8003682:	647b      	str	r3, [r7, #68]	; 0x44
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800368c:	61ba      	str	r2, [r7, #24]
 800368e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6979      	ldr	r1, [r7, #20]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	613b      	str	r3, [r7, #16]
   return(result);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036ae:	bf00      	nop
 80036b0:	3754      	adds	r7, #84	; 0x54
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fecb 	bl	8003470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b21      	cmp	r3, #33	; 0x21
 80036f4:	d13e      	bne.n	8003774 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fe:	d114      	bne.n	800372a <UART_Transmit_IT+0x48>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d110      	bne.n	800372a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	1c9a      	adds	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	621a      	str	r2, [r3, #32]
 8003728:	e008      	b.n	800373c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6211      	str	r1, [r2, #32]
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4619      	mov	r1, r3
 800374a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10f      	bne.n	8003770 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800375e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800376e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003798:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fe5a 	bl	800345c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b08c      	sub	sp, #48	; 0x30
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b22      	cmp	r3, #34	; 0x22
 80037c4:	f040 80ab 	bne.w	800391e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d0:	d117      	bne.n	8003802 <UART_Receive_IT+0x50>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d113      	bne.n	8003802 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	1c9a      	adds	r2, r3, #2
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003800:	e026      	b.n	8003850 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003814:	d007      	beq.n	8003826 <UART_Receive_IT+0x74>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10a      	bne.n	8003834 <UART_Receive_IT+0x82>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	e008      	b.n	8003846 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003840:	b2da      	uxtb	r2, r3
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4619      	mov	r1, r3
 800385e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003860:	2b00      	cmp	r3, #0
 8003862:	d15a      	bne.n	800391a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0220 	bic.w	r2, r2, #32
 8003872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d135      	bne.n	8003910 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f023 0310 	bic.w	r3, r3, #16
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ca:	623a      	str	r2, [r7, #32]
 80038cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	69f9      	ldr	r1, [r7, #28]
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e5      	bne.n	80038aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d10a      	bne.n	8003902 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fdbb 	bl	8003484 <HAL_UARTEx_RxEventCallback>
 800390e:	e002      	b.n	8003916 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fd f9a3 	bl	8000c5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e002      	b.n	8003920 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3730      	adds	r7, #48	; 0x30
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392c:	b0c0      	sub	sp, #256	; 0x100
 800392e:	af00      	add	r7, sp, #0
 8003930:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	68d9      	ldr	r1, [r3, #12]
 8003946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	ea40 0301 	orr.w	r3, r0, r1
 8003950:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	431a      	orrs	r2, r3
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	431a      	orrs	r2, r3
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003980:	f021 010c 	bic.w	r1, r1, #12
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800398e:	430b      	orrs	r3, r1
 8003990:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a2:	6999      	ldr	r1, [r3, #24]
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	ea40 0301 	orr.w	r3, r0, r1
 80039ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b8f      	ldr	r3, [pc, #572]	; (8003bf4 <UART_SetConfig+0x2cc>)
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d005      	beq.n	80039c8 <UART_SetConfig+0xa0>
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4b8d      	ldr	r3, [pc, #564]	; (8003bf8 <UART_SetConfig+0x2d0>)
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d104      	bne.n	80039d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7fe fcae 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 80039cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039d0:	e003      	b.n	80039da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039d2:	f7fe fc95 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
 80039d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e4:	f040 810c 	bne.w	8003c00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	1891      	adds	r1, r2, r2
 8003a00:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a02:	415b      	adcs	r3, r3
 8003a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	eb12 0801 	adds.w	r8, r2, r1
 8003a10:	4629      	mov	r1, r5
 8003a12:	eb43 0901 	adc.w	r9, r3, r1
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2a:	4690      	mov	r8, r2
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	4623      	mov	r3, r4
 8003a30:	eb18 0303 	adds.w	r3, r8, r3
 8003a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a38:	462b      	mov	r3, r5
 8003a3a:	eb49 0303 	adc.w	r3, r9, r3
 8003a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a56:	460b      	mov	r3, r1
 8003a58:	18db      	adds	r3, r3, r3
 8003a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	eb42 0303 	adc.w	r3, r2, r3
 8003a62:	657b      	str	r3, [r7, #84]	; 0x54
 8003a64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a6c:	f7fc fbc0 	bl	80001f0 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <UART_SetConfig+0x2d4>)
 8003a76:	fba3 2302 	umull	r2, r3, r3, r2
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	011c      	lsls	r4, r3, #4
 8003a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	1891      	adds	r1, r2, r2
 8003a96:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a98:	415b      	adcs	r3, r3
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	eb12 0a01 	adds.w	sl, r2, r1
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	eb43 0b01 	adc.w	fp, r3, r1
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ab8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac0:	4692      	mov	sl, r2
 8003ac2:	469b      	mov	fp, r3
 8003ac4:	4643      	mov	r3, r8
 8003ac6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ae4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ae8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003aec:	460b      	mov	r3, r1
 8003aee:	18db      	adds	r3, r3, r3
 8003af0:	643b      	str	r3, [r7, #64]	; 0x40
 8003af2:	4613      	mov	r3, r2
 8003af4:	eb42 0303 	adc.w	r3, r2, r3
 8003af8:	647b      	str	r3, [r7, #68]	; 0x44
 8003afa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003afe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b02:	f7fc fb75 	bl	80001f0 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <UART_SetConfig+0x2d4>)
 8003b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2264      	movs	r2, #100	; 0x64
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	1acb      	subs	r3, r1, r3
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b22:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <UART_SetConfig+0x2d4>)
 8003b24:	fba3 2302 	umull	r2, r3, r3, r2
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b30:	441c      	add	r4, r3
 8003b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	1891      	adds	r1, r2, r2
 8003b4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b4c:	415b      	adcs	r3, r3
 8003b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b54:	4641      	mov	r1, r8
 8003b56:	1851      	adds	r1, r2, r1
 8003b58:	6339      	str	r1, [r7, #48]	; 0x30
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	414b      	adcs	r3, r1
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b6c:	4659      	mov	r1, fp
 8003b6e:	00cb      	lsls	r3, r1, #3
 8003b70:	4651      	mov	r1, sl
 8003b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b76:	4651      	mov	r1, sl
 8003b78:	00ca      	lsls	r2, r1, #3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4642      	mov	r2, r8
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b88:	464b      	mov	r3, r9
 8003b8a:	460a      	mov	r2, r1
 8003b8c:	eb42 0303 	adc.w	r3, r2, r3
 8003b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ba0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ba8:	460b      	mov	r3, r1
 8003baa:	18db      	adds	r3, r3, r3
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bae:	4613      	mov	r3, r2
 8003bb0:	eb42 0303 	adc.w	r3, r2, r3
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bbe:	f7fc fb17 	bl	80001f0 <__aeabi_uldivmod>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <UART_SetConfig+0x2d4>)
 8003bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	2164      	movs	r1, #100	; 0x64
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	3332      	adds	r3, #50	; 0x32
 8003bda:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <UART_SetConfig+0x2d4>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	f003 0207 	and.w	r2, r3, #7
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4422      	add	r2, r4
 8003bee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bf0:	e105      	b.n	8003dfe <UART_SetConfig+0x4d6>
 8003bf2:	bf00      	nop
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40011400 	.word	0x40011400
 8003bfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c12:	4642      	mov	r2, r8
 8003c14:	464b      	mov	r3, r9
 8003c16:	1891      	adds	r1, r2, r2
 8003c18:	6239      	str	r1, [r7, #32]
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c22:	4641      	mov	r1, r8
 8003c24:	1854      	adds	r4, r2, r1
 8003c26:	4649      	mov	r1, r9
 8003c28:	eb43 0501 	adc.w	r5, r3, r1
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	00eb      	lsls	r3, r5, #3
 8003c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c3a:	00e2      	lsls	r2, r4, #3
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	461d      	mov	r5, r3
 8003c40:	4643      	mov	r3, r8
 8003c42:	18e3      	adds	r3, r4, r3
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c48:	464b      	mov	r3, r9
 8003c4a:	eb45 0303 	adc.w	r3, r5, r3
 8003c4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c6e:	4629      	mov	r1, r5
 8003c70:	008b      	lsls	r3, r1, #2
 8003c72:	4621      	mov	r1, r4
 8003c74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c78:	4621      	mov	r1, r4
 8003c7a:	008a      	lsls	r2, r1, #2
 8003c7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c80:	f7fc fab6 	bl	80001f0 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4b60      	ldr	r3, [pc, #384]	; (8003e0c <UART_SetConfig+0x4e4>)
 8003c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	011c      	lsls	r4, r3, #4
 8003c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ca0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	1891      	adds	r1, r2, r2
 8003caa:	61b9      	str	r1, [r7, #24]
 8003cac:	415b      	adcs	r3, r3
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	1851      	adds	r1, r2, r1
 8003cb8:	6139      	str	r1, [r7, #16]
 8003cba:	4649      	mov	r1, r9
 8003cbc:	414b      	adcs	r3, r1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ccc:	4659      	mov	r1, fp
 8003cce:	00cb      	lsls	r3, r1, #3
 8003cd0:	4651      	mov	r1, sl
 8003cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	00ca      	lsls	r2, r1, #3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ce8:	464b      	mov	r3, r9
 8003cea:	460a      	mov	r2, r1
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	008b      	lsls	r3, r1, #2
 8003d10:	4641      	mov	r1, r8
 8003d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d16:	4641      	mov	r1, r8
 8003d18:	008a      	lsls	r2, r1, #2
 8003d1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d1e:	f7fc fa67 	bl	80001f0 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <UART_SetConfig+0x4e4>)
 8003d28:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	2164      	movs	r1, #100	; 0x64
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	3332      	adds	r3, #50	; 0x32
 8003d3a:	4a34      	ldr	r2, [pc, #208]	; (8003e0c <UART_SetConfig+0x4e4>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d46:	441c      	add	r4, r3
 8003d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d50:	677a      	str	r2, [r7, #116]	; 0x74
 8003d52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d56:	4642      	mov	r2, r8
 8003d58:	464b      	mov	r3, r9
 8003d5a:	1891      	adds	r1, r2, r2
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	415b      	adcs	r3, r3
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d66:	4641      	mov	r1, r8
 8003d68:	1851      	adds	r1, r2, r1
 8003d6a:	6039      	str	r1, [r7, #0]
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	414b      	adcs	r3, r1
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d7e:	4659      	mov	r1, fp
 8003d80:	00cb      	lsls	r3, r1, #3
 8003d82:	4651      	mov	r1, sl
 8003d84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d88:	4651      	mov	r1, sl
 8003d8a:	00ca      	lsls	r2, r1, #3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4603      	mov	r3, r0
 8003d92:	4642      	mov	r2, r8
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d98:	464b      	mov	r3, r9
 8003d9a:	460a      	mov	r2, r1
 8003d9c:	eb42 0303 	adc.w	r3, r2, r3
 8003da0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	663b      	str	r3, [r7, #96]	; 0x60
 8003dac:	667a      	str	r2, [r7, #100]	; 0x64
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dba:	4649      	mov	r1, r9
 8003dbc:	008b      	lsls	r3, r1, #2
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	008a      	lsls	r2, r1, #2
 8003dc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dcc:	f7fc fa10 	bl	80001f0 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <UART_SetConfig+0x4e4>)
 8003dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2164      	movs	r1, #100	; 0x64
 8003dde:	fb01 f303 	mul.w	r3, r1, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	3332      	adds	r3, #50	; 0x32
 8003de8:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <UART_SetConfig+0x4e4>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	f003 020f 	and.w	r2, r3, #15
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4422      	add	r2, r4
 8003dfc:	609a      	str	r2, [r3, #8]
}
 8003dfe:	bf00      	nop
 8003e00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0a:	bf00      	nop
 8003e0c:	51eb851f 	.word	0x51eb851f

08003e10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d123      	bne.n	8003e6a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	6851      	ldr	r1, [r2, #4]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	6892      	ldr	r2, [r2, #8]
 8003e36:	4311      	orrs	r1, r2
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	68d2      	ldr	r2, [r2, #12]
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	6912      	ldr	r2, [r2, #16]
 8003e42:	4311      	orrs	r1, r2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	6952      	ldr	r2, [r2, #20]
 8003e48:	4311      	orrs	r1, r2
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	6992      	ldr	r2, [r2, #24]
 8003e4e:	4311      	orrs	r1, r2
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	69d2      	ldr	r2, [r2, #28]
 8003e54:	4311      	orrs	r1, r2
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	6a12      	ldr	r2, [r2, #32]
 8003e5a:	4311      	orrs	r1, r2
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e60:	430a      	orrs	r2, r1
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e028      	b.n	8003ebc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	69d9      	ldr	r1, [r3, #28]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	4319      	orrs	r1, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	430b      	orrs	r3, r1
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	6851      	ldr	r1, [r2, #4]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	6892      	ldr	r2, [r2, #8]
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	6912      	ldr	r2, [r2, #16]
 8003ea8:	4311      	orrs	r1, r2
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	6952      	ldr	r2, [r2, #20]
 8003eae:	4311      	orrs	r1, r2
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	6992      	ldr	r2, [r2, #24]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d128      	bne.n	8003f2e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	1e59      	subs	r1, r3, #1
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	4319      	orrs	r1, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	4319      	orrs	r1, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	031b      	lsls	r3, r3, #12
 8003f06:	4319      	orrs	r1, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	4319      	orrs	r1, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	051b      	lsls	r3, r3, #20
 8003f1a:	4319      	orrs	r1, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	430b      	orrs	r3, r1
 8003f26:	431a      	orrs	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	e02f      	b.n	8003f8e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	3a01      	subs	r2, #1
 8003f40:	0311      	lsls	r1, r2, #12
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	6952      	ldr	r2, [r2, #20]
 8003f46:	3a01      	subs	r2, #1
 8003f48:	0512      	lsls	r2, r2, #20
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1e59      	subs	r1, r3, #1
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	4319      	orrs	r1, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	4319      	orrs	r1, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	4319      	orrs	r1, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	430b      	orrs	r3, r1
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fae:	2b84      	cmp	r3, #132	; 0x84
 8003fb0:	d005      	beq.n	8003fbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003fb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3303      	adds	r3, #3
 8003fbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003fd0:	f000 faf6 	bl	80045c0 <vTaskStartScheduler>
  
  return osOK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fdc:	b089      	sub	sp, #36	; 0x24
 8003fde:	af04      	add	r7, sp, #16
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <osThreadCreate+0x54>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01c      	beq.n	800402e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685c      	ldr	r4, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681d      	ldr	r5, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691e      	ldr	r6, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff ffc8 	bl	8003f9c <makeFreeRtosPriority>
 800400c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004016:	9202      	str	r2, [sp, #8]
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	9100      	str	r1, [sp, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	4632      	mov	r2, r6
 8004020:	4629      	mov	r1, r5
 8004022:	4620      	mov	r0, r4
 8004024:	f000 f8ed 	bl	8004202 <xTaskCreateStatic>
 8004028:	4603      	mov	r3, r0
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e01c      	b.n	8004068 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685c      	ldr	r4, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800403a:	b29e      	uxth	r6, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ffaa 	bl	8003f9c <makeFreeRtosPriority>
 8004048:	4602      	mov	r2, r0
 800404a:	f107 030c 	add.w	r3, r7, #12
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	9200      	str	r2, [sp, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	4632      	mov	r2, r6
 8004056:	4629      	mov	r1, r5
 8004058:	4620      	mov	r0, r4
 800405a:	f000 f92f 	bl	80042bc <xTaskCreate>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004068:	68fb      	ldr	r3, [r7, #12]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004072 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <osDelay+0x16>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	e000      	b.n	800408a <osDelay+0x18>
 8004088:	2301      	movs	r3, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fa64 	bl	8004558 <vTaskDelay>
  
  return osOK;
 8004090:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f103 0208 	add.w	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f04f 32ff 	mov.w	r2, #4294967295
 80040b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 0208 	add.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f103 0208 	add.w	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d103      	bne.n	800415c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e00c      	b.n	8004176 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3308      	adds	r3, #8
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e002      	b.n	800416a <vListInsert+0x2e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d2f6      	bcs.n	8004164 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6852      	ldr	r2, [r2, #4]
 80041ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d103      	bne.n	80041e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1e5a      	subs	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004202:	b580      	push	{r7, lr}
 8004204:	b08e      	sub	sp, #56	; 0x38
 8004206:	af04      	add	r7, sp, #16
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <xTaskCreateStatic+0x46>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	61fb      	str	r3, [r7, #28]
}
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004248:	23b4      	movs	r3, #180	; 0xb4
 800424a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	2bb4      	cmp	r3, #180	; 0xb4
 8004250:	d00a      	beq.n	8004268 <xTaskCreateStatic+0x66>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	61bb      	str	r3, [r7, #24]
}
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004268:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01e      	beq.n	80042ae <xTaskCreateStatic+0xac>
 8004270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01b      	beq.n	80042ae <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800427e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	2202      	movs	r2, #2
 8004284:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004288:	2300      	movs	r3, #0
 800428a:	9303      	str	r3, [sp, #12]
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	9302      	str	r3, [sp, #8]
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f851 	bl	8004348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042a8:	f000 f8ec 	bl	8004484 <prvAddNewTaskToReadyList>
 80042ac:	e001      	b.n	80042b2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042b2:	697b      	ldr	r3, [r7, #20]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af04      	add	r7, sp, #16
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fef1 	bl	80050b8 <pvPortMalloc>
 80042d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042de:	20b4      	movs	r0, #180	; 0xb4
 80042e0:	f000 feea 	bl	80050b8 <pvPortMalloc>
 80042e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
 80042f2:	e005      	b.n	8004300 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042f4:	6978      	ldr	r0, [r7, #20]
 80042f6:	f000 ffab 	bl	8005250 <vPortFree>
 80042fa:	e001      	b.n	8004300 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	2300      	movs	r3, #0
 8004312:	9303      	str	r3, [sp, #12]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	9302      	str	r3, [sp, #8]
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f80f 	bl	8004348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800432a:	69f8      	ldr	r0, [r7, #28]
 800432c:	f000 f8aa 	bl	8004484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004330:	2301      	movs	r3, #1
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e002      	b.n	800433c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
 800433a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800433c:	69bb      	ldr	r3, [r7, #24]
	}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004360:	3b01      	subs	r3, #1
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	f023 0307 	bic.w	r3, r3, #7
 800436e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <prvInitialiseNewTask+0x48>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	617b      	str	r3, [r7, #20]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01f      	beq.n	80043d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e012      	b.n	80043c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	7819      	ldrb	r1, [r3, #0]
 80043a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	3334      	adds	r3, #52	; 0x34
 80043ac:	460a      	mov	r2, r1
 80043ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d006      	beq.n	80043ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	3301      	adds	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d9e9      	bls.n	800439c <prvInitialiseNewTask+0x54>
 80043c8:	e000      	b.n	80043cc <prvInitialiseNewTask+0x84>
			{
				break;
 80043ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d4:	e003      	b.n	80043de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	2b06      	cmp	r3, #6
 80043e2:	d901      	bls.n	80043e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043e4:	2306      	movs	r3, #6
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	2200      	movs	r2, #0
 80043f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	3304      	adds	r3, #4
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fe6b 	bl	80040da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	3318      	adds	r3, #24
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fe66 	bl	80040da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	f1c3 0207 	rsb	r2, r3, #7
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	2200      	movs	r2, #0
 8004430:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	334c      	adds	r3, #76	; 0x4c
 8004438:	2260      	movs	r2, #96	; 0x60
 800443a:	2100      	movs	r1, #0
 800443c:	4618      	mov	r0, r3
 800443e:	f001 f84b 	bl	80054d8 <memset>
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <prvInitialiseNewTask+0x130>)
 8004446:	651a      	str	r2, [r3, #80]	; 0x50
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	4a0c      	ldr	r2, [pc, #48]	; (800447c <prvInitialiseNewTask+0x134>)
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	4a0b      	ldr	r2, [pc, #44]	; (8004480 <prvInitialiseNewTask+0x138>)
 8004452:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	69b8      	ldr	r0, [r7, #24]
 800445a:	f000 fc1f 	bl	8004c9c <pxPortInitialiseStack>
 800445e:	4602      	mov	r2, r0
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004470:	bf00      	nop
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	08005710 	.word	0x08005710
 800447c:	08005730 	.word	0x08005730
 8004480:	080056f0 	.word	0x080056f0

08004484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800448c:	f000 fd32 	bl	8004ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004490:	4b2a      	ldr	r3, [pc, #168]	; (800453c <prvAddNewTaskToReadyList+0xb8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	4a29      	ldr	r2, [pc, #164]	; (800453c <prvAddNewTaskToReadyList+0xb8>)
 8004498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800449a:	4b29      	ldr	r3, [pc, #164]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044a2:	4a27      	ldr	r2, [pc, #156]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044a8:	4b24      	ldr	r3, [pc, #144]	; (800453c <prvAddNewTaskToReadyList+0xb8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d110      	bne.n	80044d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044b0:	f000 facc 	bl	8004a4c <prvInitialiseTaskLists>
 80044b4:	e00d      	b.n	80044d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <prvAddNewTaskToReadyList+0xc0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d802      	bhi.n	80044d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044cc:	4a1c      	ldr	r2, [pc, #112]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044d2:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <prvAddNewTaskToReadyList+0xc4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3301      	adds	r3, #1
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <prvAddNewTaskToReadyList+0xc4>)
 80044da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	2201      	movs	r2, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <prvAddNewTaskToReadyList+0xc8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <prvAddNewTaskToReadyList+0xc8>)
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <prvAddNewTaskToReadyList+0xcc>)
 80044fc:	441a      	add	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f7ff fdf5 	bl	80040f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800450a:	f000 fd23 	bl	8004f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <prvAddNewTaskToReadyList+0xc0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00e      	beq.n	8004534 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	429a      	cmp	r2, r3
 8004522:	d207      	bcs.n	8004534 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <prvAddNewTaskToReadyList+0xd0>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	200005dc 	.word	0x200005dc
 8004540:	200004dc 	.word	0x200004dc
 8004544:	200005e8 	.word	0x200005e8
 8004548:	200005f8 	.word	0x200005f8
 800454c:	200005e4 	.word	0x200005e4
 8004550:	200004e0 	.word	0x200004e0
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d017      	beq.n	800459a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <vTaskDelay+0x60>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <vTaskDelay+0x30>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60bb      	str	r3, [r7, #8]
}
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004588:	f000 f884 	bl	8004694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800458c:	2100      	movs	r1, #0
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fb1e 	bl	8004bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004594:	f000 f88c 	bl	80046b0 <xTaskResumeAll>
 8004598:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <vTaskDelay+0x64>)
 80045a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000604 	.word	0x20000604
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045ce:	463a      	mov	r2, r7
 80045d0:	1d39      	adds	r1, r7, #4
 80045d2:	f107 0308 	add.w	r3, r7, #8
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb ff8c 	bl	80004f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045dc:	6839      	ldr	r1, [r7, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	9202      	str	r2, [sp, #8]
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	2300      	movs	r3, #0
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	2300      	movs	r3, #0
 80045ec:	460a      	mov	r2, r1
 80045ee:	4921      	ldr	r1, [pc, #132]	; (8004674 <vTaskStartScheduler+0xb4>)
 80045f0:	4821      	ldr	r0, [pc, #132]	; (8004678 <vTaskStartScheduler+0xb8>)
 80045f2:	f7ff fe06 	bl	8004202 <xTaskCreateStatic>
 80045f6:	4603      	mov	r3, r0
 80045f8:	4a20      	ldr	r2, [pc, #128]	; (800467c <vTaskStartScheduler+0xbc>)
 80045fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045fc:	4b1f      	ldr	r3, [pc, #124]	; (800467c <vTaskStartScheduler+0xbc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e001      	b.n	800460e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d11b      	bne.n	800464c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	613b      	str	r3, [r7, #16]
}
 8004626:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <vTaskStartScheduler+0xc0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	334c      	adds	r3, #76	; 0x4c
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <vTaskStartScheduler+0xc4>)
 8004630:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <vTaskStartScheduler+0xc8>)
 8004634:	f04f 32ff 	mov.w	r2, #4294967295
 8004638:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <vTaskStartScheduler+0xcc>)
 800463c:	2201      	movs	r2, #1
 800463e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <vTaskStartScheduler+0xd0>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004646:	f000 fbb3 	bl	8004db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800464a:	e00e      	b.n	800466a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d10a      	bne.n	800466a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	60fb      	str	r3, [r7, #12]
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <vTaskStartScheduler+0xa8>
}
 800466a:	bf00      	nop
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	080056d0 	.word	0x080056d0
 8004678:	08004a1d 	.word	0x08004a1d
 800467c:	20000600 	.word	0x20000600
 8004680:	200004dc 	.word	0x200004dc
 8004684:	20000010 	.word	0x20000010
 8004688:	200005fc 	.word	0x200005fc
 800468c:	200005e8 	.word	0x200005e8
 8004690:	200005e0 	.word	0x200005e0

08004694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <vTaskSuspendAll+0x18>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3301      	adds	r3, #1
 800469e:	4a03      	ldr	r2, [pc, #12]	; (80046ac <vTaskSuspendAll+0x18>)
 80046a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046a2:	bf00      	nop
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	20000604 	.word	0x20000604

080046b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046be:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <xTaskResumeAll+0x114>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <xTaskResumeAll+0x2c>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	603b      	str	r3, [r7, #0]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046dc:	f000 fc0a 	bl	8004ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046e0:	4b38      	ldr	r3, [pc, #224]	; (80047c4 <xTaskResumeAll+0x114>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	4a37      	ldr	r2, [pc, #220]	; (80047c4 <xTaskResumeAll+0x114>)
 80046e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ea:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <xTaskResumeAll+0x114>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d161      	bne.n	80047b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046f2:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <xTaskResumeAll+0x118>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d05d      	beq.n	80047b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046fa:	e02e      	b.n	800475a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fc:	4b33      	ldr	r3, [pc, #204]	; (80047cc <xTaskResumeAll+0x11c>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3318      	adds	r3, #24
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fd50 	bl	80041ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3304      	adds	r3, #4
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fd4b 	bl	80041ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	2201      	movs	r2, #1
 800471e:	409a      	lsls	r2, r3
 8004720:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <xTaskResumeAll+0x120>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4313      	orrs	r3, r2
 8004726:	4a2a      	ldr	r2, [pc, #168]	; (80047d0 <xTaskResumeAll+0x120>)
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <xTaskResumeAll+0x124>)
 8004738:	441a      	add	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3304      	adds	r3, #4
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f7ff fcd7 	bl	80040f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <xTaskResumeAll+0x128>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004754:	4b21      	ldr	r3, [pc, #132]	; (80047dc <xTaskResumeAll+0x12c>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800475a:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <xTaskResumeAll+0x11c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1cc      	bne.n	80046fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004768:	f000 fa12 	bl	8004b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800476c:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <xTaskResumeAll+0x130>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004778:	f000 f836 	bl	80047e8 <xTaskIncrementTick>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <xTaskResumeAll+0x12c>)
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f1      	bne.n	8004778 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <xTaskResumeAll+0x130>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <xTaskResumeAll+0x12c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047a2:	2301      	movs	r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <xTaskResumeAll+0x134>)
 80047a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047b6:	f000 fbcd 	bl	8004f54 <vPortExitCritical>

	return xAlreadyYielded;
 80047ba:	68bb      	ldr	r3, [r7, #8]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000604 	.word	0x20000604
 80047c8:	200005dc 	.word	0x200005dc
 80047cc:	2000059c 	.word	0x2000059c
 80047d0:	200005e4 	.word	0x200005e4
 80047d4:	200004e0 	.word	0x200004e0
 80047d8:	200004dc 	.word	0x200004dc
 80047dc:	200005f0 	.word	0x200005f0
 80047e0:	200005ec 	.word	0x200005ec
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f2:	4b4e      	ldr	r3, [pc, #312]	; (800492c <xTaskIncrementTick+0x144>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f040 808e 	bne.w	8004918 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047fc:	4b4c      	ldr	r3, [pc, #304]	; (8004930 <xTaskIncrementTick+0x148>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3301      	adds	r3, #1
 8004802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004804:	4a4a      	ldr	r2, [pc, #296]	; (8004930 <xTaskIncrementTick+0x148>)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d120      	bne.n	8004852 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004810:	4b48      	ldr	r3, [pc, #288]	; (8004934 <xTaskIncrementTick+0x14c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <xTaskIncrementTick+0x48>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	603b      	str	r3, [r7, #0]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <xTaskIncrementTick+0x46>
 8004830:	4b40      	ldr	r3, [pc, #256]	; (8004934 <xTaskIncrementTick+0x14c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4b40      	ldr	r3, [pc, #256]	; (8004938 <xTaskIncrementTick+0x150>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a3e      	ldr	r2, [pc, #248]	; (8004934 <xTaskIncrementTick+0x14c>)
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4a3e      	ldr	r2, [pc, #248]	; (8004938 <xTaskIncrementTick+0x150>)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b3d      	ldr	r3, [pc, #244]	; (800493c <xTaskIncrementTick+0x154>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3301      	adds	r3, #1
 800484a:	4a3c      	ldr	r2, [pc, #240]	; (800493c <xTaskIncrementTick+0x154>)
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	f000 f99f 	bl	8004b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004852:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <xTaskIncrementTick+0x158>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	429a      	cmp	r2, r3
 800485a:	d348      	bcc.n	80048ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <xTaskIncrementTick+0x14c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004866:	4b36      	ldr	r3, [pc, #216]	; (8004940 <xTaskIncrementTick+0x158>)
 8004868:	f04f 32ff 	mov.w	r2, #4294967295
 800486c:	601a      	str	r2, [r3, #0]
					break;
 800486e:	e03e      	b.n	80048ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004870:	4b30      	ldr	r3, [pc, #192]	; (8004934 <xTaskIncrementTick+0x14c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	429a      	cmp	r2, r3
 8004886:	d203      	bcs.n	8004890 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004888:	4a2d      	ldr	r2, [pc, #180]	; (8004940 <xTaskIncrementTick+0x158>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800488e:	e02e      	b.n	80048ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3304      	adds	r3, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fc8a 	bl	80041ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d004      	beq.n	80048ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	3318      	adds	r3, #24
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fc81 	bl	80041ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2201      	movs	r2, #1
 80048b2:	409a      	lsls	r2, r3
 80048b4:	4b23      	ldr	r3, [pc, #140]	; (8004944 <xTaskIncrementTick+0x15c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	4a22      	ldr	r2, [pc, #136]	; (8004944 <xTaskIncrementTick+0x15c>)
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <xTaskIncrementTick+0x160>)
 80048cc:	441a      	add	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7ff fc0d 	bl	80040f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <xTaskIncrementTick+0x164>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d3b9      	bcc.n	800485c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ec:	e7b6      	b.n	800485c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <xTaskIncrementTick+0x164>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4914      	ldr	r1, [pc, #80]	; (8004948 <xTaskIncrementTick+0x160>)
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d901      	bls.n	800490a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800490a:	4b11      	ldr	r3, [pc, #68]	; (8004950 <xTaskIncrementTick+0x168>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e004      	b.n	8004922 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <xTaskIncrementTick+0x16c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3301      	adds	r3, #1
 800491e:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <xTaskIncrementTick+0x16c>)
 8004920:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004922:	697b      	ldr	r3, [r7, #20]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000604 	.word	0x20000604
 8004930:	200005e0 	.word	0x200005e0
 8004934:	20000594 	.word	0x20000594
 8004938:	20000598 	.word	0x20000598
 800493c:	200005f4 	.word	0x200005f4
 8004940:	200005fc 	.word	0x200005fc
 8004944:	200005e4 	.word	0x200005e4
 8004948:	200004e0 	.word	0x200004e0
 800494c:	200004dc 	.word	0x200004dc
 8004950:	200005f0 	.word	0x200005f0
 8004954:	200005ec 	.word	0x200005ec

08004958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800495e:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <vTaskSwitchContext+0xac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004966:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <vTaskSwitchContext+0xb0>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800496c:	e044      	b.n	80049f8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800496e:	4b26      	ldr	r3, [pc, #152]	; (8004a08 <vTaskSwitchContext+0xb0>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <vTaskSwitchContext+0xb4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004982:	7afb      	ldrb	r3, [r7, #11]
 8004984:	f1c3 031f 	rsb	r3, r3, #31
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	4921      	ldr	r1, [pc, #132]	; (8004a10 <vTaskSwitchContext+0xb8>)
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	607b      	str	r3, [r7, #4]
}
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <vTaskSwitchContext+0x5a>
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <vTaskSwitchContext+0xb8>)
 80049c0:	4413      	add	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	3308      	adds	r3, #8
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d104      	bne.n	80049e4 <vTaskSwitchContext+0x8c>
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	605a      	str	r2, [r3, #4]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <vTaskSwitchContext+0xbc>)
 80049ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <vTaskSwitchContext+0xbc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	334c      	adds	r3, #76	; 0x4c
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <vTaskSwitchContext+0xc0>)
 80049f6:	6013      	str	r3, [r2, #0]
}
 80049f8:	bf00      	nop
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	20000604 	.word	0x20000604
 8004a08:	200005f0 	.word	0x200005f0
 8004a0c:	200005e4 	.word	0x200005e4
 8004a10:	200004e0 	.word	0x200004e0
 8004a14:	200004dc 	.word	0x200004dc
 8004a18:	20000010 	.word	0x20000010

08004a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a24:	f000 f852 	bl	8004acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <prvIdleTask+0x28>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d9f9      	bls.n	8004a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <prvIdleTask+0x2c>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a40:	e7f0      	b.n	8004a24 <prvIdleTask+0x8>
 8004a42:	bf00      	nop
 8004a44:	200004e0 	.word	0x200004e0
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	e00c      	b.n	8004a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4a12      	ldr	r2, [pc, #72]	; (8004aac <prvInitialiseTaskLists+0x60>)
 8004a64:	4413      	add	r3, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fb17 	bl	800409a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b06      	cmp	r3, #6
 8004a76:	d9ef      	bls.n	8004a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a78:	480d      	ldr	r0, [pc, #52]	; (8004ab0 <prvInitialiseTaskLists+0x64>)
 8004a7a:	f7ff fb0e 	bl	800409a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a7e:	480d      	ldr	r0, [pc, #52]	; (8004ab4 <prvInitialiseTaskLists+0x68>)
 8004a80:	f7ff fb0b 	bl	800409a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a84:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <prvInitialiseTaskLists+0x6c>)
 8004a86:	f7ff fb08 	bl	800409a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a8a:	480c      	ldr	r0, [pc, #48]	; (8004abc <prvInitialiseTaskLists+0x70>)
 8004a8c:	f7ff fb05 	bl	800409a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a90:	480b      	ldr	r0, [pc, #44]	; (8004ac0 <prvInitialiseTaskLists+0x74>)
 8004a92:	f7ff fb02 	bl	800409a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <prvInitialiseTaskLists+0x78>)
 8004a98:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <prvInitialiseTaskLists+0x64>)
 8004a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <prvInitialiseTaskLists+0x7c>)
 8004a9e:	4a05      	ldr	r2, [pc, #20]	; (8004ab4 <prvInitialiseTaskLists+0x68>)
 8004aa0:	601a      	str	r2, [r3, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200004e0 	.word	0x200004e0
 8004ab0:	2000056c 	.word	0x2000056c
 8004ab4:	20000580 	.word	0x20000580
 8004ab8:	2000059c 	.word	0x2000059c
 8004abc:	200005b0 	.word	0x200005b0
 8004ac0:	200005c8 	.word	0x200005c8
 8004ac4:	20000594 	.word	0x20000594
 8004ac8:	20000598 	.word	0x20000598

08004acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ad2:	e019      	b.n	8004b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ad4:	f000 fa0e 	bl	8004ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad8:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <prvCheckTasksWaitingTermination+0x50>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fb62 	bl	80041ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004aea:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <prvCheckTasksWaitingTermination+0x54>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <prvCheckTasksWaitingTermination+0x54>)
 8004af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <prvCheckTasksWaitingTermination+0x58>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	4a0a      	ldr	r2, [pc, #40]	; (8004b24 <prvCheckTasksWaitingTermination+0x58>)
 8004afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004afe:	f000 fa29 	bl	8004f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f810 	bl	8004b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <prvCheckTasksWaitingTermination+0x58>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e1      	bne.n	8004ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	200005b0 	.word	0x200005b0
 8004b20:	200005dc 	.word	0x200005dc
 8004b24:	200005c4 	.word	0x200005c4

08004b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	334c      	adds	r3, #76	; 0x4c
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fce5 	bl	8005504 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d108      	bne.n	8004b56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fb81 	bl	8005250 <vPortFree>
				vPortFree( pxTCB );
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fb7e 	bl	8005250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b54:	e018      	b.n	8004b88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d103      	bne.n	8004b68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fb75 	bl	8005250 <vPortFree>
	}
 8004b66:	e00f      	b.n	8004b88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d00a      	beq.n	8004b88 <prvDeleteTCB+0x60>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	60fb      	str	r3, [r7, #12]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <prvDeleteTCB+0x5e>
	}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <prvResetNextTaskUnblockTime+0x38>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <prvResetNextTaskUnblockTime+0x3c>)
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ba8:	e008      	b.n	8004bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <prvResetNextTaskUnblockTime+0x38>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <prvResetNextTaskUnblockTime+0x3c>)
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20000594 	.word	0x20000594
 8004bcc:	200005fc 	.word	0x200005fc

08004bd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bda:	4b29      	ldr	r3, [pc, #164]	; (8004c80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be0:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fae1 	bl	80041ae <uxListRemove>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4013      	ands	r3, r2
 8004c06:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d10a      	bne.n	8004c28 <prvAddCurrentTaskToDelayedList+0x58>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c18:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	481a      	ldr	r0, [pc, #104]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c22:	f7ff fa67 	bl	80040f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c26:	e026      	b.n	8004c76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c30:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d209      	bcs.n	8004c54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7ff fa75 	bl	800413c <vListInsert>
}
 8004c52:	e010      	b.n	8004c76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7ff fa6b 	bl	800413c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c66:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d202      	bcs.n	8004c76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6013      	str	r3, [r2, #0]
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	200005e0 	.word	0x200005e0
 8004c84:	200004dc 	.word	0x200004dc
 8004c88:	200005e4 	.word	0x200005e4
 8004c8c:	200005c8 	.word	0x200005c8
 8004c90:	20000598 	.word	0x20000598
 8004c94:	20000594 	.word	0x20000594
 8004c98:	200005fc 	.word	0x200005fc

08004c9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3b04      	subs	r3, #4
 8004cac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b04      	subs	r3, #4
 8004cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 0201 	bic.w	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3b04      	subs	r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ccc:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <pxPortInitialiseStack+0x64>)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b14      	subs	r3, #20
 8004cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b04      	subs	r3, #4
 8004ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f06f 0202 	mvn.w	r2, #2
 8004cea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3b20      	subs	r3, #32
 8004cf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	08004d05 	.word	0x08004d05

08004d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <prvTaskExitError+0x54>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d00a      	beq.n	8004d2e <prvTaskExitError+0x2a>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	60fb      	str	r3, [r7, #12]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <prvTaskExitError+0x28>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60bb      	str	r3, [r7, #8]
}
 8004d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d42:	bf00      	nop
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0fc      	beq.n	8004d44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	2000000c 	.word	0x2000000c
 8004d5c:	00000000 	.word	0x00000000

08004d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <pxCurrentTCBConst2>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6808      	ldr	r0, [r1, #0]
 8004d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	f380 8809 	msr	PSP, r0
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	4770      	bx	lr
 8004d7c:	f3af 8000 	nop.w

08004d80 <pxCurrentTCBConst2>:
 8004d80:	200004dc 	.word	0x200004dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d88:	4808      	ldr	r0, [pc, #32]	; (8004dac <prvPortStartFirstTask+0x24>)
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f380 8808 	msr	MSP, r0
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8814 	msr	CONTROL, r0
 8004d9a:	b662      	cpsie	i
 8004d9c:	b661      	cpsie	f
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	df00      	svc	0
 8004da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004daa:	bf00      	nop
 8004dac:	e000ed08 	.word	0xe000ed08

08004db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004db6:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <xPortStartScheduler+0x120>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a46      	ldr	r2, [pc, #280]	; (8004ed4 <xPortStartScheduler+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10a      	bne.n	8004dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	613b      	str	r3, [r7, #16]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dd6:	4b3e      	ldr	r3, [pc, #248]	; (8004ed0 <xPortStartScheduler+0x120>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3f      	ldr	r2, [pc, #252]	; (8004ed8 <xPortStartScheduler+0x128>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10a      	bne.n	8004df6 <xPortStartScheduler+0x46>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60fb      	str	r3, [r7, #12]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004df6:	4b39      	ldr	r3, [pc, #228]	; (8004edc <xPortStartScheduler+0x12c>)
 8004df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	22ff      	movs	r2, #255	; 0xff
 8004e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <xPortStartScheduler+0x130>)
 8004e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e20:	2207      	movs	r2, #7
 8004e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e24:	e009      	b.n	8004e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d0ef      	beq.n	8004e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e46:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1c3 0307 	rsb	r3, r3, #7
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d00a      	beq.n	8004e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60bb      	str	r3, [r7, #8]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e68:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e72:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e86:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e9e:	f000 f8dd 	bl	800505c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <xPortStartScheduler+0x13c>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ea8:	f000 f8fc 	bl	80050a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004eac:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <xPortStartScheduler+0x140>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0f      	ldr	r2, [pc, #60]	; (8004ef0 <xPortStartScheduler+0x140>)
 8004eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004eb8:	f7ff ff66 	bl	8004d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ebc:	f7ff fd4c 	bl	8004958 <vTaskSwitchContext>
	prvTaskExitError();
 8004ec0:	f7ff ff20 	bl	8004d04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	e000ed00 	.word	0xe000ed00
 8004ed4:	410fc271 	.word	0x410fc271
 8004ed8:	410fc270 	.word	0x410fc270
 8004edc:	e000e400 	.word	0xe000e400
 8004ee0:	20000608 	.word	0x20000608
 8004ee4:	2000060c 	.word	0x2000060c
 8004ee8:	e000ed20 	.word	0xe000ed20
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	e000ef34 	.word	0xe000ef34

08004ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	607b      	str	r3, [r7, #4]
}
 8004f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <vPortEnterCritical+0x58>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <vPortEnterCritical+0x58>)
 8004f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <vPortEnterCritical+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d10f      	bne.n	8004f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <vPortEnterCritical+0x5c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	603b      	str	r3, [r7, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <vPortEnterCritical+0x4a>
	}
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	2000000c 	.word	0x2000000c
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <vPortExitCritical+0x24>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	607b      	str	r3, [r7, #4]
}
 8004f74:	bf00      	nop
 8004f76:	e7fe      	b.n	8004f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f82:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <vPortExitCritical+0x42>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	2000000c 	.word	0x2000000c
	...

08004fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fb0:	f3ef 8009 	mrs	r0, PSP
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4b15      	ldr	r3, [pc, #84]	; (8005010 <pxCurrentTCBConst>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	f01e 0f10 	tst.w	lr, #16
 8004fc0:	bf08      	it	eq
 8004fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	6010      	str	r0, [r2, #0]
 8004fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fd4:	f380 8811 	msr	BASEPRI, r0
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f7ff fcba 	bl	8004958 <vTaskSwitchContext>
 8004fe4:	f04f 0000 	mov.w	r0, #0
 8004fe8:	f380 8811 	msr	BASEPRI, r0
 8004fec:	bc09      	pop	{r0, r3}
 8004fee:	6819      	ldr	r1, [r3, #0]
 8004ff0:	6808      	ldr	r0, [r1, #0]
 8004ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff6:	f01e 0f10 	tst.w	lr, #16
 8004ffa:	bf08      	it	eq
 8004ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005000:	f380 8809 	msr	PSP, r0
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst>:
 8005010:	200004dc 	.word	0x200004dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	607b      	str	r3, [r7, #4]
}
 8005030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005032:	f7ff fbd9 	bl	80047e8 <xTaskIncrementTick>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <SysTick_Handler+0x40>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f383 8811 	msr	BASEPRI, r3
}
 800504e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <vPortSetupTimerInterrupt+0x38>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <vPortSetupTimerInterrupt+0x3c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <vPortSetupTimerInterrupt+0x40>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <vPortSetupTimerInterrupt+0x44>)
 800507a:	3b01      	subs	r3, #1
 800507c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010
 8005094:	e000e018 	.word	0xe000e018
 8005098:	20000000 	.word	0x20000000
 800509c:	10624dd3 	.word	0x10624dd3
 80050a0:	e000e014 	.word	0xe000e014

080050a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050b4 <vPortEnableVFP+0x10>
 80050a8:	6801      	ldr	r1, [r0, #0]
 80050aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050ae:	6001      	str	r1, [r0, #0]
 80050b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050b2:	bf00      	nop
 80050b4:	e000ed88 	.word	0xe000ed88

080050b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050c4:	f7ff fae6 	bl	8004694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050c8:	4b5b      	ldr	r3, [pc, #364]	; (8005238 <pvPortMalloc+0x180>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050d0:	f000 f920 	bl	8005314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050d4:	4b59      	ldr	r3, [pc, #356]	; (800523c <pvPortMalloc+0x184>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f040 8093 	bne.w	8005208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01d      	beq.n	8005124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050e8:	2208      	movs	r2, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d014      	beq.n	8005124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f023 0307 	bic.w	r3, r3, #7
 8005100:	3308      	adds	r3, #8
 8005102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <pvPortMalloc+0x6c>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	617b      	str	r3, [r7, #20]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d06e      	beq.n	8005208 <pvPortMalloc+0x150>
 800512a:	4b45      	ldr	r3, [pc, #276]	; (8005240 <pvPortMalloc+0x188>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d869      	bhi.n	8005208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005134:	4b43      	ldr	r3, [pc, #268]	; (8005244 <pvPortMalloc+0x18c>)
 8005136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005138:	4b42      	ldr	r3, [pc, #264]	; (8005244 <pvPortMalloc+0x18c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800513e:	e004      	b.n	800514a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d903      	bls.n	800515c <pvPortMalloc+0xa4>
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f1      	bne.n	8005140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800515c:	4b36      	ldr	r3, [pc, #216]	; (8005238 <pvPortMalloc+0x180>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005162:	429a      	cmp	r2, r3
 8005164:	d050      	beq.n	8005208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2208      	movs	r2, #8
 800516c:	4413      	add	r3, r2
 800516e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	2308      	movs	r3, #8
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	429a      	cmp	r2, r3
 8005186:	d91f      	bls.n	80051c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <pvPortMalloc+0xf8>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	613b      	str	r3, [r7, #16]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	1ad2      	subs	r2, r2, r3
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051c2:	69b8      	ldr	r0, [r7, #24]
 80051c4:	f000 f908 	bl	80053d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <pvPortMalloc+0x188>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <pvPortMalloc+0x188>)
 80051d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051d6:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <pvPortMalloc+0x188>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <pvPortMalloc+0x190>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d203      	bcs.n	80051ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <pvPortMalloc+0x188>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a18      	ldr	r2, [pc, #96]	; (8005248 <pvPortMalloc+0x190>)
 80051e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <pvPortMalloc+0x184>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <pvPortMalloc+0x194>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	4a11      	ldr	r2, [pc, #68]	; (800524c <pvPortMalloc+0x194>)
 8005206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005208:	f7ff fa52 	bl	80046b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <pvPortMalloc+0x174>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <pvPortMalloc+0x172>
	return pvReturn;
 800522c:	69fb      	ldr	r3, [r7, #28]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3728      	adds	r7, #40	; 0x28
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20004218 	.word	0x20004218
 800523c:	2000422c 	.word	0x2000422c
 8005240:	2000421c 	.word	0x2000421c
 8005244:	20004210 	.word	0x20004210
 8005248:	20004220 	.word	0x20004220
 800524c:	20004224 	.word	0x20004224

08005250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d04d      	beq.n	80052fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005262:	2308      	movs	r3, #8
 8005264:	425b      	negs	r3, r3
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	4b24      	ldr	r3, [pc, #144]	; (8005308 <vPortFree+0xb8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <vPortFree+0x44>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <vPortFree+0x62>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	60bb      	str	r3, [r7, #8]
}
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <vPortFree+0xb8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01e      	beq.n	80052fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d11a      	bne.n	80052fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <vPortFree+0xb8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052d8:	f7ff f9dc 	bl	8004694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	4b0a      	ldr	r3, [pc, #40]	; (800530c <vPortFree+0xbc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <vPortFree+0xbc>)
 80052e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ea:	6938      	ldr	r0, [r7, #16]
 80052ec:	f000 f874 	bl	80053d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <vPortFree+0xc0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3301      	adds	r3, #1
 80052f6:	4a06      	ldr	r2, [pc, #24]	; (8005310 <vPortFree+0xc0>)
 80052f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052fa:	f7ff f9d9 	bl	80046b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	2000422c 	.word	0x2000422c
 800530c:	2000421c 	.word	0x2000421c
 8005310:	20004228 	.word	0x20004228

08005314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800531a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800531e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005320:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <prvHeapInit+0xac>)
 8005322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3307      	adds	r3, #7
 8005332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0307 	bic.w	r3, r3, #7
 800533a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <prvHeapInit+0xac>)
 8005344:	4413      	add	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800534c:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <prvHeapInit+0xb0>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005352:	4b1c      	ldr	r3, [pc, #112]	; (80053c4 <prvHeapInit+0xb0>)
 8005354:	2200      	movs	r2, #0
 8005356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4413      	add	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005360:	2208      	movs	r2, #8
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0307 	bic.w	r3, r3, #7
 800536e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <prvHeapInit+0xb4>)
 8005374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <prvHeapInit+0xb4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800537e:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <prvHeapInit+0xb4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <prvHeapInit+0xb4>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <prvHeapInit+0xb8>)
 80053a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <prvHeapInit+0xbc>)
 80053aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053ac:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <prvHeapInit+0xc0>)
 80053ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	20000610 	.word	0x20000610
 80053c4:	20004210 	.word	0x20004210
 80053c8:	20004218 	.word	0x20004218
 80053cc:	20004220 	.word	0x20004220
 80053d0:	2000421c 	.word	0x2000421c
 80053d4:	2000422c 	.word	0x2000422c

080053d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <prvInsertBlockIntoFreeList+0xac>)
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e002      	b.n	80053ec <prvInsertBlockIntoFreeList+0x14>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d8f7      	bhi.n	80053e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	4413      	add	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d108      	bne.n	800541a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	441a      	add	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	441a      	add	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d118      	bne.n	8005460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <prvInsertBlockIntoFreeList+0xb0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d00d      	beq.n	8005456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	441a      	add	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e008      	b.n	8005468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <prvInsertBlockIntoFreeList+0xb0>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e003      	b.n	8005468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d002      	beq.n	8005476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20004210 	.word	0x20004210
 8005488:	20004218 	.word	0x20004218

0800548c <__libc_init_array>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	4d0d      	ldr	r5, [pc, #52]	; (80054c4 <__libc_init_array+0x38>)
 8005490:	4c0d      	ldr	r4, [pc, #52]	; (80054c8 <__libc_init_array+0x3c>)
 8005492:	1b64      	subs	r4, r4, r5
 8005494:	10a4      	asrs	r4, r4, #2
 8005496:	2600      	movs	r6, #0
 8005498:	42a6      	cmp	r6, r4
 800549a:	d109      	bne.n	80054b0 <__libc_init_array+0x24>
 800549c:	4d0b      	ldr	r5, [pc, #44]	; (80054cc <__libc_init_array+0x40>)
 800549e:	4c0c      	ldr	r4, [pc, #48]	; (80054d0 <__libc_init_array+0x44>)
 80054a0:	f000 f8e4 	bl	800566c <_init>
 80054a4:	1b64      	subs	r4, r4, r5
 80054a6:	10a4      	asrs	r4, r4, #2
 80054a8:	2600      	movs	r6, #0
 80054aa:	42a6      	cmp	r6, r4
 80054ac:	d105      	bne.n	80054ba <__libc_init_array+0x2e>
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b4:	4798      	blx	r3
 80054b6:	3601      	adds	r6, #1
 80054b8:	e7ee      	b.n	8005498 <__libc_init_array+0xc>
 80054ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80054be:	4798      	blx	r3
 80054c0:	3601      	adds	r6, #1
 80054c2:	e7f2      	b.n	80054aa <__libc_init_array+0x1e>
 80054c4:	08005758 	.word	0x08005758
 80054c8:	08005758 	.word	0x08005758
 80054cc:	08005758 	.word	0x08005758
 80054d0:	0800575c 	.word	0x0800575c

080054d4 <__retarget_lock_acquire_recursive>:
 80054d4:	4770      	bx	lr

080054d6 <__retarget_lock_release_recursive>:
 80054d6:	4770      	bx	lr

080054d8 <memset>:
 80054d8:	4402      	add	r2, r0
 80054da:	4603      	mov	r3, r0
 80054dc:	4293      	cmp	r3, r2
 80054de:	d100      	bne.n	80054e2 <memset+0xa>
 80054e0:	4770      	bx	lr
 80054e2:	f803 1b01 	strb.w	r1, [r3], #1
 80054e6:	e7f9      	b.n	80054dc <memset+0x4>

080054e8 <cleanup_glue>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	460c      	mov	r4, r1
 80054ec:	6809      	ldr	r1, [r1, #0]
 80054ee:	4605      	mov	r5, r0
 80054f0:	b109      	cbz	r1, 80054f6 <cleanup_glue+0xe>
 80054f2:	f7ff fff9 	bl	80054e8 <cleanup_glue>
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054fe:	f000 b869 	b.w	80055d4 <_free_r>
	...

08005504 <_reclaim_reent>:
 8005504:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <_reclaim_reent+0xb4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4283      	cmp	r3, r0
 800550a:	b570      	push	{r4, r5, r6, lr}
 800550c:	4604      	mov	r4, r0
 800550e:	d051      	beq.n	80055b4 <_reclaim_reent+0xb0>
 8005510:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005512:	b143      	cbz	r3, 8005526 <_reclaim_reent+0x22>
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d14a      	bne.n	80055b0 <_reclaim_reent+0xac>
 800551a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	b111      	cbz	r1, 8005526 <_reclaim_reent+0x22>
 8005520:	4620      	mov	r0, r4
 8005522:	f000 f857 	bl	80055d4 <_free_r>
 8005526:	6961      	ldr	r1, [r4, #20]
 8005528:	b111      	cbz	r1, 8005530 <_reclaim_reent+0x2c>
 800552a:	4620      	mov	r0, r4
 800552c:	f000 f852 	bl	80055d4 <_free_r>
 8005530:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005532:	b111      	cbz	r1, 800553a <_reclaim_reent+0x36>
 8005534:	4620      	mov	r0, r4
 8005536:	f000 f84d 	bl	80055d4 <_free_r>
 800553a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800553c:	b111      	cbz	r1, 8005544 <_reclaim_reent+0x40>
 800553e:	4620      	mov	r0, r4
 8005540:	f000 f848 	bl	80055d4 <_free_r>
 8005544:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005546:	b111      	cbz	r1, 800554e <_reclaim_reent+0x4a>
 8005548:	4620      	mov	r0, r4
 800554a:	f000 f843 	bl	80055d4 <_free_r>
 800554e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005550:	b111      	cbz	r1, 8005558 <_reclaim_reent+0x54>
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f83e 	bl	80055d4 <_free_r>
 8005558:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800555a:	b111      	cbz	r1, 8005562 <_reclaim_reent+0x5e>
 800555c:	4620      	mov	r0, r4
 800555e:	f000 f839 	bl	80055d4 <_free_r>
 8005562:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005564:	b111      	cbz	r1, 800556c <_reclaim_reent+0x68>
 8005566:	4620      	mov	r0, r4
 8005568:	f000 f834 	bl	80055d4 <_free_r>
 800556c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800556e:	b111      	cbz	r1, 8005576 <_reclaim_reent+0x72>
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f82f 	bl	80055d4 <_free_r>
 8005576:	69a3      	ldr	r3, [r4, #24]
 8005578:	b1e3      	cbz	r3, 80055b4 <_reclaim_reent+0xb0>
 800557a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800557c:	4620      	mov	r0, r4
 800557e:	4798      	blx	r3
 8005580:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005582:	b1b9      	cbz	r1, 80055b4 <_reclaim_reent+0xb0>
 8005584:	4620      	mov	r0, r4
 8005586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800558a:	f7ff bfad 	b.w	80054e8 <cleanup_glue>
 800558e:	5949      	ldr	r1, [r1, r5]
 8005590:	b941      	cbnz	r1, 80055a4 <_reclaim_reent+0xa0>
 8005592:	3504      	adds	r5, #4
 8005594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005596:	2d80      	cmp	r5, #128	; 0x80
 8005598:	68d9      	ldr	r1, [r3, #12]
 800559a:	d1f8      	bne.n	800558e <_reclaim_reent+0x8a>
 800559c:	4620      	mov	r0, r4
 800559e:	f000 f819 	bl	80055d4 <_free_r>
 80055a2:	e7ba      	b.n	800551a <_reclaim_reent+0x16>
 80055a4:	680e      	ldr	r6, [r1, #0]
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f814 	bl	80055d4 <_free_r>
 80055ac:	4631      	mov	r1, r6
 80055ae:	e7ef      	b.n	8005590 <_reclaim_reent+0x8c>
 80055b0:	2500      	movs	r5, #0
 80055b2:	e7ef      	b.n	8005594 <_reclaim_reent+0x90>
 80055b4:	bd70      	pop	{r4, r5, r6, pc}
 80055b6:	bf00      	nop
 80055b8:	20000010 	.word	0x20000010

080055bc <__malloc_lock>:
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <__malloc_lock+0x8>)
 80055be:	f7ff bf89 	b.w	80054d4 <__retarget_lock_acquire_recursive>
 80055c2:	bf00      	nop
 80055c4:	20004230 	.word	0x20004230

080055c8 <__malloc_unlock>:
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <__malloc_unlock+0x8>)
 80055ca:	f7ff bf84 	b.w	80054d6 <__retarget_lock_release_recursive>
 80055ce:	bf00      	nop
 80055d0:	20004230 	.word	0x20004230

080055d4 <_free_r>:
 80055d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d044      	beq.n	8005664 <_free_r+0x90>
 80055da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055de:	9001      	str	r0, [sp, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f1a1 0404 	sub.w	r4, r1, #4
 80055e6:	bfb8      	it	lt
 80055e8:	18e4      	addlt	r4, r4, r3
 80055ea:	f7ff ffe7 	bl	80055bc <__malloc_lock>
 80055ee:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <_free_r+0x94>)
 80055f0:	9801      	ldr	r0, [sp, #4]
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	b933      	cbnz	r3, 8005604 <_free_r+0x30>
 80055f6:	6063      	str	r3, [r4, #4]
 80055f8:	6014      	str	r4, [r2, #0]
 80055fa:	b003      	add	sp, #12
 80055fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005600:	f7ff bfe2 	b.w	80055c8 <__malloc_unlock>
 8005604:	42a3      	cmp	r3, r4
 8005606:	d908      	bls.n	800561a <_free_r+0x46>
 8005608:	6825      	ldr	r5, [r4, #0]
 800560a:	1961      	adds	r1, r4, r5
 800560c:	428b      	cmp	r3, r1
 800560e:	bf01      	itttt	eq
 8005610:	6819      	ldreq	r1, [r3, #0]
 8005612:	685b      	ldreq	r3, [r3, #4]
 8005614:	1949      	addeq	r1, r1, r5
 8005616:	6021      	streq	r1, [r4, #0]
 8005618:	e7ed      	b.n	80055f6 <_free_r+0x22>
 800561a:	461a      	mov	r2, r3
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	b10b      	cbz	r3, 8005624 <_free_r+0x50>
 8005620:	42a3      	cmp	r3, r4
 8005622:	d9fa      	bls.n	800561a <_free_r+0x46>
 8005624:	6811      	ldr	r1, [r2, #0]
 8005626:	1855      	adds	r5, r2, r1
 8005628:	42a5      	cmp	r5, r4
 800562a:	d10b      	bne.n	8005644 <_free_r+0x70>
 800562c:	6824      	ldr	r4, [r4, #0]
 800562e:	4421      	add	r1, r4
 8005630:	1854      	adds	r4, r2, r1
 8005632:	42a3      	cmp	r3, r4
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	d1e0      	bne.n	80055fa <_free_r+0x26>
 8005638:	681c      	ldr	r4, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	6053      	str	r3, [r2, #4]
 800563e:	4421      	add	r1, r4
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	e7da      	b.n	80055fa <_free_r+0x26>
 8005644:	d902      	bls.n	800564c <_free_r+0x78>
 8005646:	230c      	movs	r3, #12
 8005648:	6003      	str	r3, [r0, #0]
 800564a:	e7d6      	b.n	80055fa <_free_r+0x26>
 800564c:	6825      	ldr	r5, [r4, #0]
 800564e:	1961      	adds	r1, r4, r5
 8005650:	428b      	cmp	r3, r1
 8005652:	bf04      	itt	eq
 8005654:	6819      	ldreq	r1, [r3, #0]
 8005656:	685b      	ldreq	r3, [r3, #4]
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	bf04      	itt	eq
 800565c:	1949      	addeq	r1, r1, r5
 800565e:	6021      	streq	r1, [r4, #0]
 8005660:	6054      	str	r4, [r2, #4]
 8005662:	e7ca      	b.n	80055fa <_free_r+0x26>
 8005664:	b003      	add	sp, #12
 8005666:	bd30      	pop	{r4, r5, pc}
 8005668:	20004234 	.word	0x20004234

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr

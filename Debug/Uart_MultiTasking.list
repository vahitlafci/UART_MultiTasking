
Uart_MultiTasking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005760  08005760  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005768  08005768  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000041c4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004238  20004238  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001824c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003626  00000000  00000000  000382f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  0003b918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001210  00000000  00000000  0003cc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002637e  00000000  00000000  0003dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a0a  00000000  00000000  0006421e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e73cd  00000000  00000000  0007ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161ff5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005358  00000000  00000000  00162048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800567c 	.word	0x0800567c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800567c 	.word	0x0800567c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
 8000508:	615a      	str	r2, [r3, #20]
 800050a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <MX_FMC_Init+0x98>)
 800050e:	4a20      	ldr	r2, [pc, #128]	; (8000590 <MX_FMC_Init+0x9c>)
 8000510:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_FMC_Init+0x98>)
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <MX_FMC_Init+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_FMC_Init+0x98>)
 8000520:	2204      	movs	r2, #4
 8000522:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <MX_FMC_Init+0x98>)
 8000526:	2210      	movs	r2, #16
 8000528:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <MX_FMC_Init+0x98>)
 800052c:	2240      	movs	r2, #64	; 0x40
 800052e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <MX_FMC_Init+0x98>)
 8000532:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000536:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <MX_FMC_Init+0x98>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <MX_FMC_Init+0x98>)
 8000540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000544:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_FMC_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_FMC_Init+0x98>)
 800054e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000554:	2302      	movs	r3, #2
 8000556:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000558:	2307      	movs	r3, #7
 800055a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800055c:	2304      	movs	r3, #4
 800055e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000560:	2307      	movs	r3, #7
 8000562:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000564:	2303      	movs	r3, #3
 8000566:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000568:	2302      	movs	r3, #2
 800056a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800056c:	2302      	movs	r3, #2
 800056e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_FMC_Init+0x98>)
 8000576:	f001 ff25 	bl	80023c4 <HAL_SDRAM_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000580:	f000 fc54 	bl	8000e2c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000090 	.word	0x20000090
 8000590:	a0000140 	.word	0xa0000140

08000594 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80005a8:	4b3b      	ldr	r3, [pc, #236]	; (8000698 <HAL_FMC_MspInit+0x104>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d16f      	bne.n	8000690 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80005b0:	4b39      	ldr	r3, [pc, #228]	; (8000698 <HAL_FMC_MspInit+0x104>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	4b38      	ldr	r3, [pc, #224]	; (800069c <HAL_FMC_MspInit+0x108>)
 80005bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005be:	4a37      	ldr	r2, [pc, #220]	; (800069c <HAL_FMC_MspInit+0x108>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6393      	str	r3, [r2, #56]	; 0x38
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <HAL_FMC_MspInit+0x108>)
 80005c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80005d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80005d6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e0:	2303      	movs	r3, #3
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005e4:	230c      	movs	r3, #12
 80005e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4619      	mov	r1, r3
 80005ec:	482c      	ldr	r0, [pc, #176]	; (80006a0 <HAL_FMC_MspInit+0x10c>)
 80005ee:	f001 f859 	bl	80016a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80005f2:	2301      	movs	r3, #1
 80005f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000602:	230c      	movs	r3, #12
 8000604:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	4826      	ldr	r0, [pc, #152]	; (80006a4 <HAL_FMC_MspInit+0x110>)
 800060c:	f001 f84a 	bl	80016a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000610:	f248 1333 	movw	r3, #33075	; 0x8133
 8000614:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000622:	230c      	movs	r3, #12
 8000624:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	481f      	ldr	r0, [pc, #124]	; (80006a8 <HAL_FMC_MspInit+0x114>)
 800062c:	f001 f83a 	bl	80016a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000630:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000634:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000642:	230c      	movs	r3, #12
 8000644:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4818      	ldr	r0, [pc, #96]	; (80006ac <HAL_FMC_MspInit+0x118>)
 800064c:	f001 f82a 	bl	80016a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000650:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000654:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000656:	2302      	movs	r3, #2
 8000658:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000662:	230c      	movs	r3, #12
 8000664:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4811      	ldr	r0, [pc, #68]	; (80006b0 <HAL_FMC_MspInit+0x11c>)
 800066c:	f001 f81a 	bl	80016a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000670:	2360      	movs	r3, #96	; 0x60
 8000672:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000680:	230c      	movs	r3, #12
 8000682:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	480a      	ldr	r0, [pc, #40]	; (80006b4 <HAL_FMC_MspInit+0x120>)
 800068a:	f001 f80b 	bl	80016a4 <HAL_GPIO_Init>
 800068e:	e000      	b.n	8000692 <HAL_FMC_MspInit+0xfe>
    return;
 8000690:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000c4 	.word	0x200000c4
 800069c:	40023800 	.word	0x40023800
 80006a0:	40021400 	.word	0x40021400
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40021800 	.word	0x40021800
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	40020400 	.word	0x40020400

080006b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006c0:	f7ff ff68 	bl	8000594 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80006dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <vApplicationGetIdleTaskMemory+0x30>)
 80006e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200000d0 	.word	0x200000d0
 80006fc:	20000184 	.word	0x20000184

08000700 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b08e      	sub	sp, #56	; 0x38
 8000704:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, LedTask_func, osPriorityNormal, 0, 256);
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_FREERTOS_Init+0x58>)
 8000708:	f107 041c 	add.w	r4, r7, #28
 800070c:	461d      	mov	r5, r3
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fc62 	bl	8003fea <osThreadCreate>
 8000726:	4603      	mov	r3, r0
 8000728:	4a0c      	ldr	r2, [pc, #48]	; (800075c <MX_FREERTOS_Init+0x5c>)
 800072a:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, UartTask_func, osPriorityLow, 0, 1024);
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_FREERTOS_Init+0x60>)
 800072e:	463c      	mov	r4, r7
 8000730:	461d      	mov	r5, r3
 8000732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000736:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 800073e:	463b      	mov	r3, r7
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fc51 	bl	8003fea <osThreadCreate>
 8000748:	4603      	mov	r3, r0
 800074a:	4a06      	ldr	r2, [pc, #24]	; (8000764 <MX_FREERTOS_Init+0x64>)
 800074c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
}
 800074e:	bf00      	nop
 8000750:	3738      	adds	r7, #56	; 0x38
 8000752:	46bd      	mov	sp, r7
 8000754:	bdb0      	pop	{r4, r5, r7, pc}
 8000756:	bf00      	nop
 8000758:	080056a8 	.word	0x080056a8
 800075c:	200000c8 	.word	0x200000c8
 8000760:	080056c4 	.word	0x080056c4
 8000764:	200000cc 	.word	0x200000cc

08000768 <LedTask_func>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LedTask_func */
void LedTask_func(void const *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask_func */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f003 fc86 	bl	8004082 <osDelay>
 8000776:	e7fb      	b.n	8000770 <LedTask_func+0x8>

08000778 <UartTask_func>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UartTask_func */
void UartTask_func(void const *argument)
{
 8000778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800077c:	b089      	sub	sp, #36	; 0x24
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartTask_func */
  /* Infinite loop */
  for (;;)
  {
    if (uartItFlag)
 8000782:	4b50      	ldr	r3, [pc, #320]	; (80008c4 <UartTask_func+0x14c>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d031      	beq.n	80007ee <UartTask_func+0x76>
    {
      uartItFlag = 0;
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <UartTask_func+0x14c>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
      start = cntr;
 8000790:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <UartTask_func+0x150>)
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	4b4d      	ldr	r3, [pc, #308]	; (80008cc <UartTask_func+0x154>)
 8000796:	701a      	strb	r2, [r3, #0]
      for (int i = start; i < start + BUFFER_LENGTH; i++)
 8000798:	4b4c      	ldr	r3, [pc, #304]	; (80008cc <UartTask_func+0x154>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	e020      	b.n	80007e2 <UartTask_func+0x6a>
      {
        rcvd_data = buffer[i];
 80007a0:	4a4b      	ldr	r2, [pc, #300]	; (80008d0 <UartTask_func+0x158>)
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	4413      	add	r3, r2
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	4b4a      	ldr	r3, [pc, #296]	; (80008d4 <UartTask_func+0x15c>)
 80007aa:	701a      	strb	r2, [r3, #0]
        if (rcvd_data == 10)
 80007ac:	4b49      	ldr	r3, [pc, #292]	; (80008d4 <UartTask_func+0x15c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b0a      	cmp	r3, #10
 80007b2:	d10d      	bne.n	80007d0 <UartTask_func+0x58>
        {
          rcvd_complete = 1;
 80007b4:	4b48      	ldr	r3, [pc, #288]	; (80008d8 <UartTask_func+0x160>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
          end = cntr;
 80007ba:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <UartTask_func+0x150>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b47      	ldr	r3, [pc, #284]	; (80008dc <UartTask_func+0x164>)
 80007c0:	701a      	strb	r2, [r3, #0]
          cntr++;
 80007c2:	4b41      	ldr	r3, [pc, #260]	; (80008c8 <UartTask_func+0x150>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <UartTask_func+0x150>)
 80007cc:	701a      	strb	r2, [r3, #0]

          break;
 80007ce:	e00e      	b.n	80007ee <UartTask_func+0x76>
        }
        cntr++;
 80007d0:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <UartTask_func+0x150>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <UartTask_func+0x150>)
 80007da:	701a      	strb	r2, [r3, #0]
      for (int i = start; i < start + BUFFER_LENGTH; i++)
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	3301      	adds	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b3a      	ldr	r3, [pc, #232]	; (80008cc <UartTask_func+0x154>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	3331      	adds	r3, #49	; 0x31
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	ddd8      	ble.n	80007a0 <UartTask_func+0x28>
      }
    }
    if (echo)
 80007ee:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <UartTask_func+0x168>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00b      	beq.n	800080e <UartTask_func+0x96>
    {
      uint8_t newLine = 10;
 80007f6:	230a      	movs	r3, #10
 80007f8:	72fb      	strb	r3, [r7, #11]
      HAL_UART_Transmit(&huart1, &newLine, 1, 100);
 80007fa:	f107 010b 	add.w	r1, r7, #11
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	2201      	movs	r2, #1
 8000802:	4838      	ldr	r0, [pc, #224]	; (80008e4 <UartTask_func+0x16c>)
 8000804:	f002 fae1 	bl	8002dca <HAL_UART_Transmit>
      echo = 0;
 8000808:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <UartTask_func+0x168>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
    }
    if (rcvd_complete)
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <UartTask_func+0x160>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d051      	beq.n	80008ba <UartTask_func+0x142>
    {
 8000816:	466b      	mov	r3, sp
 8000818:	461e      	mov	r6, r3
      uint8_t length = end - start;
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <UartTask_func+0x164>)
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <UartTask_func+0x154>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	75fb      	strb	r3, [r7, #23]
      uint8_t tmpData[length];
 8000826:	7df9      	ldrb	r1, [r7, #23]
 8000828:	460b      	mov	r3, r1
 800082a:	3b01      	subs	r3, #1
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	b2cb      	uxtb	r3, r1
 8000830:	2200      	movs	r2, #0
 8000832:	461c      	mov	r4, r3
 8000834:	4615      	mov	r5, r2
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	00eb      	lsls	r3, r5, #3
 8000840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000844:	00e2      	lsls	r2, r4, #3
 8000846:	b2cb      	uxtb	r3, r1
 8000848:	2200      	movs	r2, #0
 800084a:	4698      	mov	r8, r3
 800084c:	4691      	mov	r9, r2
 800084e:	f04f 0200 	mov.w	r2, #0
 8000852:	f04f 0300 	mov.w	r3, #0
 8000856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800085a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800085e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000862:	460b      	mov	r3, r1
 8000864:	3307      	adds	r3, #7
 8000866:	08db      	lsrs	r3, r3, #3
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	ebad 0d03 	sub.w	sp, sp, r3
 800086e:	466b      	mov	r3, sp
 8000870:	3300      	adds	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
      for (int i = 0; i < length; i++)
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	e00e      	b.n	8000898 <UartTask_func+0x120>
      {
        tmpData[i] = buffer[start + i];
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <UartTask_func+0x154>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	4413      	add	r3, r2
 8000884:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <UartTask_func+0x158>)
 8000886:	5cd0      	ldrb	r0, [r2, r3]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	4413      	add	r3, r2
 800088e:	4602      	mov	r2, r0
 8000890:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < length; i++)
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3301      	adds	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	69fa      	ldr	r2, [r7, #28]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbec      	blt.n	800087a <UartTask_func+0x102>
      }
      HAL_UART_Transmit(&huart1, tmpData, sizeof(tmpData), 100);
 80008a0:	b28a      	uxth	r2, r1
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	68f9      	ldr	r1, [r7, #12]
 80008a6:	480f      	ldr	r0, [pc, #60]	; (80008e4 <UartTask_func+0x16c>)
 80008a8:	f002 fa8f 	bl	8002dca <HAL_UART_Transmit>
      echo = 1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <UartTask_func+0x168>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
      rcvd_complete = 0;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UartTask_func+0x160>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	46b5      	mov	sp, r6
    }
    // HAL_UART_Transmit(&huart1,msg,sizeof(msg),100);
    osDelay(20);
 80008ba:	2014      	movs	r0, #20
 80008bc:	f003 fbe1 	bl	8004082 <osDelay>
    if (uartItFlag)
 80008c0:	e75f      	b.n	8000782 <UartTask_func+0xa>
 80008c2:	bf00      	nop
 80008c4:	20000384 	.word	0x20000384
 80008c8:	200003bb 	.word	0x200003bb
 80008cc:	200003bd 	.word	0x200003bd
 80008d0:	20000388 	.word	0x20000388
 80008d4:	200003ba 	.word	0x200003ba
 80008d8:	200003bc 	.word	0x200003bc
 80008dc:	200003be 	.word	0x200003be
 80008e0:	200003bf 	.word	0x200003bf
 80008e4:	20000494 	.word	0x20000494

080008e8 <MX_GPIO_Init>:
     PG12   ------> LTDC_B4
     PB8   ------> LTDC_B6
     PB9   ------> LTDC_B7
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
 8000902:	4bb2      	ldr	r3, [pc, #712]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4ab1      	ldr	r2, [pc, #708]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4baf      	ldr	r3, [pc, #700]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	623b      	str	r3, [r7, #32]
 8000918:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	4bab      	ldr	r3, [pc, #684]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4aaa      	ldr	r2, [pc, #680]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000924:	f043 0320 	orr.w	r3, r3, #32
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4ba8      	ldr	r3, [pc, #672]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	61fb      	str	r3, [r7, #28]
 8000934:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	4ba4      	ldr	r3, [pc, #656]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4aa3      	ldr	r2, [pc, #652]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4ba1      	ldr	r3, [pc, #644]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	4b9d      	ldr	r3, [pc, #628]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a9c      	ldr	r2, [pc, #624]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b9a      	ldr	r3, [pc, #616]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b96      	ldr	r3, [pc, #600]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a95      	ldr	r2, [pc, #596]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b93      	ldr	r3, [pc, #588]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b8f      	ldr	r3, [pc, #572]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a8e      	ldr	r2, [pc, #568]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b8c      	ldr	r3, [pc, #560]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b88      	ldr	r3, [pc, #544]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a87      	ldr	r2, [pc, #540]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b85      	ldr	r3, [pc, #532]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a80      	ldr	r2, [pc, #512]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b7e      	ldr	r3, [pc, #504]	; (8000bcc <MX_GPIO_Init+0x2e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2116      	movs	r1, #22
 80009e2:	487b      	ldr	r0, [pc, #492]	; (8000bd0 <MX_GPIO_Init+0x2e8>)
 80009e4:	f001 f80a 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	4879      	ldr	r0, [pc, #484]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 80009ee:	f001 f805 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009f8:	4877      	ldr	r0, [pc, #476]	; (8000bd8 <MX_GPIO_Init+0x2f0>)
 80009fa:	f000 ffff 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000a04:	4875      	ldr	r0, [pc, #468]	; (8000bdc <MX_GPIO_Init+0x2f4>)
 8000a06:	f000 fff9 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000a0a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	486e      	ldr	r0, [pc, #440]	; (8000be0 <MX_GPIO_Init+0x2f8>)
 8000a28:	f000 fe3c 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a3e:	230e      	movs	r3, #14
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	4865      	ldr	r0, [pc, #404]	; (8000be0 <MX_GPIO_Init+0x2f8>)
 8000a4a:	f000 fe2b 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000a4e:	2316      	movs	r3, #22
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	485a      	ldr	r0, [pc, #360]	; (8000bd0 <MX_GPIO_Init+0x2e8>)
 8000a66:	f000 fe1d 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000a6a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a70:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4854      	ldr	r0, [pc, #336]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000a82:	f000 fe0f 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000a86:	f641 0358 	movw	r3, #6232	; 0x1858
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a98:	230e      	movs	r3, #14
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	484c      	ldr	r0, [pc, #304]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000aa4:	f000 fdfe 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4845      	ldr	r0, [pc, #276]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000ac0:	f000 fdf0 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000ac4:	2320      	movs	r3, #32
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	483d      	ldr	r0, [pc, #244]	; (8000bd0 <MX_GPIO_Init+0x2e8>)
 8000ada:	f000 fde3 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000aee:	2309      	movs	r3, #9
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	483a      	ldr	r0, [pc, #232]	; (8000be4 <MX_GPIO_Init+0x2fc>)
 8000afa:	f000 fdd3 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000afe:	2304      	movs	r3, #4
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4834      	ldr	r0, [pc, #208]	; (8000be4 <MX_GPIO_Init+0x2fc>)
 8000b12:	f000 fdc7 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000b16:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b28:	230e      	movs	r3, #14
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	482c      	ldr	r0, [pc, #176]	; (8000be4 <MX_GPIO_Init+0x2fc>)
 8000b34:	f000 fdb6 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000b38:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4823      	ldr	r0, [pc, #140]	; (8000be4 <MX_GPIO_Init+0x2fc>)
 8000b56:	f000 fda5 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481d      	ldr	r0, [pc, #116]	; (8000be4 <MX_GPIO_Init+0x2fc>)
 8000b70:	f000 fd98 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <MX_GPIO_Init+0x2f0>)
 8000b8a:	f000 fd8b 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_GPIO_Init+0x2f0>)
 8000ba8:	f000 fd7c 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000bac:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bbe:	230e      	movs	r3, #14
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	e00e      	b.n	8000be8 <MX_GPIO_Init+0x300>
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021800 	.word	0x40021800
 8000be0:	40021400 	.word	0x40021400
 8000be4:	40020400 	.word	0x40020400
 8000be8:	4834      	ldr	r0, [pc, #208]	; (8000cbc <MX_GPIO_Init+0x3d4>)
 8000bea:	f000 fd5b 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000bee:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c00:	230e      	movs	r3, #14
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482d      	ldr	r0, [pc, #180]	; (8000cc0 <MX_GPIO_Init+0x3d8>)
 8000c0c:	f000 fd4a 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c22:	2304      	movs	r3, #4
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4824      	ldr	r0, [pc, #144]	; (8000cc0 <MX_GPIO_Init+0x3d8>)
 8000c2e:	f000 fd39 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c44:	2304      	movs	r3, #4
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <MX_GPIO_Init+0x3dc>)
 8000c50:	f000 fd28 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c54:	2348      	movs	r3, #72	; 0x48
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c64:	230e      	movs	r3, #14
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <MX_GPIO_Init+0x3e0>)
 8000c70:	f000 fd18 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c86:	2309      	movs	r3, #9
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <MX_GPIO_Init+0x3d4>)
 8000c92:	f000 fd07 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c96:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <MX_GPIO_Init+0x3d4>)
 8000cb0:	f000 fcf8 	bl	80016a4 <HAL_GPIO_Init>

}
 8000cb4:	bf00      	nop
 8000cb6:	3738      	adds	r7, #56	; 0x38
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021800 	.word	0x40021800
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020c00 	.word	0x40020c00

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd0:	f000 fb32 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd4:	f000 f818 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd8:	f7ff fe06 	bl	80008e8 <MX_GPIO_Init>
  MX_FMC_Init();
 8000cdc:	f7ff fc0a 	bl	80004f4 <MX_FMC_Init>
  MX_TIM1_Init();
 8000ce0:	f000 f992 	bl	8001008 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000ce4:	f000 fa2c 	bl	8001140 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000ce8:	f000 fa00 	bl	80010ec <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, buffer, BUFFER_LENGTH);
 8000cec:	2232      	movs	r2, #50	; 0x32
 8000cee:	4904      	ldr	r1, [pc, #16]	; (8000d00 <main+0x34>)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <main+0x38>)
 8000cf2:	f002 f8fc 	bl	8002eee <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000cf6:	f7ff fd03 	bl	8000700 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cfa:	f003 f96f 	bl	8003fdc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <main+0x32>
 8000d00:	20000388 	.word	0x20000388
 8000d04:	20000494 	.word	0x20000494

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	2230      	movs	r2, #48	; 0x30
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 fbe6 	bl	80054e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d54:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d72:	2302      	movs	r3, #2
 8000d74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d80:	2348      	movs	r3, #72	; 0x48
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fe4d 	bl	8001a30 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d9c:	f000 f846 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da4:	2302      	movs	r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 f8af 	bl	8001f20 <HAL_RCC_ClockConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dc8:	f000 f830 	bl	8000e2c <Error_Handler>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3750      	adds	r7, #80	; 0x50
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&huart1, buffer, BUFFER_LENGTH);
 8000de4:	2232      	movs	r2, #50	; 0x32
 8000de6:	4905      	ldr	r1, [pc, #20]	; (8000dfc <HAL_UART_RxCpltCallback+0x20>)
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_UART_RxCpltCallback+0x24>)
 8000dea:	f002 f880 	bl	8002eee <HAL_UART_Receive_IT>
	  uartItFlag = 1;
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_UART_RxCpltCallback+0x28>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]

}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000388 	.word	0x20000388
 8000e00:	20000494 	.word	0x20000494
 8000e04:	20000384 	.word	0x20000384

08000e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e1a:	f000 faaf 	bl	800137c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40001000 	.word	0x40001000

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_MspInit+0x54>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <HAL_MspInit+0x54>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x54>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_MspInit+0x54>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_MspInit+0x54>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_MspInit+0x54>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	210f      	movs	r1, #15
 8000e7a:	f06f 0001 	mvn.w	r0, #1
 8000e7e:	f000 fb55 	bl	800152c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <HAL_InitTick+0xe4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a32      	ldr	r2, [pc, #200]	; (8000f74 <HAL_InitTick+0xe4>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <HAL_InitTick+0xe4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ebc:	f107 0210 	add.w	r2, r7, #16
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fa4a 	bl	8002360 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ed6:	f001 fa1b 	bl	8002310 <HAL_RCC_GetPCLK1Freq>
 8000eda:	6378      	str	r0, [r7, #52]	; 0x34
 8000edc:	e004      	b.n	8000ee8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ede:	f001 fa17 	bl	8002310 <HAL_RCC_GetPCLK1Freq>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eea:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <HAL_InitTick+0xe8>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	0c9b      	lsrs	r3, r3, #18
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_InitTick+0xec>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <HAL_InitTick+0xf0>)
 8000efa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_InitTick+0xec>)
 8000efe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_InitTick+0xec>)
 8000f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_InitTick+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_InitTick+0xec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_InitTick+0xec>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <HAL_InitTick+0xec>)
 8000f1e:	f001 fa85 	bl	800242c <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d11b      	bne.n	8000f68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <HAL_InitTick+0xec>)
 8000f32:	f001 facb 	bl	80024cc <HAL_TIM_Base_Start_IT>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d111      	bne.n	8000f68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f44:	2036      	movs	r0, #54	; 0x36
 8000f46:	f000 fb0d 	bl	8001564 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d808      	bhi.n	8000f62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	2036      	movs	r0, #54	; 0x36
 8000f56:	f000 fae9 	bl	800152c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_InitTick+0xf4>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e002      	b.n	8000f68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3738      	adds	r7, #56	; 0x38
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	200003c0 	.word	0x200003c0
 8000f80:	40001000 	.word	0x40001000
 8000f84:	20000004 	.word	0x20000004

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <USART1_IRQHandler+0x14>)
 8000fba:	f001 ffc9 	bl	8002f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  uartItFlag = 1u;
 8000fbe:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <USART1_IRQHandler+0x18>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000494 	.word	0x20000494
 8000fcc:	20000384 	.word	0x20000384

08000fd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM6_DAC_IRQHandler+0x10>)
 8000fd6:	f001 fae9 	bl	80025ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200003c0 	.word	0x200003c0

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101c:	463b      	mov	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_TIM1_Init+0x98>)
 8001026:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <MX_TIM1_Init+0x9c>)
 8001028:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_TIM1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_TIM1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_TIM1_Init+0x98>)
 8001038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_TIM1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_TIM1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_TIM1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001050:	4813      	ldr	r0, [pc, #76]	; (80010a0 <MX_TIM1_Init+0x98>)
 8001052:	f001 f9eb 	bl	800242c <HAL_TIM_Base_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800105c:	f7ff fee6 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	4619      	mov	r1, r3
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <MX_TIM1_Init+0x98>)
 800106e:	f001 fba5 	bl	80027bc <HAL_TIM_ConfigClockSource>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001078:	f7ff fed8 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_TIM1_Init+0x98>)
 800108a:	f001 fdc1 	bl	8002c10 <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001094:	f7ff feca 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000408 	.word	0x20000408
 80010a4:	40010000 	.word	0x40010000

080010a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <HAL_TIM_Base_MspInit+0x3c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10d      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_TIM_Base_MspInit+0x40>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <HAL_TIM_Base_MspInit+0x40>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_TIM_Base_MspInit+0x40>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40023800 	.word	0x40023800

080010ec <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_UART5_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_UART5_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_UART5_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_UART5_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_UART5_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_UART5_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_UART5_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_UART5_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_UART5_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_UART5_Init+0x4c>)
 8001124:	f001 fe04 	bl	8002d30 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800112e:	f7ff fe7d 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000450 	.word	0x20000450
 800113c:	40005000 	.word	0x40005000

08001140 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART1_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART1_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART1_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART1_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001178:	f001 fdda 	bl	8002d30 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f7ff fe53 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000494 	.word	0x20000494
 8001190:	40011000 	.word	0x40011000

08001194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a46      	ldr	r2, [pc, #280]	; (80012cc <HAL_UART_MspInit+0x138>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d14b      	bne.n	800124e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a44      	ldr	r2, [pc, #272]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 80011c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a36      	ldr	r2, [pc, #216]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800121c:	2308      	movs	r3, #8
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	482b      	ldr	r0, [pc, #172]	; (80012d4 <HAL_UART_MspInit+0x140>)
 8001228:	f000 fa3c 	bl	80016a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800122c:	2304      	movs	r3, #4
 800122e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800123c:	2308      	movs	r3, #8
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	4824      	ldr	r0, [pc, #144]	; (80012d8 <HAL_UART_MspInit+0x144>)
 8001248:	f000 fa2c 	bl	80016a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800124c:	e039      	b.n	80012c2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a22      	ldr	r2, [pc, #136]	; (80012dc <HAL_UART_MspInit+0x148>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d134      	bne.n	80012c2 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6453      	str	r3, [r2, #68]	; 0x44
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_UART_MspInit+0x13c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001290:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a2:	2307      	movs	r3, #7
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <HAL_UART_MspInit+0x14c>)
 80012ae:	f000 f9f9 	bl	80016a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2025      	movs	r0, #37	; 0x25
 80012b8:	f000 f938 	bl	800152c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012bc:	2025      	movs	r0, #37	; 0x25
 80012be:	f000 f951 	bl	8001564 <HAL_NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3730      	adds	r7, #48	; 0x30
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40005000 	.word	0x40005000
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40011000 	.word	0x40011000
 80012e0:	40020000 	.word	0x40020000

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ea:	490e      	ldr	r1, [pc, #56]	; (8001324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001300:	4c0b      	ldr	r4, [pc, #44]	; (8001330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800130e:	f7ff fe69 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001312:	f004 f8c3 	bl	800549c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff fcd9 	bl	8000ccc <main>
  bx  lr    
 800131a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800131c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001328:	08005770 	.word	0x08005770
  ldr r2, =_sbss
 800132c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001330:	20004238 	.word	0x20004238

08001334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC_IRQHandler>
	...

08001338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_Init+0x40>)
 8001342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_Init+0x40>)
 800134e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x40>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f8d8 	bl	8001516 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f7ff fd92 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fd64 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	200004d8 	.word	0x200004d8

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200004d8 	.word	0x200004d8

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff4c 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153e:	f7ff ff61 	bl	8001404 <__NVIC_GetPriorityGrouping>
 8001542:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	6978      	ldr	r0, [r7, #20]
 800154a:	f7ff ffb1 	bl	80014b0 <NVIC_EncodePriority>
 800154e:	4602      	mov	r2, r0
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff80 	bl	800145c <__NVIC_SetPriority>
}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff54 	bl	8001420 <__NVIC_EnableIRQ>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800158e:	f7ff ff09 	bl	80013a4 <HAL_GetTick>
 8001592:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d008      	beq.n	80015b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e052      	b.n	8001658 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0216 	bic.w	r2, r2, #22
 80015c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d103      	bne.n	80015e2 <HAL_DMA_Abort+0x62>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0208 	bic.w	r2, r2, #8
 80015f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0201 	bic.w	r2, r2, #1
 8001600:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001602:	e013      	b.n	800162c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001604:	f7ff fece 	bl	80013a4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b05      	cmp	r3, #5
 8001610:	d90c      	bls.n	800162c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2220      	movs	r2, #32
 8001616:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2203      	movs	r2, #3
 800161c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e015      	b.n	8001658 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1e4      	bne.n	8001604 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	223f      	movs	r2, #63	; 0x3f
 8001640:	409a      	lsls	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d004      	beq.n	800167e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00c      	b.n	8001698 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2205      	movs	r2, #5
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	e177      	b.n	80019b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c0:	2201      	movs	r2, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	429a      	cmp	r2, r3
 80016da:	f040 8166 	bne.w	80019aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d005      	beq.n	80016f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d130      	bne.n	8001758 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2203      	movs	r2, #3
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800172c:	2201      	movs	r2, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 0201 	and.w	r2, r3, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b03      	cmp	r3, #3
 8001762:	d017      	beq.n	8001794 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d123      	bne.n	80017e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	08da      	lsrs	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3208      	adds	r2, #8
 80017a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	220f      	movs	r2, #15
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	08da      	lsrs	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3208      	adds	r2, #8
 80017e2:	69b9      	ldr	r1, [r7, #24]
 80017e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80c0 	beq.w	80019aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <HAL_GPIO_Init+0x324>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <HAL_GPIO_Init+0x324>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_GPIO_Init+0x324>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001846:	4a61      	ldr	r2, [pc, #388]	; (80019cc <HAL_GPIO_Init+0x328>)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_GPIO_Init+0x32c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d037      	beq.n	80018e2 <HAL_GPIO_Init+0x23e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a57      	ldr	r2, [pc, #348]	; (80019d4 <HAL_GPIO_Init+0x330>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d031      	beq.n	80018de <HAL_GPIO_Init+0x23a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a56      	ldr	r2, [pc, #344]	; (80019d8 <HAL_GPIO_Init+0x334>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d02b      	beq.n	80018da <HAL_GPIO_Init+0x236>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a55      	ldr	r2, [pc, #340]	; (80019dc <HAL_GPIO_Init+0x338>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d025      	beq.n	80018d6 <HAL_GPIO_Init+0x232>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a54      	ldr	r2, [pc, #336]	; (80019e0 <HAL_GPIO_Init+0x33c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01f      	beq.n	80018d2 <HAL_GPIO_Init+0x22e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a53      	ldr	r2, [pc, #332]	; (80019e4 <HAL_GPIO_Init+0x340>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d019      	beq.n	80018ce <HAL_GPIO_Init+0x22a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_GPIO_Init+0x344>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x226>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a51      	ldr	r2, [pc, #324]	; (80019ec <HAL_GPIO_Init+0x348>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x222>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a50      	ldr	r2, [pc, #320]	; (80019f0 <HAL_GPIO_Init+0x34c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x21e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4f      	ldr	r2, [pc, #316]	; (80019f4 <HAL_GPIO_Init+0x350>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x21a>
 80018ba:	2309      	movs	r3, #9
 80018bc:	e012      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018be:	230a      	movs	r3, #10
 80018c0:	e010      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018c2:	2308      	movs	r3, #8
 80018c4:	e00e      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00c      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018ca:	2306      	movs	r3, #6
 80018cc:	e00a      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018ce:	2305      	movs	r3, #5
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018d2:	2304      	movs	r3, #4
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <HAL_GPIO_Init+0x328>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <HAL_GPIO_Init+0x354>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001926:	4a34      	ldr	r2, [pc, #208]	; (80019f8 <HAL_GPIO_Init+0x354>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <HAL_GPIO_Init+0x354>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001950:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <HAL_GPIO_Init+0x354>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_GPIO_Init+0x354>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197a:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <HAL_GPIO_Init+0x354>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_GPIO_Init+0x354>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_GPIO_Init+0x354>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f ae84 	bls.w	80016c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40021400 	.word	0x40021400
 80019e8:	40021800 	.word	0x40021800
 80019ec:	40021c00 	.word	0x40021c00
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40022400 	.word	0x40022400
 80019f8:	40013c00 	.word	0x40013c00

080019fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a0c:	787b      	ldrb	r3, [r7, #1]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a18:	e003      	b.n	8001a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	041a      	lsls	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	619a      	str	r2, [r3, #24]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e267      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d075      	beq.n	8001b3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a4e:	4b88      	ldr	r3, [pc, #544]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d00c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5a:	4b85      	ldr	r3, [pc, #532]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d112      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a66:	4b82      	ldr	r3, [pc, #520]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a72:	d10b      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	4b7e      	ldr	r3, [pc, #504]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d05b      	beq.n	8001b38 <HAL_RCC_OscConfig+0x108>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d157      	bne.n	8001b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e242      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d106      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x74>
 8001a96:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a75      	ldr	r2, [pc, #468]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0xb0>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x98>
 8001aae:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6f      	ldr	r2, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6c      	ldr	r2, [pc, #432]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0xb0>
 8001ac8:	4b69      	ldr	r3, [pc, #420]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a68      	ldr	r2, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a65      	ldr	r2, [pc, #404]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fc5c 	bl	80013a4 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fc58 	bl	80013a4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e207      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0xc0>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fc48 	bl	80013a4 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fc44 	bl	80013a4 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1f3      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	4b51      	ldr	r3, [pc, #324]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0xe8>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b52:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d11c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d116      	bne.n	8001b98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_RCC_OscConfig+0x152>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e1c7      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4937      	ldr	r1, [pc, #220]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	e03a      	b.n	8001c0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_RCC_OscConfig+0x244>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fbfd 	bl	80013a4 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff fbf9 	bl	80013a4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1a8      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4925      	ldr	r1, [pc, #148]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_RCC_OscConfig+0x244>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fbdc 	bl	80013a4 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fbd8 	bl	80013a4 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e187      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d036      	beq.n	8001c88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d016      	beq.n	8001c50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_RCC_OscConfig+0x248>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff fbbc 	bl	80013a4 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff fbb8 	bl	80013a4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e167      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_OscConfig+0x240>)
 8001c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x200>
 8001c4e:	e01b      	b.n	8001c88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x248>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fba5 	bl	80013a4 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	e00e      	b.n	8001c7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fba1 	bl	80013a4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d907      	bls.n	8001c7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e150      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	42470000 	.word	0x42470000
 8001c78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ea      	bne.n	8001c5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8097 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9a:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10f      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b7d      	ldr	r3, [pc, #500]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a7c      	ldr	r2, [pc, #496]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b7a      	ldr	r3, [pc, #488]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b77      	ldr	r3, [pc, #476]	; (8001ea4 <HAL_RCC_OscConfig+0x474>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd2:	4b74      	ldr	r3, [pc, #464]	; (8001ea4 <HAL_RCC_OscConfig+0x474>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a73      	ldr	r2, [pc, #460]	; (8001ea4 <HAL_RCC_OscConfig+0x474>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cde:	f7ff fb61 	bl	80013a4 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce6:	f7ff fb5d 	bl	80013a4 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e10c      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0x474>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2ea>
 8001d0c:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4a63      	ldr	r2, [pc, #396]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x324>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x30c>
 8001d22:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	4a5e      	ldr	r2, [pc, #376]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a5b      	ldr	r2, [pc, #364]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x324>
 8001d3c:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a57      	ldr	r2, [pc, #348]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	4b55      	ldr	r3, [pc, #340]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a54      	ldr	r2, [pc, #336]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d015      	beq.n	8001d88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fb22 	bl	80013a4 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7ff fb1e 	bl	80013a4 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0cb      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7a:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0ee      	beq.n	8001d64 <HAL_RCC_OscConfig+0x334>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7ff fb0c 	bl	80013a4 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff fb08 	bl	80013a4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0b5      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da6:	4b3e      	ldr	r3, [pc, #248]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ee      	bne.n	8001d90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a1 	beq.w	8001f10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dce:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d05c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d141      	bne.n	8001e66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <HAL_RCC_OscConfig+0x478>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fadc 	bl	80013a4 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff fad8 	bl	80013a4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e087      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69da      	ldr	r2, [r3, #28]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	3b01      	subs	r3, #1
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	491b      	ldr	r1, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_RCC_OscConfig+0x478>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fab1 	bl	80013a4 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff faad 	bl	80013a4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e05c      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x416>
 8001e64:	e054      	b.n	8001f10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_RCC_OscConfig+0x478>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fa9a 	bl	80013a4 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff fa96 	bl	80013a4 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e045      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x470>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x444>
 8001e92:	e03d      	b.n	8001f10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e038      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x4ec>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d028      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d121      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d111      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0cc      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d90c      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b8      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4a58      	ldr	r2, [pc, #352]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	494d      	ldr	r1, [pc, #308]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d044      	beq.n	8002040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d119      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e06f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e067      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b37      	ldr	r3, [pc, #220]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4934      	ldr	r1, [pc, #208]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002010:	f7ff f9c8 	bl	80013a4 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7ff f9c4 	bl	80013a4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e04f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d20c      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e032      	b.n	80020ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	490e      	ldr	r1, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a6:	f000 f821 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	490a      	ldr	r1, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	5ccb      	ldrb	r3, [r1, r3]
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fee2 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00
 80020dc:	40023800 	.word	0x40023800
 80020e0:	080056e8 	.word	0x080056e8
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000004 	.word	0x20000004

080020ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f0:	b094      	sub	sp, #80	; 0x50
 80020f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
 80020f8:	2300      	movs	r3, #0
 80020fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020fc:	2300      	movs	r3, #0
 80020fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002104:	4b79      	ldr	r3, [pc, #484]	; (80022ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d00d      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x40>
 8002110:	2b08      	cmp	r3, #8
 8002112:	f200 80e1 	bhi.w	80022d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x34>
 800211a:	2b04      	cmp	r3, #4
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x3a>
 800211e:	e0db      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b73      	ldr	r3, [pc, #460]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002122:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002124:	e0db      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002128:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800212a:	e0d8      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800212c:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_RCC_GetSysClockFreq+0x200>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002134:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002142:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	099b      	lsrs	r3, r3, #6
 8002148:	2200      	movs	r2, #0
 800214a:	63bb      	str	r3, [r7, #56]	; 0x38
 800214c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
 8002156:	2300      	movs	r3, #0
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
 800215a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800215e:	4622      	mov	r2, r4
 8002160:	462b      	mov	r3, r5
 8002162:	f04f 0000 	mov.w	r0, #0
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	0159      	lsls	r1, r3, #5
 800216c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002170:	0150      	lsls	r0, r2, #5
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4621      	mov	r1, r4
 8002178:	1a51      	subs	r1, r2, r1
 800217a:	6139      	str	r1, [r7, #16]
 800217c:	4629      	mov	r1, r5
 800217e:	eb63 0301 	sbc.w	r3, r3, r1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002190:	4659      	mov	r1, fp
 8002192:	018b      	lsls	r3, r1, #6
 8002194:	4651      	mov	r1, sl
 8002196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800219a:	4651      	mov	r1, sl
 800219c:	018a      	lsls	r2, r1, #6
 800219e:	4651      	mov	r1, sl
 80021a0:	ebb2 0801 	subs.w	r8, r2, r1
 80021a4:	4659      	mov	r1, fp
 80021a6:	eb63 0901 	sbc.w	r9, r3, r1
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021be:	4690      	mov	r8, r2
 80021c0:	4699      	mov	r9, r3
 80021c2:	4623      	mov	r3, r4
 80021c4:	eb18 0303 	adds.w	r3, r8, r3
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	462b      	mov	r3, r5
 80021cc:	eb49 0303 	adc.w	r3, r9, r3
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021de:	4629      	mov	r1, r5
 80021e0:	024b      	lsls	r3, r1, #9
 80021e2:	4621      	mov	r1, r4
 80021e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021e8:	4621      	mov	r1, r4
 80021ea:	024a      	lsls	r2, r1, #9
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f2:	2200      	movs	r2, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021fc:	f7fd fff8 	bl	80001f0 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4613      	mov	r3, r2
 8002206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002208:	e058      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	4b38      	ldr	r3, [pc, #224]	; (80022ec <HAL_RCC_GetSysClockFreq+0x200>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	2200      	movs	r2, #0
 8002212:	4618      	mov	r0, r3
 8002214:	4611      	mov	r1, r2
 8002216:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002224:	4642      	mov	r2, r8
 8002226:	464b      	mov	r3, r9
 8002228:	f04f 0000 	mov.w	r0, #0
 800222c:	f04f 0100 	mov.w	r1, #0
 8002230:	0159      	lsls	r1, r3, #5
 8002232:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002236:	0150      	lsls	r0, r2, #5
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4641      	mov	r1, r8
 800223e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002242:	4649      	mov	r1, r9
 8002244:	eb63 0b01 	sbc.w	fp, r3, r1
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002254:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002258:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800225c:	ebb2 040a 	subs.w	r4, r2, sl
 8002260:	eb63 050b 	sbc.w	r5, r3, fp
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	00eb      	lsls	r3, r5, #3
 800226e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002272:	00e2      	lsls	r2, r4, #3
 8002274:	4614      	mov	r4, r2
 8002276:	461d      	mov	r5, r3
 8002278:	4643      	mov	r3, r8
 800227a:	18e3      	adds	r3, r4, r3
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	464b      	mov	r3, r9
 8002280:	eb45 0303 	adc.w	r3, r5, r3
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002292:	4629      	mov	r1, r5
 8002294:	028b      	lsls	r3, r1, #10
 8002296:	4621      	mov	r1, r4
 8002298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800229c:	4621      	mov	r1, r4
 800229e:	028a      	lsls	r2, r1, #10
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a6:	2200      	movs	r2, #0
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	61fa      	str	r2, [r7, #28]
 80022ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b0:	f7fd ff9e 	bl	80001f0 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4613      	mov	r3, r2
 80022ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_GetSysClockFreq+0x200>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	3301      	adds	r3, #1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022d6:	e002      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80022da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3750      	adds	r7, #80	; 0x50
 80022e4:	46bd      	mov	sp, r7
 80022e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	00f42400 	.word	0x00f42400
 80022f4:	007a1200 	.word	0x007a1200

080022f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_RCC_GetHCLKFreq+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000000 	.word	0x20000000

08002310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002314:	f7ff fff0 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0a9b      	lsrs	r3, r3, #10
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	080056f8 	.word	0x080056f8

08002338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800233c:	f7ff ffdc 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	0b5b      	lsrs	r3, r3, #13
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4903      	ldr	r1, [pc, #12]	; (800235c <HAL_RCC_GetPCLK2Freq+0x24>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	080056f8 	.word	0x080056f8

08002360 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	220f      	movs	r2, #15
 800236e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_GetClockConfig+0x5c>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_RCC_GetClockConfig+0x5c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_GetClockConfig+0x5c>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_GetClockConfig+0x5c>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_RCC_GetClockConfig+0x60>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 020f 	and.w	r2, r3, #15
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	601a      	str	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40023c00 	.word	0x40023c00

080023c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e025      	b.n	8002424 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fe f963 	bl	80006b8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f001 fd0b 	bl	8003e20 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	461a      	mov	r2, r3
 8002414:	6839      	ldr	r1, [r7, #0]
 8002416:	f001 fd60 	bl	8003eda <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e041      	b.n	80024c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fe28 	bl	80010a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 fa96 	bl	800299c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e04e      	b.n	8002582 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <HAL_TIM_Base_Start_IT+0xc4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d022      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250e:	d01d      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <HAL_TIM_Base_Start_IT+0xc8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d018      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1e      	ldr	r2, [pc, #120]	; (8002598 <HAL_TIM_Base_Start_IT+0xcc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_TIM_Base_Start_IT+0xd0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00e      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d111      	bne.n	8002570 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b06      	cmp	r3, #6
 800255c:	d010      	beq.n	8002580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256e:	e007      	b.n	8002580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40010000 	.word	0x40010000
 8002594:	40000400 	.word	0x40000400
 8002598:	40000800 	.word	0x40000800
 800259c:	40000c00 	.word	0x40000c00
 80025a0:	40010400 	.word	0x40010400
 80025a4:	40014000 	.word	0x40014000
 80025a8:	40001800 	.word	0x40001800

080025ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0202 	mvn.w	r2, #2
 80025d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f9b5 	bl	800295e <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f9a7 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f9b8 	bl	8002972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d122      	bne.n	800265c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b04      	cmp	r3, #4
 8002622:	d11b      	bne.n	800265c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0204 	mvn.w	r2, #4
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f98b 	bl	800295e <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f97d 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f98e 	bl	8002972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b08      	cmp	r3, #8
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0208 	mvn.w	r2, #8
 8002680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2204      	movs	r2, #4
 8002686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f961 	bl	800295e <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f953 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f964 	bl	8002972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0210 	mvn.w	r2, #16
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2208      	movs	r2, #8
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f937 	bl	800295e <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f929 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f93a 	bl	8002972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d10e      	bne.n	8002730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d107      	bne.n	8002730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0201 	mvn.w	r2, #1
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fb6c 	bl	8000e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b80      	cmp	r3, #128	; 0x80
 800273c:	d10e      	bne.n	800275c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d107      	bne.n	800275c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fae0 	bl	8002d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b40      	cmp	r3, #64	; 0x40
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d107      	bne.n	8002788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8ff 	bl	8002986 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b20      	cmp	r3, #32
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0220 	mvn.w	r2, #32
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 faaa 	bl	8002d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_ConfigClockSource+0x1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e0b4      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x186>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002810:	d03e      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0xd4>
 8002812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002816:	f200 8087 	bhi.w	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281e:	f000 8086 	beq.w	800292e <HAL_TIM_ConfigClockSource+0x172>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	d87f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b70      	cmp	r3, #112	; 0x70
 800282a:	d01a      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xa6>
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d87b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b60      	cmp	r3, #96	; 0x60
 8002832:	d050      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d877      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b50      	cmp	r3, #80	; 0x50
 800283a:	d03c      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xfa>
 800283c:	2b50      	cmp	r3, #80	; 0x50
 800283e:	d873      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d058      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d86f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b30      	cmp	r3, #48	; 0x30
 800284a:	d064      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b30      	cmp	r3, #48	; 0x30
 800284e:	d86b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d060      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d867      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b10      	cmp	r3, #16
 800285e:	d05a      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	e062      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f000 f9ad 	bl	8002bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	609a      	str	r2, [r3, #8]
      break;
 800288e:	e04f      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f000 f996 	bl	8002bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028b2:	609a      	str	r2, [r3, #8]
      break;
 80028b4:	e03c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 f90a 	bl	8002adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2150      	movs	r1, #80	; 0x50
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f963 	bl	8002b9a <TIM_ITRx_SetConfig>
      break;
 80028d4:	e02c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 f929 	bl	8002b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2160      	movs	r1, #96	; 0x60
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f953 	bl	8002b9a <TIM_ITRx_SetConfig>
      break;
 80028f4:	e01c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	461a      	mov	r2, r3
 8002904:	f000 f8ea 	bl	8002adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2140      	movs	r1, #64	; 0x40
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f943 	bl	8002b9a <TIM_ITRx_SetConfig>
      break;
 8002914:	e00c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f000 f93a 	bl	8002b9a <TIM_ITRx_SetConfig>
      break;
 8002926:	e003      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e000      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800292e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a40      	ldr	r2, [pc, #256]	; (8002ab0 <TIM_Base_SetConfig+0x114>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d013      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d00f      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3d      	ldr	r2, [pc, #244]	; (8002ab4 <TIM_Base_SetConfig+0x118>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00b      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3c      	ldr	r2, [pc, #240]	; (8002ab8 <TIM_Base_SetConfig+0x11c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a3b      	ldr	r2, [pc, #236]	; (8002abc <TIM_Base_SetConfig+0x120>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d003      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3a      	ldr	r2, [pc, #232]	; (8002ac0 <TIM_Base_SetConfig+0x124>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <TIM_Base_SetConfig+0x114>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02b      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d027      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2c      	ldr	r2, [pc, #176]	; (8002ab4 <TIM_Base_SetConfig+0x118>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d023      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a2b      	ldr	r2, [pc, #172]	; (8002ab8 <TIM_Base_SetConfig+0x11c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01f      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <TIM_Base_SetConfig+0x120>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01b      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <TIM_Base_SetConfig+0x124>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d017      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <TIM_Base_SetConfig+0x128>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <TIM_Base_SetConfig+0x12c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00f      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a26      	ldr	r2, [pc, #152]	; (8002acc <TIM_Base_SetConfig+0x130>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00b      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <TIM_Base_SetConfig+0x134>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <TIM_Base_SetConfig+0x138>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <TIM_Base_SetConfig+0x13c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <TIM_Base_SetConfig+0x114>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d003      	beq.n	8002a94 <TIM_Base_SetConfig+0xf8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <TIM_Base_SetConfig+0x124>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40000800 	.word	0x40000800
 8002abc:	40000c00 	.word	0x40000c00
 8002ac0:	40010400 	.word	0x40010400
 8002ac4:	40014000 	.word	0x40014000
 8002ac8:	40014400 	.word	0x40014400
 8002acc:	40014800 	.word	0x40014800
 8002ad0:	40001800 	.word	0x40001800
 8002ad4:	40001c00 	.word	0x40001c00
 8002ad8:	40002000 	.word	0x40002000

08002adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f023 0201 	bic.w	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f023 030a 	bic.w	r3, r3, #10
 8002b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	621a      	str	r2, [r3, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b087      	sub	sp, #28
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	f023 0210 	bic.w	r2, r3, #16
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	031b      	lsls	r3, r3, #12
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f043 0307 	orr.w	r3, r3, #7
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	021a      	lsls	r2, r3, #8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	609a      	str	r2, [r3, #8]
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e05a      	b.n	8002cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d01d      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10c      	bne.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40000c00 	.word	0x40000c00
 8002cfc:	40010400 	.word	0x40010400
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40001800 	.word	0x40001800

08002d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e03f      	b.n	8002dc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe fa1c 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fddf 	bl	8003938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b08a      	sub	sp, #40	; 0x28
 8002dce:	af02      	add	r7, sp, #8
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d17c      	bne.n	8002ee4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_UART_Transmit+0x2c>
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e075      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_UART_Transmit+0x3e>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e06e      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2221      	movs	r2, #33	; 0x21
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fac1 	bl	80013a4 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e38:	d108      	bne.n	8002e4c <HAL_UART_Transmit+0x82>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d104      	bne.n	8002e4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	e003      	b.n	8002e54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e5c:	e02a      	b.n	8002eb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fb1f 	bl	80034ac <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e036      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	3302      	adds	r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	e007      	b.n	8002ea6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1cf      	bne.n	8002e5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2140      	movs	r1, #64	; 0x40
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 faef 	bl	80034ac <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e006      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d11d      	bne.n	8002f44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_UART_Receive_IT+0x26>
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e016      	b.n	8002f46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_UART_Receive_IT+0x38>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e00f      	b.n	8002f46 <HAL_UART_Receive_IT+0x58>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fb24 	bl	8003588 <UART_Start_Receive_IT>
 8002f40:	4603      	mov	r3, r0
 8002f42:	e000      	b.n	8002f46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0ba      	sub	sp, #232	; 0xe8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x66>
 8002fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fc07 	bl	80037c2 <UART_Receive_IT>
      return;
 8002fb4:	e256      	b.n	8003464 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80de 	beq.w	800317c <HAL_UART_IRQHandler+0x22c>
 8002fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80d1 	beq.w	800317c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xae>
 8002fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_UART_IRQHandler+0xd2>
 800300a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_UART_IRQHandler+0xf6>
 800302e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f043 0204 	orr.w	r2, r3, #4
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d011      	beq.n	8003076 <HAL_UART_IRQHandler+0x126>
 8003052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800305e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0208 	orr.w	r2, r3, #8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 81ed 	beq.w	800345a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_UART_IRQHandler+0x14e>
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fb92 	bl	80037c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <HAL_UART_IRQHandler+0x17a>
 80030c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d04f      	beq.n	800316a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa9a 	bl	8003604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d141      	bne.n	8003162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3314      	adds	r3, #20
 8003106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800310a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800310e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1d9      	bne.n	80030de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	2b00      	cmp	r3, #0
 8003130:	d013      	beq.n	800315a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	4a7d      	ldr	r2, [pc, #500]	; (800332c <HAL_UART_IRQHandler+0x3dc>)
 8003138:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fa8e 	bl	8001660 <HAL_DMA_Abort_IT>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003154:	4610      	mov	r0, r2
 8003156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003158:	e00e      	b.n	8003178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f990 	bl	8003480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	e00a      	b.n	8003178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f98c 	bl	8003480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e006      	b.n	8003178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f988 	bl	8003480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003176:	e170      	b.n	800345a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	bf00      	nop
    return;
 800317a:	e16e      	b.n	800345a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	2b01      	cmp	r3, #1
 8003182:	f040 814a 	bne.w	800341a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8143 	beq.w	800341a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 813c 	beq.w	800341a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	f040 80b4 	bne.w	8003330 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8140 	beq.w	800345e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031e6:	429a      	cmp	r2, r3
 80031e8:	f080 8139 	bcs.w	800345e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	f000 8088 	beq.w	8003312 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800322e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800323a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1d9      	bne.n	8003202 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3314      	adds	r3, #20
 8003254:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800325e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3314      	adds	r3, #20
 800326e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003272:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003276:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800327a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e1      	bne.n	800324e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800329a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3314      	adds	r3, #20
 80032aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e3      	bne.n	800328a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e2:	f023 0310 	bic.w	r3, r3, #16
 80032e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80032f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e3      	bne.n	80032d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe f937 	bl	8001580 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331a:	b29b      	uxth	r3, r3
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	b29b      	uxth	r3, r3
 8003320:	4619      	mov	r1, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8b6 	bl	8003494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003328:	e099      	b.n	800345e <HAL_UART_IRQHandler+0x50e>
 800332a:	bf00      	nop
 800332c:	080036cb 	.word	0x080036cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003338:	b29b      	uxth	r3, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 808b 	beq.w	8003462 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800334c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8086 	beq.w	8003462 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003368:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800336c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800337a:	647a      	str	r2, [r7, #68]	; 0x44
 800337c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e3      	bne.n	8003356 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	623b      	str	r3, [r7, #32]
   return(result);
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3314      	adds	r3, #20
 80033ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033b2:	633a      	str	r2, [r7, #48]	; 0x30
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e3      	bne.n	800338e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	e853 3f00 	ldrex	r3, [r3]
 80033e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0310 	bic.w	r3, r3, #16
 80033ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033f8:	61fa      	str	r2, [r7, #28]
 80033fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	69b9      	ldr	r1, [r7, #24]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	617b      	str	r3, [r7, #20]
   return(result);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e3      	bne.n	80033d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800340c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003410:	4619      	mov	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f83e 	bl	8003494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003418:	e023      	b.n	8003462 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_UART_IRQHandler+0x4ea>
 8003426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f95d 	bl	80036f2 <UART_Transmit_IT>
    return;
 8003438:	e014      	b.n	8003464 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00e      	beq.n	8003464 <HAL_UART_IRQHandler+0x514>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f99d 	bl	8003792 <UART_EndTransmit_IT>
    return;
 8003458:	e004      	b.n	8003464 <HAL_UART_IRQHandler+0x514>
    return;
 800345a:	bf00      	nop
 800345c:	e002      	b.n	8003464 <HAL_UART_IRQHandler+0x514>
      return;
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <HAL_UART_IRQHandler+0x514>
      return;
 8003462:	bf00      	nop
  }
}
 8003464:	37e8      	adds	r7, #232	; 0xe8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop

0800346c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b090      	sub	sp, #64	; 0x40
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034bc:	e050      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d04c      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <UART_WaitOnFlagUntilTimeout+0x30>
 80034cc:	f7fd ff6a 	bl	80013a4 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034d8:	429a      	cmp	r2, r3
 80034da:	d241      	bcs.n	8003560 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034fc:	637a      	str	r2, [r7, #52]	; 0x34
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e5      	bne.n	80034dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3314      	adds	r3, #20
 8003516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	613b      	str	r3, [r7, #16]
   return(result);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3314      	adds	r3, #20
 800352e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003530:	623a      	str	r2, [r7, #32]
 8003532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	69f9      	ldr	r1, [r7, #28]
 8003536:	6a3a      	ldr	r2, [r7, #32]
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	61bb      	str	r3, [r7, #24]
   return(result);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e5      	bne.n	8003510 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e00f      	b.n	8003580 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	429a      	cmp	r2, r3
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	429a      	cmp	r2, r3
 800357c:	d09f      	beq.n	80034be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3740      	adds	r7, #64	; 0x40
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	88fa      	ldrh	r2, [r7, #6]
 80035a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2222      	movs	r2, #34	; 0x22
 80035b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0220 	orr.w	r2, r2, #32
 80035f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b095      	sub	sp, #84	; 0x54
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800362c:	643a      	str	r2, [r7, #64]	; 0x40
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e5      	bne.n	800360c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3314      	adds	r3, #20
 8003646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	2b01      	cmp	r3, #1
 800367a:	d119      	bne.n	80036b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	60bb      	str	r3, [r7, #8]
   return(result);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f023 0310 	bic.w	r3, r3, #16
 8003692:	647b      	str	r3, [r7, #68]	; 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800369c:	61ba      	str	r2, [r7, #24]
 800369e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6979      	ldr	r1, [r7, #20]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	613b      	str	r3, [r7, #16]
   return(result);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e5      	bne.n	800367c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036be:	bf00      	nop
 80036c0:	3754      	adds	r7, #84	; 0x54
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff fecb 	bl	8003480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b21      	cmp	r3, #33	; 0x21
 8003704:	d13e      	bne.n	8003784 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370e:	d114      	bne.n	800373a <UART_Transmit_IT+0x48>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d110      	bne.n	800373a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800372c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	1c9a      	adds	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	621a      	str	r2, [r3, #32]
 8003738:	e008      	b.n	800374c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6211      	str	r1, [r2, #32]
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29b      	uxth	r3, r3
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4619      	mov	r1, r3
 800375a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10f      	bne.n	8003780 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800376e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800377e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fe5a 	bl	800346c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b08c      	sub	sp, #48	; 0x30
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b22      	cmp	r3, #34	; 0x22
 80037d4:	f040 80ab 	bne.w	800392e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e0:	d117      	bne.n	8003812 <UART_Receive_IT+0x50>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d113      	bne.n	8003812 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003800:	b29a      	uxth	r2, r3
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	1c9a      	adds	r2, r3, #2
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
 8003810:	e026      	b.n	8003860 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	d007      	beq.n	8003836 <UART_Receive_IT+0x74>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <UART_Receive_IT+0x82>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e008      	b.n	8003856 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003850:	b2da      	uxtb	r2, r3
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29b      	uxth	r3, r3
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	4619      	mov	r1, r3
 800386e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003870:	2b00      	cmp	r3, #0
 8003872:	d15a      	bne.n	800392a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0220 	bic.w	r2, r2, #32
 8003882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d135      	bne.n	8003920 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f023 0310 	bic.w	r3, r3, #16
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038da:	623a      	str	r2, [r7, #32]
 80038dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	69f9      	ldr	r1, [r7, #28]
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e5      	bne.n	80038ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d10a      	bne.n	8003912 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fdbb 	bl	8003494 <HAL_UARTEx_RxEventCallback>
 800391e:	e002      	b.n	8003926 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fd fa5b 	bl	8000ddc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e002      	b.n	8003930 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800393c:	b0c0      	sub	sp, #256	; 0x100
 800393e:	af00      	add	r7, sp, #0
 8003940:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	68d9      	ldr	r1, [r3, #12]
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	ea40 0301 	orr.w	r3, r0, r1
 8003960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	431a      	orrs	r2, r3
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	431a      	orrs	r2, r3
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003990:	f021 010c 	bic.w	r1, r1, #12
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800399e:	430b      	orrs	r3, r1
 80039a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b2:	6999      	ldr	r1, [r3, #24]
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	ea40 0301 	orr.w	r3, r0, r1
 80039be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4b8f      	ldr	r3, [pc, #572]	; (8003c04 <UART_SetConfig+0x2cc>)
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d005      	beq.n	80039d8 <UART_SetConfig+0xa0>
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b8d      	ldr	r3, [pc, #564]	; (8003c08 <UART_SetConfig+0x2d0>)
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d104      	bne.n	80039e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039d8:	f7fe fcae 	bl	8002338 <HAL_RCC_GetPCLK2Freq>
 80039dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039e0:	e003      	b.n	80039ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039e2:	f7fe fc95 	bl	8002310 <HAL_RCC_GetPCLK1Freq>
 80039e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f4:	f040 810c 	bne.w	8003c10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a0a:	4622      	mov	r2, r4
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	1891      	adds	r1, r2, r2
 8003a10:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a12:	415b      	adcs	r3, r3
 8003a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	eb12 0801 	adds.w	r8, r2, r1
 8003a20:	4629      	mov	r1, r5
 8003a22:	eb43 0901 	adc.w	r9, r3, r1
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a3a:	4690      	mov	r8, r2
 8003a3c:	4699      	mov	r9, r3
 8003a3e:	4623      	mov	r3, r4
 8003a40:	eb18 0303 	adds.w	r3, r8, r3
 8003a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a48:	462b      	mov	r3, r5
 8003a4a:	eb49 0303 	adc.w	r3, r9, r3
 8003a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a66:	460b      	mov	r3, r1
 8003a68:	18db      	adds	r3, r3, r3
 8003a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	eb42 0303 	adc.w	r3, r2, r3
 8003a72:	657b      	str	r3, [r7, #84]	; 0x54
 8003a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a7c:	f7fc fbb8 	bl	80001f0 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4b61      	ldr	r3, [pc, #388]	; (8003c0c <UART_SetConfig+0x2d4>)
 8003a86:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	011c      	lsls	r4, r3, #4
 8003a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	1891      	adds	r1, r2, r2
 8003aa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003aa8:	415b      	adcs	r3, r3
 8003aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	eb43 0b01 	adc.w	fp, r3, r1
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad0:	4692      	mov	sl, r2
 8003ad2:	469b      	mov	fp, r3
 8003ad4:	4643      	mov	r3, r8
 8003ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8003ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003afc:	460b      	mov	r3, r1
 8003afe:	18db      	adds	r3, r3, r3
 8003b00:	643b      	str	r3, [r7, #64]	; 0x40
 8003b02:	4613      	mov	r3, r2
 8003b04:	eb42 0303 	adc.w	r3, r2, r3
 8003b08:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b12:	f7fc fb6d 	bl	80001f0 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <UART_SetConfig+0x2d4>)
 8003b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2264      	movs	r2, #100	; 0x64
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	1acb      	subs	r3, r1, r3
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b32:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <UART_SetConfig+0x2d4>)
 8003b34:	fba3 2302 	umull	r2, r3, r3, r2
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b40:	441c      	add	r4, r3
 8003b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	1891      	adds	r1, r2, r2
 8003b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b5c:	415b      	adcs	r3, r3
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b64:	4641      	mov	r1, r8
 8003b66:	1851      	adds	r1, r2, r1
 8003b68:	6339      	str	r1, [r7, #48]	; 0x30
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	414b      	adcs	r3, r1
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	00cb      	lsls	r3, r1, #3
 8003b80:	4651      	mov	r1, sl
 8003b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b86:	4651      	mov	r1, sl
 8003b88:	00ca      	lsls	r2, r1, #3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4642      	mov	r2, r8
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b98:	464b      	mov	r3, r9
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bb8:	460b      	mov	r3, r1
 8003bba:	18db      	adds	r3, r3, r3
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	eb42 0303 	adc.w	r3, r2, r3
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bce:	f7fc fb0f 	bl	80001f0 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <UART_SetConfig+0x2d4>)
 8003bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	2164      	movs	r1, #100	; 0x64
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	3332      	adds	r3, #50	; 0x32
 8003bea:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <UART_SetConfig+0x2d4>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	f003 0207 	and.w	r2, r3, #7
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4422      	add	r2, r4
 8003bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c00:	e105      	b.n	8003e0e <UART_SetConfig+0x4d6>
 8003c02:	bf00      	nop
 8003c04:	40011000 	.word	0x40011000
 8003c08:	40011400 	.word	0x40011400
 8003c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c14:	2200      	movs	r2, #0
 8003c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c22:	4642      	mov	r2, r8
 8003c24:	464b      	mov	r3, r9
 8003c26:	1891      	adds	r1, r2, r2
 8003c28:	6239      	str	r1, [r7, #32]
 8003c2a:	415b      	adcs	r3, r3
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c32:	4641      	mov	r1, r8
 8003c34:	1854      	adds	r4, r2, r1
 8003c36:	4649      	mov	r1, r9
 8003c38:	eb43 0501 	adc.w	r5, r3, r1
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	00eb      	lsls	r3, r5, #3
 8003c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c4a:	00e2      	lsls	r2, r4, #3
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	461d      	mov	r5, r3
 8003c50:	4643      	mov	r3, r8
 8003c52:	18e3      	adds	r3, r4, r3
 8003c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c58:	464b      	mov	r3, r9
 8003c5a:	eb45 0303 	adc.w	r3, r5, r3
 8003c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c7e:	4629      	mov	r1, r5
 8003c80:	008b      	lsls	r3, r1, #2
 8003c82:	4621      	mov	r1, r4
 8003c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c88:	4621      	mov	r1, r4
 8003c8a:	008a      	lsls	r2, r1, #2
 8003c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c90:	f7fc faae 	bl	80001f0 <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4b60      	ldr	r3, [pc, #384]	; (8003e1c <UART_SetConfig+0x4e4>)
 8003c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	011c      	lsls	r4, r3, #4
 8003ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	1891      	adds	r1, r2, r2
 8003cba:	61b9      	str	r1, [r7, #24]
 8003cbc:	415b      	adcs	r3, r3
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	1851      	adds	r1, r2, r1
 8003cc8:	6139      	str	r1, [r7, #16]
 8003cca:	4649      	mov	r1, r9
 8003ccc:	414b      	adcs	r3, r1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cdc:	4659      	mov	r1, fp
 8003cde:	00cb      	lsls	r3, r1, #3
 8003ce0:	4651      	mov	r1, sl
 8003ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	00ca      	lsls	r2, r1, #3
 8003cea:	4610      	mov	r0, r2
 8003cec:	4619      	mov	r1, r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cf8:	464b      	mov	r3, r9
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	eb42 0303 	adc.w	r3, r2, r3
 8003d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	008b      	lsls	r3, r1, #2
 8003d20:	4641      	mov	r1, r8
 8003d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d26:	4641      	mov	r1, r8
 8003d28:	008a      	lsls	r2, r1, #2
 8003d2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d2e:	f7fc fa5f 	bl	80001f0 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <UART_SetConfig+0x4e4>)
 8003d38:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	2164      	movs	r1, #100	; 0x64
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	3332      	adds	r3, #50	; 0x32
 8003d4a:	4a34      	ldr	r2, [pc, #208]	; (8003e1c <UART_SetConfig+0x4e4>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d56:	441c      	add	r4, r3
 8003d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d60:	677a      	str	r2, [r7, #116]	; 0x74
 8003d62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d66:	4642      	mov	r2, r8
 8003d68:	464b      	mov	r3, r9
 8003d6a:	1891      	adds	r1, r2, r2
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	415b      	adcs	r3, r3
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d76:	4641      	mov	r1, r8
 8003d78:	1851      	adds	r1, r2, r1
 8003d7a:	6039      	str	r1, [r7, #0]
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	414b      	adcs	r3, r1
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d8e:	4659      	mov	r1, fp
 8003d90:	00cb      	lsls	r3, r1, #3
 8003d92:	4651      	mov	r1, sl
 8003d94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d98:	4651      	mov	r1, sl
 8003d9a:	00ca      	lsls	r2, r1, #3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4603      	mov	r3, r0
 8003da2:	4642      	mov	r2, r8
 8003da4:	189b      	adds	r3, r3, r2
 8003da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da8:	464b      	mov	r3, r9
 8003daa:	460a      	mov	r2, r1
 8003dac:	eb42 0303 	adc.w	r3, r2, r3
 8003db0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	663b      	str	r3, [r7, #96]	; 0x60
 8003dbc:	667a      	str	r2, [r7, #100]	; 0x64
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dca:	4649      	mov	r1, r9
 8003dcc:	008b      	lsls	r3, r1, #2
 8003dce:	4641      	mov	r1, r8
 8003dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	008a      	lsls	r2, r1, #2
 8003dd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ddc:	f7fc fa08 	bl	80001f0 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <UART_SetConfig+0x4e4>)
 8003de6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2164      	movs	r1, #100	; 0x64
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	3332      	adds	r3, #50	; 0x32
 8003df8:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <UART_SetConfig+0x4e4>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	f003 020f 	and.w	r2, r3, #15
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4422      	add	r2, r4
 8003e0c:	609a      	str	r2, [r3, #8]
}
 8003e0e:	bf00      	nop
 8003e10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e14:	46bd      	mov	sp, r7
 8003e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1a:	bf00      	nop
 8003e1c:	51eb851f 	.word	0x51eb851f

08003e20 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d123      	bne.n	8003e7a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	6851      	ldr	r1, [r2, #4]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	6892      	ldr	r2, [r2, #8]
 8003e46:	4311      	orrs	r1, r2
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	68d2      	ldr	r2, [r2, #12]
 8003e4c:	4311      	orrs	r1, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	6912      	ldr	r2, [r2, #16]
 8003e52:	4311      	orrs	r1, r2
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	6952      	ldr	r2, [r2, #20]
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	6992      	ldr	r2, [r2, #24]
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	69d2      	ldr	r2, [r2, #28]
 8003e64:	4311      	orrs	r1, r2
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	6a12      	ldr	r2, [r2, #32]
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e70:	430a      	orrs	r2, r1
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	e028      	b.n	8003ecc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	69d9      	ldr	r1, [r3, #28]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4319      	orrs	r1, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	430b      	orrs	r3, r1
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ea0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	6851      	ldr	r1, [r2, #4]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	6892      	ldr	r2, [r2, #8]
 8003eac:	4311      	orrs	r1, r2
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	68d2      	ldr	r2, [r2, #12]
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	6912      	ldr	r2, [r2, #16]
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	6952      	ldr	r2, [r2, #20]
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	6992      	ldr	r2, [r2, #24]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d128      	bne.n	8003f3e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1e59      	subs	r1, r3, #1
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4319      	orrs	r1, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	4319      	orrs	r1, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	031b      	lsls	r3, r3, #12
 8003f16:	4319      	orrs	r1, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	4319      	orrs	r1, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	051b      	lsls	r3, r3, #20
 8003f2a:	4319      	orrs	r1, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	061b      	lsls	r3, r3, #24
 8003f34:	430b      	orrs	r3, r1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	e02f      	b.n	8003f9e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	68d2      	ldr	r2, [r2, #12]
 8003f4e:	3a01      	subs	r2, #1
 8003f50:	0311      	lsls	r1, r2, #12
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	6952      	ldr	r2, [r2, #20]
 8003f56:	3a01      	subs	r2, #1
 8003f58:	0512      	lsls	r2, r2, #20
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	1e59      	subs	r1, r3, #1
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	4319      	orrs	r1, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	4319      	orrs	r1, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	4319      	orrs	r1, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	430b      	orrs	r3, r1
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fbe:	2b84      	cmp	r3, #132	; 0x84
 8003fc0:	d005      	beq.n	8003fce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003fc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	3303      	adds	r3, #3
 8003fcc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fce:	68fb      	ldr	r3, [r7, #12]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003fe0:	f000 faf6 	bl	80045d0 <vTaskStartScheduler>
  
  return osOK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fec:	b089      	sub	sp, #36	; 0x24
 8003fee:	af04      	add	r7, sp, #16
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <osThreadCreate+0x54>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01c      	beq.n	800403e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685c      	ldr	r4, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681d      	ldr	r5, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691e      	ldr	r6, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ffc8 	bl	8003fac <makeFreeRtosPriority>
 800401c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004026:	9202      	str	r2, [sp, #8]
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	9100      	str	r1, [sp, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4632      	mov	r2, r6
 8004030:	4629      	mov	r1, r5
 8004032:	4620      	mov	r0, r4
 8004034:	f000 f8ed 	bl	8004212 <xTaskCreateStatic>
 8004038:	4603      	mov	r3, r0
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e01c      	b.n	8004078 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685c      	ldr	r4, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800404a:	b29e      	uxth	r6, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ffaa 	bl	8003fac <makeFreeRtosPriority>
 8004058:	4602      	mov	r2, r0
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	9200      	str	r2, [sp, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	4632      	mov	r2, r6
 8004066:	4629      	mov	r1, r5
 8004068:	4620      	mov	r0, r4
 800406a:	f000 f92f 	bl	80042cc <xTaskCreate>
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d001      	beq.n	8004078 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004078:	68fb      	ldr	r3, [r7, #12]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004082 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <osDelay+0x16>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	e000      	b.n	800409a <osDelay+0x18>
 8004098:	2301      	movs	r3, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fa64 	bl	8004568 <vTaskDelay>
  
  return osOK;
 80040a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f103 0208 	add.w	r2, r3, #8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f04f 32ff 	mov.w	r2, #4294967295
 80040c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f103 0208 	add.w	r2, r3, #8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f103 0208 	add.w	r2, r3, #8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d103      	bne.n	800416c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e00c      	b.n	8004186 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3308      	adds	r3, #8
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e002      	b.n	800417a <vListInsert+0x2e>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	d2f6      	bcs.n	8004174 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	601a      	str	r2, [r3, #0]
}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6852      	ldr	r2, [r2, #4]
 80041de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d103      	bne.n	80041f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	1e5a      	subs	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004212:	b580      	push	{r7, lr}
 8004214:	b08e      	sub	sp, #56	; 0x38
 8004216:	af04      	add	r7, sp, #16
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <xTaskCreateStatic+0x46>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	61fb      	str	r3, [r7, #28]
}
 8004254:	bf00      	nop
 8004256:	e7fe      	b.n	8004256 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004258:	23b4      	movs	r3, #180	; 0xb4
 800425a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2bb4      	cmp	r3, #180	; 0xb4
 8004260:	d00a      	beq.n	8004278 <xTaskCreateStatic+0x66>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	61bb      	str	r3, [r7, #24]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004278:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01e      	beq.n	80042be <xTaskCreateStatic+0xac>
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01b      	beq.n	80042be <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800428e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	2202      	movs	r2, #2
 8004294:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004298:	2300      	movs	r3, #0
 800429a:	9303      	str	r3, [sp, #12]
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f851 	bl	8004358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042b8:	f000 f8ec 	bl	8004494 <prvAddNewTaskToReadyList>
 80042bc:	e001      	b.n	80042c2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042c2:	697b      	ldr	r3, [r7, #20]
	}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3728      	adds	r7, #40	; 0x28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	; 0x30
 80042d0:	af04      	add	r7, sp, #16
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fef1 	bl	80050c8 <pvPortMalloc>
 80042e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042ee:	20b4      	movs	r0, #180	; 0xb4
 80042f0:	f000 feea 	bl	80050c8 <pvPortMalloc>
 80042f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
 8004302:	e005      	b.n	8004310 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004304:	6978      	ldr	r0, [r7, #20]
 8004306:	f000 ffab 	bl	8005260 <vPortFree>
 800430a:	e001      	b.n	8004310 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d017      	beq.n	8004346 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	2300      	movs	r3, #0
 8004322:	9303      	str	r3, [sp, #12]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	9302      	str	r3, [sp, #8]
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f80f 	bl	8004358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800433a:	69f8      	ldr	r0, [r7, #28]
 800433c:	f000 f8aa 	bl	8004494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004340:	2301      	movs	r3, #1
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	e002      	b.n	800434c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800434c:	69bb      	ldr	r3, [r7, #24]
	}
 800434e:	4618      	mov	r0, r3
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004370:	3b01      	subs	r3, #1
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	617b      	str	r3, [r7, #20]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01f      	beq.n	80043e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	e012      	b.n	80043d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	7819      	ldrb	r1, [r3, #0]
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	3334      	adds	r3, #52	; 0x34
 80043bc:	460a      	mov	r2, r1
 80043be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d006      	beq.n	80043da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	3301      	adds	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b0f      	cmp	r3, #15
 80043d6:	d9e9      	bls.n	80043ac <prvInitialiseNewTask+0x54>
 80043d8:	e000      	b.n	80043dc <prvInitialiseNewTask+0x84>
			{
				break;
 80043da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e4:	e003      	b.n	80043ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	2b06      	cmp	r3, #6
 80043f2:	d901      	bls.n	80043f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043f4:	2306      	movs	r3, #6
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004402:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	2200      	movs	r2, #0
 8004408:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	3304      	adds	r3, #4
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fe6b 	bl	80040ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	3318      	adds	r3, #24
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fe66 	bl	80040ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004422:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	f1c3 0207 	rsb	r2, r3, #7
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004432:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	2200      	movs	r2, #0
 8004440:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	334c      	adds	r3, #76	; 0x4c
 8004448:	2260      	movs	r2, #96	; 0x60
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f001 f84b 	bl	80054e8 <memset>
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	4a0c      	ldr	r2, [pc, #48]	; (8004488 <prvInitialiseNewTask+0x130>)
 8004456:	651a      	str	r2, [r3, #80]	; 0x50
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	4a0c      	ldr	r2, [pc, #48]	; (800448c <prvInitialiseNewTask+0x134>)
 800445c:	655a      	str	r2, [r3, #84]	; 0x54
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <prvInitialiseNewTask+0x138>)
 8004462:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	69b8      	ldr	r0, [r7, #24]
 800446a:	f000 fc1f 	bl	8004cac <pxPortInitialiseStack>
 800446e:	4602      	mov	r2, r0
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004480:	bf00      	nop
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	08005720 	.word	0x08005720
 800448c:	08005740 	.word	0x08005740
 8004490:	08005700 	.word	0x08005700

08004494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800449c:	f000 fd32 	bl	8004f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044a0:	4b2a      	ldr	r3, [pc, #168]	; (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	4a29      	ldr	r2, [pc, #164]	; (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044aa:	4b29      	ldr	r3, [pc, #164]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044b2:	4a27      	ldr	r2, [pc, #156]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d110      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044c0:	f000 facc 	bl	8004a5c <prvInitialiseTaskLists>
 80044c4:	e00d      	b.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044c6:	4b23      	ldr	r3, [pc, #140]	; (8004554 <prvAddNewTaskToReadyList+0xc0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d802      	bhi.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044dc:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	4a18      	ldr	r2, [pc, #96]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4a15      	ldr	r2, [pc, #84]	; (8004560 <prvAddNewTaskToReadyList+0xcc>)
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff fdf5 	bl	8004104 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800451a:	f000 fd23 	bl	8004f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <prvAddNewTaskToReadyList+0xc0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00e      	beq.n	8004544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	429a      	cmp	r2, r3
 8004532:	d207      	bcs.n	8004544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <prvAddNewTaskToReadyList+0xd0>)
 8004536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200005dc 	.word	0x200005dc
 8004550:	200004dc 	.word	0x200004dc
 8004554:	200005e8 	.word	0x200005e8
 8004558:	200005f8 	.word	0x200005f8
 800455c:	200005e4 	.word	0x200005e4
 8004560:	200004e0 	.word	0x200004e0
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d017      	beq.n	80045aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <vTaskDelay+0x60>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <vTaskDelay+0x30>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60bb      	str	r3, [r7, #8]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004598:	f000 f884 	bl	80046a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800459c:	2100      	movs	r1, #0
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fb1e 	bl	8004be0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045a4:	f000 f88c 	bl	80046c0 <xTaskResumeAll>
 80045a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d107      	bne.n	80045c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <vTaskDelay+0x64>)
 80045b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000604 	.word	0x20000604
 80045cc:	e000ed04 	.word	0xe000ed04

080045d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045de:	463a      	mov	r2, r7
 80045e0:	1d39      	adds	r1, r7, #4
 80045e2:	f107 0308 	add.w	r3, r7, #8
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fc f870 	bl	80006cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	9202      	str	r2, [sp, #8]
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	2300      	movs	r3, #0
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2300      	movs	r3, #0
 80045fc:	460a      	mov	r2, r1
 80045fe:	4921      	ldr	r1, [pc, #132]	; (8004684 <vTaskStartScheduler+0xb4>)
 8004600:	4821      	ldr	r0, [pc, #132]	; (8004688 <vTaskStartScheduler+0xb8>)
 8004602:	f7ff fe06 	bl	8004212 <xTaskCreateStatic>
 8004606:	4603      	mov	r3, r0
 8004608:	4a20      	ldr	r2, [pc, #128]	; (800468c <vTaskStartScheduler+0xbc>)
 800460a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800460c:	4b1f      	ldr	r3, [pc, #124]	; (800468c <vTaskStartScheduler+0xbc>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004614:	2301      	movs	r3, #1
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e001      	b.n	800461e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d11b      	bne.n	800465c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	613b      	str	r3, [r7, #16]
}
 8004636:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004638:	4b15      	ldr	r3, [pc, #84]	; (8004690 <vTaskStartScheduler+0xc0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	334c      	adds	r3, #76	; 0x4c
 800463e:	4a15      	ldr	r2, [pc, #84]	; (8004694 <vTaskStartScheduler+0xc4>)
 8004640:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004642:	4b15      	ldr	r3, [pc, #84]	; (8004698 <vTaskStartScheduler+0xc8>)
 8004644:	f04f 32ff 	mov.w	r2, #4294967295
 8004648:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800464a:	4b14      	ldr	r3, [pc, #80]	; (800469c <vTaskStartScheduler+0xcc>)
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <vTaskStartScheduler+0xd0>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004656:	f000 fbb3 	bl	8004dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800465a:	e00e      	b.n	800467a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d10a      	bne.n	800467a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	60fb      	str	r3, [r7, #12]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <vTaskStartScheduler+0xa8>
}
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	080056e0 	.word	0x080056e0
 8004688:	08004a2d 	.word	0x08004a2d
 800468c:	20000600 	.word	0x20000600
 8004690:	200004dc 	.word	0x200004dc
 8004694:	20000010 	.word	0x20000010
 8004698:	200005fc 	.word	0x200005fc
 800469c:	200005e8 	.word	0x200005e8
 80046a0:	200005e0 	.word	0x200005e0

080046a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <vTaskSuspendAll+0x18>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3301      	adds	r3, #1
 80046ae:	4a03      	ldr	r2, [pc, #12]	; (80046bc <vTaskSuspendAll+0x18>)
 80046b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046b2:	bf00      	nop
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	20000604 	.word	0x20000604

080046c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046ce:	4b41      	ldr	r3, [pc, #260]	; (80047d4 <xTaskResumeAll+0x114>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <xTaskResumeAll+0x2c>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	603b      	str	r3, [r7, #0]
}
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046ec:	f000 fc0a 	bl	8004f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046f0:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <xTaskResumeAll+0x114>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	4a37      	ldr	r2, [pc, #220]	; (80047d4 <xTaskResumeAll+0x114>)
 80046f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046fa:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <xTaskResumeAll+0x114>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d161      	bne.n	80047c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004702:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <xTaskResumeAll+0x118>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d05d      	beq.n	80047c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800470a:	e02e      	b.n	800476a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470c:	4b33      	ldr	r3, [pc, #204]	; (80047dc <xTaskResumeAll+0x11c>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3318      	adds	r3, #24
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fd50 	bl	80041be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fd4b 	bl	80041be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	2201      	movs	r2, #1
 800472e:	409a      	lsls	r2, r3
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <xTaskResumeAll+0x120>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4313      	orrs	r3, r2
 8004736:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <xTaskResumeAll+0x120>)
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <xTaskResumeAll+0x124>)
 8004748:	441a      	add	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7ff fcd7 	bl	8004104 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475a:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <xTaskResumeAll+0x128>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	429a      	cmp	r2, r3
 8004762:	d302      	bcc.n	800476a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <xTaskResumeAll+0x12c>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800476a:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <xTaskResumeAll+0x11c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1cc      	bne.n	800470c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004778:	f000 fa12 	bl	8004ba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800477c:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <xTaskResumeAll+0x130>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d010      	beq.n	80047aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004788:	f000 f836 	bl	80047f8 <xTaskIncrementTick>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004792:	4b16      	ldr	r3, [pc, #88]	; (80047ec <xTaskResumeAll+0x12c>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f1      	bne.n	8004788 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80047a4:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <xTaskResumeAll+0x130>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <xTaskResumeAll+0x12c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <xTaskResumeAll+0x134>)
 80047b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047c6:	f000 fbcd 	bl	8004f64 <vPortExitCritical>

	return xAlreadyYielded;
 80047ca:	68bb      	ldr	r3, [r7, #8]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000604 	.word	0x20000604
 80047d8:	200005dc 	.word	0x200005dc
 80047dc:	2000059c 	.word	0x2000059c
 80047e0:	200005e4 	.word	0x200005e4
 80047e4:	200004e0 	.word	0x200004e0
 80047e8:	200004dc 	.word	0x200004dc
 80047ec:	200005f0 	.word	0x200005f0
 80047f0:	200005ec 	.word	0x200005ec
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004802:	4b4e      	ldr	r3, [pc, #312]	; (800493c <xTaskIncrementTick+0x144>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 808e 	bne.w	8004928 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800480c:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <xTaskIncrementTick+0x148>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004814:	4a4a      	ldr	r2, [pc, #296]	; (8004940 <xTaskIncrementTick+0x148>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d120      	bne.n	8004862 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004820:	4b48      	ldr	r3, [pc, #288]	; (8004944 <xTaskIncrementTick+0x14c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <xTaskIncrementTick+0x48>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	603b      	str	r3, [r7, #0]
}
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <xTaskIncrementTick+0x46>
 8004840:	4b40      	ldr	r3, [pc, #256]	; (8004944 <xTaskIncrementTick+0x14c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	4b40      	ldr	r3, [pc, #256]	; (8004948 <xTaskIncrementTick+0x150>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3e      	ldr	r2, [pc, #248]	; (8004944 <xTaskIncrementTick+0x14c>)
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4a3e      	ldr	r2, [pc, #248]	; (8004948 <xTaskIncrementTick+0x150>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b3d      	ldr	r3, [pc, #244]	; (800494c <xTaskIncrementTick+0x154>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	4a3c      	ldr	r2, [pc, #240]	; (800494c <xTaskIncrementTick+0x154>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	f000 f99f 	bl	8004ba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004862:	4b3b      	ldr	r3, [pc, #236]	; (8004950 <xTaskIncrementTick+0x158>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	429a      	cmp	r2, r3
 800486a:	d348      	bcc.n	80048fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486c:	4b35      	ldr	r3, [pc, #212]	; (8004944 <xTaskIncrementTick+0x14c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <xTaskIncrementTick+0x158>)
 8004878:	f04f 32ff 	mov.w	r2, #4294967295
 800487c:	601a      	str	r2, [r3, #0]
					break;
 800487e:	e03e      	b.n	80048fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004880:	4b30      	ldr	r3, [pc, #192]	; (8004944 <xTaskIncrementTick+0x14c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d203      	bcs.n	80048a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004898:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <xTaskIncrementTick+0x158>)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800489e:	e02e      	b.n	80048fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff fc8a 	bl	80041be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d004      	beq.n	80048bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3318      	adds	r3, #24
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fc81 	bl	80041be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2201      	movs	r2, #1
 80048c2:	409a      	lsls	r2, r3
 80048c4:	4b23      	ldr	r3, [pc, #140]	; (8004954 <xTaskIncrementTick+0x15c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	4a22      	ldr	r2, [pc, #136]	; (8004954 <xTaskIncrementTick+0x15c>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4a1f      	ldr	r2, [pc, #124]	; (8004958 <xTaskIncrementTick+0x160>)
 80048dc:	441a      	add	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7ff fc0d 	bl	8004104 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	4b1b      	ldr	r3, [pc, #108]	; (800495c <xTaskIncrementTick+0x164>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d3b9      	bcc.n	800486c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048fc:	e7b6      	b.n	800486c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <xTaskIncrementTick+0x164>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4914      	ldr	r1, [pc, #80]	; (8004958 <xTaskIncrementTick+0x160>)
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d901      	bls.n	800491a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004916:	2301      	movs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <xTaskIncrementTick+0x168>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004922:	2301      	movs	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e004      	b.n	8004932 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004928:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <xTaskIncrementTick+0x16c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <xTaskIncrementTick+0x16c>)
 8004930:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004932:	697b      	ldr	r3, [r7, #20]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000604 	.word	0x20000604
 8004940:	200005e0 	.word	0x200005e0
 8004944:	20000594 	.word	0x20000594
 8004948:	20000598 	.word	0x20000598
 800494c:	200005f4 	.word	0x200005f4
 8004950:	200005fc 	.word	0x200005fc
 8004954:	200005e4 	.word	0x200005e4
 8004958:	200004e0 	.word	0x200004e0
 800495c:	200004dc 	.word	0x200004dc
 8004960:	200005f0 	.word	0x200005f0
 8004964:	200005ec 	.word	0x200005ec

08004968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800496e:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <vTaskSwitchContext+0xac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004976:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <vTaskSwitchContext+0xb0>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800497c:	e044      	b.n	8004a08 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800497e:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <vTaskSwitchContext+0xb0>)
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004984:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <vTaskSwitchContext+0xb4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	fab3 f383 	clz	r3, r3
 8004990:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004992:	7afb      	ldrb	r3, [r7, #11]
 8004994:	f1c3 031f 	rsb	r3, r3, #31
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	4921      	ldr	r1, [pc, #132]	; (8004a20 <vTaskSwitchContext+0xb8>)
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
}
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <vTaskSwitchContext+0x5a>
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <vTaskSwitchContext+0xb8>)
 80049d0:	4413      	add	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3308      	adds	r3, #8
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d104      	bne.n	80049f4 <vTaskSwitchContext+0x8c>
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <vTaskSwitchContext+0xbc>)
 80049fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <vTaskSwitchContext+0xbc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	334c      	adds	r3, #76	; 0x4c
 8004a04:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <vTaskSwitchContext+0xc0>)
 8004a06:	6013      	str	r3, [r2, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	20000604 	.word	0x20000604
 8004a18:	200005f0 	.word	0x200005f0
 8004a1c:	200005e4 	.word	0x200005e4
 8004a20:	200004e0 	.word	0x200004e0
 8004a24:	200004dc 	.word	0x200004dc
 8004a28:	20000010 	.word	0x20000010

08004a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a34:	f000 f852 	bl	8004adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <prvIdleTask+0x28>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d9f9      	bls.n	8004a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <prvIdleTask+0x2c>)
 8004a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a50:	e7f0      	b.n	8004a34 <prvIdleTask+0x8>
 8004a52:	bf00      	nop
 8004a54:	200004e0 	.word	0x200004e0
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	e00c      	b.n	8004a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4a12      	ldr	r2, [pc, #72]	; (8004abc <prvInitialiseTaskLists+0x60>)
 8004a74:	4413      	add	r3, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fb17 	bl	80040aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d9ef      	bls.n	8004a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a88:	480d      	ldr	r0, [pc, #52]	; (8004ac0 <prvInitialiseTaskLists+0x64>)
 8004a8a:	f7ff fb0e 	bl	80040aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a8e:	480d      	ldr	r0, [pc, #52]	; (8004ac4 <prvInitialiseTaskLists+0x68>)
 8004a90:	f7ff fb0b 	bl	80040aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a94:	480c      	ldr	r0, [pc, #48]	; (8004ac8 <prvInitialiseTaskLists+0x6c>)
 8004a96:	f7ff fb08 	bl	80040aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a9a:	480c      	ldr	r0, [pc, #48]	; (8004acc <prvInitialiseTaskLists+0x70>)
 8004a9c:	f7ff fb05 	bl	80040aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004aa0:	480b      	ldr	r0, [pc, #44]	; (8004ad0 <prvInitialiseTaskLists+0x74>)
 8004aa2:	f7ff fb02 	bl	80040aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <prvInitialiseTaskLists+0x78>)
 8004aa8:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <prvInitialiseTaskLists+0x64>)
 8004aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <prvInitialiseTaskLists+0x7c>)
 8004aae:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <prvInitialiseTaskLists+0x68>)
 8004ab0:	601a      	str	r2, [r3, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200004e0 	.word	0x200004e0
 8004ac0:	2000056c 	.word	0x2000056c
 8004ac4:	20000580 	.word	0x20000580
 8004ac8:	2000059c 	.word	0x2000059c
 8004acc:	200005b0 	.word	0x200005b0
 8004ad0:	200005c8 	.word	0x200005c8
 8004ad4:	20000594 	.word	0x20000594
 8004ad8:	20000598 	.word	0x20000598

08004adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ae2:	e019      	b.n	8004b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ae4:	f000 fa0e 	bl	8004f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <prvCheckTasksWaitingTermination+0x50>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fb62 	bl	80041be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004afa:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <prvCheckTasksWaitingTermination+0x54>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <prvCheckTasksWaitingTermination+0x54>)
 8004b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <prvCheckTasksWaitingTermination+0x58>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <prvCheckTasksWaitingTermination+0x58>)
 8004b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b0e:	f000 fa29 	bl	8004f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f810 	bl	8004b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <prvCheckTasksWaitingTermination+0x58>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e1      	bne.n	8004ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	200005b0 	.word	0x200005b0
 8004b30:	200005dc 	.word	0x200005dc
 8004b34:	200005c4 	.word	0x200005c4

08004b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	334c      	adds	r3, #76	; 0x4c
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fce5 	bl	8005514 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d108      	bne.n	8004b66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fb81 	bl	8005260 <vPortFree>
				vPortFree( pxTCB );
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fb7e 	bl	8005260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b64:	e018      	b.n	8004b98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d103      	bne.n	8004b78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fb75 	bl	8005260 <vPortFree>
	}
 8004b76:	e00f      	b.n	8004b98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d00a      	beq.n	8004b98 <prvDeleteTCB+0x60>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	60fb      	str	r3, [r7, #12]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <prvDeleteTCB+0x5e>
	}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <prvResetNextTaskUnblockTime+0x38>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d104      	bne.n	8004bba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <prvResetNextTaskUnblockTime+0x3c>)
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bb8:	e008      	b.n	8004bcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <prvResetNextTaskUnblockTime+0x38>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4a04      	ldr	r2, [pc, #16]	; (8004bdc <prvResetNextTaskUnblockTime+0x3c>)
 8004bca:	6013      	str	r3, [r2, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	20000594 	.word	0x20000594
 8004bdc:	200005fc 	.word	0x200005fc

08004be0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bea:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bf0:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff fae1 	bl	80041be <uxListRemove>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	2201      	movs	r2, #1
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4013      	ands	r3, r2
 8004c16:	4a20      	ldr	r2, [pc, #128]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d10a      	bne.n	8004c38 <prvAddCurrentTaskToDelayedList+0x58>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4619      	mov	r1, r3
 8004c30:	481a      	ldr	r0, [pc, #104]	; (8004c9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c32:	f7ff fa67 	bl	8004104 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c36:	e026      	b.n	8004c86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c40:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d209      	bcs.n	8004c64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c50:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7ff fa75 	bl	800414c <vListInsert>
}
 8004c62:	e010      	b.n	8004c86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f7ff fa6b 	bl	800414c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c76:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d202      	bcs.n	8004c86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c80:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6013      	str	r3, [r2, #0]
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	200005e0 	.word	0x200005e0
 8004c94:	200004dc 	.word	0x200004dc
 8004c98:	200005e4 	.word	0x200005e4
 8004c9c:	200005c8 	.word	0x200005c8
 8004ca0:	20000598 	.word	0x20000598
 8004ca4:	20000594 	.word	0x20000594
 8004ca8:	200005fc 	.word	0x200005fc

08004cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b04      	subs	r3, #4
 8004cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3b04      	subs	r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f023 0201 	bic.w	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3b04      	subs	r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <pxPortInitialiseStack+0x64>)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3b14      	subs	r3, #20
 8004ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f06f 0202 	mvn.w	r2, #2
 8004cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3b20      	subs	r3, #32
 8004d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d02:	68fb      	ldr	r3, [r7, #12]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	08004d15 	.word	0x08004d15

08004d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <prvTaskExitError+0x54>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d00a      	beq.n	8004d3e <prvTaskExitError+0x2a>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60fb      	str	r3, [r7, #12]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <prvTaskExitError+0x28>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60bb      	str	r3, [r7, #8]
}
 8004d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d52:	bf00      	nop
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0fc      	beq.n	8004d54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	2000000c 	.word	0x2000000c
 8004d6c:	00000000 	.word	0x00000000

08004d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <pxCurrentTCBConst2>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	f380 8809 	msr	PSP, r0
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	4770      	bx	lr
 8004d8c:	f3af 8000 	nop.w

08004d90 <pxCurrentTCBConst2>:
 8004d90:	200004dc 	.word	0x200004dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d98:	4808      	ldr	r0, [pc, #32]	; (8004dbc <prvPortStartFirstTask+0x24>)
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f380 8808 	msr	MSP, r0
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8814 	msr	CONTROL, r0
 8004daa:	b662      	cpsie	i
 8004dac:	b661      	cpsie	f
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	df00      	svc	0
 8004db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dba:	bf00      	nop
 8004dbc:	e000ed08 	.word	0xe000ed08

08004dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dc6:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <xPortStartScheduler+0x120>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a46      	ldr	r2, [pc, #280]	; (8004ee4 <xPortStartScheduler+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10a      	bne.n	8004de6 <xPortStartScheduler+0x26>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	613b      	str	r3, [r7, #16]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004de6:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <xPortStartScheduler+0x120>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3f      	ldr	r2, [pc, #252]	; (8004ee8 <xPortStartScheduler+0x128>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10a      	bne.n	8004e06 <xPortStartScheduler+0x46>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e06:	4b39      	ldr	r3, [pc, #228]	; (8004eec <xPortStartScheduler+0x12c>)
 8004e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <xPortStartScheduler+0x130>)
 8004e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e2e:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e30:	2207      	movs	r2, #7
 8004e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e34:	e009      	b.n	8004e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e36:	4b2f      	ldr	r3, [pc, #188]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b80      	cmp	r3, #128	; 0x80
 8004e54:	d0ef      	beq.n	8004e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e56:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1c3 0307 	rsb	r3, r3, #7
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d00a      	beq.n	8004e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60bb      	str	r3, [r7, #8]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e82:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <xPortStartScheduler+0x134>)
 8004e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <xPortStartScheduler+0x138>)
 8004ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eae:	f000 f8dd 	bl	800506c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <xPortStartScheduler+0x13c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004eb8:	f000 f8fc 	bl	80050b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <xPortStartScheduler+0x140>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <xPortStartScheduler+0x140>)
 8004ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ec8:	f7ff ff66 	bl	8004d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ecc:	f7ff fd4c 	bl	8004968 <vTaskSwitchContext>
	prvTaskExitError();
 8004ed0:	f7ff ff20 	bl	8004d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	e000ed00 	.word	0xe000ed00
 8004ee4:	410fc271 	.word	0x410fc271
 8004ee8:	410fc270 	.word	0x410fc270
 8004eec:	e000e400 	.word	0xe000e400
 8004ef0:	20000608 	.word	0x20000608
 8004ef4:	2000060c 	.word	0x2000060c
 8004ef8:	e000ed20 	.word	0xe000ed20
 8004efc:	2000000c 	.word	0x2000000c
 8004f00:	e000ef34 	.word	0xe000ef34

08004f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <vPortEnterCritical+0x58>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10f      	bne.n	8004f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <vPortEnterCritical+0x5c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	603b      	str	r3, [r7, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <vPortEnterCritical+0x4a>
	}
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	2000000c 	.word	0x2000000c
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <vPortExitCritical+0x24>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	607b      	str	r3, [r7, #4]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f92:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <vPortExitCritical+0x50>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d105      	bne.n	8004fa6 <vPortExitCritical+0x42>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	2000000c 	.word	0x2000000c
	...

08004fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fc0:	f3ef 8009 	mrs	r0, PSP
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <pxCurrentTCBConst>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	f01e 0f10 	tst.w	lr, #16
 8004fd0:	bf08      	it	eq
 8004fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	6010      	str	r0, [r2, #0]
 8004fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fe4:	f380 8811 	msr	BASEPRI, r0
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f7ff fcba 	bl	8004968 <vTaskSwitchContext>
 8004ff4:	f04f 0000 	mov.w	r0, #0
 8004ff8:	f380 8811 	msr	BASEPRI, r0
 8004ffc:	bc09      	pop	{r0, r3}
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	6808      	ldr	r0, [r1, #0]
 8005002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005006:	f01e 0f10 	tst.w	lr, #16
 800500a:	bf08      	it	eq
 800500c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005010:	f380 8809 	msr	PSP, r0
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst>:
 8005020:	200004dc 	.word	0x200004dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	607b      	str	r3, [r7, #4]
}
 8005040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005042:	f7ff fbd9 	bl	80047f8 <xTaskIncrementTick>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <SysTick_Handler+0x40>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f383 8811 	msr	BASEPRI, r3
}
 800505e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <vPortSetupTimerInterrupt+0x38>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <vPortSetupTimerInterrupt+0x3c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <vPortSetupTimerInterrupt+0x40>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <vPortSetupTimerInterrupt+0x44>)
 800508a:	3b01      	subs	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005090:	2207      	movs	r2, #7
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	e000e010 	.word	0xe000e010
 80050a4:	e000e018 	.word	0xe000e018
 80050a8:	20000000 	.word	0x20000000
 80050ac:	10624dd3 	.word	0x10624dd3
 80050b0:	e000e014 	.word	0xe000e014

080050b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050c4 <vPortEnableVFP+0x10>
 80050b8:	6801      	ldr	r1, [r0, #0]
 80050ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050be:	6001      	str	r1, [r0, #0]
 80050c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050c2:	bf00      	nop
 80050c4:	e000ed88 	.word	0xe000ed88

080050c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050d4:	f7ff fae6 	bl	80046a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050d8:	4b5b      	ldr	r3, [pc, #364]	; (8005248 <pvPortMalloc+0x180>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050e0:	f000 f920 	bl	8005324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <pvPortMalloc+0x184>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 8093 	bne.w	8005218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01d      	beq.n	8005134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050f8:	2208      	movs	r2, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d014      	beq.n	8005134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f023 0307 	bic.w	r3, r3, #7
 8005110:	3308      	adds	r3, #8
 8005112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <pvPortMalloc+0x6c>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	617b      	str	r3, [r7, #20]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d06e      	beq.n	8005218 <pvPortMalloc+0x150>
 800513a:	4b45      	ldr	r3, [pc, #276]	; (8005250 <pvPortMalloc+0x188>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d869      	bhi.n	8005218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005144:	4b43      	ldr	r3, [pc, #268]	; (8005254 <pvPortMalloc+0x18c>)
 8005146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005148:	4b42      	ldr	r3, [pc, #264]	; (8005254 <pvPortMalloc+0x18c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800514e:	e004      	b.n	800515a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d903      	bls.n	800516c <pvPortMalloc+0xa4>
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f1      	bne.n	8005150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800516c:	4b36      	ldr	r3, [pc, #216]	; (8005248 <pvPortMalloc+0x180>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005172:	429a      	cmp	r2, r3
 8005174:	d050      	beq.n	8005218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2208      	movs	r2, #8
 800517c:	4413      	add	r3, r2
 800517e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	2308      	movs	r3, #8
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	429a      	cmp	r2, r3
 8005196:	d91f      	bls.n	80051d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <pvPortMalloc+0xf8>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	613b      	str	r3, [r7, #16]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	1ad2      	subs	r2, r2, r3
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051d2:	69b8      	ldr	r0, [r7, #24]
 80051d4:	f000 f908 	bl	80053e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051d8:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <pvPortMalloc+0x188>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	4a1b      	ldr	r2, [pc, #108]	; (8005250 <pvPortMalloc+0x188>)
 80051e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <pvPortMalloc+0x188>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <pvPortMalloc+0x190>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d203      	bcs.n	80051fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <pvPortMalloc+0x188>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a18      	ldr	r2, [pc, #96]	; (8005258 <pvPortMalloc+0x190>)
 80051f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <pvPortMalloc+0x184>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	431a      	orrs	r2, r3
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <pvPortMalloc+0x194>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a11      	ldr	r2, [pc, #68]	; (800525c <pvPortMalloc+0x194>)
 8005216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005218:	f7ff fa52 	bl	80046c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <pvPortMalloc+0x174>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60fb      	str	r3, [r7, #12]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <pvPortMalloc+0x172>
	return pvReturn;
 800523c:	69fb      	ldr	r3, [r7, #28]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3728      	adds	r7, #40	; 0x28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20004218 	.word	0x20004218
 800524c:	2000422c 	.word	0x2000422c
 8005250:	2000421c 	.word	0x2000421c
 8005254:	20004210 	.word	0x20004210
 8005258:	20004220 	.word	0x20004220
 800525c:	20004224 	.word	0x20004224

08005260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d04d      	beq.n	800530e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005272:	2308      	movs	r3, #8
 8005274:	425b      	negs	r3, r3
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4413      	add	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <vPortFree+0xb8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <vPortFree+0x44>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	60fb      	str	r3, [r7, #12]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <vPortFree+0x62>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	60bb      	str	r3, [r7, #8]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <vPortFree+0xb8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01e      	beq.n	800530e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d11a      	bne.n	800530e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <vPortFree+0xb8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	401a      	ands	r2, r3
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052e8:	f7ff f9dc 	bl	80046a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <vPortFree+0xbc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4413      	add	r3, r2
 80052f6:	4a09      	ldr	r2, [pc, #36]	; (800531c <vPortFree+0xbc>)
 80052f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052fa:	6938      	ldr	r0, [r7, #16]
 80052fc:	f000 f874 	bl	80053e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <vPortFree+0xc0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	4a06      	ldr	r2, [pc, #24]	; (8005320 <vPortFree+0xc0>)
 8005308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800530a:	f7ff f9d9 	bl	80046c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800530e:	bf00      	nop
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2000422c 	.word	0x2000422c
 800531c:	2000421c 	.word	0x2000421c
 8005320:	20004228 	.word	0x20004228

08005324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800532a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800532e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <prvHeapInit+0xac>)
 8005332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3307      	adds	r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <prvHeapInit+0xac>)
 8005354:	4413      	add	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800535c:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <prvHeapInit+0xb0>)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005362:	4b1c      	ldr	r3, [pc, #112]	; (80053d4 <prvHeapInit+0xb0>)
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4413      	add	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005370:	2208      	movs	r2, #8
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0307 	bic.w	r3, r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <prvHeapInit+0xb4>)
 8005384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <prvHeapInit+0xb4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <prvHeapInit+0xb4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053a4:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <prvHeapInit+0xb4>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <prvHeapInit+0xb8>)
 80053b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <prvHeapInit+0xbc>)
 80053ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <prvHeapInit+0xc0>)
 80053be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	20000610 	.word	0x20000610
 80053d4:	20004210 	.word	0x20004210
 80053d8:	20004218 	.word	0x20004218
 80053dc:	20004220 	.word	0x20004220
 80053e0:	2000421c 	.word	0x2000421c
 80053e4:	2000422c 	.word	0x2000422c

080053e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <prvInsertBlockIntoFreeList+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e002      	b.n	80053fc <prvInsertBlockIntoFreeList+0x14>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	429a      	cmp	r2, r3
 8005404:	d8f7      	bhi.n	80053f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4413      	add	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d108      	bne.n	800542a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	441a      	add	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d118      	bne.n	8005470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <prvInsertBlockIntoFreeList+0xb0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d00d      	beq.n	8005466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	441a      	add	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e008      	b.n	8005478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvInsertBlockIntoFreeList+0xb0>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e003      	b.n	8005478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d002      	beq.n	8005486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20004210 	.word	0x20004210
 8005498:	20004218 	.word	0x20004218

0800549c <__libc_init_array>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	4d0d      	ldr	r5, [pc, #52]	; (80054d4 <__libc_init_array+0x38>)
 80054a0:	4c0d      	ldr	r4, [pc, #52]	; (80054d8 <__libc_init_array+0x3c>)
 80054a2:	1b64      	subs	r4, r4, r5
 80054a4:	10a4      	asrs	r4, r4, #2
 80054a6:	2600      	movs	r6, #0
 80054a8:	42a6      	cmp	r6, r4
 80054aa:	d109      	bne.n	80054c0 <__libc_init_array+0x24>
 80054ac:	4d0b      	ldr	r5, [pc, #44]	; (80054dc <__libc_init_array+0x40>)
 80054ae:	4c0c      	ldr	r4, [pc, #48]	; (80054e0 <__libc_init_array+0x44>)
 80054b0:	f000 f8e4 	bl	800567c <_init>
 80054b4:	1b64      	subs	r4, r4, r5
 80054b6:	10a4      	asrs	r4, r4, #2
 80054b8:	2600      	movs	r6, #0
 80054ba:	42a6      	cmp	r6, r4
 80054bc:	d105      	bne.n	80054ca <__libc_init_array+0x2e>
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c4:	4798      	blx	r3
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7ee      	b.n	80054a8 <__libc_init_array+0xc>
 80054ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ce:	4798      	blx	r3
 80054d0:	3601      	adds	r6, #1
 80054d2:	e7f2      	b.n	80054ba <__libc_init_array+0x1e>
 80054d4:	08005768 	.word	0x08005768
 80054d8:	08005768 	.word	0x08005768
 80054dc:	08005768 	.word	0x08005768
 80054e0:	0800576c 	.word	0x0800576c

080054e4 <__retarget_lock_acquire_recursive>:
 80054e4:	4770      	bx	lr

080054e6 <__retarget_lock_release_recursive>:
 80054e6:	4770      	bx	lr

080054e8 <memset>:
 80054e8:	4402      	add	r2, r0
 80054ea:	4603      	mov	r3, r0
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d100      	bne.n	80054f2 <memset+0xa>
 80054f0:	4770      	bx	lr
 80054f2:	f803 1b01 	strb.w	r1, [r3], #1
 80054f6:	e7f9      	b.n	80054ec <memset+0x4>

080054f8 <cleanup_glue>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	460c      	mov	r4, r1
 80054fc:	6809      	ldr	r1, [r1, #0]
 80054fe:	4605      	mov	r5, r0
 8005500:	b109      	cbz	r1, 8005506 <cleanup_glue+0xe>
 8005502:	f7ff fff9 	bl	80054f8 <cleanup_glue>
 8005506:	4621      	mov	r1, r4
 8005508:	4628      	mov	r0, r5
 800550a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800550e:	f000 b869 	b.w	80055e4 <_free_r>
	...

08005514 <_reclaim_reent>:
 8005514:	4b2c      	ldr	r3, [pc, #176]	; (80055c8 <_reclaim_reent+0xb4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4283      	cmp	r3, r0
 800551a:	b570      	push	{r4, r5, r6, lr}
 800551c:	4604      	mov	r4, r0
 800551e:	d051      	beq.n	80055c4 <_reclaim_reent+0xb0>
 8005520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005522:	b143      	cbz	r3, 8005536 <_reclaim_reent+0x22>
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d14a      	bne.n	80055c0 <_reclaim_reent+0xac>
 800552a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552c:	6819      	ldr	r1, [r3, #0]
 800552e:	b111      	cbz	r1, 8005536 <_reclaim_reent+0x22>
 8005530:	4620      	mov	r0, r4
 8005532:	f000 f857 	bl	80055e4 <_free_r>
 8005536:	6961      	ldr	r1, [r4, #20]
 8005538:	b111      	cbz	r1, 8005540 <_reclaim_reent+0x2c>
 800553a:	4620      	mov	r0, r4
 800553c:	f000 f852 	bl	80055e4 <_free_r>
 8005540:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005542:	b111      	cbz	r1, 800554a <_reclaim_reent+0x36>
 8005544:	4620      	mov	r0, r4
 8005546:	f000 f84d 	bl	80055e4 <_free_r>
 800554a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800554c:	b111      	cbz	r1, 8005554 <_reclaim_reent+0x40>
 800554e:	4620      	mov	r0, r4
 8005550:	f000 f848 	bl	80055e4 <_free_r>
 8005554:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005556:	b111      	cbz	r1, 800555e <_reclaim_reent+0x4a>
 8005558:	4620      	mov	r0, r4
 800555a:	f000 f843 	bl	80055e4 <_free_r>
 800555e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005560:	b111      	cbz	r1, 8005568 <_reclaim_reent+0x54>
 8005562:	4620      	mov	r0, r4
 8005564:	f000 f83e 	bl	80055e4 <_free_r>
 8005568:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800556a:	b111      	cbz	r1, 8005572 <_reclaim_reent+0x5e>
 800556c:	4620      	mov	r0, r4
 800556e:	f000 f839 	bl	80055e4 <_free_r>
 8005572:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005574:	b111      	cbz	r1, 800557c <_reclaim_reent+0x68>
 8005576:	4620      	mov	r0, r4
 8005578:	f000 f834 	bl	80055e4 <_free_r>
 800557c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800557e:	b111      	cbz	r1, 8005586 <_reclaim_reent+0x72>
 8005580:	4620      	mov	r0, r4
 8005582:	f000 f82f 	bl	80055e4 <_free_r>
 8005586:	69a3      	ldr	r3, [r4, #24]
 8005588:	b1e3      	cbz	r3, 80055c4 <_reclaim_reent+0xb0>
 800558a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800558c:	4620      	mov	r0, r4
 800558e:	4798      	blx	r3
 8005590:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005592:	b1b9      	cbz	r1, 80055c4 <_reclaim_reent+0xb0>
 8005594:	4620      	mov	r0, r4
 8005596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800559a:	f7ff bfad 	b.w	80054f8 <cleanup_glue>
 800559e:	5949      	ldr	r1, [r1, r5]
 80055a0:	b941      	cbnz	r1, 80055b4 <_reclaim_reent+0xa0>
 80055a2:	3504      	adds	r5, #4
 80055a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055a6:	2d80      	cmp	r5, #128	; 0x80
 80055a8:	68d9      	ldr	r1, [r3, #12]
 80055aa:	d1f8      	bne.n	800559e <_reclaim_reent+0x8a>
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f819 	bl	80055e4 <_free_r>
 80055b2:	e7ba      	b.n	800552a <_reclaim_reent+0x16>
 80055b4:	680e      	ldr	r6, [r1, #0]
 80055b6:	4620      	mov	r0, r4
 80055b8:	f000 f814 	bl	80055e4 <_free_r>
 80055bc:	4631      	mov	r1, r6
 80055be:	e7ef      	b.n	80055a0 <_reclaim_reent+0x8c>
 80055c0:	2500      	movs	r5, #0
 80055c2:	e7ef      	b.n	80055a4 <_reclaim_reent+0x90>
 80055c4:	bd70      	pop	{r4, r5, r6, pc}
 80055c6:	bf00      	nop
 80055c8:	20000010 	.word	0x20000010

080055cc <__malloc_lock>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__malloc_lock+0x8>)
 80055ce:	f7ff bf89 	b.w	80054e4 <__retarget_lock_acquire_recursive>
 80055d2:	bf00      	nop
 80055d4:	20004230 	.word	0x20004230

080055d8 <__malloc_unlock>:
 80055d8:	4801      	ldr	r0, [pc, #4]	; (80055e0 <__malloc_unlock+0x8>)
 80055da:	f7ff bf84 	b.w	80054e6 <__retarget_lock_release_recursive>
 80055de:	bf00      	nop
 80055e0:	20004230 	.word	0x20004230

080055e4 <_free_r>:
 80055e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055e6:	2900      	cmp	r1, #0
 80055e8:	d044      	beq.n	8005674 <_free_r+0x90>
 80055ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ee:	9001      	str	r0, [sp, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f1a1 0404 	sub.w	r4, r1, #4
 80055f6:	bfb8      	it	lt
 80055f8:	18e4      	addlt	r4, r4, r3
 80055fa:	f7ff ffe7 	bl	80055cc <__malloc_lock>
 80055fe:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <_free_r+0x94>)
 8005600:	9801      	ldr	r0, [sp, #4]
 8005602:	6813      	ldr	r3, [r2, #0]
 8005604:	b933      	cbnz	r3, 8005614 <_free_r+0x30>
 8005606:	6063      	str	r3, [r4, #4]
 8005608:	6014      	str	r4, [r2, #0]
 800560a:	b003      	add	sp, #12
 800560c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005610:	f7ff bfe2 	b.w	80055d8 <__malloc_unlock>
 8005614:	42a3      	cmp	r3, r4
 8005616:	d908      	bls.n	800562a <_free_r+0x46>
 8005618:	6825      	ldr	r5, [r4, #0]
 800561a:	1961      	adds	r1, r4, r5
 800561c:	428b      	cmp	r3, r1
 800561e:	bf01      	itttt	eq
 8005620:	6819      	ldreq	r1, [r3, #0]
 8005622:	685b      	ldreq	r3, [r3, #4]
 8005624:	1949      	addeq	r1, r1, r5
 8005626:	6021      	streq	r1, [r4, #0]
 8005628:	e7ed      	b.n	8005606 <_free_r+0x22>
 800562a:	461a      	mov	r2, r3
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	b10b      	cbz	r3, 8005634 <_free_r+0x50>
 8005630:	42a3      	cmp	r3, r4
 8005632:	d9fa      	bls.n	800562a <_free_r+0x46>
 8005634:	6811      	ldr	r1, [r2, #0]
 8005636:	1855      	adds	r5, r2, r1
 8005638:	42a5      	cmp	r5, r4
 800563a:	d10b      	bne.n	8005654 <_free_r+0x70>
 800563c:	6824      	ldr	r4, [r4, #0]
 800563e:	4421      	add	r1, r4
 8005640:	1854      	adds	r4, r2, r1
 8005642:	42a3      	cmp	r3, r4
 8005644:	6011      	str	r1, [r2, #0]
 8005646:	d1e0      	bne.n	800560a <_free_r+0x26>
 8005648:	681c      	ldr	r4, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	6053      	str	r3, [r2, #4]
 800564e:	4421      	add	r1, r4
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	e7da      	b.n	800560a <_free_r+0x26>
 8005654:	d902      	bls.n	800565c <_free_r+0x78>
 8005656:	230c      	movs	r3, #12
 8005658:	6003      	str	r3, [r0, #0]
 800565a:	e7d6      	b.n	800560a <_free_r+0x26>
 800565c:	6825      	ldr	r5, [r4, #0]
 800565e:	1961      	adds	r1, r4, r5
 8005660:	428b      	cmp	r3, r1
 8005662:	bf04      	itt	eq
 8005664:	6819      	ldreq	r1, [r3, #0]
 8005666:	685b      	ldreq	r3, [r3, #4]
 8005668:	6063      	str	r3, [r4, #4]
 800566a:	bf04      	itt	eq
 800566c:	1949      	addeq	r1, r1, r5
 800566e:	6021      	streq	r1, [r4, #0]
 8005670:	6054      	str	r4, [r2, #4]
 8005672:	e7ca      	b.n	800560a <_free_r+0x26>
 8005674:	b003      	add	sp, #12
 8005676:	bd30      	pop	{r4, r5, pc}
 8005678:	20004234 	.word	0x20004234

0800567c <_init>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr

08005688 <_fini>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	bf00      	nop
 800568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568e:	bc08      	pop	{r3}
 8005690:	469e      	mov	lr, r3
 8005692:	4770      	bx	lr


Uart_MultiTasking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800779c  0800779c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077a4  080077a4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a4  080077a4  000177a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080077ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000041dc  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004260  20004260  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018fc7  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a22  00000000  00000000  0003907b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0003caa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d8  00000000  00000000  0003df10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d7c  00000000  00000000  0003f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182dc  00000000  00000000  00066f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9a6c  00000000  00000000  0007f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00168cac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f00  00000000  00000000  00168cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800748c 	.word	0x0800748c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	0800748c 	.word	0x0800748c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]
 80005aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_FMC_Init+0x98>)
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <MX_FMC_Init+0x9c>)
 80005b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_FMC_Init+0x98>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_FMC_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_FMC_Init+0x98>)
 80005c0:	2204      	movs	r2, #4
 80005c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_FMC_Init+0x98>)
 80005c6:	2210      	movs	r2, #16
 80005c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_FMC_Init+0x98>)
 80005cc:	2240      	movs	r2, #64	; 0x40
 80005ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_FMC_Init+0x98>)
 80005d2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80005d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_FMC_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_FMC_Init+0x98>)
 80005e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_FMC_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_FMC_Init+0x98>)
 80005ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000600:	2307      	movs	r3, #7
 8000602:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000604:	2303      	movs	r3, #3
 8000606:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_FMC_Init+0x98>)
 8000616:	f002 faf9 	bl	8002c0c <HAL_SDRAM_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000620:	f000 fd12 	bl	8001048 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000a0 	.word	0x200000a0
 8000630:	a0000140 	.word	0xa0000140

08000634 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000648:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <HAL_FMC_MspInit+0x104>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d16f      	bne.n	8000730 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000650:	4b39      	ldr	r3, [pc, #228]	; (8000738 <HAL_FMC_MspInit+0x104>)
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b38      	ldr	r3, [pc, #224]	; (800073c <HAL_FMC_MspInit+0x108>)
 800065c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800065e:	4a37      	ldr	r2, [pc, #220]	; (800073c <HAL_FMC_MspInit+0x108>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6393      	str	r3, [r2, #56]	; 0x38
 8000666:	4b35      	ldr	r3, [pc, #212]	; (800073c <HAL_FMC_MspInit+0x108>)
 8000668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000672:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000676:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000684:	230c      	movs	r3, #12
 8000686:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4619      	mov	r1, r3
 800068c:	482c      	ldr	r0, [pc, #176]	; (8000740 <HAL_FMC_MspInit+0x10c>)
 800068e:	f001 fb21 	bl	8001cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000692:	2301      	movs	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006a2:	230c      	movs	r3, #12
 80006a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4826      	ldr	r0, [pc, #152]	; (8000744 <HAL_FMC_MspInit+0x110>)
 80006ac:	f001 fb12 	bl	8001cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80006b0:	f248 1333 	movw	r3, #33075	; 0x8133
 80006b4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006c2:	230c      	movs	r3, #12
 80006c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	481f      	ldr	r0, [pc, #124]	; (8000748 <HAL_FMC_MspInit+0x114>)
 80006cc:	f001 fb02 	bl	8001cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80006d0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80006d4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006e2:	230c      	movs	r3, #12
 80006e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4818      	ldr	r0, [pc, #96]	; (800074c <HAL_FMC_MspInit+0x118>)
 80006ec:	f001 faf2 	bl	8001cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80006f0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80006f4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000702:	230c      	movs	r3, #12
 8000704:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <HAL_FMC_MspInit+0x11c>)
 800070c:	f001 fae2 	bl	8001cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000710:	2360      	movs	r3, #96	; 0x60
 8000712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000720:	230c      	movs	r3, #12
 8000722:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <HAL_FMC_MspInit+0x120>)
 800072a:	f001 fad3 	bl	8001cd4 <HAL_GPIO_Init>
 800072e:	e000      	b.n	8000732 <HAL_FMC_MspInit+0xfe>
    return;
 8000730:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000d4 	.word	0x200000d4
 800073c:	40023800 	.word	0x40023800
 8000740:	40021400 	.word	0x40021400
 8000744:	40020800 	.word	0x40020800
 8000748:	40021800 	.word	0x40021800
 800074c:	40021000 	.word	0x40021000
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40020400 	.word	0x40020400

08000758 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000760:	f7ff ff68 	bl	8000634 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <vApplicationGetIdleTaskMemory+0x2c>)
 800077c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <vApplicationGetIdleTaskMemory+0x30>)
 8000782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200000e8 	.word	0x200000e8
 800079c:	2000019c 	.word	0x2000019c

080007a0 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, LedTask_func, osPriorityNormal, 0, 256);
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_FREERTOS_Init+0x58>)
 80007a8:	f107 041c 	add.w	r4, r7, #28
 80007ac:	461d      	mov	r5, r3
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 f9e2 	bl	8004b8a <osThreadCreate>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <MX_FREERTOS_Init+0x5c>)
 80007ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, UartTask_func, osPriorityLow, 0, 1024);
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_FREERTOS_Init+0x60>)
 80007ce:	463c      	mov	r4, r7
 80007d0:	461d      	mov	r5, r3
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 80007de:	463b      	mov	r3, r7
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 f9d1 	bl	8004b8a <osThreadCreate>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a06      	ldr	r2, [pc, #24]	; (8000804 <MX_FREERTOS_Init+0x64>)
 80007ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
}
 80007ee:	bf00      	nop
 80007f0:	3738      	adds	r7, #56	; 0x38
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bdb0      	pop	{r4, r5, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	080074b8 	.word	0x080074b8
 80007fc:	200000e0 	.word	0x200000e0
 8000800:	080074d4 	.word	0x080074d4
 8000804:	200000e4 	.word	0x200000e4

08000808 <LedTask_func>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LedTask_func */
void LedTask_func(void const *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask_func */
  /* Infinite loop */
  for (;;)
  {
    if(ledEvent==1) {
 8000810:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <LedTask_func+0xbc>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d105      	bne.n	8000824 <LedTask_func+0x1c>
      ledEvent = 0;
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <LedTask_func+0xbc>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
      led_state = STATE_LED_ON_INITIAL;
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <LedTask_func+0xc0>)
 8000820:	2202      	movs	r2, #2
 8000822:	701a      	strb	r2, [r3, #0]
    }
    switch (led_state)
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <LedTask_func+0xc0>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b01      	subs	r3, #1
 800082a:	2b03      	cmp	r3, #3
 800082c:	d845      	bhi.n	80008ba <LedTask_func+0xb2>
 800082e:	a201      	add	r2, pc, #4	; (adr r2, 8000834 <LedTask_func+0x2c>)
 8000830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000834:	0800088f 	.word	0x0800088f
 8000838:	08000845 	.word	0x08000845
 800083c:	08000869 	.word	0x08000869
 8000840:	08000857 	.word	0x08000857
    {
    case STATE_LED_ON_INITIAL:
      ledCounter = ledOnTime;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <LedTask_func+0xc4>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <LedTask_func+0xc8>)
 800084c:	601a      	str	r2, [r3, #0]
      led_state = STATE_LED_ON_ONGOING;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <LedTask_func+0xc0>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
      break;
 8000854:	e031      	b.n	80008ba <LedTask_func+0xb2>
    case STATE_LED_OFF_INITIAL:
      ledCounter = ledOffTime;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <LedTask_func+0xcc>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <LedTask_func+0xc8>)
 800085e:	601a      	str	r2, [r3, #0]
      led_state = STATE_LED_OFF_ONGOING;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <LedTask_func+0xc0>)
 8000862:	2203      	movs	r2, #3
 8000864:	701a      	strb	r2, [r3, #0]
      break;
 8000866:	e028      	b.n	80008ba <LedTask_func+0xb2>
    case STATE_LED_OFF_ONGOING:
      ledCounter--;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <LedTask_func+0xc8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3b01      	subs	r3, #1
 800086e:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <LedTask_func+0xc8>)
 8000870:	6013      	str	r3, [r2, #0]
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000878:	4817      	ldr	r0, [pc, #92]	; (80008d8 <LedTask_func+0xd0>)
 800087a:	f001 fce3 	bl	8002244 <HAL_GPIO_WritePin>
      if(ledCounter == 0) {
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <LedTask_func+0xc8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d116      	bne.n	80008b4 <LedTask_func+0xac>
        led_state = STATE_LED_ON_INITIAL;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <LedTask_func+0xc0>)
 8000888:	2202      	movs	r2, #2
 800088a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800088c:	e012      	b.n	80008b4 <LedTask_func+0xac>
    case STATE_LED_ON_ONGOING:
      ledCounter--;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <LedTask_func+0xc8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <LedTask_func+0xc8>)
 8000896:	6013      	str	r3, [r2, #0]
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <LedTask_func+0xd0>)
 80008a0:	f001 fcd0 	bl	8002244 <HAL_GPIO_WritePin>
      if(ledCounter == 0) {
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <LedTask_func+0xc8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d105      	bne.n	80008b8 <LedTask_func+0xb0>
        led_state = STATE_LED_OFF_INITIAL;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <LedTask_func+0xc0>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80008b2:	e001      	b.n	80008b8 <LedTask_func+0xb0>
      break;
 80008b4:	bf00      	nop
 80008b6:	e000      	b.n	80008ba <LedTask_func+0xb2>
      break;
 80008b8:	bf00      	nop
    }
    osDelay(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f004 f9b1 	bl	8004c22 <osDelay>
    if(ledEvent==1) {
 80008c0:	e7a6      	b.n	8000810 <LedTask_func+0x8>
 80008c2:	bf00      	nop
 80008c4:	200000d8 	.word	0x200000d8
 80008c8:	2000000c 	.word	0x2000000c
 80008cc:	20000002 	.word	0x20000002
 80008d0:	200000dc 	.word	0x200000dc
 80008d4:	20000004 	.word	0x20000004
 80008d8:	40021800 	.word	0x40021800

080008dc <UartTask_func>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UartTask_func */
void UartTask_func(void const *argument)
{
 80008dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e0:	b08d      	sub	sp, #52	; 0x34
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN UartTask_func */
  /* Infinite loop */
  for (;;)
  {
    if (uartItFlag)
 80008e6:	4b74      	ldr	r3, [pc, #464]	; (8000ab8 <UartTask_func+0x1dc>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d031      	beq.n	8000952 <UartTask_func+0x76>
    {
      uartItFlag = 0;
 80008ee:	4b72      	ldr	r3, [pc, #456]	; (8000ab8 <UartTask_func+0x1dc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
      start = cntr;
 80008f4:	4b71      	ldr	r3, [pc, #452]	; (8000abc <UartTask_func+0x1e0>)
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	4b71      	ldr	r3, [pc, #452]	; (8000ac0 <UartTask_func+0x1e4>)
 80008fa:	701a      	strb	r2, [r3, #0]
      for (int i = start; i < start + BUFFER_LENGTH; i++)
 80008fc:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <UartTask_func+0x1e4>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
 8000902:	e020      	b.n	8000946 <UartTask_func+0x6a>
      {
        rcvd_data = buffer[i];
 8000904:	4a6f      	ldr	r2, [pc, #444]	; (8000ac4 <UartTask_func+0x1e8>)
 8000906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000908:	4413      	add	r3, r2
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	4b6e      	ldr	r3, [pc, #440]	; (8000ac8 <UartTask_func+0x1ec>)
 800090e:	701a      	strb	r2, [r3, #0]
        if (rcvd_data == 10)
 8000910:	4b6d      	ldr	r3, [pc, #436]	; (8000ac8 <UartTask_func+0x1ec>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b0a      	cmp	r3, #10
 8000916:	d10d      	bne.n	8000934 <UartTask_func+0x58>
        {
          rcvd_complete = 1;
 8000918:	4b6c      	ldr	r3, [pc, #432]	; (8000acc <UartTask_func+0x1f0>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
          end = cntr;
 800091e:	4b67      	ldr	r3, [pc, #412]	; (8000abc <UartTask_func+0x1e0>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	4b6b      	ldr	r3, [pc, #428]	; (8000ad0 <UartTask_func+0x1f4>)
 8000924:	701a      	strb	r2, [r3, #0]
          cntr++;
 8000926:	4b65      	ldr	r3, [pc, #404]	; (8000abc <UartTask_func+0x1e0>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b63      	ldr	r3, [pc, #396]	; (8000abc <UartTask_func+0x1e0>)
 8000930:	701a      	strb	r2, [r3, #0]
          break;
 8000932:	e00e      	b.n	8000952 <UartTask_func+0x76>
        }
        cntr++;
 8000934:	4b61      	ldr	r3, [pc, #388]	; (8000abc <UartTask_func+0x1e0>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b5f      	ldr	r3, [pc, #380]	; (8000abc <UartTask_func+0x1e0>)
 800093e:	701a      	strb	r2, [r3, #0]
      for (int i = start; i < start + BUFFER_LENGTH; i++)
 8000940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000942:	3301      	adds	r3, #1
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
 8000946:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <UartTask_func+0x1e4>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	3331      	adds	r3, #49	; 0x31
 800094c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800094e:	429a      	cmp	r2, r3
 8000950:	ddd8      	ble.n	8000904 <UartTask_func+0x28>
      }
    }

    if (rcvd_complete)
 8000952:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <UartTask_func+0x1f0>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 80a9 	beq.w	8000aae <UartTask_func+0x1d2>
    {
 800095c:	466b      	mov	r3, sp
 800095e:	461e      	mov	r6, r3
      uint8_t length = end - start;
 8000960:	4b5b      	ldr	r3, [pc, #364]	; (8000ad0 <UartTask_func+0x1f4>)
 8000962:	781a      	ldrb	r2, [r3, #0]
 8000964:	4b56      	ldr	r3, [pc, #344]	; (8000ac0 <UartTask_func+0x1e4>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      uint8_t tmpData[length];
 800096e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8000972:	460b      	mov	r3, r1
 8000974:	3b01      	subs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
 8000978:	b2cb      	uxtb	r3, r1
 800097a:	2200      	movs	r2, #0
 800097c:	461c      	mov	r4, r3
 800097e:	4615      	mov	r5, r2
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	00eb      	lsls	r3, r5, #3
 800098a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800098e:	00e2      	lsls	r2, r4, #3
 8000990:	b2cb      	uxtb	r3, r1
 8000992:	2200      	movs	r2, #0
 8000994:	4698      	mov	r8, r3
 8000996:	4691      	mov	r9, r2
 8000998:	f04f 0200 	mov.w	r2, #0
 800099c:	f04f 0300 	mov.w	r3, #0
 80009a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009ac:	460b      	mov	r3, r1
 80009ae:	3307      	adds	r3, #7
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	ebad 0d03 	sub.w	sp, sp, r3
 80009b8:	466b      	mov	r3, sp
 80009ba:	3300      	adds	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
      uint8_t echoData[length];
 80009be:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80009c2:	460b      	mov	r3, r1
 80009c4:	3b01      	subs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	b2cb      	uxtb	r3, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	469a      	mov	sl, r3
 80009ce:	4693      	mov	fp, r2
 80009d0:	f04f 0200 	mov.w	r2, #0
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80009dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80009e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80009e4:	b2cb      	uxtb	r3, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	00c3      	lsls	r3, r0, #3
 80009f8:	6838      	ldr	r0, [r7, #0]
 80009fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009fe:	6838      	ldr	r0, [r7, #0]
 8000a00:	00c2      	lsls	r2, r0, #3
 8000a02:	460b      	mov	r3, r1
 8000a04:	3307      	adds	r3, #7
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a0e:	466b      	mov	r3, sp
 8000a10:	3300      	adds	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
      for (int i = 0; i < length; i++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a18:	e019      	b.n	8000a4e <UartTask_func+0x172>
      {
        tmpData[i] = buffer[start + i];
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <UartTask_func+0x1e4>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	4413      	add	r3, r2
 8000a24:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <UartTask_func+0x1e8>)
 8000a26:	5cd1      	ldrb	r1, [r2, r3]
 8000a28:	69fa      	ldr	r2, [r7, #28]
 8000a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2c:	4413      	add	r3, r2
 8000a2e:	460a      	mov	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
        echoData[length] = buffer[start + i];
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <UartTask_func+0x1e4>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3a:	441a      	add	r2, r3
 8000a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a40:	4920      	ldr	r1, [pc, #128]	; (8000ac4 <UartTask_func+0x1e8>)
 8000a42:	5c89      	ldrb	r1, [r1, r2]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	54d1      	strb	r1, [r2, r3]
      for (int i = 0; i < length; i++)
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbe0      	blt.n	8000a1a <UartTask_func+0x13e>
      }
      rcvd_complete = 0;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <UartTask_func+0x1f0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]

      strOp(&tmpData);
 8000a5e:	69f8      	ldr	r0, [r7, #28]
 8000a60:	f000 fbda 	bl	8001218 <strOp>
      
      switch (current_operation)
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <UartTask_func+0x1f8>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2bff      	cmp	r3, #255	; 0xff
 8000a6a:	d006      	beq.n	8000a7a <UartTask_func+0x19e>
 8000a6c:	2bff      	cmp	r3, #255	; 0xff
 8000a6e:	dc18      	bgt.n	8000aa2 <UartTask_func+0x1c6>
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d01a      	beq.n	8000aaa <UartTask_func+0x1ce>
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d004      	beq.n	8000a82 <UartTask_func+0x1a6>
 8000a78:	e013      	b.n	8000aa2 <UartTask_func+0x1c6>
      {
      case OP_STOP:
        //
        break;
      case OP_INVALID:
        printf("E_N_OK\n");
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <UartTask_func+0x1fc>)
 8000a7c:	f005 fd28 	bl	80064d0 <puts>
        break;
 8000a80:	e014      	b.n	8000aac <UartTask_func+0x1d0>
      case OP_BAUD:
        echoFunc(&echoData);
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f000 fbbc 	bl	8001200 <echoFunc>
        HAL_UART_Abort_IT(&huart1);
 8000a88:	4814      	ldr	r0, [pc, #80]	; (8000adc <UartTask_func+0x200>)
 8000a8a:	f002 feb3 	bl	80037f4 <HAL_UART_Abort_IT>
        HAL_UART_DeInit(&huart1);
 8000a8e:	4813      	ldr	r0, [pc, #76]	; (8000adc <UartTask_func+0x200>)
 8000a90:	f002 fdbf 	bl	8003612 <HAL_UART_DeInit>
        MX_USART1_UART_Init();
 8000a94:	f000 fdfc 	bl	8001690 <MX_USART1_UART_Init>
        HAL_UART_Receive_IT(&huart1, buffer, BUFFER_LENGTH);
 8000a98:	2232      	movs	r2, #50	; 0x32
 8000a9a:	490a      	ldr	r1, [pc, #40]	; (8000ac4 <UartTask_func+0x1e8>)
 8000a9c:	480f      	ldr	r0, [pc, #60]	; (8000adc <UartTask_func+0x200>)
 8000a9e:	f002 fe79 	bl	8003794 <HAL_UART_Receive_IT>
      default:
        printf(echoData);
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f005 fc8e 	bl	80063c4 <iprintf>
        break;
 8000aa8:	e000      	b.n	8000aac <UartTask_func+0x1d0>
        break;
 8000aaa:	bf00      	nop
 8000aac:	46b5      	mov	sp, r6
      }
    }
    osDelay(20);
 8000aae:	2014      	movs	r0, #20
 8000ab0:	f004 f8b7 	bl	8004c22 <osDelay>
    if (uartItFlag)
 8000ab4:	e717      	b.n	80008e6 <UartTask_func+0xa>
 8000ab6:	bf00      	nop
 8000ab8:	2000039c 	.word	0x2000039c
 8000abc:	200003d3 	.word	0x200003d3
 8000ac0:	200003d5 	.word	0x200003d5
 8000ac4:	200003a0 	.word	0x200003a0
 8000ac8:	200003d2 	.word	0x200003d2
 8000acc:	200003d4 	.word	0x200003d4
 8000ad0:	200003d6 	.word	0x200003d6
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	080074f0 	.word	0x080074f0
 8000adc:	200004b4 	.word	0x200004b4

08000ae0 <MX_GPIO_Init>:
     PG12   ------> LTDC_B4
     PB8   ------> LTDC_B6
     PB9   ------> LTDC_B7
*/
void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
 8000afa:	4bb2      	ldr	r3, [pc, #712]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4ab1      	ldr	r2, [pc, #708]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4baf      	ldr	r3, [pc, #700]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	623b      	str	r3, [r7, #32]
 8000b10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	4bab      	ldr	r3, [pc, #684]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4aaa      	ldr	r2, [pc, #680]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b1c:	f043 0320 	orr.w	r3, r3, #32
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4ba8      	ldr	r3, [pc, #672]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0320 	and.w	r3, r3, #32
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	4ba4      	ldr	r3, [pc, #656]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4aa3      	ldr	r2, [pc, #652]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4ba1      	ldr	r3, [pc, #644]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	4b9d      	ldr	r3, [pc, #628]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a9c      	ldr	r2, [pc, #624]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b9a      	ldr	r3, [pc, #616]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b96      	ldr	r3, [pc, #600]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a95      	ldr	r2, [pc, #596]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b93      	ldr	r3, [pc, #588]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b8f      	ldr	r3, [pc, #572]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a8e      	ldr	r2, [pc, #568]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b8c      	ldr	r3, [pc, #560]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b88      	ldr	r3, [pc, #544]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a87      	ldr	r2, [pc, #540]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b85      	ldr	r3, [pc, #532]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b81      	ldr	r3, [pc, #516]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a80      	ldr	r2, [pc, #512]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b7e      	ldr	r3, [pc, #504]	; (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2116      	movs	r1, #22
 8000bda:	487b      	ldr	r0, [pc, #492]	; (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000bdc:	f001 fb32 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	4879      	ldr	r0, [pc, #484]	; (8000dcc <MX_GPIO_Init+0x2ec>)
 8000be6:	f001 fb2d 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000bf0:	4877      	ldr	r0, [pc, #476]	; (8000dd0 <MX_GPIO_Init+0x2f0>)
 8000bf2:	f001 fb27 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bfc:	4875      	ldr	r0, [pc, #468]	; (8000dd4 <MX_GPIO_Init+0x2f4>)
 8000bfe:	f001 fb21 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000c02:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c14:	2305      	movs	r3, #5
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	486e      	ldr	r0, [pc, #440]	; (8000dd8 <MX_GPIO_Init+0x2f8>)
 8000c20:	f001 f858 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c36:	230e      	movs	r3, #14
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4865      	ldr	r0, [pc, #404]	; (8000dd8 <MX_GPIO_Init+0x2f8>)
 8000c42:	f001 f847 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c46:	2316      	movs	r3, #22
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	485a      	ldr	r0, [pc, #360]	; (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000c5e:	f001 f839 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c62:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4854      	ldr	r0, [pc, #336]	; (8000dcc <MX_GPIO_Init+0x2ec>)
 8000c7a:	f001 f82b 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000c7e:	f641 0358 	movw	r3, #6232	; 0x1858
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c90:	230e      	movs	r3, #14
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	484c      	ldr	r0, [pc, #304]	; (8000dcc <MX_GPIO_Init+0x2ec>)
 8000c9c:	f001 f81a 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4845      	ldr	r0, [pc, #276]	; (8000dcc <MX_GPIO_Init+0x2ec>)
 8000cb8:	f001 f80c 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	483d      	ldr	r0, [pc, #244]	; (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000cd2:	f000 ffff 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ce6:	2309      	movs	r3, #9
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	483a      	ldr	r0, [pc, #232]	; (8000ddc <MX_GPIO_Init+0x2fc>)
 8000cf2:	f000 ffef 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4834      	ldr	r0, [pc, #208]	; (8000ddc <MX_GPIO_Init+0x2fc>)
 8000d0a:	f000 ffe3 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000d0e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d20:	230e      	movs	r3, #14
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	482c      	ldr	r0, [pc, #176]	; (8000ddc <MX_GPIO_Init+0x2fc>)
 8000d2c:	f000 ffd2 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000d30:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000d42:	230c      	movs	r3, #12
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4823      	ldr	r0, [pc, #140]	; (8000ddc <MX_GPIO_Init+0x2fc>)
 8000d4e:	f000 ffc1 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	481d      	ldr	r0, [pc, #116]	; (8000ddc <MX_GPIO_Init+0x2fc>)
 8000d68:	f000 ffb4 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <MX_GPIO_Init+0x2f0>)
 8000d82:	f000 ffa7 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_GPIO_Init+0x2f0>)
 8000da0:	f000 ff98 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000da4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000db6:	230e      	movs	r3, #14
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	e00e      	b.n	8000de0 <MX_GPIO_Init+0x300>
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020800 	.word	0x40020800
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40021400 	.word	0x40021400
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	4834      	ldr	r0, [pc, #208]	; (8000eb4 <MX_GPIO_Init+0x3d4>)
 8000de2:	f000 ff77 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000de6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000df8:	230e      	movs	r3, #14
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	482d      	ldr	r0, [pc, #180]	; (8000eb8 <MX_GPIO_Init+0x3d8>)
 8000e04:	f000 ff66 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0e:	2312      	movs	r3, #18
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4824      	ldr	r0, [pc, #144]	; (8000eb8 <MX_GPIO_Init+0x3d8>)
 8000e26:	f000 ff55 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	481d      	ldr	r0, [pc, #116]	; (8000ebc <MX_GPIO_Init+0x3dc>)
 8000e48:	f000 ff44 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e4c:	2348      	movs	r3, #72	; 0x48
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e5c:	230e      	movs	r3, #14
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <MX_GPIO_Init+0x3e0>)
 8000e68:	f000 ff34 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000e6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e7e:	2309      	movs	r3, #9
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <MX_GPIO_Init+0x3d4>)
 8000e8a:	f000 ff23 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <MX_GPIO_Init+0x3d4>)
 8000ea8:	f000 ff14 	bl	8001cd4 <HAL_GPIO_Init>

}
 8000eac:	bf00      	nop
 8000eae:	3738      	adds	r7, #56	; 0x38
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f000 fd1c 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f818 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f7ff fe06 	bl	8000ae0 <MX_GPIO_Init>
  MX_FMC_Init();
 8000ed4:	f7ff fb5e 	bl	8000594 <MX_FMC_Init>
  MX_TIM1_Init();
 8000ed8:	f000 fb3e 	bl	8001558 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000edc:	f000 fbd8 	bl	8001690 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000ee0:	f000 fbac 	bl	800163c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, buffer, BUFFER_LENGTH);
 8000ee4:	2232      	movs	r2, #50	; 0x32
 8000ee6:	4904      	ldr	r1, [pc, #16]	; (8000ef8 <main+0x34>)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <main+0x38>)
 8000eea:	f002 fc53 	bl	8003794 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000eee:	f7ff fc57 	bl	80007a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ef2:	f003 fe43 	bl	8004b7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <main+0x32>
 8000ef8:	200003a0 	.word	0x200003a0
 8000efc:	200004b4 	.word	0x200004b4

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 f9bb 	bl	800628a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f4c:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f74:	2304      	movs	r3, #4
 8000f76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f78:	2348      	movs	r3, #72	; 0x48
 8000f7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f80:	2303      	movs	r3, #3
 8000f82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 f975 	bl	8002278 <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f94:	f000 f858 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f98:	230f      	movs	r3, #15
 8000f9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fbd7 	bl	8002768 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fc0:	f000 f842 	bl	8001048 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3750      	adds	r7, #80	; 0x50
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&huart1, buffer, BUFFER_LENGTH);
 8000fdc:	2232      	movs	r2, #50	; 0x32
 8000fde:	4905      	ldr	r1, [pc, #20]	; (8000ff4 <HAL_UART_RxCpltCallback+0x20>)
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_UART_RxCpltCallback+0x24>)
 8000fe2:	f002 fbd7 	bl	8003794 <HAL_UART_Receive_IT>
	  uartItFlag = 1;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_UART_RxCpltCallback+0x28>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]

}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200003a0 	.word	0x200003a0
 8000ff8:	200004b4 	.word	0x200004b4
 8000ffc:	2000039c 	.word	0x2000039c

08001000 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001008:	1d39      	adds	r1, r7, #4
 800100a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100e:	2201      	movs	r2, #1
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <__io_putchar+0x20>)
 8001012:	f002 fb2d 	bl	8003670 <HAL_UART_Transmit>

  return ch;
 8001016:	687b      	ldr	r3, [r7, #4]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200004b4 	.word	0x200004b4

08001024 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001036:	f000 fc87 	bl	8001948 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40001000 	.word	0x40001000

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_MspInit+0x54>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <HAL_MspInit+0x54>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x54>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_MspInit+0x54>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_MspInit+0x54>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_MspInit+0x54>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	210f      	movs	r1, #15
 8001096:	f06f 0001 	mvn.w	r0, #1
 800109a:	f000 fd51 	bl	8001b40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_InitTick+0xe4>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a32      	ldr	r2, [pc, #200]	; (8001190 <HAL_InitTick+0xe4>)
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_InitTick+0xe4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010d8:	f107 0210 	add.w	r2, r7, #16
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fd60 	bl	8002ba8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d103      	bne.n	80010fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010f2:	f001 fd31 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 80010f6:	6378      	str	r0, [r7, #52]	; 0x34
 80010f8:	e004      	b.n	8001104 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010fa:	f001 fd2d 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 80010fe:	4603      	mov	r3, r0
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <HAL_InitTick+0xe8>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0c9b      	lsrs	r3, r3, #18
 800110e:	3b01      	subs	r3, #1
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_InitTick+0xec>)
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <HAL_InitTick+0xf0>)
 8001116:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_InitTick+0xec>)
 800111a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800111e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <HAL_InitTick+0xec>)
 8001122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001124:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_InitTick+0xec>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_InitTick+0xec>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_InitTick+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001138:	4817      	ldr	r0, [pc, #92]	; (8001198 <HAL_InitTick+0xec>)
 800113a:	f001 fd9b 	bl	8002c74 <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001144:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001148:	2b00      	cmp	r3, #0
 800114a:	d11b      	bne.n	8001184 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800114c:	4812      	ldr	r0, [pc, #72]	; (8001198 <HAL_InitTick+0xec>)
 800114e:	f001 fde1 	bl	8002d14 <HAL_TIM_Base_Start_IT>
 8001152:	4603      	mov	r3, r0
 8001154:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001158:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800115c:	2b00      	cmp	r3, #0
 800115e:	d111      	bne.n	8001184 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001160:	2036      	movs	r0, #54	; 0x36
 8001162:	f000 fd09 	bl	8001b78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d808      	bhi.n	800117e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	2036      	movs	r0, #54	; 0x36
 8001172:	f000 fce5 	bl	8001b40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_InitTick+0xf4>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e002      	b.n	8001184 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001184:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001188:	4618      	mov	r0, r3
 800118a:	3738      	adds	r7, #56	; 0x38
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	431bde83 	.word	0x431bde83
 8001198:	200003d8 	.word	0x200003d8
 800119c:	40001000 	.word	0x40001000
 80011a0:	20000014 	.word	0x20000014

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <USART1_IRQHandler+0x14>)
 80011d6:	f002 fc21 	bl	8003a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  uartItFlag = 1u;
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <USART1_IRQHandler+0x18>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200004b4 	.word	0x200004b4
 80011e8:	2000039c 	.word	0x2000039c

080011ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <TIM6_DAC_IRQHandler+0x10>)
 80011f2:	f001 fdff 	bl	8002df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200003d8 	.word	0x200003d8

08001200 <echoFunc>:
extern uint8_t uartEvent;
/*static variables*/
static uint16_t ledOnTime_previous;
static uint16_t ledOffTime_previous;
void echoFunc(uint8_t *data)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    printf("%s\n", data);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f005 f961 	bl	80064d0 <puts>
    return;
 800120e:	bf00      	nop
}
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <strOp>:

void strOp(uint8_t *input)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
    char *p = strtok(input, "=");
 8001224:	4950      	ldr	r1, [pc, #320]	; (8001368 <strOp+0x150>)
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f005 fa2e 	bl	8006688 <strtok>
 800122c:	6138      	str	r0, [r7, #16]
    char *array[2];

    while (p != NULL)
 800122e:	e00d      	b.n	800124c <strOp+0x34>
    {
        array[i++] = p;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	617a      	str	r2, [r7, #20]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	3318      	adds	r3, #24
 800123a:	443b      	add	r3, r7
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	f843 2c10 	str.w	r2, [r3, #-16]
        p = strtok(NULL, "/");
 8001242:	494a      	ldr	r1, [pc, #296]	; (800136c <strOp+0x154>)
 8001244:	2000      	movs	r0, #0
 8001246:	f005 fa1f 	bl	8006688 <strtok>
 800124a:	6138      	str	r0, [r7, #16]
    while (p != NULL)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1ee      	bne.n	8001230 <strOp+0x18>
    }

    if (strstr(array[0], "ledon"))
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	4946      	ldr	r1, [pc, #280]	; (8001370 <strOp+0x158>)
 8001256:	4618      	mov	r0, r3
 8001258:	f005 f9ff 	bl	800665a <strstr>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00e      	beq.n	8001280 <strOp+0x68>
    {
        current_operation = OP_LED_ON;
 8001262:	4b44      	ldr	r3, [pc, #272]	; (8001374 <strOp+0x15c>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <strOp+0x160>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
        ledOnTime = atoi(array[1]);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4618      	mov	r0, r3
 8001272:	f004 fee3 	bl	800603c <atoi>
 8001276:	4603      	mov	r3, r0
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <strOp+0x164>)
 800127c:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        current_operation = OP_INVALID;
    }
    return;
 800127e:	e06f      	b.n	8001360 <strOp+0x148>
    else if (strstr(array[0], "ledoff"))
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	493f      	ldr	r1, [pc, #252]	; (8001380 <strOp+0x168>)
 8001284:	4618      	mov	r0, r3
 8001286:	f005 f9e8 	bl	800665a <strstr>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00e      	beq.n	80012ae <strOp+0x96>
        current_operation = OP_LED_OFF;
 8001290:	4b38      	ldr	r3, [pc, #224]	; (8001374 <strOp+0x15c>)
 8001292:	2202      	movs	r2, #2
 8001294:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <strOp+0x160>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
        ledOffTime = atoi(array[1]);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fecc 	bl	800603c <atoi>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <strOp+0x16c>)
 80012aa:	801a      	strh	r2, [r3, #0]
    return;
 80012ac:	e058      	b.n	8001360 <strOp+0x148>
    else if (strstr(array[0], "start"))
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	4935      	ldr	r1, [pc, #212]	; (8001388 <strOp+0x170>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 f9d1 	bl	800665a <strstr>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00e      	beq.n	80012dc <strOp+0xc4>
        current_operation = OP_START;
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <strOp+0x15c>)
 80012c0:	2203      	movs	r2, #3
 80012c2:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <strOp+0x160>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
        ledOnTime = ledOnTime_previous;
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <strOp+0x174>)
 80012cc:	881a      	ldrh	r2, [r3, #0]
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <strOp+0x164>)
 80012d0:	801a      	strh	r2, [r3, #0]
        ledOffTime = ledOffTime_previous;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <strOp+0x178>)
 80012d4:	881a      	ldrh	r2, [r3, #0]
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <strOp+0x16c>)
 80012d8:	801a      	strh	r2, [r3, #0]
    return;
 80012da:	e041      	b.n	8001360 <strOp+0x148>
    else if (strstr(array[0], "stop"))
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	492d      	ldr	r1, [pc, #180]	; (8001394 <strOp+0x17c>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f005 f9ba 	bl	800665a <strstr>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d016      	beq.n	800131a <strOp+0x102>
        current_operation = OP_STOP;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <strOp+0x15c>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <strOp+0x160>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
        ledOffTime_previous = ledOffTime;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <strOp+0x16c>)
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <strOp+0x178>)
 80012fe:	801a      	strh	r2, [r3, #0]
        ledOnTime_previous = ledOnTime;
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <strOp+0x164>)
 8001302:	881a      	ldrh	r2, [r3, #0]
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <strOp+0x174>)
 8001306:	801a      	strh	r2, [r3, #0]
        ledOnTime = 1000;
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <strOp+0x164>)
 800130a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130e:	801a      	strh	r2, [r3, #0]
        ledOffTime = 1000; 
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <strOp+0x16c>)
 8001312:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001316:	801a      	strh	r2, [r3, #0]
    return;
 8001318:	e022      	b.n	8001360 <strOp+0x148>
    else if (strstr(array[0], "baud"))
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	491e      	ldr	r1, [pc, #120]	; (8001398 <strOp+0x180>)
 800131e:	4618      	mov	r0, r3
 8001320:	f005 f99b 	bl	800665a <strstr>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00e      	beq.n	8001348 <strOp+0x130>
        current_operation = OP_BAUD;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <strOp+0x15c>)
 800132c:	2205      	movs	r2, #5
 800132e:	701a      	strb	r2, [r3, #0]
        uartEvent = 1;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <strOp+0x184>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
        baud = atoi(array[1]);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fe7f 	bl	800603c <atoi>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <strOp+0x188>)
 8001344:	601a      	str	r2, [r3, #0]
    return;
 8001346:	e00b      	b.n	8001360 <strOp+0x148>
    else if (strstr(array[0], "wordlength"))
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4916      	ldr	r1, [pc, #88]	; (80013a4 <strOp+0x18c>)
 800134c:	4618      	mov	r0, r3
 800134e:	f005 f984 	bl	800665a <strstr>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d103      	bne.n	8001360 <strOp+0x148>
        current_operation = OP_INVALID;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <strOp+0x15c>)
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	701a      	strb	r2, [r3, #0]
    return;
 800135e:	bf00      	nop
 8001360:	bf00      	nop
}
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	080074f8 	.word	0x080074f8
 800136c:	080074fc 	.word	0x080074fc
 8001370:	08007500 	.word	0x08007500
 8001374:	20000000 	.word	0x20000000
 8001378:	200000d8 	.word	0x200000d8
 800137c:	20000002 	.word	0x20000002
 8001380:	08007508 	.word	0x08007508
 8001384:	20000004 	.word	0x20000004
 8001388:	08007510 	.word	0x08007510
 800138c:	20000420 	.word	0x20000420
 8001390:	20000422 	.word	0x20000422
 8001394:	08007518 	.word	0x08007518
 8001398:	08007520 	.word	0x08007520
 800139c:	200000d9 	.word	0x200000d9
 80013a0:	20000008 	.word	0x20000008
 80013a4:	08007528 	.word	0x08007528

080013a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return 1;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_kill>:

int _kill(int pid, int sig)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c2:	f004 fe3f 	bl	8006044 <__errno>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2216      	movs	r2, #22
 80013ca:	601a      	str	r2, [r3, #0]
  return -1;
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_exit>:

void _exit (int status)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ffe7 	bl	80013b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ea:	e7fe      	b.n	80013ea <_exit+0x12>

080013ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e00a      	b.n	8001414 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fe:	f3af 8000 	nop.w
 8001402:	4601      	mov	r1, r0
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	b2ca      	uxtb	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbf0      	blt.n	80013fe <_read+0x12>
  }

  return len;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e009      	b.n	800144c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	60ba      	str	r2, [r7, #8]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fddd 	bl	8001000 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf1      	blt.n	8001438 <_write+0x12>
  }
  return len;
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_close>:

int _close(int file)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001486:	605a      	str	r2, [r3, #4]
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_isatty>:

int _isatty(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f004 fda4 	bl	8006044 <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20030000 	.word	0x20030000
 8001528:	00000400 	.word	0x00000400
 800152c:	20000424 	.word	0x20000424
 8001530:	20004260 	.word	0x20004260

08001534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <SystemInit+0x20>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <SystemInit+0x20>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_TIM1_Init+0x98>)
 8001576:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <MX_TIM1_Init+0x9c>)
 8001578:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_TIM1_Init+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_TIM1_Init+0x98>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_TIM1_Init+0x98>)
 8001588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_TIM1_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_TIM1_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_TIM1_Init+0x98>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <MX_TIM1_Init+0x98>)
 80015a2:	f001 fb67 	bl	8002c74 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015ac:	f7ff fd4c 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_TIM1_Init+0x98>)
 80015be:	f001 fd21 	bl	8003004 <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015c8:	f7ff fd3e 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_TIM1_Init+0x98>)
 80015da:	f001 ff3d 	bl	8003458 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015e4:	f7ff fd30 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000428 	.word	0x20000428
 80015f4:	40010000 	.word	0x40010000

080015f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_TIM_Base_MspInit+0x3c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10d      	bne.n	8001626 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_TIM_Base_MspInit+0x40>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_TIM_Base_MspInit+0x40>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_TIM_Base_MspInit+0x40>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40010000 	.word	0x40010000
 8001638:	40023800 	.word	0x40023800

0800163c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_UART5_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_UART5_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_UART5_Init+0x4c>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_UART5_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_UART5_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_UART5_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_UART5_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_UART5_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_UART5_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_UART5_Init+0x4c>)
 8001674:	f001 ff80 	bl	8003578 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800167e:	f7ff fce3 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000470 	.word	0x20000470
 800168c:	40005000 	.word	0x40005000

08001690 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_USART1_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud;
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_USART1_UART_Init+0x54>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016a0:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016c8:	f001 ff56 	bl	8003578 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f7ff fcb9 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200004b4 	.word	0x200004b4
 80016e0:	40011000 	.word	0x40011000
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a46      	ldr	r2, [pc, #280]	; (8001820 <HAL_UART_MspInit+0x138>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d14b      	bne.n	80017a2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	4b45      	ldr	r3, [pc, #276]	; (8001824 <HAL_UART_MspInit+0x13c>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a44      	ldr	r2, [pc, #272]	; (8001824 <HAL_UART_MspInit+0x13c>)
 8001714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b42      	ldr	r3, [pc, #264]	; (8001824 <HAL_UART_MspInit+0x13c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <HAL_UART_MspInit+0x13c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a3d      	ldr	r2, [pc, #244]	; (8001824 <HAL_UART_MspInit+0x13c>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_UART_MspInit+0x13c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_UART_MspInit+0x13c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a36      	ldr	r2, [pc, #216]	; (8001824 <HAL_UART_MspInit+0x13c>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_UART_MspInit+0x13c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001770:	2308      	movs	r3, #8
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	482b      	ldr	r0, [pc, #172]	; (8001828 <HAL_UART_MspInit+0x140>)
 800177c:	f000 faaa 	bl	8001cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001780:	2304      	movs	r3, #4
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001790:	2308      	movs	r3, #8
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	4824      	ldr	r0, [pc, #144]	; (800182c <HAL_UART_MspInit+0x144>)
 800179c:	f000 fa9a 	bl	8001cd4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017a0:	e039      	b.n	8001816 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_UART_MspInit+0x148>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d134      	bne.n	8001816 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6453      	str	r3, [r2, #68]	; 0x44
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_UART_MspInit+0x13c>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017f6:	2307      	movs	r3, #7
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <HAL_UART_MspInit+0x14c>)
 8001802:	f000 fa67 	bl	8001cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2105      	movs	r1, #5
 800180a:	2025      	movs	r0, #37	; 0x25
 800180c:	f000 f998 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001810:	2025      	movs	r0, #37	; 0x25
 8001812:	f000 f9b1 	bl	8001b78 <HAL_NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3730      	adds	r7, #48	; 0x30
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40005000 	.word	0x40005000
 8001824:	40023800 	.word	0x40023800
 8001828:	40020800 	.word	0x40020800
 800182c:	40020c00 	.word	0x40020c00
 8001830:	40011000 	.word	0x40011000
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <HAL_UART_MspDeInit+0x60>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10f      	bne.n	800186a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_UART_MspDeInit+0x64>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <HAL_UART_MspDeInit+0x64>)
 8001850:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8001856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185a:	4811      	ldr	r0, [pc, #68]	; (80018a0 <HAL_UART_MspDeInit+0x68>)
 800185c:	f000 fbe6 	bl	800202c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001860:	2104      	movs	r1, #4
 8001862:	4810      	ldr	r0, [pc, #64]	; (80018a4 <HAL_UART_MspDeInit+0x6c>)
 8001864:	f000 fbe2 	bl	800202c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8001868:	e012      	b.n	8001890 <HAL_UART_MspDeInit+0x58>
  else if(uartHandle->Instance==USART1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_UART_MspDeInit+0x70>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d10d      	bne.n	8001890 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_UART_MspDeInit+0x64>)
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_UART_MspDeInit+0x64>)
 800187a:	f023 0310 	bic.w	r3, r3, #16
 800187e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, STLINK_RX_Pin|STLINK_TX_Pin);
 8001880:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <HAL_UART_MspDeInit+0x74>)
 8001886:	f000 fbd1 	bl	800202c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800188a:	2025      	movs	r0, #37	; 0x25
 800188c:	f000 f982 	bl	8001b94 <HAL_NVIC_DisableIRQ>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40005000 	.word	0x40005000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020800 	.word	0x40020800
 80018a4:	40020c00 	.word	0x40020c00
 80018a8:	40011000 	.word	0x40011000
 80018ac:	40020000 	.word	0x40020000

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b6:	490e      	ldr	r1, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018cc:	4c0b      	ldr	r4, [pc, #44]	; (80018fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018da:	f7ff fe2b 	bl	8001534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f004 fcad 	bl	800623c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7ff faef 	bl	8000ec4 <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80018f4:	080077ac 	.word	0x080077ac
  ldr r2, =_sbss
 80018f8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80018fc:	20004260 	.word	0x20004260

08001900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <HAL_Init+0x40>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_Init+0x40>)
 800191a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_Init+0x40>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f8fc 	bl	8001b2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	200f      	movs	r0, #15
 8001934:	f7ff fbba 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fb8c 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000018 	.word	0x20000018
 800196c:	200004f8 	.word	0x200004f8

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200004f8 	.word	0x200004f8

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db12      	blt.n	8001a60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	490a      	ldr	r1, [pc, #40]	; (8001a6c <__NVIC_DisableIRQ+0x44>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	3320      	adds	r3, #32
 8001a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a54:	f3bf 8f4f 	dsb	sy
}
 8001a58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a5a:	f3bf 8f6f 	isb	sy
}
 8001a5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff28 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b52:	f7ff ff3d 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff ffb1 	bl	8001ac4 <NVIC_EncodePriority>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff80 	bl	8001a70 <__NVIC_SetPriority>
}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff30 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff40 	bl	8001a28 <__NVIC_DisableIRQ>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bbe:	f7ff fed7 	bl	8001970 <HAL_GetTick>
 8001bc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d008      	beq.n	8001be2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e052      	b.n	8001c88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0216 	bic.w	r2, r2, #22
 8001bf0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d103      	bne.n	8001c12 <HAL_DMA_Abort+0x62>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0208 	bic.w	r2, r2, #8
 8001c20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c32:	e013      	b.n	8001c5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c34:	f7ff fe9c 	bl	8001970 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	d90c      	bls.n	8001c5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e015      	b.n	8001c88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e4      	bne.n	8001c34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	223f      	movs	r2, #63	; 0x3f
 8001c70:	409a      	lsls	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d004      	beq.n	8001cae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00c      	b.n	8001cc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2205      	movs	r2, #5
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e177      	b.n	8001fe0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8166 	bne.w	8001fda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d005      	beq.n	8001d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d130      	bne.n	8001d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0201 	and.w	r2, r3, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d017      	beq.n	8001dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d123      	bne.n	8001e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0203 	and.w	r2, r3, #3
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80c0 	beq.w	8001fda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a65      	ldr	r2, [pc, #404]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e76:	4a61      	ldr	r2, [pc, #388]	; (8001ffc <HAL_GPIO_Init+0x328>)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a58      	ldr	r2, [pc, #352]	; (8002000 <HAL_GPIO_Init+0x32c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d037      	beq.n	8001f12 <HAL_GPIO_Init+0x23e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a57      	ldr	r2, [pc, #348]	; (8002004 <HAL_GPIO_Init+0x330>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d031      	beq.n	8001f0e <HAL_GPIO_Init+0x23a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a56      	ldr	r2, [pc, #344]	; (8002008 <HAL_GPIO_Init+0x334>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d02b      	beq.n	8001f0a <HAL_GPIO_Init+0x236>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a55      	ldr	r2, [pc, #340]	; (800200c <HAL_GPIO_Init+0x338>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d025      	beq.n	8001f06 <HAL_GPIO_Init+0x232>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a54      	ldr	r2, [pc, #336]	; (8002010 <HAL_GPIO_Init+0x33c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d01f      	beq.n	8001f02 <HAL_GPIO_Init+0x22e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a53      	ldr	r2, [pc, #332]	; (8002014 <HAL_GPIO_Init+0x340>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d019      	beq.n	8001efe <HAL_GPIO_Init+0x22a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_GPIO_Init+0x344>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0x226>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a51      	ldr	r2, [pc, #324]	; (800201c <HAL_GPIO_Init+0x348>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_GPIO_Init+0x222>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a50      	ldr	r2, [pc, #320]	; (8002020 <HAL_GPIO_Init+0x34c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <HAL_GPIO_Init+0x21e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4f      	ldr	r2, [pc, #316]	; (8002024 <HAL_GPIO_Init+0x350>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_GPIO_Init+0x21a>
 8001eea:	2309      	movs	r3, #9
 8001eec:	e012      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001eee:	230a      	movs	r3, #10
 8001ef0:	e010      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	e00e      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	e00c      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001efa:	2306      	movs	r3, #6
 8001efc:	e00a      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001efe:	2305      	movs	r3, #5
 8001f00:	e008      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001f02:	2304      	movs	r3, #4
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001f06:	2303      	movs	r3, #3
 8001f08:	e004      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x240>
 8001f12:	2300      	movs	r3, #0
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	f002 0203 	and.w	r2, r2, #3
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4093      	lsls	r3, r2
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f24:	4935      	ldr	r1, [pc, #212]	; (8001ffc <HAL_GPIO_Init+0x328>)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_GPIO_Init+0x354>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f56:	4a34      	ldr	r2, [pc, #208]	; (8002028 <HAL_GPIO_Init+0x354>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f5c:	4b32      	ldr	r3, [pc, #200]	; (8002028 <HAL_GPIO_Init+0x354>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f80:	4a29      	ldr	r2, [pc, #164]	; (8002028 <HAL_GPIO_Init+0x354>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_GPIO_Init+0x354>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_GPIO_Init+0x354>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_GPIO_Init+0x354>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <HAL_GPIO_Init+0x354>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b0f      	cmp	r3, #15
 8001fe4:	f67f ae84 	bls.w	8001cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40013800 	.word	0x40013800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020400 	.word	0x40020400
 8002008:	40020800 	.word	0x40020800
 800200c:	40020c00 	.word	0x40020c00
 8002010:	40021000 	.word	0x40021000
 8002014:	40021400 	.word	0x40021400
 8002018:	40021800 	.word	0x40021800
 800201c:	40021c00 	.word	0x40021c00
 8002020:	40022000 	.word	0x40022000
 8002024:	40022400 	.word	0x40022400
 8002028:	40013c00 	.word	0x40013c00

0800202c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e0d9      	b.n	80021fc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002048:	2201      	movs	r2, #1
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	429a      	cmp	r2, r3
 8002060:	f040 80c9 	bne.w	80021f6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002064:	4a6b      	ldr	r2, [pc, #428]	; (8002214 <HAL_GPIO_DeInit+0x1e8>)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	4013      	ands	r3, r2
 8002084:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a63      	ldr	r2, [pc, #396]	; (8002218 <HAL_GPIO_DeInit+0x1ec>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d037      	beq.n	80020fe <HAL_GPIO_DeInit+0xd2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a62      	ldr	r2, [pc, #392]	; (800221c <HAL_GPIO_DeInit+0x1f0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d031      	beq.n	80020fa <HAL_GPIO_DeInit+0xce>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a61      	ldr	r2, [pc, #388]	; (8002220 <HAL_GPIO_DeInit+0x1f4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d02b      	beq.n	80020f6 <HAL_GPIO_DeInit+0xca>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a60      	ldr	r2, [pc, #384]	; (8002224 <HAL_GPIO_DeInit+0x1f8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d025      	beq.n	80020f2 <HAL_GPIO_DeInit+0xc6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a5f      	ldr	r2, [pc, #380]	; (8002228 <HAL_GPIO_DeInit+0x1fc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01f      	beq.n	80020ee <HAL_GPIO_DeInit+0xc2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a5e      	ldr	r2, [pc, #376]	; (800222c <HAL_GPIO_DeInit+0x200>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d019      	beq.n	80020ea <HAL_GPIO_DeInit+0xbe>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a5d      	ldr	r2, [pc, #372]	; (8002230 <HAL_GPIO_DeInit+0x204>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_GPIO_DeInit+0xba>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a5c      	ldr	r2, [pc, #368]	; (8002234 <HAL_GPIO_DeInit+0x208>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00d      	beq.n	80020e2 <HAL_GPIO_DeInit+0xb6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a5b      	ldr	r2, [pc, #364]	; (8002238 <HAL_GPIO_DeInit+0x20c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <HAL_GPIO_DeInit+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a5a      	ldr	r2, [pc, #360]	; (800223c <HAL_GPIO_DeInit+0x210>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d101      	bne.n	80020da <HAL_GPIO_DeInit+0xae>
 80020d6:	2309      	movs	r3, #9
 80020d8:	e012      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020da:	230a      	movs	r3, #10
 80020dc:	e010      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020de:	2308      	movs	r3, #8
 80020e0:	e00e      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020e2:	2307      	movs	r3, #7
 80020e4:	e00c      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020e6:	2306      	movs	r3, #6
 80020e8:	e00a      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_DeInit+0xd4>
 80020fe:	2300      	movs	r3, #0
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d132      	bne.n	8002176 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002110:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <HAL_GPIO_DeInit+0x214>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43db      	mvns	r3, r3
 8002118:	4949      	ldr	r1, [pc, #292]	; (8002240 <HAL_GPIO_DeInit+0x214>)
 800211a:	4013      	ands	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800211e:	4b48      	ldr	r3, [pc, #288]	; (8002240 <HAL_GPIO_DeInit+0x214>)
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	4946      	ldr	r1, [pc, #280]	; (8002240 <HAL_GPIO_DeInit+0x214>)
 8002128:	4013      	ands	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_GPIO_DeInit+0x214>)
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	43db      	mvns	r3, r3
 8002134:	4942      	ldr	r1, [pc, #264]	; (8002240 <HAL_GPIO_DeInit+0x214>)
 8002136:	4013      	ands	r3, r2
 8002138:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_GPIO_DeInit+0x214>)
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	493f      	ldr	r1, [pc, #252]	; (8002240 <HAL_GPIO_DeInit+0x214>)
 8002144:	4013      	ands	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002158:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <HAL_GPIO_DeInit+0x1e8>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	43da      	mvns	r2, r3
 8002168:	482a      	ldr	r0, [pc, #168]	; (8002214 <HAL_GPIO_DeInit+0x1e8>)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	400a      	ands	r2, r1
 8002170:	3302      	adds	r3, #2
 8002172:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2103      	movs	r1, #3
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	08d2      	lsrs	r2, r2, #3
 80021ac:	4019      	ands	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2103      	movs	r1, #3
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	2101      	movs	r1, #1
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2103      	movs	r1, #3
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	401a      	ands	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b0f      	cmp	r3, #15
 8002200:	f67f af22 	bls.w	8002048 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40013800 	.word	0x40013800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400
 8002220:	40020800 	.word	0x40020800
 8002224:	40020c00 	.word	0x40020c00
 8002228:	40021000 	.word	0x40021000
 800222c:	40021400 	.word	0x40021400
 8002230:	40021800 	.word	0x40021800
 8002234:	40021c00 	.word	0x40021c00
 8002238:	40022000 	.word	0x40022000
 800223c:	40022400 	.word	0x40022400
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	619a      	str	r2, [r3, #24]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e267      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d075      	beq.n	8002382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002296:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d00c      	beq.n	80022bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a2:	4b85      	ldr	r3, [pc, #532]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d112      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ae:	4b82      	ldr	r3, [pc, #520]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b7e      	ldr	r3, [pc, #504]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d05b      	beq.n	8002380 <HAL_RCC_OscConfig+0x108>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d157      	bne.n	8002380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e242      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x74>
 80022de:	4b76      	ldr	r3, [pc, #472]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a75      	ldr	r2, [pc, #468]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01d      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x98>
 80022f6:	4b70      	ldr	r3, [pc, #448]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6f      	ldr	r2, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b6d      	ldr	r3, [pc, #436]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6c      	ldr	r2, [pc, #432]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 8002310:	4b69      	ldr	r3, [pc, #420]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a68      	ldr	r2, [pc, #416]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b66      	ldr	r3, [pc, #408]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fb1e 	bl	8001970 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002338:	f7ff fb1a 	bl	8001970 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e207      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b5b      	ldr	r3, [pc, #364]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xc0>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7ff fb0a 	bl	8001970 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002360:	f7ff fb06 	bl	8001970 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1f3      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	4b51      	ldr	r3, [pc, #324]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0xe8>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d063      	beq.n	8002456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800238e:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x152>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e1c7      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4937      	ldr	r1, [pc, #220]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	e03a      	b.n	8002456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7ff fabf 	bl	8001970 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f6:	f7ff fabb 	bl	8001970 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1a8      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4925      	ldr	r1, [pc, #148]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7ff fa9e 	bl	8001970 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002438:	f7ff fa9a 	bl	8001970 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e187      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d036      	beq.n	80024d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_RCC_OscConfig+0x248>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7ff fa7e 	bl	8001970 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002478:	f7ff fa7a 	bl	8001970 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e167      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x200>
 8002496:	e01b      	b.n	80024d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_OscConfig+0x248>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7ff fa67 	bl	8001970 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	e00e      	b.n	80024c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff fa63 	bl	8001970 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d907      	bls.n	80024c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e150      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	42470000 	.word	0x42470000
 80024c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b88      	ldr	r3, [pc, #544]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ea      	bne.n	80024a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8097 	beq.w	800260c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b81      	ldr	r3, [pc, #516]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	4b7d      	ldr	r3, [pc, #500]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a7c      	ldr	r2, [pc, #496]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b7a      	ldr	r3, [pc, #488]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250e:	4b77      	ldr	r3, [pc, #476]	; (80026ec <HAL_RCC_OscConfig+0x474>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251a:	4b74      	ldr	r3, [pc, #464]	; (80026ec <HAL_RCC_OscConfig+0x474>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a73      	ldr	r2, [pc, #460]	; (80026ec <HAL_RCC_OscConfig+0x474>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7ff fa23 	bl	8001970 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7ff fa1f 	bl	8001970 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e10c      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x474>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x2ea>
 8002554:	4b64      	ldr	r3, [pc, #400]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a63      	ldr	r2, [pc, #396]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
 8002560:	e01c      	b.n	800259c <HAL_RCC_OscConfig+0x324>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b05      	cmp	r3, #5
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x30c>
 800256a:	4b5f      	ldr	r3, [pc, #380]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a5e      	ldr	r2, [pc, #376]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	4b5c      	ldr	r3, [pc, #368]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a5b      	ldr	r2, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0x324>
 8002584:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a57      	ldr	r2, [pc, #348]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
 8002590:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a54      	ldr	r2, [pc, #336]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7ff f9e4 	bl	8001970 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7ff f9e0 	bl	8001970 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0cb      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCC_OscConfig+0x334>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7ff f9ce 	bl	8001970 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7ff f9ca 	bl	8001970 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0b5      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ee      	bne.n	80025d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002600:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	4a38      	ldr	r2, [pc, #224]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a1 	beq.w	8002758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d05c      	beq.n	80026dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d141      	bne.n	80026ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_RCC_OscConfig+0x478>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff f99e 	bl	8001970 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7ff f99a 	bl	8001970 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e087      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	3b01      	subs	r3, #1
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	491b      	ldr	r1, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x478>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff f973 	bl	8001970 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268e:	f7ff f96f 	bl	8001970 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e05c      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x416>
 80026ac:	e054      	b.n	8002758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_OscConfig+0x478>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff f95c 	bl	8001970 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7ff f958 	bl	8001970 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e045      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x444>
 80026da:	e03d      	b.n	8002758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e038      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000
 80026f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x4ec>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d028      	beq.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d121      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d11a      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800272a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	3b01      	subs	r3, #1
 800273e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d107      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800

08002768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0cc      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d90c      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b65      	ldr	r3, [pc, #404]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b63      	ldr	r3, [pc, #396]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0b8      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027bc:	4b59      	ldr	r3, [pc, #356]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a58      	ldr	r2, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d4:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b50      	ldr	r3, [pc, #320]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	494d      	ldr	r1, [pc, #308]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d044      	beq.n	8002888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d119      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e07f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d003      	beq.n	8002826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002822:	2b03      	cmp	r3, #3
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e067      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4934      	ldr	r1, [pc, #208]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002858:	f7ff f88a 	bl	8001970 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7ff f886 	bl	8001970 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e04f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d20c      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e032      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4916      	ldr	r1, [pc, #88]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	490e      	ldr	r1, [pc, #56]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ee:	f000 f821 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	490a      	ldr	r1, [pc, #40]	; (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	5ccb      	ldrb	r3, [r1, r3]
 8002902:	fa22 f303 	lsr.w	r3, r2, r3
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fbcc 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00
 8002924:	40023800 	.word	0x40023800
 8002928:	0800753c 	.word	0x0800753c
 800292c:	20000010 	.word	0x20000010
 8002930:	20000014 	.word	0x20000014

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002938:	b094      	sub	sp, #80	; 0x50
 800293a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	647b      	str	r3, [r7, #68]	; 0x44
 8002940:	2300      	movs	r3, #0
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002944:	2300      	movs	r3, #0
 8002946:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294c:	4b79      	ldr	r3, [pc, #484]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d00d      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x40>
 8002958:	2b08      	cmp	r3, #8
 800295a:	f200 80e1 	bhi.w	8002b20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x34>
 8002962:	2b04      	cmp	r3, #4
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x3a>
 8002966:	e0db      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b73      	ldr	r3, [pc, #460]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x204>)
 800296a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800296c:	e0db      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800296e:	4b73      	ldr	r3, [pc, #460]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002972:	e0d8      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002974:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800297c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297e:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	4b6a      	ldr	r3, [pc, #424]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	2200      	movs	r2, #0
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
 8002994:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
 800299e:	2300      	movs	r3, #0
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
 80029a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029a6:	4622      	mov	r2, r4
 80029a8:	462b      	mov	r3, r5
 80029aa:	f04f 0000 	mov.w	r0, #0
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	0159      	lsls	r1, r3, #5
 80029b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b8:	0150      	lsls	r0, r2, #5
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4621      	mov	r1, r4
 80029c0:	1a51      	subs	r1, r2, r1
 80029c2:	6139      	str	r1, [r7, #16]
 80029c4:	4629      	mov	r1, r5
 80029c6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029d8:	4659      	mov	r1, fp
 80029da:	018b      	lsls	r3, r1, #6
 80029dc:	4651      	mov	r1, sl
 80029de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029e2:	4651      	mov	r1, sl
 80029e4:	018a      	lsls	r2, r1, #6
 80029e6:	4651      	mov	r1, sl
 80029e8:	ebb2 0801 	subs.w	r8, r2, r1
 80029ec:	4659      	mov	r1, fp
 80029ee:	eb63 0901 	sbc.w	r9, r3, r1
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a06:	4690      	mov	r8, r2
 8002a08:	4699      	mov	r9, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	eb18 0303 	adds.w	r3, r8, r3
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	462b      	mov	r3, r5
 8002a14:	eb49 0303 	adc.w	r3, r9, r3
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a26:	4629      	mov	r1, r5
 8002a28:	024b      	lsls	r3, r1, #9
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a30:	4621      	mov	r1, r4
 8002a32:	024a      	lsls	r2, r1, #9
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a44:	f7fd fc24 	bl	8000290 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a50:	e058      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a52:	4b38      	ldr	r3, [pc, #224]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
 8002a68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	464b      	mov	r3, r9
 8002a70:	f04f 0000 	mov.w	r0, #0
 8002a74:	f04f 0100 	mov.w	r1, #0
 8002a78:	0159      	lsls	r1, r3, #5
 8002a7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a7e:	0150      	lsls	r0, r2, #5
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4641      	mov	r1, r8
 8002a86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a8a:	4649      	mov	r1, r9
 8002a8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002aa4:	ebb2 040a 	subs.w	r4, r2, sl
 8002aa8:	eb63 050b 	sbc.w	r5, r3, fp
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	00eb      	lsls	r3, r5, #3
 8002ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aba:	00e2      	lsls	r2, r4, #3
 8002abc:	4614      	mov	r4, r2
 8002abe:	461d      	mov	r5, r3
 8002ac0:	4643      	mov	r3, r8
 8002ac2:	18e3      	adds	r3, r4, r3
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	eb45 0303 	adc.w	r3, r5, r3
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ada:	4629      	mov	r1, r5
 8002adc:	028b      	lsls	r3, r1, #10
 8002ade:	4621      	mov	r1, r4
 8002ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	028a      	lsls	r2, r1, #10
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aee:	2200      	movs	r2, #0
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	61fa      	str	r2, [r7, #28]
 8002af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002af8:	f7fd fbca 	bl	8000290 <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4613      	mov	r3, r2
 8002b02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3750      	adds	r7, #80	; 0x50
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	00f42400 	.word	0x00f42400
 8002b3c:	007a1200 	.word	0x007a1200

08002b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000010 	.word	0x20000010

08002b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b5c:	f7ff fff0 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4903      	ldr	r1, [pc, #12]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	0800754c 	.word	0x0800754c

08002b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b84:	f7ff ffdc 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0b5b      	lsrs	r3, r3, #13
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	0800754c 	.word	0x0800754c

08002ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	08db      	lsrs	r3, r3, #3
 8002be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_RCC_GetClockConfig+0x60>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40023c00 	.word	0x40023c00

08002c0c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e025      	b.n	8002c6c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fd fd8f 	bl	8000758 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f001 feb7 	bl	80049c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6839      	ldr	r1, [r7, #0]
 8002c5e:	f001 ff0c 	bl	8004a7a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e041      	b.n	8002d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fcac 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 fa96 	bl	80031e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e04e      	b.n	8002dca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x80>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d56:	d01d      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x80>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x80>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x80>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x80>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x80>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_TIM_Base_Start_IT+0xd8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x80>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d111      	bne.n	8002db8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b06      	cmp	r3, #6
 8002da4:	d010      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db6:	e007      	b.n	8002dc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40000800 	.word	0x40000800
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40010400 	.word	0x40010400
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40001800 	.word	0x40001800

08002df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d122      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d11b      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0202 	mvn.w	r2, #2
 8002e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f9b5 	bl	80031a6 <HAL_TIM_IC_CaptureCallback>
 8002e3c:	e005      	b.n	8002e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9a7 	bl	8003192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f9b8 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d122      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0204 	mvn.w	r2, #4
 8002e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f98b 	bl	80031a6 <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f97d 	bl	8003192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f98e 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d122      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0208 	mvn.w	r2, #8
 8002ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f961 	bl	80031a6 <HAL_TIM_IC_CaptureCallback>
 8002ee4:	e005      	b.n	8002ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f953 	bl	8003192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f964 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d122      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d11b      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0210 	mvn.w	r2, #16
 8002f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2208      	movs	r2, #8
 8002f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f937 	bl	80031a6 <HAL_TIM_IC_CaptureCallback>
 8002f38:	e005      	b.n	8002f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f929 	bl	8003192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f93a 	bl	80031ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d107      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0201 	mvn.w	r2, #1
 8002f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe f856 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b80      	cmp	r3, #128	; 0x80
 8002f84:	d10e      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f90:	2b80      	cmp	r3, #128	; 0x80
 8002f92:	d107      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fae0 	bl	8003564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8ff 	bl	80031ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0220 	mvn.w	r2, #32
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 faaa 	bl	8003550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_TIM_ConfigClockSource+0x1c>
 800301c:	2302      	movs	r3, #2
 800301e:	e0b4      	b.n	800318a <HAL_TIM_ConfigClockSource+0x186>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800303e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003058:	d03e      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0xd4>
 800305a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800305e:	f200 8087 	bhi.w	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	f000 8086 	beq.w	8003176 <HAL_TIM_ConfigClockSource+0x172>
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	d87f      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b70      	cmp	r3, #112	; 0x70
 8003072:	d01a      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0xa6>
 8003074:	2b70      	cmp	r3, #112	; 0x70
 8003076:	d87b      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b60      	cmp	r3, #96	; 0x60
 800307a:	d050      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x11a>
 800307c:	2b60      	cmp	r3, #96	; 0x60
 800307e:	d877      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b50      	cmp	r3, #80	; 0x50
 8003082:	d03c      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0xfa>
 8003084:	2b50      	cmp	r3, #80	; 0x50
 8003086:	d873      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d058      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x13a>
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d86f      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b30      	cmp	r3, #48	; 0x30
 8003092:	d064      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	2b30      	cmp	r3, #48	; 0x30
 8003096:	d86b      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b20      	cmp	r3, #32
 800309a:	d060      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b20      	cmp	r3, #32
 800309e:	d867      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d05c      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x15a>
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d05a      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x15a>
 80030a8:	e062      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f000 f9ad 	bl	8003418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	609a      	str	r2, [r3, #8]
      break;
 80030d6:	e04f      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f000 f996 	bl	8003418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030fa:	609a      	str	r2, [r3, #8]
      break;
 80030fc:	e03c      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	461a      	mov	r2, r3
 800310c:	f000 f90a 	bl	8003324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2150      	movs	r1, #80	; 0x50
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f963 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 800311c:	e02c      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	f000 f929 	bl	8003382 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2160      	movs	r1, #96	; 0x60
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f953 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 800313c:	e01c      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	461a      	mov	r2, r3
 800314c:	f000 f8ea 	bl	8003324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2140      	movs	r1, #64	; 0x40
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f943 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 800315c:	e00c      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f000 f93a 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 800316e:	e003      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      break;
 8003174:	e000      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <TIM_Base_SetConfig+0x114>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003202:	d00f      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <TIM_Base_SetConfig+0x118>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00b      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3c      	ldr	r2, [pc, #240]	; (8003300 <TIM_Base_SetConfig+0x11c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3b      	ldr	r2, [pc, #236]	; (8003304 <TIM_Base_SetConfig+0x120>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3a      	ldr	r2, [pc, #232]	; (8003308 <TIM_Base_SetConfig+0x124>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d108      	bne.n	8003236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a2f      	ldr	r2, [pc, #188]	; (80032f8 <TIM_Base_SetConfig+0x114>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d02b      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d027      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2c      	ldr	r2, [pc, #176]	; (80032fc <TIM_Base_SetConfig+0x118>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d023      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <TIM_Base_SetConfig+0x11c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01f      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a2a      	ldr	r2, [pc, #168]	; (8003304 <TIM_Base_SetConfig+0x120>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01b      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a29      	ldr	r2, [pc, #164]	; (8003308 <TIM_Base_SetConfig+0x124>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d017      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a28      	ldr	r2, [pc, #160]	; (800330c <TIM_Base_SetConfig+0x128>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a27      	ldr	r2, [pc, #156]	; (8003310 <TIM_Base_SetConfig+0x12c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00f      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <TIM_Base_SetConfig+0x130>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <TIM_Base_SetConfig+0x134>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a24      	ldr	r2, [pc, #144]	; (800331c <TIM_Base_SetConfig+0x138>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a23      	ldr	r2, [pc, #140]	; (8003320 <TIM_Base_SetConfig+0x13c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <TIM_Base_SetConfig+0x114>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0xf8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <TIM_Base_SetConfig+0x124>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	615a      	str	r2, [r3, #20]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800
 8003304:	40000c00 	.word	0x40000c00
 8003308:	40010400 	.word	0x40010400
 800330c:	40014000 	.word	0x40014000
 8003310:	40014400 	.word	0x40014400
 8003314:	40014800 	.word	0x40014800
 8003318:	40001800 	.word	0x40001800
 800331c:	40001c00 	.word	0x40001c00
 8003320:	40002000 	.word	0x40002000

08003324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f023 0201 	bic.w	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800334e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f023 030a 	bic.w	r3, r3, #10
 8003360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	621a      	str	r2, [r3, #32]
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003382:	b480      	push	{r7}
 8003384:	b087      	sub	sp, #28
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f023 0210 	bic.w	r2, r3, #16
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	031b      	lsls	r3, r3, #12
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	621a      	str	r2, [r3, #32]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	f043 0307 	orr.w	r3, r3, #7
 8003404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	021a      	lsls	r2, r3, #8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	431a      	orrs	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	609a      	str	r2, [r3, #8]
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800346c:	2302      	movs	r3, #2
 800346e:	e05a      	b.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a21      	ldr	r2, [pc, #132]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d01d      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1b      	ldr	r2, [pc, #108]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a18      	ldr	r2, [pc, #96]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a17      	ldr	r2, [pc, #92]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a15      	ldr	r2, [pc, #84]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10c      	bne.n	8003514 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4313      	orrs	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800
 8003540:	40000c00 	.word	0x40000c00
 8003544:	40010400 	.word	0x40010400
 8003548:	40014000 	.word	0x40014000
 800354c:	40001800 	.word	0x40001800

08003550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e03f      	b.n	800360a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe f8a2 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2224      	movs	r2, #36	; 0x24
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 ff8b 	bl	80044d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e021      	b.n	8003668 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fe f8fb 	bl	8001838 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b20      	cmp	r3, #32
 800368e:	d17c      	bne.n	800378a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_UART_Transmit+0x2c>
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e075      	b.n	800378c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Transmit+0x3e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e06e      	b.n	800378c <HAL_UART_Transmit+0x11c>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2221      	movs	r2, #33	; 0x21
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c4:	f7fe f954 	bl	8001970 <HAL_GetTick>
 80036c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d108      	bne.n	80036f2 <HAL_UART_Transmit+0x82>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e003      	b.n	80036fa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003702:	e02a      	b.n	800375a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2200      	movs	r2, #0
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fc3c 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e036      	b.n	800378c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003732:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	3302      	adds	r3, #2
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	e007      	b.n	800374c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3301      	adds	r3, #1
 800374a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1cf      	bne.n	8003704 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	2140      	movs	r1, #64	; 0x40
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fc0c 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e006      	b.n	800378c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e000      	b.n	800378c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800378a:	2302      	movs	r3, #2
  }
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d11d      	bne.n	80037ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_UART_Receive_IT+0x26>
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e016      	b.n	80037ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Receive_IT+0x38>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e00f      	b.n	80037ec <HAL_UART_Receive_IT+0x58>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	461a      	mov	r2, r3
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fc41 	bl	8004068 <UART_Start_Receive_IT>
 80037e6:	4603      	mov	r3, r0
 80037e8:	e000      	b.n	80037ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b0a2      	sub	sp, #136	; 0x88
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003814:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003818:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003828:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800382c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e3      	bne.n	8003802 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3314      	adds	r3, #20
 8003840:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800384a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3314      	adds	r3, #20
 8003858:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800385a:	65ba      	str	r2, [r7, #88]	; 0x58
 800385c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e5      	bne.n	800383a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	2b01      	cmp	r3, #1
 8003874:	d119      	bne.n	80038aa <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003888:	f023 0310 	bic.w	r3, r3, #16
 800388c:	67bb      	str	r3, [r7, #120]	; 0x78
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003896:	647a      	str	r2, [r7, #68]	; 0x44
 8003898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800389c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e5      	bne.n	8003876 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00f      	beq.n	80038d2 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d104      	bne.n	80038ca <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	4a53      	ldr	r2, [pc, #332]	; (8003a14 <HAL_UART_Abort_IT+0x220>)
 80038c6:	651a      	str	r2, [r3, #80]	; 0x50
 80038c8:	e003      	b.n	80038d2 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	2200      	movs	r2, #0
 80038d0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00f      	beq.n	80038fa <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d104      	bne.n	80038f2 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	4a4a      	ldr	r2, [pc, #296]	; (8003a18 <HAL_UART_Abort_IT+0x224>)
 80038ee:	651a      	str	r2, [r3, #80]	; 0x50
 80038f0:	e003      	b.n	80038fa <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	2200      	movs	r2, #0
 80038f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d12d      	bne.n	8003964 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3314      	adds	r3, #20
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	623b      	str	r3, [r7, #32]
   return(result);
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391e:	677b      	str	r3, [r7, #116]	; 0x74
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3314      	adds	r3, #20
 8003926:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003928:	633a      	str	r2, [r7, #48]	; 0x30
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800392e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00f      	beq.n	8003964 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe f9a1 	bl	8001c90 <HAL_DMA_Abort_IT>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	2200      	movs	r2, #0
 800395a:	651a      	str	r2, [r3, #80]	; 0x50
 800395c:	e002      	b.n	8003964 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	d130      	bne.n	80039d4 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	60fb      	str	r3, [r7, #12]
   return(result);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003988:	673b      	str	r3, [r7, #112]	; 0x70
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3314      	adds	r3, #20
 8003990:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003992:	61fa      	str	r2, [r7, #28]
 8003994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	69b9      	ldr	r1, [r7, #24]
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	617b      	str	r3, [r7, #20]
   return(result);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e5      	bne.n	8003972 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d012      	beq.n	80039d4 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe f96c 	bl	8001c90 <HAL_DMA_Abort_IT>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	2200      	movs	r2, #0
 80039c4:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039cc:	e002      	b.n	80039d4 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80039d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d116      	bne.n	8003a0a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 faab 	bl	8003f60 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3788      	adds	r7, #136	; 0x88
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	080041d3 	.word	0x080041d3
 8003a18:	08004233 	.word	0x08004233

08003a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b0ba      	sub	sp, #232	; 0xe8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_UART_IRQHandler+0x66>
 8003a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fc71 	bl	8004362 <UART_Receive_IT>
      return;
 8003a80:	e256      	b.n	8003f30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80de 	beq.w	8003c48 <HAL_UART_IRQHandler+0x22c>
 8003a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d106      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80d1 	beq.w	8003c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <HAL_UART_IRQHandler+0xae>
 8003ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_UART_IRQHandler+0xd2>
 8003ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f043 0202 	orr.w	r2, r3, #2
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_UART_IRQHandler+0xf6>
 8003afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0204 	orr.w	r2, r3, #4
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d011      	beq.n	8003b42 <HAL_UART_IRQHandler+0x126>
 8003b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d105      	bne.n	8003b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f043 0208 	orr.w	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 81ed 	beq.w	8003f26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_UART_IRQHandler+0x14e>
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fbfc 	bl	8004362 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d103      	bne.n	8003b96 <HAL_UART_IRQHandler+0x17a>
 8003b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d04f      	beq.n	8003c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 faa4 	bl	80040e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d141      	bne.n	8003c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1d9      	bne.n	8003baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d013      	beq.n	8003c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	4a7d      	ldr	r2, [pc, #500]	; (8003df8 <HAL_UART_IRQHandler+0x3dc>)
 8003c04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe f840 	bl	8001c90 <HAL_DMA_Abort_IT>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c20:	4610      	mov	r0, r2
 8003c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	e00e      	b.n	8003c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f990 	bl	8003f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e00a      	b.n	8003c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f98c 	bl	8003f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e006      	b.n	8003c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f988 	bl	8003f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c42:	e170      	b.n	8003f26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	bf00      	nop
    return;
 8003c46:	e16e      	b.n	8003f26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	f040 814a 	bne.w	8003ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8143 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 813c 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	f040 80b4 	bne.w	8003dfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8140 	beq.w	8003f2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	f080 8139 	bcs.w	8003f2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cca:	f000 8088 	beq.w	8003dde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1d9      	bne.n	8003cce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3314      	adds	r3, #20
 8003d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e1      	bne.n	8003d1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e3      	bne.n	8003d56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dae:	f023 0310 	bic.w	r3, r3, #16
 8003db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e3      	bne.n	8003d9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fd fee9 	bl	8001bb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8c0 	bl	8003f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003df4:	e099      	b.n	8003f2a <HAL_UART_IRQHandler+0x50e>
 8003df6:	bf00      	nop
 8003df8:	080041ab 	.word	0x080041ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 808b 	beq.w	8003f2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8086 	beq.w	8003f2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e46:	647a      	str	r2, [r7, #68]	; 0x44
 8003e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3314      	adds	r3, #20
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e3      	bne.n	8003e5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0310 	bic.w	r3, r3, #16
 8003eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ec4:	61fa      	str	r2, [r7, #28]
 8003ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	69b9      	ldr	r1, [r7, #24]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e3      	bne.n	8003ea0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f848 	bl	8003f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ee4:	e023      	b.n	8003f2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_UART_IRQHandler+0x4ea>
 8003ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9c7 	bl	8004292 <UART_Transmit_IT>
    return;
 8003f04:	e014      	b.n	8003f30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00e      	beq.n	8003f30 <HAL_UART_IRQHandler+0x514>
 8003f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa07 	bl	8004332 <UART_EndTransmit_IT>
    return;
 8003f24:	e004      	b.n	8003f30 <HAL_UART_IRQHandler+0x514>
    return;
 8003f26:	bf00      	nop
 8003f28:	e002      	b.n	8003f30 <HAL_UART_IRQHandler+0x514>
      return;
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <HAL_UART_IRQHandler+0x514>
      return;
 8003f2e:	bf00      	nop
  }
}
 8003f30:	37e8      	adds	r7, #232	; 0xe8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop

08003f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b090      	sub	sp, #64	; 0x40
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9c:	e050      	b.n	8004040 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d04c      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fac:	f7fd fce0 	bl	8001970 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d241      	bcs.n	8004040 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fdc:	637a      	str	r2, [r7, #52]	; 0x34
 8003fde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e5      	bne.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	63bb      	str	r3, [r7, #56]	; 0x38
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004010:	623a      	str	r2, [r7, #32]
 8004012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	69f9      	ldr	r1, [r7, #28]
 8004016:	6a3a      	ldr	r2, [r7, #32]
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	61bb      	str	r3, [r7, #24]
   return(result);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e5      	bne.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e00f      	b.n	8004060 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	429a      	cmp	r2, r3
 800405c:	d09f      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3740      	adds	r7, #64	; 0x40
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2222      	movs	r2, #34	; 0x22
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0220 	orr.w	r2, r2, #32
 80040d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b095      	sub	sp, #84	; 0x54
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800410c:	643a      	str	r2, [r7, #64]	; 0x40
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e5      	bne.n	80040ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3314      	adds	r3, #20
 8004126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	64bb      	str	r3, [r7, #72]	; 0x48
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004140:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	2b01      	cmp	r3, #1
 800415a:	d119      	bne.n	8004190 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	60bb      	str	r3, [r7, #8]
   return(result);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f023 0310 	bic.w	r3, r3, #16
 8004172:	647b      	str	r3, [r7, #68]	; 0x44
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800417c:	61ba      	str	r2, [r7, #24]
 800417e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6979      	ldr	r1, [r7, #20]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	613b      	str	r3, [r7, #16]
   return(result);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800419e:	bf00      	nop
 80041a0:	3754      	adds	r7, #84	; 0x54
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff fec1 	bl	8003f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e4:	2200      	movs	r2, #0
 80041e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d117      	bne.n	800422a <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7ff fe9c 	bl	8003f60 <HAL_UART_AbortCpltCallback>
 8004228:	e000      	b.n	800422c <UART_DMATxAbortCallback+0x5a>
      return;
 800422a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	2200      	movs	r2, #0
 8004246:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004256:	2b00      	cmp	r3, #0
 8004258:	d117      	bne.n	800428a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7ff fe6c 	bl	8003f60 <HAL_UART_AbortCpltCallback>
 8004288:	e000      	b.n	800428c <UART_DMARxAbortCallback+0x5a>
      return;
 800428a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b21      	cmp	r3, #33	; 0x21
 80042a4:	d13e      	bne.n	8004324 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	d114      	bne.n	80042da <UART_Transmit_IT+0x48>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d110      	bne.n	80042da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	1c9a      	adds	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]
 80042d8:	e008      	b.n	80042ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	1c59      	adds	r1, r3, #1
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6211      	str	r1, [r2, #32]
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4619      	mov	r1, r3
 80042fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10f      	bne.n	8004320 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800430e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800431e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004348:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fdf0 	bl	8003f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b08c      	sub	sp, #48	; 0x30
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b22      	cmp	r3, #34	; 0x22
 8004374:	f040 80ab 	bne.w	80044ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004380:	d117      	bne.n	80043b2 <UART_Receive_IT+0x50>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d113      	bne.n	80043b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	b29b      	uxth	r3, r3
 800439c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	1c9a      	adds	r2, r3, #2
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
 80043b0:	e026      	b.n	8004400 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c4:	d007      	beq.n	80043d6 <UART_Receive_IT+0x74>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <UART_Receive_IT+0x82>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	e008      	b.n	80043f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29b      	uxth	r3, r3
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4619      	mov	r1, r3
 800440e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004410:	2b00      	cmp	r3, #0
 8004412:	d15a      	bne.n	80044ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0220 	bic.w	r2, r2, #32
 8004422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	2b01      	cmp	r3, #1
 8004452:	d135      	bne.n	80044c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	613b      	str	r3, [r7, #16]
   return(result);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f023 0310 	bic.w	r3, r3, #16
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447a:	623a      	str	r2, [r7, #32]
 800447c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	69f9      	ldr	r1, [r7, #28]
 8004480:	6a3a      	ldr	r2, [r7, #32]
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	61bb      	str	r3, [r7, #24]
   return(result);
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e5      	bne.n	800445a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b10      	cmp	r3, #16
 800449a:	d10a      	bne.n	80044b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff fd5b 	bl	8003f74 <HAL_UARTEx_RxEventCallback>
 80044be:	e002      	b.n	80044c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fc fd87 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e002      	b.n	80044d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3730      	adds	r7, #48	; 0x30
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044dc:	b0c0      	sub	sp, #256	; 0x100
 80044de:	af00      	add	r7, sp, #0
 80044e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	68d9      	ldr	r1, [r3, #12]
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	ea40 0301 	orr.w	r3, r0, r1
 8004500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	431a      	orrs	r2, r3
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	431a      	orrs	r2, r3
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004530:	f021 010c 	bic.w	r1, r1, #12
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800453e:	430b      	orrs	r3, r1
 8004540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	6999      	ldr	r1, [r3, #24]
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	ea40 0301 	orr.w	r3, r0, r1
 800455e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b8f      	ldr	r3, [pc, #572]	; (80047a4 <UART_SetConfig+0x2cc>)
 8004568:	429a      	cmp	r2, r3
 800456a:	d005      	beq.n	8004578 <UART_SetConfig+0xa0>
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b8d      	ldr	r3, [pc, #564]	; (80047a8 <UART_SetConfig+0x2d0>)
 8004574:	429a      	cmp	r2, r3
 8004576:	d104      	bne.n	8004582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fe fb02 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 800457c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004580:	e003      	b.n	800458a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004582:	f7fe fae9 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 8004586:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004594:	f040 810c 	bne.w	80047b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800459c:	2200      	movs	r2, #0
 800459e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045aa:	4622      	mov	r2, r4
 80045ac:	462b      	mov	r3, r5
 80045ae:	1891      	adds	r1, r2, r2
 80045b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80045b2:	415b      	adcs	r3, r3
 80045b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045ba:	4621      	mov	r1, r4
 80045bc:	eb12 0801 	adds.w	r8, r2, r1
 80045c0:	4629      	mov	r1, r5
 80045c2:	eb43 0901 	adc.w	r9, r3, r1
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045da:	4690      	mov	r8, r2
 80045dc:	4699      	mov	r9, r3
 80045de:	4623      	mov	r3, r4
 80045e0:	eb18 0303 	adds.w	r3, r8, r3
 80045e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045e8:	462b      	mov	r3, r5
 80045ea:	eb49 0303 	adc.w	r3, r9, r3
 80045ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004606:	460b      	mov	r3, r1
 8004608:	18db      	adds	r3, r3, r3
 800460a:	653b      	str	r3, [r7, #80]	; 0x50
 800460c:	4613      	mov	r3, r2
 800460e:	eb42 0303 	adc.w	r3, r2, r3
 8004612:	657b      	str	r3, [r7, #84]	; 0x54
 8004614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800461c:	f7fb fe38 	bl	8000290 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4b61      	ldr	r3, [pc, #388]	; (80047ac <UART_SetConfig+0x2d4>)
 8004626:	fba3 2302 	umull	r2, r3, r3, r2
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	011c      	lsls	r4, r3, #4
 800462e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004632:	2200      	movs	r2, #0
 8004634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004638:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800463c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	1891      	adds	r1, r2, r2
 8004646:	64b9      	str	r1, [r7, #72]	; 0x48
 8004648:	415b      	adcs	r3, r3
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004650:	4641      	mov	r1, r8
 8004652:	eb12 0a01 	adds.w	sl, r2, r1
 8004656:	4649      	mov	r1, r9
 8004658:	eb43 0b01 	adc.w	fp, r3, r1
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800466c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004670:	4692      	mov	sl, r2
 8004672:	469b      	mov	fp, r3
 8004674:	4643      	mov	r3, r8
 8004676:	eb1a 0303 	adds.w	r3, sl, r3
 800467a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800467e:	464b      	mov	r3, r9
 8004680:	eb4b 0303 	adc.w	r3, fp, r3
 8004684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004694:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800469c:	460b      	mov	r3, r1
 800469e:	18db      	adds	r3, r3, r3
 80046a0:	643b      	str	r3, [r7, #64]	; 0x40
 80046a2:	4613      	mov	r3, r2
 80046a4:	eb42 0303 	adc.w	r3, r2, r3
 80046a8:	647b      	str	r3, [r7, #68]	; 0x44
 80046aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046b2:	f7fb fded 	bl	8000290 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	4b3b      	ldr	r3, [pc, #236]	; (80047ac <UART_SetConfig+0x2d4>)
 80046be:	fba3 2301 	umull	r2, r3, r3, r1
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2264      	movs	r2, #100	; 0x64
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	1acb      	subs	r3, r1, r3
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046d2:	4b36      	ldr	r3, [pc, #216]	; (80047ac <UART_SetConfig+0x2d4>)
 80046d4:	fba3 2302 	umull	r2, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046e0:	441c      	add	r4, r3
 80046e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80046fc:	415b      	adcs	r3, r3
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004704:	4641      	mov	r1, r8
 8004706:	1851      	adds	r1, r2, r1
 8004708:	6339      	str	r1, [r7, #48]	; 0x30
 800470a:	4649      	mov	r1, r9
 800470c:	414b      	adcs	r3, r1
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800471c:	4659      	mov	r1, fp
 800471e:	00cb      	lsls	r3, r1, #3
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004726:	4651      	mov	r1, sl
 8004728:	00ca      	lsls	r2, r1, #3
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	4603      	mov	r3, r0
 8004730:	4642      	mov	r2, r8
 8004732:	189b      	adds	r3, r3, r2
 8004734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004738:	464b      	mov	r3, r9
 800473a:	460a      	mov	r2, r1
 800473c:	eb42 0303 	adc.w	r3, r2, r3
 8004740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004750:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004758:	460b      	mov	r3, r1
 800475a:	18db      	adds	r3, r3, r3
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
 800475e:	4613      	mov	r3, r2
 8004760:	eb42 0303 	adc.w	r3, r2, r3
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800476a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800476e:	f7fb fd8f 	bl	8000290 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <UART_SetConfig+0x2d4>)
 8004778:	fba3 1302 	umull	r1, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	2164      	movs	r1, #100	; 0x64
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	3332      	adds	r3, #50	; 0x32
 800478a:	4a08      	ldr	r2, [pc, #32]	; (80047ac <UART_SetConfig+0x2d4>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	f003 0207 	and.w	r2, r3, #7
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4422      	add	r2, r4
 800479e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047a0:	e105      	b.n	80049ae <UART_SetConfig+0x4d6>
 80047a2:	bf00      	nop
 80047a4:	40011000 	.word	0x40011000
 80047a8:	40011400 	.word	0x40011400
 80047ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047c2:	4642      	mov	r2, r8
 80047c4:	464b      	mov	r3, r9
 80047c6:	1891      	adds	r1, r2, r2
 80047c8:	6239      	str	r1, [r7, #32]
 80047ca:	415b      	adcs	r3, r3
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
 80047ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047d2:	4641      	mov	r1, r8
 80047d4:	1854      	adds	r4, r2, r1
 80047d6:	4649      	mov	r1, r9
 80047d8:	eb43 0501 	adc.w	r5, r3, r1
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	00eb      	lsls	r3, r5, #3
 80047e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ea:	00e2      	lsls	r2, r4, #3
 80047ec:	4614      	mov	r4, r2
 80047ee:	461d      	mov	r5, r3
 80047f0:	4643      	mov	r3, r8
 80047f2:	18e3      	adds	r3, r4, r3
 80047f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047f8:	464b      	mov	r3, r9
 80047fa:	eb45 0303 	adc.w	r3, r5, r3
 80047fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800480e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800481e:	4629      	mov	r1, r5
 8004820:	008b      	lsls	r3, r1, #2
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004828:	4621      	mov	r1, r4
 800482a:	008a      	lsls	r2, r1, #2
 800482c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004830:	f7fb fd2e 	bl	8000290 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4b60      	ldr	r3, [pc, #384]	; (80049bc <UART_SetConfig+0x4e4>)
 800483a:	fba3 2302 	umull	r2, r3, r3, r2
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	011c      	lsls	r4, r3, #4
 8004842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004846:	2200      	movs	r2, #0
 8004848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800484c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004854:	4642      	mov	r2, r8
 8004856:	464b      	mov	r3, r9
 8004858:	1891      	adds	r1, r2, r2
 800485a:	61b9      	str	r1, [r7, #24]
 800485c:	415b      	adcs	r3, r3
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004864:	4641      	mov	r1, r8
 8004866:	1851      	adds	r1, r2, r1
 8004868:	6139      	str	r1, [r7, #16]
 800486a:	4649      	mov	r1, r9
 800486c:	414b      	adcs	r3, r1
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800487c:	4659      	mov	r1, fp
 800487e:	00cb      	lsls	r3, r1, #3
 8004880:	4651      	mov	r1, sl
 8004882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004886:	4651      	mov	r1, sl
 8004888:	00ca      	lsls	r2, r1, #3
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	4603      	mov	r3, r0
 8004890:	4642      	mov	r2, r8
 8004892:	189b      	adds	r3, r3, r2
 8004894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004898:	464b      	mov	r3, r9
 800489a:	460a      	mov	r2, r1
 800489c:	eb42 0303 	adc.w	r3, r2, r3
 80048a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048bc:	4649      	mov	r1, r9
 80048be:	008b      	lsls	r3, r1, #2
 80048c0:	4641      	mov	r1, r8
 80048c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c6:	4641      	mov	r1, r8
 80048c8:	008a      	lsls	r2, r1, #2
 80048ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048ce:	f7fb fcdf 	bl	8000290 <__aeabi_uldivmod>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4b39      	ldr	r3, [pc, #228]	; (80049bc <UART_SetConfig+0x4e4>)
 80048d8:	fba3 1302 	umull	r1, r3, r3, r2
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	2164      	movs	r1, #100	; 0x64
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	3332      	adds	r3, #50	; 0x32
 80048ea:	4a34      	ldr	r2, [pc, #208]	; (80049bc <UART_SetConfig+0x4e4>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f6:	441c      	add	r4, r3
 80048f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fc:	2200      	movs	r2, #0
 80048fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004900:	677a      	str	r2, [r7, #116]	; 0x74
 8004902:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004906:	4642      	mov	r2, r8
 8004908:	464b      	mov	r3, r9
 800490a:	1891      	adds	r1, r2, r2
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	415b      	adcs	r3, r3
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004916:	4641      	mov	r1, r8
 8004918:	1851      	adds	r1, r2, r1
 800491a:	6039      	str	r1, [r7, #0]
 800491c:	4649      	mov	r1, r9
 800491e:	414b      	adcs	r3, r1
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800492e:	4659      	mov	r1, fp
 8004930:	00cb      	lsls	r3, r1, #3
 8004932:	4651      	mov	r1, sl
 8004934:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004938:	4651      	mov	r1, sl
 800493a:	00ca      	lsls	r2, r1, #3
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	4603      	mov	r3, r0
 8004942:	4642      	mov	r2, r8
 8004944:	189b      	adds	r3, r3, r2
 8004946:	66bb      	str	r3, [r7, #104]	; 0x68
 8004948:	464b      	mov	r3, r9
 800494a:	460a      	mov	r2, r1
 800494c:	eb42 0303 	adc.w	r3, r2, r3
 8004950:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	663b      	str	r3, [r7, #96]	; 0x60
 800495c:	667a      	str	r2, [r7, #100]	; 0x64
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800496a:	4649      	mov	r1, r9
 800496c:	008b      	lsls	r3, r1, #2
 800496e:	4641      	mov	r1, r8
 8004970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004974:	4641      	mov	r1, r8
 8004976:	008a      	lsls	r2, r1, #2
 8004978:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800497c:	f7fb fc88 	bl	8000290 <__aeabi_uldivmod>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <UART_SetConfig+0x4e4>)
 8004986:	fba3 1302 	umull	r1, r3, r3, r2
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	2164      	movs	r1, #100	; 0x64
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	3332      	adds	r3, #50	; 0x32
 8004998:	4a08      	ldr	r2, [pc, #32]	; (80049bc <UART_SetConfig+0x4e4>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	f003 020f 	and.w	r2, r3, #15
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4422      	add	r2, r4
 80049ac:	609a      	str	r2, [r3, #8]
}
 80049ae:	bf00      	nop
 80049b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049b4:	46bd      	mov	sp, r7
 80049b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ba:	bf00      	nop
 80049bc:	51eb851f 	.word	0x51eb851f

080049c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d123      	bne.n	8004a1a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	6851      	ldr	r1, [r2, #4]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	6892      	ldr	r2, [r2, #8]
 80049e6:	4311      	orrs	r1, r2
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	68d2      	ldr	r2, [r2, #12]
 80049ec:	4311      	orrs	r1, r2
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	6912      	ldr	r2, [r2, #16]
 80049f2:	4311      	orrs	r1, r2
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	6952      	ldr	r2, [r2, #20]
 80049f8:	4311      	orrs	r1, r2
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	6992      	ldr	r2, [r2, #24]
 80049fe:	4311      	orrs	r1, r2
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	69d2      	ldr	r2, [r2, #28]
 8004a04:	4311      	orrs	r1, r2
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	6a12      	ldr	r2, [r2, #32]
 8004a0a:	4311      	orrs	r1, r2
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a10:	430a      	orrs	r2, r1
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e028      	b.n	8004a6c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	69d9      	ldr	r1, [r3, #28]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	4319      	orrs	r1, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	430b      	orrs	r3, r1
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	6851      	ldr	r1, [r2, #4]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	6892      	ldr	r2, [r2, #8]
 8004a4c:	4311      	orrs	r1, r2
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	68d2      	ldr	r2, [r2, #12]
 8004a52:	4311      	orrs	r1, r2
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	6912      	ldr	r2, [r2, #16]
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	6952      	ldr	r2, [r2, #20]
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	6992      	ldr	r2, [r2, #24]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d128      	bne.n	8004ade <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	1e59      	subs	r1, r3, #1
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	4319      	orrs	r1, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	4319      	orrs	r1, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	031b      	lsls	r3, r3, #12
 8004ab6:	4319      	orrs	r1, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	4319      	orrs	r1, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	051b      	lsls	r3, r3, #20
 8004aca:	4319      	orrs	r1, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	061b      	lsls	r3, r3, #24
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	609a      	str	r2, [r3, #8]
 8004adc:	e02f      	b.n	8004b3e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	68d2      	ldr	r2, [r2, #12]
 8004aee:	3a01      	subs	r2, #1
 8004af0:	0311      	lsls	r1, r2, #12
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	6952      	ldr	r2, [r2, #20]
 8004af6:	3a01      	subs	r2, #1
 8004af8:	0512      	lsls	r2, r2, #20
 8004afa:	430a      	orrs	r2, r1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	1e59      	subs	r1, r3, #1
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	4319      	orrs	r1, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	4319      	orrs	r1, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	4319      	orrs	r1, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	430b      	orrs	r3, r1
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b5e:	2b84      	cmp	r3, #132	; 0x84
 8004b60:	d005      	beq.n	8004b6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	3303      	adds	r3, #3
 8004b6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b80:	f000 faf6 	bl	8005170 <vTaskStartScheduler>
  
  return osOK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b8c:	b089      	sub	sp, #36	; 0x24
 8004b8e:	af04      	add	r7, sp, #16
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d020      	beq.n	8004bde <osThreadCreate+0x54>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01c      	beq.n	8004bde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685c      	ldr	r4, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681d      	ldr	r5, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691e      	ldr	r6, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ffc8 	bl	8004b4c <makeFreeRtosPriority>
 8004bbc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bc6:	9202      	str	r2, [sp, #8]
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	9100      	str	r1, [sp, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4632      	mov	r2, r6
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 f8ed 	bl	8004db2 <xTaskCreateStatic>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e01c      	b.n	8004c18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685c      	ldr	r4, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bea:	b29e      	uxth	r6, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ffaa 	bl	8004b4c <makeFreeRtosPriority>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	f107 030c 	add.w	r3, r7, #12
 8004bfe:	9301      	str	r3, [sp, #4]
 8004c00:	9200      	str	r2, [sp, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	4632      	mov	r2, r6
 8004c06:	4629      	mov	r1, r5
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 f92f 	bl	8004e6c <xTaskCreate>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	e000      	b.n	8004c1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <osDelay+0x16>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	e000      	b.n	8004c3a <osDelay+0x18>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fa64 	bl	8005108 <vTaskDelay>
  
  return osOK;
 8004c40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f103 0208 	add.w	r2, r3, #8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f103 0208 	add.w	r2, r3, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f103 0208 	add.w	r2, r3, #8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d103      	bne.n	8004d0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e00c      	b.n	8004d26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e002      	b.n	8004d1a <vListInsert+0x2e>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d2f6      	bcs.n	8004d14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6892      	ldr	r2, [r2, #8]
 8004d74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6852      	ldr	r2, [r2, #4]
 8004d7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d103      	bne.n	8004d92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	1e5a      	subs	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b08e      	sub	sp, #56	; 0x38
 8004db6:	af04      	add	r7, sp, #16
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
 8004dbe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004dd8:	bf00      	nop
 8004dda:	e7fe      	b.n	8004dda <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <xTaskCreateStatic+0x46>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	61fb      	str	r3, [r7, #28]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004df8:	23b4      	movs	r3, #180	; 0xb4
 8004dfa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2bb4      	cmp	r3, #180	; 0xb4
 8004e00:	d00a      	beq.n	8004e18 <xTaskCreateStatic+0x66>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	61bb      	str	r3, [r7, #24]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01e      	beq.n	8004e5e <xTaskCreateStatic+0xac>
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9303      	str	r3, [sp, #12]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	f107 0314 	add.w	r3, r7, #20
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f851 	bl	8004ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e58:	f000 f8ec 	bl	8005034 <prvAddNewTaskToReadyList>
 8004e5c:	e001      	b.n	8004e62 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e62:	697b      	ldr	r3, [r7, #20]
	}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3728      	adds	r7, #40	; 0x28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	; 0x30
 8004e70:	af04      	add	r7, sp, #16
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fef1 	bl	8005c68 <pvPortMalloc>
 8004e86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00e      	beq.n	8004eac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e8e:	20b4      	movs	r0, #180	; 0xb4
 8004e90:	f000 feea 	bl	8005c68 <pvPortMalloc>
 8004e94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea2:	e005      	b.n	8004eb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ea4:	6978      	ldr	r0, [r7, #20]
 8004ea6:	f000 ffab 	bl	8005e00 <vPortFree>
 8004eaa:	e001      	b.n	8004eb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d017      	beq.n	8004ee6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9303      	str	r3, [sp, #12]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	9302      	str	r3, [sp, #8]
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f80f 	bl	8004ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eda:	69f8      	ldr	r0, [r7, #28]
 8004edc:	f000 f8aa 	bl	8005034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e002      	b.n	8004eec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004eec:	69bb      	ldr	r3, [r7, #24]
	}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f10:	3b01      	subs	r3, #1
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f023 0307 	bic.w	r3, r3, #7
 8004f1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	617b      	str	r3, [r7, #20]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01f      	beq.n	8004f86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	e012      	b.n	8004f72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	7819      	ldrb	r1, [r3, #0]
 8004f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	3334      	adds	r3, #52	; 0x34
 8004f5c:	460a      	mov	r2, r1
 8004f5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d006      	beq.n	8004f7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b0f      	cmp	r3, #15
 8004f76:	d9e9      	bls.n	8004f4c <prvInitialiseNewTask+0x54>
 8004f78:	e000      	b.n	8004f7c <prvInitialiseNewTask+0x84>
			{
				break;
 8004f7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f84:	e003      	b.n	8004f8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	2b06      	cmp	r3, #6
 8004f92:	d901      	bls.n	8004f98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f94:	2306      	movs	r3, #6
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fe6b 	bl	8004c8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	3318      	adds	r3, #24
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fe66 	bl	8004c8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	f1c3 0207 	rsb	r2, r3, #7
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	334c      	adds	r3, #76	; 0x4c
 8004fe8:	2260      	movs	r2, #96	; 0x60
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f001 f94c 	bl	800628a <memset>
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	4a0c      	ldr	r2, [pc, #48]	; (8005028 <prvInitialiseNewTask+0x130>)
 8004ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	4a0c      	ldr	r2, [pc, #48]	; (800502c <prvInitialiseNewTask+0x134>)
 8004ffc:	655a      	str	r2, [r3, #84]	; 0x54
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	4a0b      	ldr	r2, [pc, #44]	; (8005030 <prvInitialiseNewTask+0x138>)
 8005002:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	68f9      	ldr	r1, [r7, #12]
 8005008:	69b8      	ldr	r0, [r7, #24]
 800500a:	f000 fc1f 	bl	800584c <pxPortInitialiseStack>
 800500e:	4602      	mov	r2, r0
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005020:	bf00      	nop
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	08007574 	.word	0x08007574
 800502c:	08007594 	.word	0x08007594
 8005030:	08007554 	.word	0x08007554

08005034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800503c:	f000 fd32 	bl	8005aa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005040:	4b2a      	ldr	r3, [pc, #168]	; (80050ec <prvAddNewTaskToReadyList+0xb8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a29      	ldr	r2, [pc, #164]	; (80050ec <prvAddNewTaskToReadyList+0xb8>)
 8005048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800504a:	4b29      	ldr	r3, [pc, #164]	; (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005052:	4a27      	ldr	r2, [pc, #156]	; (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005058:	4b24      	ldr	r3, [pc, #144]	; (80050ec <prvAddNewTaskToReadyList+0xb8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d110      	bne.n	8005082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005060:	f000 facc 	bl	80055fc <prvInitialiseTaskLists>
 8005064:	e00d      	b.n	8005082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005066:	4b23      	ldr	r3, [pc, #140]	; (80050f4 <prvAddNewTaskToReadyList+0xc0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800506e:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	429a      	cmp	r2, r3
 800507a:	d802      	bhi.n	8005082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800507c:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005082:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <prvAddNewTaskToReadyList+0xc4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <prvAddNewTaskToReadyList+0xc4>)
 800508a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	2201      	movs	r2, #1
 8005092:	409a      	lsls	r2, r3
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <prvAddNewTaskToReadyList+0xc8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4313      	orrs	r3, r2
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <prvAddNewTaskToReadyList+0xc8>)
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <prvAddNewTaskToReadyList+0xcc>)
 80050ac:	441a      	add	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f7ff fdf5 	bl	8004ca4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050ba:	f000 fd23 	bl	8005b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <prvAddNewTaskToReadyList+0xc0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00e      	beq.n	80050e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d207      	bcs.n	80050e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <prvAddNewTaskToReadyList+0xd0>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200005fc 	.word	0x200005fc
 80050f0:	200004fc 	.word	0x200004fc
 80050f4:	20000608 	.word	0x20000608
 80050f8:	20000618 	.word	0x20000618
 80050fc:	20000604 	.word	0x20000604
 8005100:	20000500 	.word	0x20000500
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d017      	beq.n	800514a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800511a:	4b13      	ldr	r3, [pc, #76]	; (8005168 <vTaskDelay+0x60>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <vTaskDelay+0x30>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60bb      	str	r3, [r7, #8]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005138:	f000 f884 	bl	8005244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800513c:	2100      	movs	r1, #0
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fb1e 	bl	8005780 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005144:	f000 f88c 	bl	8005260 <xTaskResumeAll>
 8005148:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005150:	4b06      	ldr	r3, [pc, #24]	; (800516c <vTaskDelay+0x64>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000624 	.word	0x20000624
 800516c:	e000ed04 	.word	0xe000ed04

08005170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800517e:	463a      	mov	r2, r7
 8005180:	1d39      	adds	r1, r7, #4
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	4618      	mov	r0, r3
 8005188:	f7fb faf0 	bl	800076c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	9202      	str	r2, [sp, #8]
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	2300      	movs	r3, #0
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2300      	movs	r3, #0
 800519c:	460a      	mov	r2, r1
 800519e:	4921      	ldr	r1, [pc, #132]	; (8005224 <vTaskStartScheduler+0xb4>)
 80051a0:	4821      	ldr	r0, [pc, #132]	; (8005228 <vTaskStartScheduler+0xb8>)
 80051a2:	f7ff fe06 	bl	8004db2 <xTaskCreateStatic>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4a20      	ldr	r2, [pc, #128]	; (800522c <vTaskStartScheduler+0xbc>)
 80051aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051ac:	4b1f      	ldr	r3, [pc, #124]	; (800522c <vTaskStartScheduler+0xbc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051b4:	2301      	movs	r3, #1
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e001      	b.n	80051be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d11b      	bne.n	80051fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	613b      	str	r3, [r7, #16]
}
 80051d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051d8:	4b15      	ldr	r3, [pc, #84]	; (8005230 <vTaskStartScheduler+0xc0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	334c      	adds	r3, #76	; 0x4c
 80051de:	4a15      	ldr	r2, [pc, #84]	; (8005234 <vTaskStartScheduler+0xc4>)
 80051e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <vTaskStartScheduler+0xc8>)
 80051e4:	f04f 32ff 	mov.w	r2, #4294967295
 80051e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051ea:	4b14      	ldr	r3, [pc, #80]	; (800523c <vTaskStartScheduler+0xcc>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051f0:	4b13      	ldr	r3, [pc, #76]	; (8005240 <vTaskStartScheduler+0xd0>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051f6:	f000 fbb3 	bl	8005960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051fa:	e00e      	b.n	800521a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d10a      	bne.n	800521a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <vTaskStartScheduler+0xa8>
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	08007534 	.word	0x08007534
 8005228:	080055cd 	.word	0x080055cd
 800522c:	20000620 	.word	0x20000620
 8005230:	200004fc 	.word	0x200004fc
 8005234:	20000020 	.word	0x20000020
 8005238:	2000061c 	.word	0x2000061c
 800523c:	20000608 	.word	0x20000608
 8005240:	20000600 	.word	0x20000600

08005244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005248:	4b04      	ldr	r3, [pc, #16]	; (800525c <vTaskSuspendAll+0x18>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a03      	ldr	r2, [pc, #12]	; (800525c <vTaskSuspendAll+0x18>)
 8005250:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005252:	bf00      	nop
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	20000624 	.word	0x20000624

08005260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800526e:	4b41      	ldr	r3, [pc, #260]	; (8005374 <xTaskResumeAll+0x114>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <xTaskResumeAll+0x2c>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	603b      	str	r3, [r7, #0]
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800528c:	f000 fc0a 	bl	8005aa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005290:	4b38      	ldr	r3, [pc, #224]	; (8005374 <xTaskResumeAll+0x114>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3b01      	subs	r3, #1
 8005296:	4a37      	ldr	r2, [pc, #220]	; (8005374 <xTaskResumeAll+0x114>)
 8005298:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800529a:	4b36      	ldr	r3, [pc, #216]	; (8005374 <xTaskResumeAll+0x114>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d161      	bne.n	8005366 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052a2:	4b35      	ldr	r3, [pc, #212]	; (8005378 <xTaskResumeAll+0x118>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d05d      	beq.n	8005366 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052aa:	e02e      	b.n	800530a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ac:	4b33      	ldr	r3, [pc, #204]	; (800537c <xTaskResumeAll+0x11c>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3318      	adds	r3, #24
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fd50 	bl	8004d5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fd4b 	bl	8004d5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	2201      	movs	r2, #1
 80052ce:	409a      	lsls	r2, r3
 80052d0:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <xTaskResumeAll+0x120>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	4a2a      	ldr	r2, [pc, #168]	; (8005380 <xTaskResumeAll+0x120>)
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4a27      	ldr	r2, [pc, #156]	; (8005384 <xTaskResumeAll+0x124>)
 80052e8:	441a      	add	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f7ff fcd7 	bl	8004ca4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fa:	4b23      	ldr	r3, [pc, #140]	; (8005388 <xTaskResumeAll+0x128>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	429a      	cmp	r2, r3
 8005302:	d302      	bcc.n	800530a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005304:	4b21      	ldr	r3, [pc, #132]	; (800538c <xTaskResumeAll+0x12c>)
 8005306:	2201      	movs	r2, #1
 8005308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800530a:	4b1c      	ldr	r3, [pc, #112]	; (800537c <xTaskResumeAll+0x11c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1cc      	bne.n	80052ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005318:	f000 fa12 	bl	8005740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800531c:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <xTaskResumeAll+0x130>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d010      	beq.n	800534a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005328:	f000 f836 	bl	8005398 <xTaskIncrementTick>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005332:	4b16      	ldr	r3, [pc, #88]	; (800538c <xTaskResumeAll+0x12c>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3b01      	subs	r3, #1
 800533c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f1      	bne.n	8005328 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <xTaskResumeAll+0x130>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800534a:	4b10      	ldr	r3, [pc, #64]	; (800538c <xTaskResumeAll+0x12c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005356:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <xTaskResumeAll+0x134>)
 8005358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005366:	f000 fbcd 	bl	8005b04 <vPortExitCritical>

	return xAlreadyYielded;
 800536a:	68bb      	ldr	r3, [r7, #8]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000624 	.word	0x20000624
 8005378:	200005fc 	.word	0x200005fc
 800537c:	200005bc 	.word	0x200005bc
 8005380:	20000604 	.word	0x20000604
 8005384:	20000500 	.word	0x20000500
 8005388:	200004fc 	.word	0x200004fc
 800538c:	20000610 	.word	0x20000610
 8005390:	2000060c 	.word	0x2000060c
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a2:	4b4e      	ldr	r3, [pc, #312]	; (80054dc <xTaskIncrementTick+0x144>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f040 808e 	bne.w	80054c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053ac:	4b4c      	ldr	r3, [pc, #304]	; (80054e0 <xTaskIncrementTick+0x148>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3301      	adds	r3, #1
 80053b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053b4:	4a4a      	ldr	r2, [pc, #296]	; (80054e0 <xTaskIncrementTick+0x148>)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d120      	bne.n	8005402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053c0:	4b48      	ldr	r3, [pc, #288]	; (80054e4 <xTaskIncrementTick+0x14c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	603b      	str	r3, [r7, #0]
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <xTaskIncrementTick+0x46>
 80053e0:	4b40      	ldr	r3, [pc, #256]	; (80054e4 <xTaskIncrementTick+0x14c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <xTaskIncrementTick+0x150>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a3e      	ldr	r2, [pc, #248]	; (80054e4 <xTaskIncrementTick+0x14c>)
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4a3e      	ldr	r2, [pc, #248]	; (80054e8 <xTaskIncrementTick+0x150>)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	4b3d      	ldr	r3, [pc, #244]	; (80054ec <xTaskIncrementTick+0x154>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	4a3c      	ldr	r2, [pc, #240]	; (80054ec <xTaskIncrementTick+0x154>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	f000 f99f 	bl	8005740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005402:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <xTaskIncrementTick+0x158>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	429a      	cmp	r2, r3
 800540a:	d348      	bcc.n	800549e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800540c:	4b35      	ldr	r3, [pc, #212]	; (80054e4 <xTaskIncrementTick+0x14c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005416:	4b36      	ldr	r3, [pc, #216]	; (80054f0 <xTaskIncrementTick+0x158>)
 8005418:	f04f 32ff 	mov.w	r2, #4294967295
 800541c:	601a      	str	r2, [r3, #0]
					break;
 800541e:	e03e      	b.n	800549e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005420:	4b30      	ldr	r3, [pc, #192]	; (80054e4 <xTaskIncrementTick+0x14c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	429a      	cmp	r2, r3
 8005436:	d203      	bcs.n	8005440 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005438:	4a2d      	ldr	r2, [pc, #180]	; (80054f0 <xTaskIncrementTick+0x158>)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800543e:	e02e      	b.n	800549e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	3304      	adds	r3, #4
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fc8a 	bl	8004d5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	3318      	adds	r3, #24
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fc81 	bl	8004d5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	2201      	movs	r2, #1
 8005462:	409a      	lsls	r2, r3
 8005464:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <xTaskIncrementTick+0x15c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4313      	orrs	r3, r2
 800546a:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <xTaskIncrementTick+0x15c>)
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <xTaskIncrementTick+0x160>)
 800547c:	441a      	add	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3304      	adds	r3, #4
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f7ff fc0d 	bl	8004ca4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548e:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <xTaskIncrementTick+0x164>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	429a      	cmp	r2, r3
 8005496:	d3b9      	bcc.n	800540c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800549c:	e7b6      	b.n	800540c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800549e:	4b17      	ldr	r3, [pc, #92]	; (80054fc <xTaskIncrementTick+0x164>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	4914      	ldr	r1, [pc, #80]	; (80054f8 <xTaskIncrementTick+0x160>)
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d901      	bls.n	80054ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054ba:	4b11      	ldr	r3, [pc, #68]	; (8005500 <xTaskIncrementTick+0x168>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80054c2:	2301      	movs	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e004      	b.n	80054d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054c8:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <xTaskIncrementTick+0x16c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a0d      	ldr	r2, [pc, #52]	; (8005504 <xTaskIncrementTick+0x16c>)
 80054d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054d2:	697b      	ldr	r3, [r7, #20]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000624 	.word	0x20000624
 80054e0:	20000600 	.word	0x20000600
 80054e4:	200005b4 	.word	0x200005b4
 80054e8:	200005b8 	.word	0x200005b8
 80054ec:	20000614 	.word	0x20000614
 80054f0:	2000061c 	.word	0x2000061c
 80054f4:	20000604 	.word	0x20000604
 80054f8:	20000500 	.word	0x20000500
 80054fc:	200004fc 	.word	0x200004fc
 8005500:	20000610 	.word	0x20000610
 8005504:	2000060c 	.word	0x2000060c

08005508 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800550e:	4b29      	ldr	r3, [pc, #164]	; (80055b4 <vTaskSwitchContext+0xac>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005516:	4b28      	ldr	r3, [pc, #160]	; (80055b8 <vTaskSwitchContext+0xb0>)
 8005518:	2201      	movs	r2, #1
 800551a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800551c:	e044      	b.n	80055a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800551e:	4b26      	ldr	r3, [pc, #152]	; (80055b8 <vTaskSwitchContext+0xb0>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005524:	4b25      	ldr	r3, [pc, #148]	; (80055bc <vTaskSwitchContext+0xb4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	fab3 f383 	clz	r3, r3
 8005530:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005532:	7afb      	ldrb	r3, [r7, #11]
 8005534:	f1c3 031f 	rsb	r3, r3, #31
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	4921      	ldr	r1, [pc, #132]	; (80055c0 <vTaskSwitchContext+0xb8>)
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <vTaskSwitchContext+0x5c>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vTaskSwitchContext+0x5a>
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4a14      	ldr	r2, [pc, #80]	; (80055c0 <vTaskSwitchContext+0xb8>)
 8005570:	4413      	add	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	3308      	adds	r3, #8
 8005586:	429a      	cmp	r2, r3
 8005588:	d104      	bne.n	8005594 <vTaskSwitchContext+0x8c>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	4a0a      	ldr	r2, [pc, #40]	; (80055c4 <vTaskSwitchContext+0xbc>)
 800559c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <vTaskSwitchContext+0xbc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	334c      	adds	r3, #76	; 0x4c
 80055a4:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <vTaskSwitchContext+0xc0>)
 80055a6:	6013      	str	r3, [r2, #0]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	20000624 	.word	0x20000624
 80055b8:	20000610 	.word	0x20000610
 80055bc:	20000604 	.word	0x20000604
 80055c0:	20000500 	.word	0x20000500
 80055c4:	200004fc 	.word	0x200004fc
 80055c8:	20000020 	.word	0x20000020

080055cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055d4:	f000 f852 	bl	800567c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <prvIdleTask+0x28>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d9f9      	bls.n	80055d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <prvIdleTask+0x2c>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055f0:	e7f0      	b.n	80055d4 <prvIdleTask+0x8>
 80055f2:	bf00      	nop
 80055f4:	20000500 	.word	0x20000500
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	e00c      	b.n	8005622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4a12      	ldr	r2, [pc, #72]	; (800565c <prvInitialiseTaskLists+0x60>)
 8005614:	4413      	add	r3, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fb17 	bl	8004c4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3301      	adds	r3, #1
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b06      	cmp	r3, #6
 8005626:	d9ef      	bls.n	8005608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005628:	480d      	ldr	r0, [pc, #52]	; (8005660 <prvInitialiseTaskLists+0x64>)
 800562a:	f7ff fb0e 	bl	8004c4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800562e:	480d      	ldr	r0, [pc, #52]	; (8005664 <prvInitialiseTaskLists+0x68>)
 8005630:	f7ff fb0b 	bl	8004c4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005634:	480c      	ldr	r0, [pc, #48]	; (8005668 <prvInitialiseTaskLists+0x6c>)
 8005636:	f7ff fb08 	bl	8004c4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800563a:	480c      	ldr	r0, [pc, #48]	; (800566c <prvInitialiseTaskLists+0x70>)
 800563c:	f7ff fb05 	bl	8004c4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005640:	480b      	ldr	r0, [pc, #44]	; (8005670 <prvInitialiseTaskLists+0x74>)
 8005642:	f7ff fb02 	bl	8004c4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <prvInitialiseTaskLists+0x78>)
 8005648:	4a05      	ldr	r2, [pc, #20]	; (8005660 <prvInitialiseTaskLists+0x64>)
 800564a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <prvInitialiseTaskLists+0x7c>)
 800564e:	4a05      	ldr	r2, [pc, #20]	; (8005664 <prvInitialiseTaskLists+0x68>)
 8005650:	601a      	str	r2, [r3, #0]
}
 8005652:	bf00      	nop
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000500 	.word	0x20000500
 8005660:	2000058c 	.word	0x2000058c
 8005664:	200005a0 	.word	0x200005a0
 8005668:	200005bc 	.word	0x200005bc
 800566c:	200005d0 	.word	0x200005d0
 8005670:	200005e8 	.word	0x200005e8
 8005674:	200005b4 	.word	0x200005b4
 8005678:	200005b8 	.word	0x200005b8

0800567c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005682:	e019      	b.n	80056b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005684:	f000 fa0e 	bl	8005aa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005688:	4b10      	ldr	r3, [pc, #64]	; (80056cc <prvCheckTasksWaitingTermination+0x50>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff fb62 	bl	8004d5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800569a:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <prvCheckTasksWaitingTermination+0x54>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3b01      	subs	r3, #1
 80056a0:	4a0b      	ldr	r2, [pc, #44]	; (80056d0 <prvCheckTasksWaitingTermination+0x54>)
 80056a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <prvCheckTasksWaitingTermination+0x58>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <prvCheckTasksWaitingTermination+0x58>)
 80056ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056ae:	f000 fa29 	bl	8005b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f810 	bl	80056d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <prvCheckTasksWaitingTermination+0x58>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e1      	bne.n	8005684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	200005d0 	.word	0x200005d0
 80056d0:	200005fc 	.word	0x200005fc
 80056d4:	200005e4 	.word	0x200005e4

080056d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	334c      	adds	r3, #76	; 0x4c
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 ff09 	bl	80064fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fb81 	bl	8005e00 <vPortFree>
				vPortFree( pxTCB );
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fb7e 	bl	8005e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005704:	e018      	b.n	8005738 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d103      	bne.n	8005718 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fb75 	bl	8005e00 <vPortFree>
	}
 8005716:	e00f      	b.n	8005738 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800571e:	2b02      	cmp	r3, #2
 8005720:	d00a      	beq.n	8005738 <prvDeleteTCB+0x60>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	60fb      	str	r3, [r7, #12]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <prvDeleteTCB+0x5e>
	}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005746:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <prvResetNextTaskUnblockTime+0x38>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <prvResetNextTaskUnblockTime+0x3c>)
 8005752:	f04f 32ff 	mov.w	r2, #4294967295
 8005756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005758:	e008      	b.n	800576c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <prvResetNextTaskUnblockTime+0x38>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a04      	ldr	r2, [pc, #16]	; (800577c <prvResetNextTaskUnblockTime+0x3c>)
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	200005b4 	.word	0x200005b4
 800577c:	2000061c 	.word	0x2000061c

08005780 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800578a:	4b29      	ldr	r3, [pc, #164]	; (8005830 <prvAddCurrentTaskToDelayedList+0xb0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005790:	4b28      	ldr	r3, [pc, #160]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3304      	adds	r3, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fae1 	bl	8004d5e <uxListRemove>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	2201      	movs	r2, #1
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43da      	mvns	r2, r3
 80057b0:	4b21      	ldr	r3, [pc, #132]	; (8005838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4013      	ands	r3, r2
 80057b6:	4a20      	ldr	r2, [pc, #128]	; (8005838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d10a      	bne.n	80057d8 <prvAddCurrentTaskToDelayedList+0x58>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c8:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	481a      	ldr	r0, [pc, #104]	; (800583c <prvAddCurrentTaskToDelayedList+0xbc>)
 80057d2:	f7ff fa67 	bl	8004ca4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057d6:	e026      	b.n	8005826 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057e0:	4b14      	ldr	r3, [pc, #80]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d209      	bcs.n	8005804 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <prvAddCurrentTaskToDelayedList+0xc0>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f7ff fa75 	bl	8004cec <vListInsert>
}
 8005802:	e010      	b.n	8005826 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7ff fa6b 	bl	8004cec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d202      	bcs.n	8005826 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005820:	4a09      	ldr	r2, [pc, #36]	; (8005848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6013      	str	r3, [r2, #0]
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000600 	.word	0x20000600
 8005834:	200004fc 	.word	0x200004fc
 8005838:	20000604 	.word	0x20000604
 800583c:	200005e8 	.word	0x200005e8
 8005840:	200005b8 	.word	0x200005b8
 8005844:	200005b4 	.word	0x200005b4
 8005848:	2000061c 	.word	0x2000061c

0800584c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3b04      	subs	r3, #4
 800585c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3b04      	subs	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f023 0201 	bic.w	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3b04      	subs	r3, #4
 800587a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800587c:	4a0c      	ldr	r2, [pc, #48]	; (80058b0 <pxPortInitialiseStack+0x64>)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3b14      	subs	r3, #20
 8005886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3b04      	subs	r3, #4
 8005892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f06f 0202 	mvn.w	r2, #2
 800589a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3b20      	subs	r3, #32
 80058a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058a2:	68fb      	ldr	r3, [r7, #12]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	080058b5 	.word	0x080058b5

080058b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <prvTaskExitError+0x54>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d00a      	beq.n	80058de <prvTaskExitError+0x2a>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	60fb      	str	r3, [r7, #12]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <prvTaskExitError+0x28>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	60bb      	str	r3, [r7, #8]
}
 80058f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058f2:	bf00      	nop
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0fc      	beq.n	80058f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	2000001c 	.word	0x2000001c
 800590c:	00000000 	.word	0x00000000

08005910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pxCurrentTCBConst2>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	f380 8809 	msr	PSP, r0
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0
 800592a:	4770      	bx	lr
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst2>:
 8005930:	200004fc 	.word	0x200004fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005938:	4808      	ldr	r0, [pc, #32]	; (800595c <prvPortStartFirstTask+0x24>)
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	6800      	ldr	r0, [r0, #0]
 800593e:	f380 8808 	msr	MSP, r0
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8814 	msr	CONTROL, r0
 800594a:	b662      	cpsie	i
 800594c:	b661      	cpsie	f
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	df00      	svc	0
 8005958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800595a:	bf00      	nop
 800595c:	e000ed08 	.word	0xe000ed08

08005960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005966:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <xPortStartScheduler+0x120>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a46      	ldr	r2, [pc, #280]	; (8005a84 <xPortStartScheduler+0x124>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10a      	bne.n	8005986 <xPortStartScheduler+0x26>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	613b      	str	r3, [r7, #16]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005986:	4b3e      	ldr	r3, [pc, #248]	; (8005a80 <xPortStartScheduler+0x120>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a3f      	ldr	r2, [pc, #252]	; (8005a88 <xPortStartScheduler+0x128>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10a      	bne.n	80059a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60fb      	str	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059a6:	4b39      	ldr	r3, [pc, #228]	; (8005a8c <xPortStartScheduler+0x12c>)
 80059a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	22ff      	movs	r2, #255	; 0xff
 80059b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <xPortStartScheduler+0x130>)
 80059cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059ce:	4b31      	ldr	r3, [pc, #196]	; (8005a94 <xPortStartScheduler+0x134>)
 80059d0:	2207      	movs	r2, #7
 80059d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059d4:	e009      	b.n	80059ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80059d6:	4b2f      	ldr	r3, [pc, #188]	; (8005a94 <xPortStartScheduler+0x134>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3b01      	subs	r3, #1
 80059dc:	4a2d      	ldr	r2, [pc, #180]	; (8005a94 <xPortStartScheduler+0x134>)
 80059de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	2b80      	cmp	r3, #128	; 0x80
 80059f4:	d0ef      	beq.n	80059d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <xPortStartScheduler+0x134>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f1c3 0307 	rsb	r3, r3, #7
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d00a      	beq.n	8005a18 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60bb      	str	r3, [r7, #8]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a18:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a2a:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a36:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a4e:	f000 f8dd 	bl	8005c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a52:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <xPortStartScheduler+0x13c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a58:	f000 f8fc 	bl	8005c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a5c:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <xPortStartScheduler+0x140>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0f      	ldr	r2, [pc, #60]	; (8005aa0 <xPortStartScheduler+0x140>)
 8005a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a68:	f7ff ff66 	bl	8005938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a6c:	f7ff fd4c 	bl	8005508 <vTaskSwitchContext>
	prvTaskExitError();
 8005a70:	f7ff ff20 	bl	80058b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	e000ed00 	.word	0xe000ed00
 8005a84:	410fc271 	.word	0x410fc271
 8005a88:	410fc270 	.word	0x410fc270
 8005a8c:	e000e400 	.word	0xe000e400
 8005a90:	20000628 	.word	0x20000628
 8005a94:	2000062c 	.word	0x2000062c
 8005a98:	e000ed20 	.word	0xe000ed20
 8005a9c:	2000001c 	.word	0x2000001c
 8005aa0:	e000ef34 	.word	0xe000ef34

08005aa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	607b      	str	r3, [r7, #4]
}
 8005abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <vPortEnterCritical+0x58>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <vPortEnterCritical+0x58>)
 8005ac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <vPortEnterCritical+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d10f      	bne.n	8005af0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <vPortEnterCritical+0x5c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	603b      	str	r3, [r7, #0]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <vPortEnterCritical+0x4a>
	}
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	2000001c 	.word	0x2000001c
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b0a:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <vPortExitCritical+0x50>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <vPortExitCritical+0x24>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	607b      	str	r3, [r7, #4]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <vPortExitCritical+0x50>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <vPortExitCritical+0x50>)
 8005b30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <vPortExitCritical+0x50>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <vPortExitCritical+0x42>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000001c 	.word	0x2000001c
	...

08005b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b60:	f3ef 8009 	mrs	r0, PSP
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <pxCurrentTCBConst>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f01e 0f10 	tst.w	lr, #16
 8005b70:	bf08      	it	eq
 8005b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	6010      	str	r0, [r2, #0]
 8005b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b84:	f380 8811 	msr	BASEPRI, r0
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f7ff fcba 	bl	8005508 <vTaskSwitchContext>
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f380 8811 	msr	BASEPRI, r0
 8005b9c:	bc09      	pop	{r0, r3}
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	6808      	ldr	r0, [r1, #0]
 8005ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba6:	f01e 0f10 	tst.w	lr, #16
 8005baa:	bf08      	it	eq
 8005bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bb0:	f380 8809 	msr	PSP, r0
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	f3af 8000 	nop.w

08005bc0 <pxCurrentTCBConst>:
 8005bc0:	200004fc 	.word	0x200004fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop

08005bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
}
 8005be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005be2:	f7ff fbd9 	bl	8005398 <xTaskIncrementTick>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <SysTick_Handler+0x40>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f383 8811 	msr	BASEPRI, r3
}
 8005bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <vPortSetupTimerInterrupt+0x38>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <vPortSetupTimerInterrupt+0x3c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <vPortSetupTimerInterrupt+0x40>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <vPortSetupTimerInterrupt+0x44>)
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c30:	2207      	movs	r2, #7
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e010 	.word	0xe000e010
 8005c44:	e000e018 	.word	0xe000e018
 8005c48:	20000010 	.word	0x20000010
 8005c4c:	10624dd3 	.word	0x10624dd3
 8005c50:	e000e014 	.word	0xe000e014

08005c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c64 <vPortEnableVFP+0x10>
 8005c58:	6801      	ldr	r1, [r0, #0]
 8005c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c5e:	6001      	str	r1, [r0, #0]
 8005c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c62:	bf00      	nop
 8005c64:	e000ed88 	.word	0xe000ed88

08005c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c74:	f7ff fae6 	bl	8005244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c78:	4b5b      	ldr	r3, [pc, #364]	; (8005de8 <pvPortMalloc+0x180>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c80:	f000 f920 	bl	8005ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <pvPortMalloc+0x184>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 8093 	bne.w	8005db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01d      	beq.n	8005cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c98:	2208      	movs	r2, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	617b      	str	r3, [r7, #20]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d06e      	beq.n	8005db8 <pvPortMalloc+0x150>
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <pvPortMalloc+0x188>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d869      	bhi.n	8005db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ce4:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <pvPortMalloc+0x18c>)
 8005ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ce8:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <pvPortMalloc+0x18c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cee:	e004      	b.n	8005cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <pvPortMalloc+0xa4>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f1      	bne.n	8005cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <pvPortMalloc+0x180>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d050      	beq.n	8005db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	2308      	movs	r3, #8
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d91f      	bls.n	8005d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <pvPortMalloc+0xf8>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	613b      	str	r3, [r7, #16]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f000 f908 	bl	8005f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <pvPortMalloc+0x188>)
 8005d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <pvPortMalloc+0x188>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <pvPortMalloc+0x190>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d203      	bcs.n	8005d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <pvPortMalloc+0x188>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <pvPortMalloc+0x190>)
 8005d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <pvPortMalloc+0x184>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <pvPortMalloc+0x194>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <pvPortMalloc+0x194>)
 8005db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005db8:	f7ff fa52 	bl	8005260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <pvPortMalloc+0x174>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <pvPortMalloc+0x172>
	return pvReturn;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20004238 	.word	0x20004238
 8005dec:	2000424c 	.word	0x2000424c
 8005df0:	2000423c 	.word	0x2000423c
 8005df4:	20004230 	.word	0x20004230
 8005df8:	20004240 	.word	0x20004240
 8005dfc:	20004244 	.word	0x20004244

08005e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04d      	beq.n	8005eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e12:	2308      	movs	r3, #8
 8005e14:	425b      	negs	r3, r3
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <vPortFree+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <vPortFree+0x44>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <vPortFree+0x62>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60bb      	str	r3, [r7, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <vPortFree+0xb8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d11a      	bne.n	8005eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <vPortFree+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e88:	f7ff f9dc 	bl	8005244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <vPortFree+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <vPortFree+0xbc>)
 8005e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f000 f874 	bl	8005f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <vPortFree+0xc0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <vPortFree+0xc0>)
 8005ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eaa:	f7ff f9d9 	bl	8005260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000424c 	.word	0x2000424c
 8005ebc:	2000423c 	.word	0x2000423c
 8005ec0:	20004248 	.word	0x20004248

08005ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <prvHeapInit+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <prvHeapInit+0xac>)
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <prvHeapInit+0xb0>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <prvHeapInit+0xb0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f10:	2208      	movs	r2, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <prvHeapInit+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvHeapInit+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <prvHeapInit+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvHeapInit+0xb4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <prvHeapInit+0xb8>)
 8005f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <prvHeapInit+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <prvHeapInit+0xc0>)
 8005f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20000630 	.word	0x20000630
 8005f74:	20004230 	.word	0x20004230
 8005f78:	20004238 	.word	0x20004238
 8005f7c:	20004240 	.word	0x20004240
 8005f80:	2000423c 	.word	0x2000423c
 8005f84:	2000424c 	.word	0x2000424c

08005f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <prvInsertBlockIntoFreeList+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x14>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8f7      	bhi.n	8005f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d118      	bne.n	8006010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d00d      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e008      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20004230 	.word	0x20004230
 8006038:	20004238 	.word	0x20004238

0800603c <atoi>:
 800603c:	220a      	movs	r2, #10
 800603e:	2100      	movs	r1, #0
 8006040:	f000 bc00 	b.w	8006844 <strtol>

08006044 <__errno>:
 8006044:	4b01      	ldr	r3, [pc, #4]	; (800604c <__errno+0x8>)
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000020 	.word	0x20000020

08006050 <std>:
 8006050:	2300      	movs	r3, #0
 8006052:	b510      	push	{r4, lr}
 8006054:	4604      	mov	r4, r0
 8006056:	e9c0 3300 	strd	r3, r3, [r0]
 800605a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800605e:	6083      	str	r3, [r0, #8]
 8006060:	8181      	strh	r1, [r0, #12]
 8006062:	6643      	str	r3, [r0, #100]	; 0x64
 8006064:	81c2      	strh	r2, [r0, #14]
 8006066:	6183      	str	r3, [r0, #24]
 8006068:	4619      	mov	r1, r3
 800606a:	2208      	movs	r2, #8
 800606c:	305c      	adds	r0, #92	; 0x5c
 800606e:	f000 f90c 	bl	800628a <memset>
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <std+0x38>)
 8006074:	6263      	str	r3, [r4, #36]	; 0x24
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <std+0x3c>)
 8006078:	62a3      	str	r3, [r4, #40]	; 0x28
 800607a:	4b05      	ldr	r3, [pc, #20]	; (8006090 <std+0x40>)
 800607c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <std+0x44>)
 8006080:	6224      	str	r4, [r4, #32]
 8006082:	6323      	str	r3, [r4, #48]	; 0x30
 8006084:	bd10      	pop	{r4, pc}
 8006086:	bf00      	nop
 8006088:	080065d5 	.word	0x080065d5
 800608c:	080065f7 	.word	0x080065f7
 8006090:	0800662f 	.word	0x0800662f
 8006094:	08006653 	.word	0x08006653

08006098 <_cleanup_r>:
 8006098:	4901      	ldr	r1, [pc, #4]	; (80060a0 <_cleanup_r+0x8>)
 800609a:	f000 b8af 	b.w	80061fc <_fwalk_reent>
 800609e:	bf00      	nop
 80060a0:	08006b65 	.word	0x08006b65

080060a4 <__sfmoreglue>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	2268      	movs	r2, #104	; 0x68
 80060a8:	1e4d      	subs	r5, r1, #1
 80060aa:	4355      	muls	r5, r2
 80060ac:	460e      	mov	r6, r1
 80060ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060b2:	f000 f913 	bl	80062dc <_malloc_r>
 80060b6:	4604      	mov	r4, r0
 80060b8:	b140      	cbz	r0, 80060cc <__sfmoreglue+0x28>
 80060ba:	2100      	movs	r1, #0
 80060bc:	e9c0 1600 	strd	r1, r6, [r0]
 80060c0:	300c      	adds	r0, #12
 80060c2:	60a0      	str	r0, [r4, #8]
 80060c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060c8:	f000 f8df 	bl	800628a <memset>
 80060cc:	4620      	mov	r0, r4
 80060ce:	bd70      	pop	{r4, r5, r6, pc}

080060d0 <__sfp_lock_acquire>:
 80060d0:	4801      	ldr	r0, [pc, #4]	; (80060d8 <__sfp_lock_acquire+0x8>)
 80060d2:	f000 b8d8 	b.w	8006286 <__retarget_lock_acquire_recursive>
 80060d6:	bf00      	nop
 80060d8:	20004251 	.word	0x20004251

080060dc <__sfp_lock_release>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__sfp_lock_release+0x8>)
 80060de:	f000 b8d3 	b.w	8006288 <__retarget_lock_release_recursive>
 80060e2:	bf00      	nop
 80060e4:	20004251 	.word	0x20004251

080060e8 <__sinit_lock_acquire>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__sinit_lock_acquire+0x8>)
 80060ea:	f000 b8cc 	b.w	8006286 <__retarget_lock_acquire_recursive>
 80060ee:	bf00      	nop
 80060f0:	20004252 	.word	0x20004252

080060f4 <__sinit_lock_release>:
 80060f4:	4801      	ldr	r0, [pc, #4]	; (80060fc <__sinit_lock_release+0x8>)
 80060f6:	f000 b8c7 	b.w	8006288 <__retarget_lock_release_recursive>
 80060fa:	bf00      	nop
 80060fc:	20004252 	.word	0x20004252

08006100 <__sinit>:
 8006100:	b510      	push	{r4, lr}
 8006102:	4604      	mov	r4, r0
 8006104:	f7ff fff0 	bl	80060e8 <__sinit_lock_acquire>
 8006108:	69a3      	ldr	r3, [r4, #24]
 800610a:	b11b      	cbz	r3, 8006114 <__sinit+0x14>
 800610c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006110:	f7ff bff0 	b.w	80060f4 <__sinit_lock_release>
 8006114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006118:	6523      	str	r3, [r4, #80]	; 0x50
 800611a:	4b13      	ldr	r3, [pc, #76]	; (8006168 <__sinit+0x68>)
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <__sinit+0x6c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	62a2      	str	r2, [r4, #40]	; 0x28
 8006122:	42a3      	cmp	r3, r4
 8006124:	bf04      	itt	eq
 8006126:	2301      	moveq	r3, #1
 8006128:	61a3      	streq	r3, [r4, #24]
 800612a:	4620      	mov	r0, r4
 800612c:	f000 f820 	bl	8006170 <__sfp>
 8006130:	6060      	str	r0, [r4, #4]
 8006132:	4620      	mov	r0, r4
 8006134:	f000 f81c 	bl	8006170 <__sfp>
 8006138:	60a0      	str	r0, [r4, #8]
 800613a:	4620      	mov	r0, r4
 800613c:	f000 f818 	bl	8006170 <__sfp>
 8006140:	2200      	movs	r2, #0
 8006142:	60e0      	str	r0, [r4, #12]
 8006144:	2104      	movs	r1, #4
 8006146:	6860      	ldr	r0, [r4, #4]
 8006148:	f7ff ff82 	bl	8006050 <std>
 800614c:	68a0      	ldr	r0, [r4, #8]
 800614e:	2201      	movs	r2, #1
 8006150:	2109      	movs	r1, #9
 8006152:	f7ff ff7d 	bl	8006050 <std>
 8006156:	68e0      	ldr	r0, [r4, #12]
 8006158:	2202      	movs	r2, #2
 800615a:	2112      	movs	r1, #18
 800615c:	f7ff ff78 	bl	8006050 <std>
 8006160:	2301      	movs	r3, #1
 8006162:	61a3      	str	r3, [r4, #24]
 8006164:	e7d2      	b.n	800610c <__sinit+0xc>
 8006166:	bf00      	nop
 8006168:	080075b4 	.word	0x080075b4
 800616c:	08006099 	.word	0x08006099

08006170 <__sfp>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	4607      	mov	r7, r0
 8006174:	f7ff ffac 	bl	80060d0 <__sfp_lock_acquire>
 8006178:	4b1e      	ldr	r3, [pc, #120]	; (80061f4 <__sfp+0x84>)
 800617a:	681e      	ldr	r6, [r3, #0]
 800617c:	69b3      	ldr	r3, [r6, #24]
 800617e:	b913      	cbnz	r3, 8006186 <__sfp+0x16>
 8006180:	4630      	mov	r0, r6
 8006182:	f7ff ffbd 	bl	8006100 <__sinit>
 8006186:	3648      	adds	r6, #72	; 0x48
 8006188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800618c:	3b01      	subs	r3, #1
 800618e:	d503      	bpl.n	8006198 <__sfp+0x28>
 8006190:	6833      	ldr	r3, [r6, #0]
 8006192:	b30b      	cbz	r3, 80061d8 <__sfp+0x68>
 8006194:	6836      	ldr	r6, [r6, #0]
 8006196:	e7f7      	b.n	8006188 <__sfp+0x18>
 8006198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800619c:	b9d5      	cbnz	r5, 80061d4 <__sfp+0x64>
 800619e:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <__sfp+0x88>)
 80061a0:	60e3      	str	r3, [r4, #12]
 80061a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061a6:	6665      	str	r5, [r4, #100]	; 0x64
 80061a8:	f000 f86c 	bl	8006284 <__retarget_lock_init_recursive>
 80061ac:	f7ff ff96 	bl	80060dc <__sfp_lock_release>
 80061b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061b8:	6025      	str	r5, [r4, #0]
 80061ba:	61a5      	str	r5, [r4, #24]
 80061bc:	2208      	movs	r2, #8
 80061be:	4629      	mov	r1, r5
 80061c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061c4:	f000 f861 	bl	800628a <memset>
 80061c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061d0:	4620      	mov	r0, r4
 80061d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061d4:	3468      	adds	r4, #104	; 0x68
 80061d6:	e7d9      	b.n	800618c <__sfp+0x1c>
 80061d8:	2104      	movs	r1, #4
 80061da:	4638      	mov	r0, r7
 80061dc:	f7ff ff62 	bl	80060a4 <__sfmoreglue>
 80061e0:	4604      	mov	r4, r0
 80061e2:	6030      	str	r0, [r6, #0]
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d1d5      	bne.n	8006194 <__sfp+0x24>
 80061e8:	f7ff ff78 	bl	80060dc <__sfp_lock_release>
 80061ec:	230c      	movs	r3, #12
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	e7ee      	b.n	80061d0 <__sfp+0x60>
 80061f2:	bf00      	nop
 80061f4:	080075b4 	.word	0x080075b4
 80061f8:	ffff0001 	.word	0xffff0001

080061fc <_fwalk_reent>:
 80061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006200:	4606      	mov	r6, r0
 8006202:	4688      	mov	r8, r1
 8006204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006208:	2700      	movs	r7, #0
 800620a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800620e:	f1b9 0901 	subs.w	r9, r9, #1
 8006212:	d505      	bpl.n	8006220 <_fwalk_reent+0x24>
 8006214:	6824      	ldr	r4, [r4, #0]
 8006216:	2c00      	cmp	r4, #0
 8006218:	d1f7      	bne.n	800620a <_fwalk_reent+0xe>
 800621a:	4638      	mov	r0, r7
 800621c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006220:	89ab      	ldrh	r3, [r5, #12]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d907      	bls.n	8006236 <_fwalk_reent+0x3a>
 8006226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800622a:	3301      	adds	r3, #1
 800622c:	d003      	beq.n	8006236 <_fwalk_reent+0x3a>
 800622e:	4629      	mov	r1, r5
 8006230:	4630      	mov	r0, r6
 8006232:	47c0      	blx	r8
 8006234:	4307      	orrs	r7, r0
 8006236:	3568      	adds	r5, #104	; 0x68
 8006238:	e7e9      	b.n	800620e <_fwalk_reent+0x12>
	...

0800623c <__libc_init_array>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	4d0d      	ldr	r5, [pc, #52]	; (8006274 <__libc_init_array+0x38>)
 8006240:	4c0d      	ldr	r4, [pc, #52]	; (8006278 <__libc_init_array+0x3c>)
 8006242:	1b64      	subs	r4, r4, r5
 8006244:	10a4      	asrs	r4, r4, #2
 8006246:	2600      	movs	r6, #0
 8006248:	42a6      	cmp	r6, r4
 800624a:	d109      	bne.n	8006260 <__libc_init_array+0x24>
 800624c:	4d0b      	ldr	r5, [pc, #44]	; (800627c <__libc_init_array+0x40>)
 800624e:	4c0c      	ldr	r4, [pc, #48]	; (8006280 <__libc_init_array+0x44>)
 8006250:	f001 f91c 	bl	800748c <_init>
 8006254:	1b64      	subs	r4, r4, r5
 8006256:	10a4      	asrs	r4, r4, #2
 8006258:	2600      	movs	r6, #0
 800625a:	42a6      	cmp	r6, r4
 800625c:	d105      	bne.n	800626a <__libc_init_array+0x2e>
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	f855 3b04 	ldr.w	r3, [r5], #4
 8006264:	4798      	blx	r3
 8006266:	3601      	adds	r6, #1
 8006268:	e7ee      	b.n	8006248 <__libc_init_array+0xc>
 800626a:	f855 3b04 	ldr.w	r3, [r5], #4
 800626e:	4798      	blx	r3
 8006270:	3601      	adds	r6, #1
 8006272:	e7f2      	b.n	800625a <__libc_init_array+0x1e>
 8006274:	080077a4 	.word	0x080077a4
 8006278:	080077a4 	.word	0x080077a4
 800627c:	080077a4 	.word	0x080077a4
 8006280:	080077a8 	.word	0x080077a8

08006284 <__retarget_lock_init_recursive>:
 8006284:	4770      	bx	lr

08006286 <__retarget_lock_acquire_recursive>:
 8006286:	4770      	bx	lr

08006288 <__retarget_lock_release_recursive>:
 8006288:	4770      	bx	lr

0800628a <memset>:
 800628a:	4402      	add	r2, r0
 800628c:	4603      	mov	r3, r0
 800628e:	4293      	cmp	r3, r2
 8006290:	d100      	bne.n	8006294 <memset+0xa>
 8006292:	4770      	bx	lr
 8006294:	f803 1b01 	strb.w	r1, [r3], #1
 8006298:	e7f9      	b.n	800628e <memset+0x4>
	...

0800629c <sbrk_aligned>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4e0e      	ldr	r6, [pc, #56]	; (80062d8 <sbrk_aligned+0x3c>)
 80062a0:	460c      	mov	r4, r1
 80062a2:	6831      	ldr	r1, [r6, #0]
 80062a4:	4605      	mov	r5, r0
 80062a6:	b911      	cbnz	r1, 80062ae <sbrk_aligned+0x12>
 80062a8:	f000 f984 	bl	80065b4 <_sbrk_r>
 80062ac:	6030      	str	r0, [r6, #0]
 80062ae:	4621      	mov	r1, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	f000 f97f 	bl	80065b4 <_sbrk_r>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	d00a      	beq.n	80062d0 <sbrk_aligned+0x34>
 80062ba:	1cc4      	adds	r4, r0, #3
 80062bc:	f024 0403 	bic.w	r4, r4, #3
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d007      	beq.n	80062d4 <sbrk_aligned+0x38>
 80062c4:	1a21      	subs	r1, r4, r0
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f974 	bl	80065b4 <_sbrk_r>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d101      	bne.n	80062d4 <sbrk_aligned+0x38>
 80062d0:	f04f 34ff 	mov.w	r4, #4294967295
 80062d4:	4620      	mov	r0, r4
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	20004258 	.word	0x20004258

080062dc <_malloc_r>:
 80062dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e0:	1ccd      	adds	r5, r1, #3
 80062e2:	f025 0503 	bic.w	r5, r5, #3
 80062e6:	3508      	adds	r5, #8
 80062e8:	2d0c      	cmp	r5, #12
 80062ea:	bf38      	it	cc
 80062ec:	250c      	movcc	r5, #12
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	4607      	mov	r7, r0
 80062f2:	db01      	blt.n	80062f8 <_malloc_r+0x1c>
 80062f4:	42a9      	cmp	r1, r5
 80062f6:	d905      	bls.n	8006304 <_malloc_r+0x28>
 80062f8:	230c      	movs	r3, #12
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	2600      	movs	r6, #0
 80062fe:	4630      	mov	r0, r6
 8006300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006304:	4e2e      	ldr	r6, [pc, #184]	; (80063c0 <_malloc_r+0xe4>)
 8006306:	f000 fcfb 	bl	8006d00 <__malloc_lock>
 800630a:	6833      	ldr	r3, [r6, #0]
 800630c:	461c      	mov	r4, r3
 800630e:	bb34      	cbnz	r4, 800635e <_malloc_r+0x82>
 8006310:	4629      	mov	r1, r5
 8006312:	4638      	mov	r0, r7
 8006314:	f7ff ffc2 	bl	800629c <sbrk_aligned>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	4604      	mov	r4, r0
 800631c:	d14d      	bne.n	80063ba <_malloc_r+0xde>
 800631e:	6834      	ldr	r4, [r6, #0]
 8006320:	4626      	mov	r6, r4
 8006322:	2e00      	cmp	r6, #0
 8006324:	d140      	bne.n	80063a8 <_malloc_r+0xcc>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	4631      	mov	r1, r6
 800632a:	4638      	mov	r0, r7
 800632c:	eb04 0803 	add.w	r8, r4, r3
 8006330:	f000 f940 	bl	80065b4 <_sbrk_r>
 8006334:	4580      	cmp	r8, r0
 8006336:	d13a      	bne.n	80063ae <_malloc_r+0xd2>
 8006338:	6821      	ldr	r1, [r4, #0]
 800633a:	3503      	adds	r5, #3
 800633c:	1a6d      	subs	r5, r5, r1
 800633e:	f025 0503 	bic.w	r5, r5, #3
 8006342:	3508      	adds	r5, #8
 8006344:	2d0c      	cmp	r5, #12
 8006346:	bf38      	it	cc
 8006348:	250c      	movcc	r5, #12
 800634a:	4629      	mov	r1, r5
 800634c:	4638      	mov	r0, r7
 800634e:	f7ff ffa5 	bl	800629c <sbrk_aligned>
 8006352:	3001      	adds	r0, #1
 8006354:	d02b      	beq.n	80063ae <_malloc_r+0xd2>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	442b      	add	r3, r5
 800635a:	6023      	str	r3, [r4, #0]
 800635c:	e00e      	b.n	800637c <_malloc_r+0xa0>
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	1b52      	subs	r2, r2, r5
 8006362:	d41e      	bmi.n	80063a2 <_malloc_r+0xc6>
 8006364:	2a0b      	cmp	r2, #11
 8006366:	d916      	bls.n	8006396 <_malloc_r+0xba>
 8006368:	1961      	adds	r1, r4, r5
 800636a:	42a3      	cmp	r3, r4
 800636c:	6025      	str	r5, [r4, #0]
 800636e:	bf18      	it	ne
 8006370:	6059      	strne	r1, [r3, #4]
 8006372:	6863      	ldr	r3, [r4, #4]
 8006374:	bf08      	it	eq
 8006376:	6031      	streq	r1, [r6, #0]
 8006378:	5162      	str	r2, [r4, r5]
 800637a:	604b      	str	r3, [r1, #4]
 800637c:	4638      	mov	r0, r7
 800637e:	f104 060b 	add.w	r6, r4, #11
 8006382:	f000 fcc3 	bl	8006d0c <__malloc_unlock>
 8006386:	f026 0607 	bic.w	r6, r6, #7
 800638a:	1d23      	adds	r3, r4, #4
 800638c:	1af2      	subs	r2, r6, r3
 800638e:	d0b6      	beq.n	80062fe <_malloc_r+0x22>
 8006390:	1b9b      	subs	r3, r3, r6
 8006392:	50a3      	str	r3, [r4, r2]
 8006394:	e7b3      	b.n	80062fe <_malloc_r+0x22>
 8006396:	6862      	ldr	r2, [r4, #4]
 8006398:	42a3      	cmp	r3, r4
 800639a:	bf0c      	ite	eq
 800639c:	6032      	streq	r2, [r6, #0]
 800639e:	605a      	strne	r2, [r3, #4]
 80063a0:	e7ec      	b.n	800637c <_malloc_r+0xa0>
 80063a2:	4623      	mov	r3, r4
 80063a4:	6864      	ldr	r4, [r4, #4]
 80063a6:	e7b2      	b.n	800630e <_malloc_r+0x32>
 80063a8:	4634      	mov	r4, r6
 80063aa:	6876      	ldr	r6, [r6, #4]
 80063ac:	e7b9      	b.n	8006322 <_malloc_r+0x46>
 80063ae:	230c      	movs	r3, #12
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	4638      	mov	r0, r7
 80063b4:	f000 fcaa 	bl	8006d0c <__malloc_unlock>
 80063b8:	e7a1      	b.n	80062fe <_malloc_r+0x22>
 80063ba:	6025      	str	r5, [r4, #0]
 80063bc:	e7de      	b.n	800637c <_malloc_r+0xa0>
 80063be:	bf00      	nop
 80063c0:	20004254 	.word	0x20004254

080063c4 <iprintf>:
 80063c4:	b40f      	push	{r0, r1, r2, r3}
 80063c6:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <iprintf+0x2c>)
 80063c8:	b513      	push	{r0, r1, r4, lr}
 80063ca:	681c      	ldr	r4, [r3, #0]
 80063cc:	b124      	cbz	r4, 80063d8 <iprintf+0x14>
 80063ce:	69a3      	ldr	r3, [r4, #24]
 80063d0:	b913      	cbnz	r3, 80063d8 <iprintf+0x14>
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff fe94 	bl	8006100 <__sinit>
 80063d8:	ab05      	add	r3, sp, #20
 80063da:	9a04      	ldr	r2, [sp, #16]
 80063dc:	68a1      	ldr	r1, [r4, #8]
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fd0f 	bl	8006e04 <_vfiprintf_r>
 80063e6:	b002      	add	sp, #8
 80063e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ec:	b004      	add	sp, #16
 80063ee:	4770      	bx	lr
 80063f0:	20000020 	.word	0x20000020

080063f4 <_puts_r>:
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	460e      	mov	r6, r1
 80063f8:	4605      	mov	r5, r0
 80063fa:	b118      	cbz	r0, 8006404 <_puts_r+0x10>
 80063fc:	6983      	ldr	r3, [r0, #24]
 80063fe:	b90b      	cbnz	r3, 8006404 <_puts_r+0x10>
 8006400:	f7ff fe7e 	bl	8006100 <__sinit>
 8006404:	69ab      	ldr	r3, [r5, #24]
 8006406:	68ac      	ldr	r4, [r5, #8]
 8006408:	b913      	cbnz	r3, 8006410 <_puts_r+0x1c>
 800640a:	4628      	mov	r0, r5
 800640c:	f7ff fe78 	bl	8006100 <__sinit>
 8006410:	4b2c      	ldr	r3, [pc, #176]	; (80064c4 <_puts_r+0xd0>)
 8006412:	429c      	cmp	r4, r3
 8006414:	d120      	bne.n	8006458 <_puts_r+0x64>
 8006416:	686c      	ldr	r4, [r5, #4]
 8006418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800641a:	07db      	lsls	r3, r3, #31
 800641c:	d405      	bmi.n	800642a <_puts_r+0x36>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	0598      	lsls	r0, r3, #22
 8006422:	d402      	bmi.n	800642a <_puts_r+0x36>
 8006424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006426:	f7ff ff2e 	bl	8006286 <__retarget_lock_acquire_recursive>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	0719      	lsls	r1, r3, #28
 800642e:	d51d      	bpl.n	800646c <_puts_r+0x78>
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	b1db      	cbz	r3, 800646c <_puts_r+0x78>
 8006434:	3e01      	subs	r6, #1
 8006436:	68a3      	ldr	r3, [r4, #8]
 8006438:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800643c:	3b01      	subs	r3, #1
 800643e:	60a3      	str	r3, [r4, #8]
 8006440:	bb39      	cbnz	r1, 8006492 <_puts_r+0x9e>
 8006442:	2b00      	cmp	r3, #0
 8006444:	da38      	bge.n	80064b8 <_puts_r+0xc4>
 8006446:	4622      	mov	r2, r4
 8006448:	210a      	movs	r1, #10
 800644a:	4628      	mov	r0, r5
 800644c:	f000 fa04 	bl	8006858 <__swbuf_r>
 8006450:	3001      	adds	r0, #1
 8006452:	d011      	beq.n	8006478 <_puts_r+0x84>
 8006454:	250a      	movs	r5, #10
 8006456:	e011      	b.n	800647c <_puts_r+0x88>
 8006458:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <_puts_r+0xd4>)
 800645a:	429c      	cmp	r4, r3
 800645c:	d101      	bne.n	8006462 <_puts_r+0x6e>
 800645e:	68ac      	ldr	r4, [r5, #8]
 8006460:	e7da      	b.n	8006418 <_puts_r+0x24>
 8006462:	4b1a      	ldr	r3, [pc, #104]	; (80064cc <_puts_r+0xd8>)
 8006464:	429c      	cmp	r4, r3
 8006466:	bf08      	it	eq
 8006468:	68ec      	ldreq	r4, [r5, #12]
 800646a:	e7d5      	b.n	8006418 <_puts_r+0x24>
 800646c:	4621      	mov	r1, r4
 800646e:	4628      	mov	r0, r5
 8006470:	f000 fa56 	bl	8006920 <__swsetup_r>
 8006474:	2800      	cmp	r0, #0
 8006476:	d0dd      	beq.n	8006434 <_puts_r+0x40>
 8006478:	f04f 35ff 	mov.w	r5, #4294967295
 800647c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800647e:	07da      	lsls	r2, r3, #31
 8006480:	d405      	bmi.n	800648e <_puts_r+0x9a>
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	059b      	lsls	r3, r3, #22
 8006486:	d402      	bmi.n	800648e <_puts_r+0x9a>
 8006488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800648a:	f7ff fefd 	bl	8006288 <__retarget_lock_release_recursive>
 800648e:	4628      	mov	r0, r5
 8006490:	bd70      	pop	{r4, r5, r6, pc}
 8006492:	2b00      	cmp	r3, #0
 8006494:	da04      	bge.n	80064a0 <_puts_r+0xac>
 8006496:	69a2      	ldr	r2, [r4, #24]
 8006498:	429a      	cmp	r2, r3
 800649a:	dc06      	bgt.n	80064aa <_puts_r+0xb6>
 800649c:	290a      	cmp	r1, #10
 800649e:	d004      	beq.n	80064aa <_puts_r+0xb6>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	6022      	str	r2, [r4, #0]
 80064a6:	7019      	strb	r1, [r3, #0]
 80064a8:	e7c5      	b.n	8006436 <_puts_r+0x42>
 80064aa:	4622      	mov	r2, r4
 80064ac:	4628      	mov	r0, r5
 80064ae:	f000 f9d3 	bl	8006858 <__swbuf_r>
 80064b2:	3001      	adds	r0, #1
 80064b4:	d1bf      	bne.n	8006436 <_puts_r+0x42>
 80064b6:	e7df      	b.n	8006478 <_puts_r+0x84>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	250a      	movs	r5, #10
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	6022      	str	r2, [r4, #0]
 80064c0:	701d      	strb	r5, [r3, #0]
 80064c2:	e7db      	b.n	800647c <_puts_r+0x88>
 80064c4:	08007574 	.word	0x08007574
 80064c8:	08007594 	.word	0x08007594
 80064cc:	08007554 	.word	0x08007554

080064d0 <puts>:
 80064d0:	4b02      	ldr	r3, [pc, #8]	; (80064dc <puts+0xc>)
 80064d2:	4601      	mov	r1, r0
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	f7ff bf8d 	b.w	80063f4 <_puts_r>
 80064da:	bf00      	nop
 80064dc:	20000020 	.word	0x20000020

080064e0 <cleanup_glue>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	460c      	mov	r4, r1
 80064e4:	6809      	ldr	r1, [r1, #0]
 80064e6:	4605      	mov	r5, r0
 80064e8:	b109      	cbz	r1, 80064ee <cleanup_glue+0xe>
 80064ea:	f7ff fff9 	bl	80064e0 <cleanup_glue>
 80064ee:	4621      	mov	r1, r4
 80064f0:	4628      	mov	r0, r5
 80064f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064f6:	f000 bc0f 	b.w	8006d18 <_free_r>
	...

080064fc <_reclaim_reent>:
 80064fc:	4b2c      	ldr	r3, [pc, #176]	; (80065b0 <_reclaim_reent+0xb4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4283      	cmp	r3, r0
 8006502:	b570      	push	{r4, r5, r6, lr}
 8006504:	4604      	mov	r4, r0
 8006506:	d051      	beq.n	80065ac <_reclaim_reent+0xb0>
 8006508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800650a:	b143      	cbz	r3, 800651e <_reclaim_reent+0x22>
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d14a      	bne.n	80065a8 <_reclaim_reent+0xac>
 8006512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	b111      	cbz	r1, 800651e <_reclaim_reent+0x22>
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fbfd 	bl	8006d18 <_free_r>
 800651e:	6961      	ldr	r1, [r4, #20]
 8006520:	b111      	cbz	r1, 8006528 <_reclaim_reent+0x2c>
 8006522:	4620      	mov	r0, r4
 8006524:	f000 fbf8 	bl	8006d18 <_free_r>
 8006528:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800652a:	b111      	cbz	r1, 8006532 <_reclaim_reent+0x36>
 800652c:	4620      	mov	r0, r4
 800652e:	f000 fbf3 	bl	8006d18 <_free_r>
 8006532:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006534:	b111      	cbz	r1, 800653c <_reclaim_reent+0x40>
 8006536:	4620      	mov	r0, r4
 8006538:	f000 fbee 	bl	8006d18 <_free_r>
 800653c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800653e:	b111      	cbz	r1, 8006546 <_reclaim_reent+0x4a>
 8006540:	4620      	mov	r0, r4
 8006542:	f000 fbe9 	bl	8006d18 <_free_r>
 8006546:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006548:	b111      	cbz	r1, 8006550 <_reclaim_reent+0x54>
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fbe4 	bl	8006d18 <_free_r>
 8006550:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006552:	b111      	cbz	r1, 800655a <_reclaim_reent+0x5e>
 8006554:	4620      	mov	r0, r4
 8006556:	f000 fbdf 	bl	8006d18 <_free_r>
 800655a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800655c:	b111      	cbz	r1, 8006564 <_reclaim_reent+0x68>
 800655e:	4620      	mov	r0, r4
 8006560:	f000 fbda 	bl	8006d18 <_free_r>
 8006564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006566:	b111      	cbz	r1, 800656e <_reclaim_reent+0x72>
 8006568:	4620      	mov	r0, r4
 800656a:	f000 fbd5 	bl	8006d18 <_free_r>
 800656e:	69a3      	ldr	r3, [r4, #24]
 8006570:	b1e3      	cbz	r3, 80065ac <_reclaim_reent+0xb0>
 8006572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006574:	4620      	mov	r0, r4
 8006576:	4798      	blx	r3
 8006578:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800657a:	b1b9      	cbz	r1, 80065ac <_reclaim_reent+0xb0>
 800657c:	4620      	mov	r0, r4
 800657e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006582:	f7ff bfad 	b.w	80064e0 <cleanup_glue>
 8006586:	5949      	ldr	r1, [r1, r5]
 8006588:	b941      	cbnz	r1, 800659c <_reclaim_reent+0xa0>
 800658a:	3504      	adds	r5, #4
 800658c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800658e:	2d80      	cmp	r5, #128	; 0x80
 8006590:	68d9      	ldr	r1, [r3, #12]
 8006592:	d1f8      	bne.n	8006586 <_reclaim_reent+0x8a>
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fbbf 	bl	8006d18 <_free_r>
 800659a:	e7ba      	b.n	8006512 <_reclaim_reent+0x16>
 800659c:	680e      	ldr	r6, [r1, #0]
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 fbba 	bl	8006d18 <_free_r>
 80065a4:	4631      	mov	r1, r6
 80065a6:	e7ef      	b.n	8006588 <_reclaim_reent+0x8c>
 80065a8:	2500      	movs	r5, #0
 80065aa:	e7ef      	b.n	800658c <_reclaim_reent+0x90>
 80065ac:	bd70      	pop	{r4, r5, r6, pc}
 80065ae:	bf00      	nop
 80065b0:	20000020 	.word	0x20000020

080065b4 <_sbrk_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4d06      	ldr	r5, [pc, #24]	; (80065d0 <_sbrk_r+0x1c>)
 80065b8:	2300      	movs	r3, #0
 80065ba:	4604      	mov	r4, r0
 80065bc:	4608      	mov	r0, r1
 80065be:	602b      	str	r3, [r5, #0]
 80065c0:	f7fa ff82 	bl	80014c8 <_sbrk>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_sbrk_r+0x1a>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_sbrk_r+0x1a>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	2000425c 	.word	0x2000425c

080065d4 <__sread>:
 80065d4:	b510      	push	{r4, lr}
 80065d6:	460c      	mov	r4, r1
 80065d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065dc:	f000 fed6 	bl	800738c <_read_r>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	bfab      	itete	ge
 80065e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065e6:	89a3      	ldrhlt	r3, [r4, #12]
 80065e8:	181b      	addge	r3, r3, r0
 80065ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065ee:	bfac      	ite	ge
 80065f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80065f2:	81a3      	strhlt	r3, [r4, #12]
 80065f4:	bd10      	pop	{r4, pc}

080065f6 <__swrite>:
 80065f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fa:	461f      	mov	r7, r3
 80065fc:	898b      	ldrh	r3, [r1, #12]
 80065fe:	05db      	lsls	r3, r3, #23
 8006600:	4605      	mov	r5, r0
 8006602:	460c      	mov	r4, r1
 8006604:	4616      	mov	r6, r2
 8006606:	d505      	bpl.n	8006614 <__swrite+0x1e>
 8006608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660c:	2302      	movs	r3, #2
 800660e:	2200      	movs	r2, #0
 8006610:	f000 faf6 	bl	8006c00 <_lseek_r>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800661a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	4632      	mov	r2, r6
 8006622:	463b      	mov	r3, r7
 8006624:	4628      	mov	r0, r5
 8006626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800662a:	f000 b967 	b.w	80068fc <_write_r>

0800662e <__sseek>:
 800662e:	b510      	push	{r4, lr}
 8006630:	460c      	mov	r4, r1
 8006632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006636:	f000 fae3 	bl	8006c00 <_lseek_r>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	bf15      	itete	ne
 8006640:	6560      	strne	r0, [r4, #84]	; 0x54
 8006642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800664a:	81a3      	strheq	r3, [r4, #12]
 800664c:	bf18      	it	ne
 800664e:	81a3      	strhne	r3, [r4, #12]
 8006650:	bd10      	pop	{r4, pc}

08006652 <__sclose>:
 8006652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006656:	f000 b9ef 	b.w	8006a38 <_close_r>

0800665a <strstr>:
 800665a:	780a      	ldrb	r2, [r1, #0]
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	b96a      	cbnz	r2, 800667c <strstr+0x22>
 8006660:	bd70      	pop	{r4, r5, r6, pc}
 8006662:	429a      	cmp	r2, r3
 8006664:	d109      	bne.n	800667a <strstr+0x20>
 8006666:	460c      	mov	r4, r1
 8006668:	4605      	mov	r5, r0
 800666a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f6      	beq.n	8006660 <strstr+0x6>
 8006672:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006676:	429e      	cmp	r6, r3
 8006678:	d0f7      	beq.n	800666a <strstr+0x10>
 800667a:	3001      	adds	r0, #1
 800667c:	7803      	ldrb	r3, [r0, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1ef      	bne.n	8006662 <strstr+0x8>
 8006682:	4618      	mov	r0, r3
 8006684:	e7ec      	b.n	8006660 <strstr+0x6>
	...

08006688 <strtok>:
 8006688:	4b16      	ldr	r3, [pc, #88]	; (80066e4 <strtok+0x5c>)
 800668a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800668c:	681e      	ldr	r6, [r3, #0]
 800668e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006690:	4605      	mov	r5, r0
 8006692:	b9fc      	cbnz	r4, 80066d4 <strtok+0x4c>
 8006694:	2050      	movs	r0, #80	; 0x50
 8006696:	9101      	str	r1, [sp, #4]
 8006698:	f000 fb2a 	bl	8006cf0 <malloc>
 800669c:	9901      	ldr	r1, [sp, #4]
 800669e:	65b0      	str	r0, [r6, #88]	; 0x58
 80066a0:	4602      	mov	r2, r0
 80066a2:	b920      	cbnz	r0, 80066ae <strtok+0x26>
 80066a4:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <strtok+0x60>)
 80066a6:	4811      	ldr	r0, [pc, #68]	; (80066ec <strtok+0x64>)
 80066a8:	2157      	movs	r1, #87	; 0x57
 80066aa:	f000 f9a7 	bl	80069fc <__assert_func>
 80066ae:	e9c0 4400 	strd	r4, r4, [r0]
 80066b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80066b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80066ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80066be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80066c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80066c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80066ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80066ce:	6184      	str	r4, [r0, #24]
 80066d0:	7704      	strb	r4, [r0, #28]
 80066d2:	6244      	str	r4, [r0, #36]	; 0x24
 80066d4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80066d6:	2301      	movs	r3, #1
 80066d8:	4628      	mov	r0, r5
 80066da:	b002      	add	sp, #8
 80066dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066e0:	f000 b806 	b.w	80066f0 <__strtok_r>
 80066e4:	20000020 	.word	0x20000020
 80066e8:	080075b8 	.word	0x080075b8
 80066ec:	080075cf 	.word	0x080075cf

080066f0 <__strtok_r>:
 80066f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066f2:	b908      	cbnz	r0, 80066f8 <__strtok_r+0x8>
 80066f4:	6810      	ldr	r0, [r2, #0]
 80066f6:	b188      	cbz	r0, 800671c <__strtok_r+0x2c>
 80066f8:	4604      	mov	r4, r0
 80066fa:	4620      	mov	r0, r4
 80066fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006700:	460f      	mov	r7, r1
 8006702:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006706:	b91e      	cbnz	r6, 8006710 <__strtok_r+0x20>
 8006708:	b965      	cbnz	r5, 8006724 <__strtok_r+0x34>
 800670a:	6015      	str	r5, [r2, #0]
 800670c:	4628      	mov	r0, r5
 800670e:	e005      	b.n	800671c <__strtok_r+0x2c>
 8006710:	42b5      	cmp	r5, r6
 8006712:	d1f6      	bne.n	8006702 <__strtok_r+0x12>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f0      	bne.n	80066fa <__strtok_r+0xa>
 8006718:	6014      	str	r4, [r2, #0]
 800671a:	7003      	strb	r3, [r0, #0]
 800671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800671e:	461c      	mov	r4, r3
 8006720:	e00c      	b.n	800673c <__strtok_r+0x4c>
 8006722:	b915      	cbnz	r5, 800672a <__strtok_r+0x3a>
 8006724:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006728:	460e      	mov	r6, r1
 800672a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800672e:	42ab      	cmp	r3, r5
 8006730:	d1f7      	bne.n	8006722 <__strtok_r+0x32>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f3      	beq.n	800671e <__strtok_r+0x2e>
 8006736:	2300      	movs	r3, #0
 8006738:	f804 3c01 	strb.w	r3, [r4, #-1]
 800673c:	6014      	str	r4, [r2, #0]
 800673e:	e7ed      	b.n	800671c <__strtok_r+0x2c>

08006740 <_strtol_l.constprop.0>:
 8006740:	2b01      	cmp	r3, #1
 8006742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006746:	d001      	beq.n	800674c <_strtol_l.constprop.0+0xc>
 8006748:	2b24      	cmp	r3, #36	; 0x24
 800674a:	d906      	bls.n	800675a <_strtol_l.constprop.0+0x1a>
 800674c:	f7ff fc7a 	bl	8006044 <__errno>
 8006750:	2316      	movs	r3, #22
 8006752:	6003      	str	r3, [r0, #0]
 8006754:	2000      	movs	r0, #0
 8006756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006840 <_strtol_l.constprop.0+0x100>
 800675e:	460d      	mov	r5, r1
 8006760:	462e      	mov	r6, r5
 8006762:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006766:	f814 700c 	ldrb.w	r7, [r4, ip]
 800676a:	f017 0708 	ands.w	r7, r7, #8
 800676e:	d1f7      	bne.n	8006760 <_strtol_l.constprop.0+0x20>
 8006770:	2c2d      	cmp	r4, #45	; 0x2d
 8006772:	d132      	bne.n	80067da <_strtol_l.constprop.0+0x9a>
 8006774:	782c      	ldrb	r4, [r5, #0]
 8006776:	2701      	movs	r7, #1
 8006778:	1cb5      	adds	r5, r6, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d05b      	beq.n	8006836 <_strtol_l.constprop.0+0xf6>
 800677e:	2b10      	cmp	r3, #16
 8006780:	d109      	bne.n	8006796 <_strtol_l.constprop.0+0x56>
 8006782:	2c30      	cmp	r4, #48	; 0x30
 8006784:	d107      	bne.n	8006796 <_strtol_l.constprop.0+0x56>
 8006786:	782c      	ldrb	r4, [r5, #0]
 8006788:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800678c:	2c58      	cmp	r4, #88	; 0x58
 800678e:	d14d      	bne.n	800682c <_strtol_l.constprop.0+0xec>
 8006790:	786c      	ldrb	r4, [r5, #1]
 8006792:	2310      	movs	r3, #16
 8006794:	3502      	adds	r5, #2
 8006796:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800679a:	f108 38ff 	add.w	r8, r8, #4294967295
 800679e:	f04f 0c00 	mov.w	ip, #0
 80067a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80067a6:	4666      	mov	r6, ip
 80067a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80067ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80067b0:	f1be 0f09 	cmp.w	lr, #9
 80067b4:	d816      	bhi.n	80067e4 <_strtol_l.constprop.0+0xa4>
 80067b6:	4674      	mov	r4, lr
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	dd24      	ble.n	8006806 <_strtol_l.constprop.0+0xc6>
 80067bc:	f1bc 0f00 	cmp.w	ip, #0
 80067c0:	db1e      	blt.n	8006800 <_strtol_l.constprop.0+0xc0>
 80067c2:	45b1      	cmp	r9, r6
 80067c4:	d31c      	bcc.n	8006800 <_strtol_l.constprop.0+0xc0>
 80067c6:	d101      	bne.n	80067cc <_strtol_l.constprop.0+0x8c>
 80067c8:	45a2      	cmp	sl, r4
 80067ca:	db19      	blt.n	8006800 <_strtol_l.constprop.0+0xc0>
 80067cc:	fb06 4603 	mla	r6, r6, r3, r4
 80067d0:	f04f 0c01 	mov.w	ip, #1
 80067d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067d8:	e7e8      	b.n	80067ac <_strtol_l.constprop.0+0x6c>
 80067da:	2c2b      	cmp	r4, #43	; 0x2b
 80067dc:	bf04      	itt	eq
 80067de:	782c      	ldrbeq	r4, [r5, #0]
 80067e0:	1cb5      	addeq	r5, r6, #2
 80067e2:	e7ca      	b.n	800677a <_strtol_l.constprop.0+0x3a>
 80067e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80067e8:	f1be 0f19 	cmp.w	lr, #25
 80067ec:	d801      	bhi.n	80067f2 <_strtol_l.constprop.0+0xb2>
 80067ee:	3c37      	subs	r4, #55	; 0x37
 80067f0:	e7e2      	b.n	80067b8 <_strtol_l.constprop.0+0x78>
 80067f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80067f6:	f1be 0f19 	cmp.w	lr, #25
 80067fa:	d804      	bhi.n	8006806 <_strtol_l.constprop.0+0xc6>
 80067fc:	3c57      	subs	r4, #87	; 0x57
 80067fe:	e7db      	b.n	80067b8 <_strtol_l.constprop.0+0x78>
 8006800:	f04f 3cff 	mov.w	ip, #4294967295
 8006804:	e7e6      	b.n	80067d4 <_strtol_l.constprop.0+0x94>
 8006806:	f1bc 0f00 	cmp.w	ip, #0
 800680a:	da05      	bge.n	8006818 <_strtol_l.constprop.0+0xd8>
 800680c:	2322      	movs	r3, #34	; 0x22
 800680e:	6003      	str	r3, [r0, #0]
 8006810:	4646      	mov	r6, r8
 8006812:	b942      	cbnz	r2, 8006826 <_strtol_l.constprop.0+0xe6>
 8006814:	4630      	mov	r0, r6
 8006816:	e79e      	b.n	8006756 <_strtol_l.constprop.0+0x16>
 8006818:	b107      	cbz	r7, 800681c <_strtol_l.constprop.0+0xdc>
 800681a:	4276      	negs	r6, r6
 800681c:	2a00      	cmp	r2, #0
 800681e:	d0f9      	beq.n	8006814 <_strtol_l.constprop.0+0xd4>
 8006820:	f1bc 0f00 	cmp.w	ip, #0
 8006824:	d000      	beq.n	8006828 <_strtol_l.constprop.0+0xe8>
 8006826:	1e69      	subs	r1, r5, #1
 8006828:	6011      	str	r1, [r2, #0]
 800682a:	e7f3      	b.n	8006814 <_strtol_l.constprop.0+0xd4>
 800682c:	2430      	movs	r4, #48	; 0x30
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1b1      	bne.n	8006796 <_strtol_l.constprop.0+0x56>
 8006832:	2308      	movs	r3, #8
 8006834:	e7af      	b.n	8006796 <_strtol_l.constprop.0+0x56>
 8006836:	2c30      	cmp	r4, #48	; 0x30
 8006838:	d0a5      	beq.n	8006786 <_strtol_l.constprop.0+0x46>
 800683a:	230a      	movs	r3, #10
 800683c:	e7ab      	b.n	8006796 <_strtol_l.constprop.0+0x56>
 800683e:	bf00      	nop
 8006840:	08007669 	.word	0x08007669

08006844 <strtol>:
 8006844:	4613      	mov	r3, r2
 8006846:	460a      	mov	r2, r1
 8006848:	4601      	mov	r1, r0
 800684a:	4802      	ldr	r0, [pc, #8]	; (8006854 <strtol+0x10>)
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	f7ff bf77 	b.w	8006740 <_strtol_l.constprop.0>
 8006852:	bf00      	nop
 8006854:	20000020 	.word	0x20000020

08006858 <__swbuf_r>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	460e      	mov	r6, r1
 800685c:	4614      	mov	r4, r2
 800685e:	4605      	mov	r5, r0
 8006860:	b118      	cbz	r0, 800686a <__swbuf_r+0x12>
 8006862:	6983      	ldr	r3, [r0, #24]
 8006864:	b90b      	cbnz	r3, 800686a <__swbuf_r+0x12>
 8006866:	f7ff fc4b 	bl	8006100 <__sinit>
 800686a:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <__swbuf_r+0x98>)
 800686c:	429c      	cmp	r4, r3
 800686e:	d12b      	bne.n	80068c8 <__swbuf_r+0x70>
 8006870:	686c      	ldr	r4, [r5, #4]
 8006872:	69a3      	ldr	r3, [r4, #24]
 8006874:	60a3      	str	r3, [r4, #8]
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	071a      	lsls	r2, r3, #28
 800687a:	d52f      	bpl.n	80068dc <__swbuf_r+0x84>
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	b36b      	cbz	r3, 80068dc <__swbuf_r+0x84>
 8006880:	6923      	ldr	r3, [r4, #16]
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	1ac0      	subs	r0, r0, r3
 8006886:	6963      	ldr	r3, [r4, #20]
 8006888:	b2f6      	uxtb	r6, r6
 800688a:	4283      	cmp	r3, r0
 800688c:	4637      	mov	r7, r6
 800688e:	dc04      	bgt.n	800689a <__swbuf_r+0x42>
 8006890:	4621      	mov	r1, r4
 8006892:	4628      	mov	r0, r5
 8006894:	f000 f966 	bl	8006b64 <_fflush_r>
 8006898:	bb30      	cbnz	r0, 80068e8 <__swbuf_r+0x90>
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	3b01      	subs	r3, #1
 800689e:	60a3      	str	r3, [r4, #8]
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	6022      	str	r2, [r4, #0]
 80068a6:	701e      	strb	r6, [r3, #0]
 80068a8:	6963      	ldr	r3, [r4, #20]
 80068aa:	3001      	adds	r0, #1
 80068ac:	4283      	cmp	r3, r0
 80068ae:	d004      	beq.n	80068ba <__swbuf_r+0x62>
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	07db      	lsls	r3, r3, #31
 80068b4:	d506      	bpl.n	80068c4 <__swbuf_r+0x6c>
 80068b6:	2e0a      	cmp	r6, #10
 80068b8:	d104      	bne.n	80068c4 <__swbuf_r+0x6c>
 80068ba:	4621      	mov	r1, r4
 80068bc:	4628      	mov	r0, r5
 80068be:	f000 f951 	bl	8006b64 <_fflush_r>
 80068c2:	b988      	cbnz	r0, 80068e8 <__swbuf_r+0x90>
 80068c4:	4638      	mov	r0, r7
 80068c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <__swbuf_r+0x9c>)
 80068ca:	429c      	cmp	r4, r3
 80068cc:	d101      	bne.n	80068d2 <__swbuf_r+0x7a>
 80068ce:	68ac      	ldr	r4, [r5, #8]
 80068d0:	e7cf      	b.n	8006872 <__swbuf_r+0x1a>
 80068d2:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <__swbuf_r+0xa0>)
 80068d4:	429c      	cmp	r4, r3
 80068d6:	bf08      	it	eq
 80068d8:	68ec      	ldreq	r4, [r5, #12]
 80068da:	e7ca      	b.n	8006872 <__swbuf_r+0x1a>
 80068dc:	4621      	mov	r1, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 f81e 	bl	8006920 <__swsetup_r>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d0cb      	beq.n	8006880 <__swbuf_r+0x28>
 80068e8:	f04f 37ff 	mov.w	r7, #4294967295
 80068ec:	e7ea      	b.n	80068c4 <__swbuf_r+0x6c>
 80068ee:	bf00      	nop
 80068f0:	08007574 	.word	0x08007574
 80068f4:	08007594 	.word	0x08007594
 80068f8:	08007554 	.word	0x08007554

080068fc <_write_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d07      	ldr	r5, [pc, #28]	; (800691c <_write_r+0x20>)
 8006900:	4604      	mov	r4, r0
 8006902:	4608      	mov	r0, r1
 8006904:	4611      	mov	r1, r2
 8006906:	2200      	movs	r2, #0
 8006908:	602a      	str	r2, [r5, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	f7fa fd8b 	bl	8001426 <_write>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_write_r+0x1e>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	b103      	cbz	r3, 800691a <_write_r+0x1e>
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	2000425c 	.word	0x2000425c

08006920 <__swsetup_r>:
 8006920:	4b32      	ldr	r3, [pc, #200]	; (80069ec <__swsetup_r+0xcc>)
 8006922:	b570      	push	{r4, r5, r6, lr}
 8006924:	681d      	ldr	r5, [r3, #0]
 8006926:	4606      	mov	r6, r0
 8006928:	460c      	mov	r4, r1
 800692a:	b125      	cbz	r5, 8006936 <__swsetup_r+0x16>
 800692c:	69ab      	ldr	r3, [r5, #24]
 800692e:	b913      	cbnz	r3, 8006936 <__swsetup_r+0x16>
 8006930:	4628      	mov	r0, r5
 8006932:	f7ff fbe5 	bl	8006100 <__sinit>
 8006936:	4b2e      	ldr	r3, [pc, #184]	; (80069f0 <__swsetup_r+0xd0>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d10f      	bne.n	800695c <__swsetup_r+0x3c>
 800693c:	686c      	ldr	r4, [r5, #4]
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006944:	0719      	lsls	r1, r3, #28
 8006946:	d42c      	bmi.n	80069a2 <__swsetup_r+0x82>
 8006948:	06dd      	lsls	r5, r3, #27
 800694a:	d411      	bmi.n	8006970 <__swsetup_r+0x50>
 800694c:	2309      	movs	r3, #9
 800694e:	6033      	str	r3, [r6, #0]
 8006950:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	e03e      	b.n	80069da <__swsetup_r+0xba>
 800695c:	4b25      	ldr	r3, [pc, #148]	; (80069f4 <__swsetup_r+0xd4>)
 800695e:	429c      	cmp	r4, r3
 8006960:	d101      	bne.n	8006966 <__swsetup_r+0x46>
 8006962:	68ac      	ldr	r4, [r5, #8]
 8006964:	e7eb      	b.n	800693e <__swsetup_r+0x1e>
 8006966:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <__swsetup_r+0xd8>)
 8006968:	429c      	cmp	r4, r3
 800696a:	bf08      	it	eq
 800696c:	68ec      	ldreq	r4, [r5, #12]
 800696e:	e7e6      	b.n	800693e <__swsetup_r+0x1e>
 8006970:	0758      	lsls	r0, r3, #29
 8006972:	d512      	bpl.n	800699a <__swsetup_r+0x7a>
 8006974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006976:	b141      	cbz	r1, 800698a <__swsetup_r+0x6a>
 8006978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800697c:	4299      	cmp	r1, r3
 800697e:	d002      	beq.n	8006986 <__swsetup_r+0x66>
 8006980:	4630      	mov	r0, r6
 8006982:	f000 f9c9 	bl	8006d18 <_free_r>
 8006986:	2300      	movs	r3, #0
 8006988:	6363      	str	r3, [r4, #52]	; 0x34
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	2300      	movs	r3, #0
 8006994:	6063      	str	r3, [r4, #4]
 8006996:	6923      	ldr	r3, [r4, #16]
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f043 0308 	orr.w	r3, r3, #8
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	b94b      	cbnz	r3, 80069ba <__swsetup_r+0x9a>
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069b0:	d003      	beq.n	80069ba <__swsetup_r+0x9a>
 80069b2:	4621      	mov	r1, r4
 80069b4:	4630      	mov	r0, r6
 80069b6:	f000 f95b 	bl	8006c70 <__smakebuf_r>
 80069ba:	89a0      	ldrh	r0, [r4, #12]
 80069bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069c0:	f010 0301 	ands.w	r3, r0, #1
 80069c4:	d00a      	beq.n	80069dc <__swsetup_r+0xbc>
 80069c6:	2300      	movs	r3, #0
 80069c8:	60a3      	str	r3, [r4, #8]
 80069ca:	6963      	ldr	r3, [r4, #20]
 80069cc:	425b      	negs	r3, r3
 80069ce:	61a3      	str	r3, [r4, #24]
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	b943      	cbnz	r3, 80069e6 <__swsetup_r+0xc6>
 80069d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069d8:	d1ba      	bne.n	8006950 <__swsetup_r+0x30>
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	0781      	lsls	r1, r0, #30
 80069de:	bf58      	it	pl
 80069e0:	6963      	ldrpl	r3, [r4, #20]
 80069e2:	60a3      	str	r3, [r4, #8]
 80069e4:	e7f4      	b.n	80069d0 <__swsetup_r+0xb0>
 80069e6:	2000      	movs	r0, #0
 80069e8:	e7f7      	b.n	80069da <__swsetup_r+0xba>
 80069ea:	bf00      	nop
 80069ec:	20000020 	.word	0x20000020
 80069f0:	08007574 	.word	0x08007574
 80069f4:	08007594 	.word	0x08007594
 80069f8:	08007554 	.word	0x08007554

080069fc <__assert_func>:
 80069fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069fe:	4614      	mov	r4, r2
 8006a00:	461a      	mov	r2, r3
 8006a02:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <__assert_func+0x2c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4605      	mov	r5, r0
 8006a08:	68d8      	ldr	r0, [r3, #12]
 8006a0a:	b14c      	cbz	r4, 8006a20 <__assert_func+0x24>
 8006a0c:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <__assert_func+0x30>)
 8006a0e:	9100      	str	r1, [sp, #0]
 8006a10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a14:	4906      	ldr	r1, [pc, #24]	; (8006a30 <__assert_func+0x34>)
 8006a16:	462b      	mov	r3, r5
 8006a18:	f000 f8e0 	bl	8006bdc <fiprintf>
 8006a1c:	f000 fcc8 	bl	80073b0 <abort>
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <__assert_func+0x38>)
 8006a22:	461c      	mov	r4, r3
 8006a24:	e7f3      	b.n	8006a0e <__assert_func+0x12>
 8006a26:	bf00      	nop
 8006a28:	20000020 	.word	0x20000020
 8006a2c:	0800762c 	.word	0x0800762c
 8006a30:	08007639 	.word	0x08007639
 8006a34:	08007667 	.word	0x08007667

08006a38 <_close_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4d06      	ldr	r5, [pc, #24]	; (8006a54 <_close_r+0x1c>)
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4604      	mov	r4, r0
 8006a40:	4608      	mov	r0, r1
 8006a42:	602b      	str	r3, [r5, #0]
 8006a44:	f7fa fd0b 	bl	800145e <_close>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_close_r+0x1a>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_close_r+0x1a>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	2000425c 	.word	0x2000425c

08006a58 <__sflush_r>:
 8006a58:	898a      	ldrh	r2, [r1, #12]
 8006a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5e:	4605      	mov	r5, r0
 8006a60:	0710      	lsls	r0, r2, #28
 8006a62:	460c      	mov	r4, r1
 8006a64:	d458      	bmi.n	8006b18 <__sflush_r+0xc0>
 8006a66:	684b      	ldr	r3, [r1, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	dc05      	bgt.n	8006a78 <__sflush_r+0x20>
 8006a6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	dc02      	bgt.n	8006a78 <__sflush_r+0x20>
 8006a72:	2000      	movs	r0, #0
 8006a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a7a:	2e00      	cmp	r6, #0
 8006a7c:	d0f9      	beq.n	8006a72 <__sflush_r+0x1a>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a84:	682f      	ldr	r7, [r5, #0]
 8006a86:	602b      	str	r3, [r5, #0]
 8006a88:	d032      	beq.n	8006af0 <__sflush_r+0x98>
 8006a8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	075a      	lsls	r2, r3, #29
 8006a90:	d505      	bpl.n	8006a9e <__sflush_r+0x46>
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	1ac0      	subs	r0, r0, r3
 8006a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a98:	b10b      	cbz	r3, 8006a9e <__sflush_r+0x46>
 8006a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a9c:	1ac0      	subs	r0, r0, r3
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa4:	6a21      	ldr	r1, [r4, #32]
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	47b0      	blx	r6
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	d106      	bne.n	8006abe <__sflush_r+0x66>
 8006ab0:	6829      	ldr	r1, [r5, #0]
 8006ab2:	291d      	cmp	r1, #29
 8006ab4:	d82c      	bhi.n	8006b10 <__sflush_r+0xb8>
 8006ab6:	4a2a      	ldr	r2, [pc, #168]	; (8006b60 <__sflush_r+0x108>)
 8006ab8:	40ca      	lsrs	r2, r1
 8006aba:	07d6      	lsls	r6, r2, #31
 8006abc:	d528      	bpl.n	8006b10 <__sflush_r+0xb8>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	6062      	str	r2, [r4, #4]
 8006ac2:	04d9      	lsls	r1, r3, #19
 8006ac4:	6922      	ldr	r2, [r4, #16]
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	d504      	bpl.n	8006ad4 <__sflush_r+0x7c>
 8006aca:	1c42      	adds	r2, r0, #1
 8006acc:	d101      	bne.n	8006ad2 <__sflush_r+0x7a>
 8006ace:	682b      	ldr	r3, [r5, #0]
 8006ad0:	b903      	cbnz	r3, 8006ad4 <__sflush_r+0x7c>
 8006ad2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ad6:	602f      	str	r7, [r5, #0]
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	d0ca      	beq.n	8006a72 <__sflush_r+0x1a>
 8006adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ae0:	4299      	cmp	r1, r3
 8006ae2:	d002      	beq.n	8006aea <__sflush_r+0x92>
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f000 f917 	bl	8006d18 <_free_r>
 8006aea:	2000      	movs	r0, #0
 8006aec:	6360      	str	r0, [r4, #52]	; 0x34
 8006aee:	e7c1      	b.n	8006a74 <__sflush_r+0x1c>
 8006af0:	6a21      	ldr	r1, [r4, #32]
 8006af2:	2301      	movs	r3, #1
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b0      	blx	r6
 8006af8:	1c41      	adds	r1, r0, #1
 8006afa:	d1c7      	bne.n	8006a8c <__sflush_r+0x34>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0c4      	beq.n	8006a8c <__sflush_r+0x34>
 8006b02:	2b1d      	cmp	r3, #29
 8006b04:	d001      	beq.n	8006b0a <__sflush_r+0xb2>
 8006b06:	2b16      	cmp	r3, #22
 8006b08:	d101      	bne.n	8006b0e <__sflush_r+0xb6>
 8006b0a:	602f      	str	r7, [r5, #0]
 8006b0c:	e7b1      	b.n	8006a72 <__sflush_r+0x1a>
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	e7ad      	b.n	8006a74 <__sflush_r+0x1c>
 8006b18:	690f      	ldr	r7, [r1, #16]
 8006b1a:	2f00      	cmp	r7, #0
 8006b1c:	d0a9      	beq.n	8006a72 <__sflush_r+0x1a>
 8006b1e:	0793      	lsls	r3, r2, #30
 8006b20:	680e      	ldr	r6, [r1, #0]
 8006b22:	bf08      	it	eq
 8006b24:	694b      	ldreq	r3, [r1, #20]
 8006b26:	600f      	str	r7, [r1, #0]
 8006b28:	bf18      	it	ne
 8006b2a:	2300      	movne	r3, #0
 8006b2c:	eba6 0807 	sub.w	r8, r6, r7
 8006b30:	608b      	str	r3, [r1, #8]
 8006b32:	f1b8 0f00 	cmp.w	r8, #0
 8006b36:	dd9c      	ble.n	8006a72 <__sflush_r+0x1a>
 8006b38:	6a21      	ldr	r1, [r4, #32]
 8006b3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b3c:	4643      	mov	r3, r8
 8006b3e:	463a      	mov	r2, r7
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b0      	blx	r6
 8006b44:	2800      	cmp	r0, #0
 8006b46:	dc06      	bgt.n	8006b56 <__sflush_r+0xfe>
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	e78e      	b.n	8006a74 <__sflush_r+0x1c>
 8006b56:	4407      	add	r7, r0
 8006b58:	eba8 0800 	sub.w	r8, r8, r0
 8006b5c:	e7e9      	b.n	8006b32 <__sflush_r+0xda>
 8006b5e:	bf00      	nop
 8006b60:	20400001 	.word	0x20400001

08006b64 <_fflush_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	690b      	ldr	r3, [r1, #16]
 8006b68:	4605      	mov	r5, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	b913      	cbnz	r3, 8006b74 <_fflush_r+0x10>
 8006b6e:	2500      	movs	r5, #0
 8006b70:	4628      	mov	r0, r5
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	b118      	cbz	r0, 8006b7e <_fflush_r+0x1a>
 8006b76:	6983      	ldr	r3, [r0, #24]
 8006b78:	b90b      	cbnz	r3, 8006b7e <_fflush_r+0x1a>
 8006b7a:	f7ff fac1 	bl	8006100 <__sinit>
 8006b7e:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <_fflush_r+0x6c>)
 8006b80:	429c      	cmp	r4, r3
 8006b82:	d11b      	bne.n	8006bbc <_fflush_r+0x58>
 8006b84:	686c      	ldr	r4, [r5, #4]
 8006b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0ef      	beq.n	8006b6e <_fflush_r+0xa>
 8006b8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b90:	07d0      	lsls	r0, r2, #31
 8006b92:	d404      	bmi.n	8006b9e <_fflush_r+0x3a>
 8006b94:	0599      	lsls	r1, r3, #22
 8006b96:	d402      	bmi.n	8006b9e <_fflush_r+0x3a>
 8006b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9a:	f7ff fb74 	bl	8006286 <__retarget_lock_acquire_recursive>
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	f7ff ff59 	bl	8006a58 <__sflush_r>
 8006ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba8:	07da      	lsls	r2, r3, #31
 8006baa:	4605      	mov	r5, r0
 8006bac:	d4e0      	bmi.n	8006b70 <_fflush_r+0xc>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	059b      	lsls	r3, r3, #22
 8006bb2:	d4dd      	bmi.n	8006b70 <_fflush_r+0xc>
 8006bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bb6:	f7ff fb67 	bl	8006288 <__retarget_lock_release_recursive>
 8006bba:	e7d9      	b.n	8006b70 <_fflush_r+0xc>
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <_fflush_r+0x70>)
 8006bbe:	429c      	cmp	r4, r3
 8006bc0:	d101      	bne.n	8006bc6 <_fflush_r+0x62>
 8006bc2:	68ac      	ldr	r4, [r5, #8]
 8006bc4:	e7df      	b.n	8006b86 <_fflush_r+0x22>
 8006bc6:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <_fflush_r+0x74>)
 8006bc8:	429c      	cmp	r4, r3
 8006bca:	bf08      	it	eq
 8006bcc:	68ec      	ldreq	r4, [r5, #12]
 8006bce:	e7da      	b.n	8006b86 <_fflush_r+0x22>
 8006bd0:	08007574 	.word	0x08007574
 8006bd4:	08007594 	.word	0x08007594
 8006bd8:	08007554 	.word	0x08007554

08006bdc <fiprintf>:
 8006bdc:	b40e      	push	{r1, r2, r3}
 8006bde:	b503      	push	{r0, r1, lr}
 8006be0:	4601      	mov	r1, r0
 8006be2:	ab03      	add	r3, sp, #12
 8006be4:	4805      	ldr	r0, [pc, #20]	; (8006bfc <fiprintf+0x20>)
 8006be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	f000 f909 	bl	8006e04 <_vfiprintf_r>
 8006bf2:	b002      	add	sp, #8
 8006bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bf8:	b003      	add	sp, #12
 8006bfa:	4770      	bx	lr
 8006bfc:	20000020 	.word	0x20000020

08006c00 <_lseek_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d07      	ldr	r5, [pc, #28]	; (8006c20 <_lseek_r+0x20>)
 8006c04:	4604      	mov	r4, r0
 8006c06:	4608      	mov	r0, r1
 8006c08:	4611      	mov	r1, r2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	602a      	str	r2, [r5, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f7fa fc4c 	bl	80014ac <_lseek>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_lseek_r+0x1e>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_lseek_r+0x1e>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	2000425c 	.word	0x2000425c

08006c24 <__swhatbuf_r>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	460e      	mov	r6, r1
 8006c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	b096      	sub	sp, #88	; 0x58
 8006c30:	4614      	mov	r4, r2
 8006c32:	461d      	mov	r5, r3
 8006c34:	da08      	bge.n	8006c48 <__swhatbuf_r+0x24>
 8006c36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	602a      	str	r2, [r5, #0]
 8006c3e:	061a      	lsls	r2, r3, #24
 8006c40:	d410      	bmi.n	8006c64 <__swhatbuf_r+0x40>
 8006c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c46:	e00e      	b.n	8006c66 <__swhatbuf_r+0x42>
 8006c48:	466a      	mov	r2, sp
 8006c4a:	f000 fbb9 	bl	80073c0 <_fstat_r>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	dbf1      	blt.n	8006c36 <__swhatbuf_r+0x12>
 8006c52:	9a01      	ldr	r2, [sp, #4]
 8006c54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c5c:	425a      	negs	r2, r3
 8006c5e:	415a      	adcs	r2, r3
 8006c60:	602a      	str	r2, [r5, #0]
 8006c62:	e7ee      	b.n	8006c42 <__swhatbuf_r+0x1e>
 8006c64:	2340      	movs	r3, #64	; 0x40
 8006c66:	2000      	movs	r0, #0
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	b016      	add	sp, #88	; 0x58
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c70 <__smakebuf_r>:
 8006c70:	898b      	ldrh	r3, [r1, #12]
 8006c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c74:	079d      	lsls	r5, r3, #30
 8006c76:	4606      	mov	r6, r0
 8006c78:	460c      	mov	r4, r1
 8006c7a:	d507      	bpl.n	8006c8c <__smakebuf_r+0x1c>
 8006c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	6123      	str	r3, [r4, #16]
 8006c84:	2301      	movs	r3, #1
 8006c86:	6163      	str	r3, [r4, #20]
 8006c88:	b002      	add	sp, #8
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	ab01      	add	r3, sp, #4
 8006c8e:	466a      	mov	r2, sp
 8006c90:	f7ff ffc8 	bl	8006c24 <__swhatbuf_r>
 8006c94:	9900      	ldr	r1, [sp, #0]
 8006c96:	4605      	mov	r5, r0
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f7ff fb1f 	bl	80062dc <_malloc_r>
 8006c9e:	b948      	cbnz	r0, 8006cb4 <__smakebuf_r+0x44>
 8006ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca4:	059a      	lsls	r2, r3, #22
 8006ca6:	d4ef      	bmi.n	8006c88 <__smakebuf_r+0x18>
 8006ca8:	f023 0303 	bic.w	r3, r3, #3
 8006cac:	f043 0302 	orr.w	r3, r3, #2
 8006cb0:	81a3      	strh	r3, [r4, #12]
 8006cb2:	e7e3      	b.n	8006c7c <__smakebuf_r+0xc>
 8006cb4:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <__smakebuf_r+0x7c>)
 8006cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	6020      	str	r0, [r4, #0]
 8006cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	9b00      	ldr	r3, [sp, #0]
 8006cc4:	6163      	str	r3, [r4, #20]
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	6120      	str	r0, [r4, #16]
 8006cca:	b15b      	cbz	r3, 8006ce4 <__smakebuf_r+0x74>
 8006ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f000 fb87 	bl	80073e4 <_isatty_r>
 8006cd6:	b128      	cbz	r0, 8006ce4 <__smakebuf_r+0x74>
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	81a3      	strh	r3, [r4, #12]
 8006ce4:	89a0      	ldrh	r0, [r4, #12]
 8006ce6:	4305      	orrs	r5, r0
 8006ce8:	81a5      	strh	r5, [r4, #12]
 8006cea:	e7cd      	b.n	8006c88 <__smakebuf_r+0x18>
 8006cec:	08006099 	.word	0x08006099

08006cf0 <malloc>:
 8006cf0:	4b02      	ldr	r3, [pc, #8]	; (8006cfc <malloc+0xc>)
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	f7ff baf1 	b.w	80062dc <_malloc_r>
 8006cfa:	bf00      	nop
 8006cfc:	20000020 	.word	0x20000020

08006d00 <__malloc_lock>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__malloc_lock+0x8>)
 8006d02:	f7ff bac0 	b.w	8006286 <__retarget_lock_acquire_recursive>
 8006d06:	bf00      	nop
 8006d08:	20004250 	.word	0x20004250

08006d0c <__malloc_unlock>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <__malloc_unlock+0x8>)
 8006d0e:	f7ff babb 	b.w	8006288 <__retarget_lock_release_recursive>
 8006d12:	bf00      	nop
 8006d14:	20004250 	.word	0x20004250

08006d18 <_free_r>:
 8006d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d1a:	2900      	cmp	r1, #0
 8006d1c:	d044      	beq.n	8006da8 <_free_r+0x90>
 8006d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d22:	9001      	str	r0, [sp, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f1a1 0404 	sub.w	r4, r1, #4
 8006d2a:	bfb8      	it	lt
 8006d2c:	18e4      	addlt	r4, r4, r3
 8006d2e:	f7ff ffe7 	bl	8006d00 <__malloc_lock>
 8006d32:	4a1e      	ldr	r2, [pc, #120]	; (8006dac <_free_r+0x94>)
 8006d34:	9801      	ldr	r0, [sp, #4]
 8006d36:	6813      	ldr	r3, [r2, #0]
 8006d38:	b933      	cbnz	r3, 8006d48 <_free_r+0x30>
 8006d3a:	6063      	str	r3, [r4, #4]
 8006d3c:	6014      	str	r4, [r2, #0]
 8006d3e:	b003      	add	sp, #12
 8006d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d44:	f7ff bfe2 	b.w	8006d0c <__malloc_unlock>
 8006d48:	42a3      	cmp	r3, r4
 8006d4a:	d908      	bls.n	8006d5e <_free_r+0x46>
 8006d4c:	6825      	ldr	r5, [r4, #0]
 8006d4e:	1961      	adds	r1, r4, r5
 8006d50:	428b      	cmp	r3, r1
 8006d52:	bf01      	itttt	eq
 8006d54:	6819      	ldreq	r1, [r3, #0]
 8006d56:	685b      	ldreq	r3, [r3, #4]
 8006d58:	1949      	addeq	r1, r1, r5
 8006d5a:	6021      	streq	r1, [r4, #0]
 8006d5c:	e7ed      	b.n	8006d3a <_free_r+0x22>
 8006d5e:	461a      	mov	r2, r3
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	b10b      	cbz	r3, 8006d68 <_free_r+0x50>
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	d9fa      	bls.n	8006d5e <_free_r+0x46>
 8006d68:	6811      	ldr	r1, [r2, #0]
 8006d6a:	1855      	adds	r5, r2, r1
 8006d6c:	42a5      	cmp	r5, r4
 8006d6e:	d10b      	bne.n	8006d88 <_free_r+0x70>
 8006d70:	6824      	ldr	r4, [r4, #0]
 8006d72:	4421      	add	r1, r4
 8006d74:	1854      	adds	r4, r2, r1
 8006d76:	42a3      	cmp	r3, r4
 8006d78:	6011      	str	r1, [r2, #0]
 8006d7a:	d1e0      	bne.n	8006d3e <_free_r+0x26>
 8006d7c:	681c      	ldr	r4, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	6053      	str	r3, [r2, #4]
 8006d82:	4421      	add	r1, r4
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	e7da      	b.n	8006d3e <_free_r+0x26>
 8006d88:	d902      	bls.n	8006d90 <_free_r+0x78>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	6003      	str	r3, [r0, #0]
 8006d8e:	e7d6      	b.n	8006d3e <_free_r+0x26>
 8006d90:	6825      	ldr	r5, [r4, #0]
 8006d92:	1961      	adds	r1, r4, r5
 8006d94:	428b      	cmp	r3, r1
 8006d96:	bf04      	itt	eq
 8006d98:	6819      	ldreq	r1, [r3, #0]
 8006d9a:	685b      	ldreq	r3, [r3, #4]
 8006d9c:	6063      	str	r3, [r4, #4]
 8006d9e:	bf04      	itt	eq
 8006da0:	1949      	addeq	r1, r1, r5
 8006da2:	6021      	streq	r1, [r4, #0]
 8006da4:	6054      	str	r4, [r2, #4]
 8006da6:	e7ca      	b.n	8006d3e <_free_r+0x26>
 8006da8:	b003      	add	sp, #12
 8006daa:	bd30      	pop	{r4, r5, pc}
 8006dac:	20004254 	.word	0x20004254

08006db0 <__sfputc_r>:
 8006db0:	6893      	ldr	r3, [r2, #8]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	b410      	push	{r4}
 8006db8:	6093      	str	r3, [r2, #8]
 8006dba:	da08      	bge.n	8006dce <__sfputc_r+0x1e>
 8006dbc:	6994      	ldr	r4, [r2, #24]
 8006dbe:	42a3      	cmp	r3, r4
 8006dc0:	db01      	blt.n	8006dc6 <__sfputc_r+0x16>
 8006dc2:	290a      	cmp	r1, #10
 8006dc4:	d103      	bne.n	8006dce <__sfputc_r+0x1e>
 8006dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dca:	f7ff bd45 	b.w	8006858 <__swbuf_r>
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	1c58      	adds	r0, r3, #1
 8006dd2:	6010      	str	r0, [r2, #0]
 8006dd4:	7019      	strb	r1, [r3, #0]
 8006dd6:	4608      	mov	r0, r1
 8006dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <__sfputs_r>:
 8006dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de0:	4606      	mov	r6, r0
 8006de2:	460f      	mov	r7, r1
 8006de4:	4614      	mov	r4, r2
 8006de6:	18d5      	adds	r5, r2, r3
 8006de8:	42ac      	cmp	r4, r5
 8006dea:	d101      	bne.n	8006df0 <__sfputs_r+0x12>
 8006dec:	2000      	movs	r0, #0
 8006dee:	e007      	b.n	8006e00 <__sfputs_r+0x22>
 8006df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df4:	463a      	mov	r2, r7
 8006df6:	4630      	mov	r0, r6
 8006df8:	f7ff ffda 	bl	8006db0 <__sfputc_r>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d1f3      	bne.n	8006de8 <__sfputs_r+0xa>
 8006e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e04 <_vfiprintf_r>:
 8006e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	460d      	mov	r5, r1
 8006e0a:	b09d      	sub	sp, #116	; 0x74
 8006e0c:	4614      	mov	r4, r2
 8006e0e:	4698      	mov	r8, r3
 8006e10:	4606      	mov	r6, r0
 8006e12:	b118      	cbz	r0, 8006e1c <_vfiprintf_r+0x18>
 8006e14:	6983      	ldr	r3, [r0, #24]
 8006e16:	b90b      	cbnz	r3, 8006e1c <_vfiprintf_r+0x18>
 8006e18:	f7ff f972 	bl	8006100 <__sinit>
 8006e1c:	4b89      	ldr	r3, [pc, #548]	; (8007044 <_vfiprintf_r+0x240>)
 8006e1e:	429d      	cmp	r5, r3
 8006e20:	d11b      	bne.n	8006e5a <_vfiprintf_r+0x56>
 8006e22:	6875      	ldr	r5, [r6, #4]
 8006e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	d405      	bmi.n	8006e36 <_vfiprintf_r+0x32>
 8006e2a:	89ab      	ldrh	r3, [r5, #12]
 8006e2c:	059a      	lsls	r2, r3, #22
 8006e2e:	d402      	bmi.n	8006e36 <_vfiprintf_r+0x32>
 8006e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e32:	f7ff fa28 	bl	8006286 <__retarget_lock_acquire_recursive>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	071b      	lsls	r3, r3, #28
 8006e3a:	d501      	bpl.n	8006e40 <_vfiprintf_r+0x3c>
 8006e3c:	692b      	ldr	r3, [r5, #16]
 8006e3e:	b9eb      	cbnz	r3, 8006e7c <_vfiprintf_r+0x78>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7ff fd6c 	bl	8006920 <__swsetup_r>
 8006e48:	b1c0      	cbz	r0, 8006e7c <_vfiprintf_r+0x78>
 8006e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e4c:	07dc      	lsls	r4, r3, #31
 8006e4e:	d50e      	bpl.n	8006e6e <_vfiprintf_r+0x6a>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	b01d      	add	sp, #116	; 0x74
 8006e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5a:	4b7b      	ldr	r3, [pc, #492]	; (8007048 <_vfiprintf_r+0x244>)
 8006e5c:	429d      	cmp	r5, r3
 8006e5e:	d101      	bne.n	8006e64 <_vfiprintf_r+0x60>
 8006e60:	68b5      	ldr	r5, [r6, #8]
 8006e62:	e7df      	b.n	8006e24 <_vfiprintf_r+0x20>
 8006e64:	4b79      	ldr	r3, [pc, #484]	; (800704c <_vfiprintf_r+0x248>)
 8006e66:	429d      	cmp	r5, r3
 8006e68:	bf08      	it	eq
 8006e6a:	68f5      	ldreq	r5, [r6, #12]
 8006e6c:	e7da      	b.n	8006e24 <_vfiprintf_r+0x20>
 8006e6e:	89ab      	ldrh	r3, [r5, #12]
 8006e70:	0598      	lsls	r0, r3, #22
 8006e72:	d4ed      	bmi.n	8006e50 <_vfiprintf_r+0x4c>
 8006e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e76:	f7ff fa07 	bl	8006288 <__retarget_lock_release_recursive>
 8006e7a:	e7e9      	b.n	8006e50 <_vfiprintf_r+0x4c>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e80:	2320      	movs	r3, #32
 8006e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e8a:	2330      	movs	r3, #48	; 0x30
 8006e8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007050 <_vfiprintf_r+0x24c>
 8006e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e94:	f04f 0901 	mov.w	r9, #1
 8006e98:	4623      	mov	r3, r4
 8006e9a:	469a      	mov	sl, r3
 8006e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea0:	b10a      	cbz	r2, 8006ea6 <_vfiprintf_r+0xa2>
 8006ea2:	2a25      	cmp	r2, #37	; 0x25
 8006ea4:	d1f9      	bne.n	8006e9a <_vfiprintf_r+0x96>
 8006ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8006eaa:	d00b      	beq.n	8006ec4 <_vfiprintf_r+0xc0>
 8006eac:	465b      	mov	r3, fp
 8006eae:	4622      	mov	r2, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ff93 	bl	8006dde <__sfputs_r>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f000 80aa 	beq.w	8007012 <_vfiprintf_r+0x20e>
 8006ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec0:	445a      	add	r2, fp
 8006ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80a2 	beq.w	8007012 <_vfiprintf_r+0x20e>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed8:	f10a 0a01 	add.w	sl, sl, #1
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	9307      	str	r3, [sp, #28]
 8006ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ee6:	4654      	mov	r4, sl
 8006ee8:	2205      	movs	r2, #5
 8006eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eee:	4858      	ldr	r0, [pc, #352]	; (8007050 <_vfiprintf_r+0x24c>)
 8006ef0:	f7f9 f97e 	bl	80001f0 <memchr>
 8006ef4:	9a04      	ldr	r2, [sp, #16]
 8006ef6:	b9d8      	cbnz	r0, 8006f30 <_vfiprintf_r+0x12c>
 8006ef8:	06d1      	lsls	r1, r2, #27
 8006efa:	bf44      	itt	mi
 8006efc:	2320      	movmi	r3, #32
 8006efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f02:	0713      	lsls	r3, r2, #28
 8006f04:	bf44      	itt	mi
 8006f06:	232b      	movmi	r3, #43	; 0x2b
 8006f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f10:	2b2a      	cmp	r3, #42	; 0x2a
 8006f12:	d015      	beq.n	8006f40 <_vfiprintf_r+0x13c>
 8006f14:	9a07      	ldr	r2, [sp, #28]
 8006f16:	4654      	mov	r4, sl
 8006f18:	2000      	movs	r0, #0
 8006f1a:	f04f 0c0a 	mov.w	ip, #10
 8006f1e:	4621      	mov	r1, r4
 8006f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f24:	3b30      	subs	r3, #48	; 0x30
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d94e      	bls.n	8006fc8 <_vfiprintf_r+0x1c4>
 8006f2a:	b1b0      	cbz	r0, 8006f5a <_vfiprintf_r+0x156>
 8006f2c:	9207      	str	r2, [sp, #28]
 8006f2e:	e014      	b.n	8006f5a <_vfiprintf_r+0x156>
 8006f30:	eba0 0308 	sub.w	r3, r0, r8
 8006f34:	fa09 f303 	lsl.w	r3, r9, r3
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	9304      	str	r3, [sp, #16]
 8006f3c:	46a2      	mov	sl, r4
 8006f3e:	e7d2      	b.n	8006ee6 <_vfiprintf_r+0xe2>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	1d19      	adds	r1, r3, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	9103      	str	r1, [sp, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bfbb      	ittet	lt
 8006f4c:	425b      	neglt	r3, r3
 8006f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f52:	9307      	strge	r3, [sp, #28]
 8006f54:	9307      	strlt	r3, [sp, #28]
 8006f56:	bfb8      	it	lt
 8006f58:	9204      	strlt	r2, [sp, #16]
 8006f5a:	7823      	ldrb	r3, [r4, #0]
 8006f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f5e:	d10c      	bne.n	8006f7a <_vfiprintf_r+0x176>
 8006f60:	7863      	ldrb	r3, [r4, #1]
 8006f62:	2b2a      	cmp	r3, #42	; 0x2a
 8006f64:	d135      	bne.n	8006fd2 <_vfiprintf_r+0x1ce>
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	1d1a      	adds	r2, r3, #4
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	9203      	str	r2, [sp, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bfb8      	it	lt
 8006f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f76:	3402      	adds	r4, #2
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007060 <_vfiprintf_r+0x25c>
 8006f7e:	7821      	ldrb	r1, [r4, #0]
 8006f80:	2203      	movs	r2, #3
 8006f82:	4650      	mov	r0, sl
 8006f84:	f7f9 f934 	bl	80001f0 <memchr>
 8006f88:	b140      	cbz	r0, 8006f9c <_vfiprintf_r+0x198>
 8006f8a:	2340      	movs	r3, #64	; 0x40
 8006f8c:	eba0 000a 	sub.w	r0, r0, sl
 8006f90:	fa03 f000 	lsl.w	r0, r3, r0
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	4303      	orrs	r3, r0
 8006f98:	3401      	adds	r4, #1
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa0:	482c      	ldr	r0, [pc, #176]	; (8007054 <_vfiprintf_r+0x250>)
 8006fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fa6:	2206      	movs	r2, #6
 8006fa8:	f7f9 f922 	bl	80001f0 <memchr>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d03f      	beq.n	8007030 <_vfiprintf_r+0x22c>
 8006fb0:	4b29      	ldr	r3, [pc, #164]	; (8007058 <_vfiprintf_r+0x254>)
 8006fb2:	bb1b      	cbnz	r3, 8006ffc <_vfiprintf_r+0x1f8>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	3307      	adds	r3, #7
 8006fb8:	f023 0307 	bic.w	r3, r3, #7
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	9303      	str	r3, [sp, #12]
 8006fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc2:	443b      	add	r3, r7
 8006fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc6:	e767      	b.n	8006e98 <_vfiprintf_r+0x94>
 8006fc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fcc:	460c      	mov	r4, r1
 8006fce:	2001      	movs	r0, #1
 8006fd0:	e7a5      	b.n	8006f1e <_vfiprintf_r+0x11a>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	3401      	adds	r4, #1
 8006fd6:	9305      	str	r3, [sp, #20]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f04f 0c0a 	mov.w	ip, #10
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe4:	3a30      	subs	r2, #48	; 0x30
 8006fe6:	2a09      	cmp	r2, #9
 8006fe8:	d903      	bls.n	8006ff2 <_vfiprintf_r+0x1ee>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0c5      	beq.n	8006f7a <_vfiprintf_r+0x176>
 8006fee:	9105      	str	r1, [sp, #20]
 8006ff0:	e7c3      	b.n	8006f7a <_vfiprintf_r+0x176>
 8006ff2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e7f0      	b.n	8006fde <_vfiprintf_r+0x1da>
 8006ffc:	ab03      	add	r3, sp, #12
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	462a      	mov	r2, r5
 8007002:	4b16      	ldr	r3, [pc, #88]	; (800705c <_vfiprintf_r+0x258>)
 8007004:	a904      	add	r1, sp, #16
 8007006:	4630      	mov	r0, r6
 8007008:	f3af 8000 	nop.w
 800700c:	4607      	mov	r7, r0
 800700e:	1c78      	adds	r0, r7, #1
 8007010:	d1d6      	bne.n	8006fc0 <_vfiprintf_r+0x1bc>
 8007012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007014:	07d9      	lsls	r1, r3, #31
 8007016:	d405      	bmi.n	8007024 <_vfiprintf_r+0x220>
 8007018:	89ab      	ldrh	r3, [r5, #12]
 800701a:	059a      	lsls	r2, r3, #22
 800701c:	d402      	bmi.n	8007024 <_vfiprintf_r+0x220>
 800701e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007020:	f7ff f932 	bl	8006288 <__retarget_lock_release_recursive>
 8007024:	89ab      	ldrh	r3, [r5, #12]
 8007026:	065b      	lsls	r3, r3, #25
 8007028:	f53f af12 	bmi.w	8006e50 <_vfiprintf_r+0x4c>
 800702c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702e:	e711      	b.n	8006e54 <_vfiprintf_r+0x50>
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	462a      	mov	r2, r5
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <_vfiprintf_r+0x258>)
 8007038:	a904      	add	r1, sp, #16
 800703a:	4630      	mov	r0, r6
 800703c:	f000 f880 	bl	8007140 <_printf_i>
 8007040:	e7e4      	b.n	800700c <_vfiprintf_r+0x208>
 8007042:	bf00      	nop
 8007044:	08007574 	.word	0x08007574
 8007048:	08007594 	.word	0x08007594
 800704c:	08007554 	.word	0x08007554
 8007050:	08007769 	.word	0x08007769
 8007054:	08007773 	.word	0x08007773
 8007058:	00000000 	.word	0x00000000
 800705c:	08006ddf 	.word	0x08006ddf
 8007060:	0800776f 	.word	0x0800776f

08007064 <_printf_common>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	4616      	mov	r6, r2
 800706a:	4699      	mov	r9, r3
 800706c:	688a      	ldr	r2, [r1, #8]
 800706e:	690b      	ldr	r3, [r1, #16]
 8007070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007074:	4293      	cmp	r3, r2
 8007076:	bfb8      	it	lt
 8007078:	4613      	movlt	r3, r2
 800707a:	6033      	str	r3, [r6, #0]
 800707c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007080:	4607      	mov	r7, r0
 8007082:	460c      	mov	r4, r1
 8007084:	b10a      	cbz	r2, 800708a <_printf_common+0x26>
 8007086:	3301      	adds	r3, #1
 8007088:	6033      	str	r3, [r6, #0]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	0699      	lsls	r1, r3, #26
 800708e:	bf42      	ittt	mi
 8007090:	6833      	ldrmi	r3, [r6, #0]
 8007092:	3302      	addmi	r3, #2
 8007094:	6033      	strmi	r3, [r6, #0]
 8007096:	6825      	ldr	r5, [r4, #0]
 8007098:	f015 0506 	ands.w	r5, r5, #6
 800709c:	d106      	bne.n	80070ac <_printf_common+0x48>
 800709e:	f104 0a19 	add.w	sl, r4, #25
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	6832      	ldr	r2, [r6, #0]
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dc26      	bgt.n	80070fa <_printf_common+0x96>
 80070ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b0:	1e13      	subs	r3, r2, #0
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	bf18      	it	ne
 80070b6:	2301      	movne	r3, #1
 80070b8:	0692      	lsls	r2, r2, #26
 80070ba:	d42b      	bmi.n	8007114 <_printf_common+0xb0>
 80070bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c0:	4649      	mov	r1, r9
 80070c2:	4638      	mov	r0, r7
 80070c4:	47c0      	blx	r8
 80070c6:	3001      	adds	r0, #1
 80070c8:	d01e      	beq.n	8007108 <_printf_common+0xa4>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	68e5      	ldr	r5, [r4, #12]
 80070ce:	6832      	ldr	r2, [r6, #0]
 80070d0:	f003 0306 	and.w	r3, r3, #6
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	bf08      	it	eq
 80070d8:	1aad      	subeq	r5, r5, r2
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	6922      	ldr	r2, [r4, #16]
 80070de:	bf0c      	ite	eq
 80070e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e4:	2500      	movne	r5, #0
 80070e6:	4293      	cmp	r3, r2
 80070e8:	bfc4      	itt	gt
 80070ea:	1a9b      	subgt	r3, r3, r2
 80070ec:	18ed      	addgt	r5, r5, r3
 80070ee:	2600      	movs	r6, #0
 80070f0:	341a      	adds	r4, #26
 80070f2:	42b5      	cmp	r5, r6
 80070f4:	d11a      	bne.n	800712c <_printf_common+0xc8>
 80070f6:	2000      	movs	r0, #0
 80070f8:	e008      	b.n	800710c <_printf_common+0xa8>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4652      	mov	r2, sl
 80070fe:	4649      	mov	r1, r9
 8007100:	4638      	mov	r0, r7
 8007102:	47c0      	blx	r8
 8007104:	3001      	adds	r0, #1
 8007106:	d103      	bne.n	8007110 <_printf_common+0xac>
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007110:	3501      	adds	r5, #1
 8007112:	e7c6      	b.n	80070a2 <_printf_common+0x3e>
 8007114:	18e1      	adds	r1, r4, r3
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	2030      	movs	r0, #48	; 0x30
 800711a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800711e:	4422      	add	r2, r4
 8007120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007128:	3302      	adds	r3, #2
 800712a:	e7c7      	b.n	80070bc <_printf_common+0x58>
 800712c:	2301      	movs	r3, #1
 800712e:	4622      	mov	r2, r4
 8007130:	4649      	mov	r1, r9
 8007132:	4638      	mov	r0, r7
 8007134:	47c0      	blx	r8
 8007136:	3001      	adds	r0, #1
 8007138:	d0e6      	beq.n	8007108 <_printf_common+0xa4>
 800713a:	3601      	adds	r6, #1
 800713c:	e7d9      	b.n	80070f2 <_printf_common+0x8e>
	...

08007140 <_printf_i>:
 8007140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	7e0f      	ldrb	r7, [r1, #24]
 8007146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007148:	2f78      	cmp	r7, #120	; 0x78
 800714a:	4691      	mov	r9, r2
 800714c:	4680      	mov	r8, r0
 800714e:	460c      	mov	r4, r1
 8007150:	469a      	mov	sl, r3
 8007152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007156:	d807      	bhi.n	8007168 <_printf_i+0x28>
 8007158:	2f62      	cmp	r7, #98	; 0x62
 800715a:	d80a      	bhi.n	8007172 <_printf_i+0x32>
 800715c:	2f00      	cmp	r7, #0
 800715e:	f000 80d8 	beq.w	8007312 <_printf_i+0x1d2>
 8007162:	2f58      	cmp	r7, #88	; 0x58
 8007164:	f000 80a3 	beq.w	80072ae <_printf_i+0x16e>
 8007168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800716c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007170:	e03a      	b.n	80071e8 <_printf_i+0xa8>
 8007172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007176:	2b15      	cmp	r3, #21
 8007178:	d8f6      	bhi.n	8007168 <_printf_i+0x28>
 800717a:	a101      	add	r1, pc, #4	; (adr r1, 8007180 <_printf_i+0x40>)
 800717c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007180:	080071d9 	.word	0x080071d9
 8007184:	080071ed 	.word	0x080071ed
 8007188:	08007169 	.word	0x08007169
 800718c:	08007169 	.word	0x08007169
 8007190:	08007169 	.word	0x08007169
 8007194:	08007169 	.word	0x08007169
 8007198:	080071ed 	.word	0x080071ed
 800719c:	08007169 	.word	0x08007169
 80071a0:	08007169 	.word	0x08007169
 80071a4:	08007169 	.word	0x08007169
 80071a8:	08007169 	.word	0x08007169
 80071ac:	080072f9 	.word	0x080072f9
 80071b0:	0800721d 	.word	0x0800721d
 80071b4:	080072db 	.word	0x080072db
 80071b8:	08007169 	.word	0x08007169
 80071bc:	08007169 	.word	0x08007169
 80071c0:	0800731b 	.word	0x0800731b
 80071c4:	08007169 	.word	0x08007169
 80071c8:	0800721d 	.word	0x0800721d
 80071cc:	08007169 	.word	0x08007169
 80071d0:	08007169 	.word	0x08007169
 80071d4:	080072e3 	.word	0x080072e3
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	1d1a      	adds	r2, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	602a      	str	r2, [r5, #0]
 80071e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0a3      	b.n	8007334 <_printf_i+0x1f4>
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	6829      	ldr	r1, [r5, #0]
 80071f0:	0606      	lsls	r6, r0, #24
 80071f2:	f101 0304 	add.w	r3, r1, #4
 80071f6:	d50a      	bpl.n	800720e <_printf_i+0xce>
 80071f8:	680e      	ldr	r6, [r1, #0]
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	2e00      	cmp	r6, #0
 80071fe:	da03      	bge.n	8007208 <_printf_i+0xc8>
 8007200:	232d      	movs	r3, #45	; 0x2d
 8007202:	4276      	negs	r6, r6
 8007204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007208:	485e      	ldr	r0, [pc, #376]	; (8007384 <_printf_i+0x244>)
 800720a:	230a      	movs	r3, #10
 800720c:	e019      	b.n	8007242 <_printf_i+0x102>
 800720e:	680e      	ldr	r6, [r1, #0]
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007216:	bf18      	it	ne
 8007218:	b236      	sxthne	r6, r6
 800721a:	e7ef      	b.n	80071fc <_printf_i+0xbc>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	6820      	ldr	r0, [r4, #0]
 8007220:	1d19      	adds	r1, r3, #4
 8007222:	6029      	str	r1, [r5, #0]
 8007224:	0601      	lsls	r1, r0, #24
 8007226:	d501      	bpl.n	800722c <_printf_i+0xec>
 8007228:	681e      	ldr	r6, [r3, #0]
 800722a:	e002      	b.n	8007232 <_printf_i+0xf2>
 800722c:	0646      	lsls	r6, r0, #25
 800722e:	d5fb      	bpl.n	8007228 <_printf_i+0xe8>
 8007230:	881e      	ldrh	r6, [r3, #0]
 8007232:	4854      	ldr	r0, [pc, #336]	; (8007384 <_printf_i+0x244>)
 8007234:	2f6f      	cmp	r7, #111	; 0x6f
 8007236:	bf0c      	ite	eq
 8007238:	2308      	moveq	r3, #8
 800723a:	230a      	movne	r3, #10
 800723c:	2100      	movs	r1, #0
 800723e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007242:	6865      	ldr	r5, [r4, #4]
 8007244:	60a5      	str	r5, [r4, #8]
 8007246:	2d00      	cmp	r5, #0
 8007248:	bfa2      	ittt	ge
 800724a:	6821      	ldrge	r1, [r4, #0]
 800724c:	f021 0104 	bicge.w	r1, r1, #4
 8007250:	6021      	strge	r1, [r4, #0]
 8007252:	b90e      	cbnz	r6, 8007258 <_printf_i+0x118>
 8007254:	2d00      	cmp	r5, #0
 8007256:	d04d      	beq.n	80072f4 <_printf_i+0x1b4>
 8007258:	4615      	mov	r5, r2
 800725a:	fbb6 f1f3 	udiv	r1, r6, r3
 800725e:	fb03 6711 	mls	r7, r3, r1, r6
 8007262:	5dc7      	ldrb	r7, [r0, r7]
 8007264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007268:	4637      	mov	r7, r6
 800726a:	42bb      	cmp	r3, r7
 800726c:	460e      	mov	r6, r1
 800726e:	d9f4      	bls.n	800725a <_printf_i+0x11a>
 8007270:	2b08      	cmp	r3, #8
 8007272:	d10b      	bne.n	800728c <_printf_i+0x14c>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	07de      	lsls	r6, r3, #31
 8007278:	d508      	bpl.n	800728c <_printf_i+0x14c>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	6861      	ldr	r1, [r4, #4]
 800727e:	4299      	cmp	r1, r3
 8007280:	bfde      	ittt	le
 8007282:	2330      	movle	r3, #48	; 0x30
 8007284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800728c:	1b52      	subs	r2, r2, r5
 800728e:	6122      	str	r2, [r4, #16]
 8007290:	f8cd a000 	str.w	sl, [sp]
 8007294:	464b      	mov	r3, r9
 8007296:	aa03      	add	r2, sp, #12
 8007298:	4621      	mov	r1, r4
 800729a:	4640      	mov	r0, r8
 800729c:	f7ff fee2 	bl	8007064 <_printf_common>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d14c      	bne.n	800733e <_printf_i+0x1fe>
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	b004      	add	sp, #16
 80072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ae:	4835      	ldr	r0, [pc, #212]	; (8007384 <_printf_i+0x244>)
 80072b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072b4:	6829      	ldr	r1, [r5, #0]
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80072bc:	6029      	str	r1, [r5, #0]
 80072be:	061d      	lsls	r5, r3, #24
 80072c0:	d514      	bpl.n	80072ec <_printf_i+0x1ac>
 80072c2:	07df      	lsls	r7, r3, #31
 80072c4:	bf44      	itt	mi
 80072c6:	f043 0320 	orrmi.w	r3, r3, #32
 80072ca:	6023      	strmi	r3, [r4, #0]
 80072cc:	b91e      	cbnz	r6, 80072d6 <_printf_i+0x196>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	f023 0320 	bic.w	r3, r3, #32
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	2310      	movs	r3, #16
 80072d8:	e7b0      	b.n	800723c <_printf_i+0xfc>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	f043 0320 	orr.w	r3, r3, #32
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	2378      	movs	r3, #120	; 0x78
 80072e4:	4828      	ldr	r0, [pc, #160]	; (8007388 <_printf_i+0x248>)
 80072e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ea:	e7e3      	b.n	80072b4 <_printf_i+0x174>
 80072ec:	0659      	lsls	r1, r3, #25
 80072ee:	bf48      	it	mi
 80072f0:	b2b6      	uxthmi	r6, r6
 80072f2:	e7e6      	b.n	80072c2 <_printf_i+0x182>
 80072f4:	4615      	mov	r5, r2
 80072f6:	e7bb      	b.n	8007270 <_printf_i+0x130>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	6826      	ldr	r6, [r4, #0]
 80072fc:	6961      	ldr	r1, [r4, #20]
 80072fe:	1d18      	adds	r0, r3, #4
 8007300:	6028      	str	r0, [r5, #0]
 8007302:	0635      	lsls	r5, r6, #24
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	d501      	bpl.n	800730c <_printf_i+0x1cc>
 8007308:	6019      	str	r1, [r3, #0]
 800730a:	e002      	b.n	8007312 <_printf_i+0x1d2>
 800730c:	0670      	lsls	r0, r6, #25
 800730e:	d5fb      	bpl.n	8007308 <_printf_i+0x1c8>
 8007310:	8019      	strh	r1, [r3, #0]
 8007312:	2300      	movs	r3, #0
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	4615      	mov	r5, r2
 8007318:	e7ba      	b.n	8007290 <_printf_i+0x150>
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	1d1a      	adds	r2, r3, #4
 800731e:	602a      	str	r2, [r5, #0]
 8007320:	681d      	ldr	r5, [r3, #0]
 8007322:	6862      	ldr	r2, [r4, #4]
 8007324:	2100      	movs	r1, #0
 8007326:	4628      	mov	r0, r5
 8007328:	f7f8 ff62 	bl	80001f0 <memchr>
 800732c:	b108      	cbz	r0, 8007332 <_printf_i+0x1f2>
 800732e:	1b40      	subs	r0, r0, r5
 8007330:	6060      	str	r0, [r4, #4]
 8007332:	6863      	ldr	r3, [r4, #4]
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	2300      	movs	r3, #0
 8007338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800733c:	e7a8      	b.n	8007290 <_printf_i+0x150>
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	462a      	mov	r2, r5
 8007342:	4649      	mov	r1, r9
 8007344:	4640      	mov	r0, r8
 8007346:	47d0      	blx	sl
 8007348:	3001      	adds	r0, #1
 800734a:	d0ab      	beq.n	80072a4 <_printf_i+0x164>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	079b      	lsls	r3, r3, #30
 8007350:	d413      	bmi.n	800737a <_printf_i+0x23a>
 8007352:	68e0      	ldr	r0, [r4, #12]
 8007354:	9b03      	ldr	r3, [sp, #12]
 8007356:	4298      	cmp	r0, r3
 8007358:	bfb8      	it	lt
 800735a:	4618      	movlt	r0, r3
 800735c:	e7a4      	b.n	80072a8 <_printf_i+0x168>
 800735e:	2301      	movs	r3, #1
 8007360:	4632      	mov	r2, r6
 8007362:	4649      	mov	r1, r9
 8007364:	4640      	mov	r0, r8
 8007366:	47d0      	blx	sl
 8007368:	3001      	adds	r0, #1
 800736a:	d09b      	beq.n	80072a4 <_printf_i+0x164>
 800736c:	3501      	adds	r5, #1
 800736e:	68e3      	ldr	r3, [r4, #12]
 8007370:	9903      	ldr	r1, [sp, #12]
 8007372:	1a5b      	subs	r3, r3, r1
 8007374:	42ab      	cmp	r3, r5
 8007376:	dcf2      	bgt.n	800735e <_printf_i+0x21e>
 8007378:	e7eb      	b.n	8007352 <_printf_i+0x212>
 800737a:	2500      	movs	r5, #0
 800737c:	f104 0619 	add.w	r6, r4, #25
 8007380:	e7f5      	b.n	800736e <_printf_i+0x22e>
 8007382:	bf00      	nop
 8007384:	0800777a 	.word	0x0800777a
 8007388:	0800778b 	.word	0x0800778b

0800738c <_read_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4d07      	ldr	r5, [pc, #28]	; (80073ac <_read_r+0x20>)
 8007390:	4604      	mov	r4, r0
 8007392:	4608      	mov	r0, r1
 8007394:	4611      	mov	r1, r2
 8007396:	2200      	movs	r2, #0
 8007398:	602a      	str	r2, [r5, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	f7fa f826 	bl	80013ec <_read>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_read_r+0x1e>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_read_r+0x1e>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	2000425c 	.word	0x2000425c

080073b0 <abort>:
 80073b0:	b508      	push	{r3, lr}
 80073b2:	2006      	movs	r0, #6
 80073b4:	f000 f84e 	bl	8007454 <raise>
 80073b8:	2001      	movs	r0, #1
 80073ba:	f7fa f80d 	bl	80013d8 <_exit>
	...

080073c0 <_fstat_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d07      	ldr	r5, [pc, #28]	; (80073e0 <_fstat_r+0x20>)
 80073c4:	2300      	movs	r3, #0
 80073c6:	4604      	mov	r4, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	4611      	mov	r1, r2
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	f7fa f852 	bl	8001476 <_fstat>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d102      	bne.n	80073dc <_fstat_r+0x1c>
 80073d6:	682b      	ldr	r3, [r5, #0]
 80073d8:	b103      	cbz	r3, 80073dc <_fstat_r+0x1c>
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	bd38      	pop	{r3, r4, r5, pc}
 80073de:	bf00      	nop
 80073e0:	2000425c 	.word	0x2000425c

080073e4 <_isatty_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4d06      	ldr	r5, [pc, #24]	; (8007400 <_isatty_r+0x1c>)
 80073e8:	2300      	movs	r3, #0
 80073ea:	4604      	mov	r4, r0
 80073ec:	4608      	mov	r0, r1
 80073ee:	602b      	str	r3, [r5, #0]
 80073f0:	f7fa f851 	bl	8001496 <_isatty>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d102      	bne.n	80073fe <_isatty_r+0x1a>
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	b103      	cbz	r3, 80073fe <_isatty_r+0x1a>
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	2000425c 	.word	0x2000425c

08007404 <_raise_r>:
 8007404:	291f      	cmp	r1, #31
 8007406:	b538      	push	{r3, r4, r5, lr}
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	d904      	bls.n	8007418 <_raise_r+0x14>
 800740e:	2316      	movs	r3, #22
 8007410:	6003      	str	r3, [r0, #0]
 8007412:	f04f 30ff 	mov.w	r0, #4294967295
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800741a:	b112      	cbz	r2, 8007422 <_raise_r+0x1e>
 800741c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007420:	b94b      	cbnz	r3, 8007436 <_raise_r+0x32>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f830 	bl	8007488 <_getpid_r>
 8007428:	462a      	mov	r2, r5
 800742a:	4601      	mov	r1, r0
 800742c:	4620      	mov	r0, r4
 800742e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007432:	f000 b817 	b.w	8007464 <_kill_r>
 8007436:	2b01      	cmp	r3, #1
 8007438:	d00a      	beq.n	8007450 <_raise_r+0x4c>
 800743a:	1c59      	adds	r1, r3, #1
 800743c:	d103      	bne.n	8007446 <_raise_r+0x42>
 800743e:	2316      	movs	r3, #22
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	2001      	movs	r0, #1
 8007444:	e7e7      	b.n	8007416 <_raise_r+0x12>
 8007446:	2400      	movs	r4, #0
 8007448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800744c:	4628      	mov	r0, r5
 800744e:	4798      	blx	r3
 8007450:	2000      	movs	r0, #0
 8007452:	e7e0      	b.n	8007416 <_raise_r+0x12>

08007454 <raise>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <raise+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f7ff bfd3 	b.w	8007404 <_raise_r>
 800745e:	bf00      	nop
 8007460:	20000020 	.word	0x20000020

08007464 <_kill_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	; (8007484 <_kill_r+0x20>)
 8007468:	2300      	movs	r3, #0
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	4611      	mov	r1, r2
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	f7f9 ffa1 	bl	80013b8 <_kill>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d102      	bne.n	8007480 <_kill_r+0x1c>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	b103      	cbz	r3, 8007480 <_kill_r+0x1c>
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	bf00      	nop
 8007484:	2000425c 	.word	0x2000425c

08007488 <_getpid_r>:
 8007488:	f7f9 bf8e 	b.w	80013a8 <_getpid>

0800748c <_init>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	bf00      	nop
 8007490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007492:	bc08      	pop	{r3}
 8007494:	469e      	mov	lr, r3
 8007496:	4770      	bx	lr

08007498 <_fini>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	bf00      	nop
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr

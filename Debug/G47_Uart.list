
G47_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08007c00  08007c00  00017c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f38  08007f38  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f40  08007f40  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ca4  20000084  08007fcc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d28  08007fcc  00022d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014213  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003227  00000000  00000000  000342c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000374f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fd5  00000000  00000000  00039328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013adb  00000000  00000000  000612fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3724  00000000  00000000  00074dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001684fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  0016854c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007be8 	.word	0x08007be8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08007be8 	.word	0x08007be8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, LedTask_func, osPriorityNormal, 0, 256);
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_FREERTOS_Init+0x70>)
 80005cc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	682b      	ldr	r3, [r5, #0]
 80005d8:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80005da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 fdb4 	bl	800514e <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_FREERTOS_Init+0x74>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, UartTask_Func, osPriorityIdle, 0, 1500);
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_FREERTOS_Init+0x78>)
 80005ee:	f107 0418 	add.w	r4, r7, #24
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	6023      	str	r3, [r4, #0]
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fda3 	bl	800514e <osThreadCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <MX_FREERTOS_Init+0x7c>)
 800060c:	6013      	str	r3, [r2, #0]

  /* definition and creation of echoTask */
  osThreadDef(echoTask, echoTask_Func, osPriorityIdle, 0, 256);
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_FREERTOS_Init+0x80>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	682b      	ldr	r3, [r5, #0]
 800061a:	6023      	str	r3, [r4, #0]
  echoTaskHandle = osThreadCreate(osThread(echoTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fd94 	bl	800514e <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <MX_FREERTOS_Init+0x84>)
 800062a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800062c:	bf00      	nop
 800062e:	3740      	adds	r7, #64	; 0x40
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08007c20 	.word	0x08007c20
 8000638:	20000110 	.word	0x20000110
 800063c:	08007c34 	.word	0x08007c34
 8000640:	20000114 	.word	0x20000114
 8000644:	08007c48 	.word	0x08007c48
 8000648:	20000118 	.word	0x20000118

0800064c <LedTask_func>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LedTask_func */
void LedTask_func(void const * argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask_func */
	/* Infinite loop */
	for (;;)
	{
		if (ledEvent == 1)
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <LedTask_func+0xbc>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d105      	bne.n	8000668 <LedTask_func+0x1c>
		{
			ledEvent = 0;
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <LedTask_func+0xbc>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
			led_state = STATE_LED_ON_INITIAL;
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <LedTask_func+0xc0>)
 8000664:	2202      	movs	r2, #2
 8000666:	701a      	strb	r2, [r3, #0]
		}
		switch (led_state)
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <LedTask_func+0xc0>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	2b03      	cmp	r3, #3
 8000670:	d845      	bhi.n	80006fe <LedTask_func+0xb2>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <LedTask_func+0x2c>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	080006d3 	.word	0x080006d3
 800067c:	08000689 	.word	0x08000689
 8000680:	080006ad 	.word	0x080006ad
 8000684:	0800069b 	.word	0x0800069b
		{
		case STATE_LED_ON_INITIAL:
			ledCounter = ledOnTime;
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <LedTask_func+0xc4>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <LedTask_func+0xc8>)
 8000690:	601a      	str	r2, [r3, #0]
			led_state = STATE_LED_ON_ONGOING;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <LedTask_func+0xc0>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
			break;
 8000698:	e031      	b.n	80006fe <LedTask_func+0xb2>
		case STATE_LED_OFF_INITIAL:
			ledCounter = ledOffTime;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <LedTask_func+0xcc>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <LedTask_func+0xc8>)
 80006a2:	601a      	str	r2, [r3, #0]
			led_state = STATE_LED_OFF_ONGOING;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <LedTask_func+0xc0>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	701a      	strb	r2, [r3, #0]
			break;
 80006aa:	e028      	b.n	80006fe <LedTask_func+0xb2>
		case STATE_LED_OFF_ONGOING:
			ledCounter--;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <LedTask_func+0xc8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <LedTask_func+0xc8>)
 80006b4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f001 fa41 	bl	8001b44 <HAL_GPIO_WritePin>
			if (ledCounter == 0)
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <LedTask_func+0xc8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d116      	bne.n	80006f8 <LedTask_func+0xac>
			{
				led_state = STATE_LED_ON_INITIAL;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <LedTask_func+0xc0>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006d0:	e012      	b.n	80006f8 <LedTask_func+0xac>
		case STATE_LED_ON_ONGOING:
			ledCounter--;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <LedTask_func+0xc8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <LedTask_func+0xc8>)
 80006da:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f001 fa2e 	bl	8001b44 <HAL_GPIO_WritePin>
			if (ledCounter == 0)
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <LedTask_func+0xc8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d105      	bne.n	80006fc <LedTask_func+0xb0>
			{
				led_state = STATE_LED_OFF_INITIAL;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <LedTask_func+0xc0>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006f6:	e001      	b.n	80006fc <LedTask_func+0xb0>
			break;
 80006f8:	bf00      	nop
 80006fa:	e000      	b.n	80006fe <LedTask_func+0xb2>
			break;
 80006fc:	bf00      	nop
		}
		osDelay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f004 fd4c 	bl	800519c <osDelay>
		if (ledEvent == 1)
 8000704:	e7a6      	b.n	8000654 <LedTask_func+0x8>
 8000706:	bf00      	nop
 8000708:	200000a0 	.word	0x200000a0
 800070c:	2000000c 	.word	0x2000000c
 8000710:	20000002 	.word	0x20000002
 8000714:	200000a4 	.word	0x200000a4
 8000718:	20000004 	.word	0x20000004

0800071c <UartTask_Func>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UartTask_Func */
void UartTask_Func(void const * argument)
{
 800071c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000720:	b089      	sub	sp, #36	; 0x24
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartTask_Func */
	/* Infinite loop */
	for (;;)
	{
		if(debugIT) {
 8000726:	4b78      	ldr	r3, [pc, #480]	; (8000908 <UartTask_Func+0x1ec>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d007      	beq.n	800073e <UartTask_Func+0x22>
			debugIT = 0;
 800072e:	4b76      	ldr	r3, [pc, #472]	; (8000908 <UartTask_Func+0x1ec>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 8000734:	2232      	movs	r2, #50	; 0x32
 8000736:	4975      	ldr	r1, [pc, #468]	; (800090c <UartTask_Func+0x1f0>)
 8000738:	4875      	ldr	r0, [pc, #468]	; (8000910 <UartTask_Func+0x1f4>)
 800073a:	f002 fb97 	bl	8002e6c <HAL_UART_Receive_IT>
		}
		if(debugPrint) {
 800073e:	4b75      	ldr	r3, [pc, #468]	; (8000914 <UartTask_Func+0x1f8>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d005      	beq.n	8000752 <UartTask_Func+0x36>
			debugPrint = 0;
 8000746:	4b73      	ldr	r3, [pc, #460]	; (8000914 <UartTask_Func+0x1f8>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
			printf("test\n");
 800074c:	4872      	ldr	r0, [pc, #456]	; (8000918 <UartTask_Func+0x1fc>)
 800074e:	f006 fa25 	bl	8006b9c <puts>
		}
		if (uartItFlag)
 8000752:	4b72      	ldr	r3, [pc, #456]	; (800091c <UartTask_Func+0x200>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d031      	beq.n	80007be <UartTask_Func+0xa2>
		{
			uartItFlag = 0;
 800075a:	4b70      	ldr	r3, [pc, #448]	; (800091c <UartTask_Func+0x200>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
			start = cntr;
 8000760:	4b6f      	ldr	r3, [pc, #444]	; (8000920 <UartTask_Func+0x204>)
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	4b6f      	ldr	r3, [pc, #444]	; (8000924 <UartTask_Func+0x208>)
 8000766:	701a      	strb	r2, [r3, #0]
			for (int i = start; i < start + BUFFER_LENGTH; i++)
 8000768:	4b6e      	ldr	r3, [pc, #440]	; (8000924 <UartTask_Func+0x208>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	e020      	b.n	80007b2 <UartTask_Func+0x96>
			{
				rcvd_data = buffer[i];
 8000770:	4a66      	ldr	r2, [pc, #408]	; (800090c <UartTask_Func+0x1f0>)
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	4413      	add	r3, r2
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	4b6b      	ldr	r3, [pc, #428]	; (8000928 <UartTask_Func+0x20c>)
 800077a:	701a      	strb	r2, [r3, #0]
				if (rcvd_data == 10)
 800077c:	4b6a      	ldr	r3, [pc, #424]	; (8000928 <UartTask_Func+0x20c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d10d      	bne.n	80007a0 <UartTask_Func+0x84>
				{
					rcvd_complete = 1;
 8000784:	4b69      	ldr	r3, [pc, #420]	; (800092c <UartTask_Func+0x210>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
					end = cntr;
 800078a:	4b65      	ldr	r3, [pc, #404]	; (8000920 <UartTask_Func+0x204>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	4b68      	ldr	r3, [pc, #416]	; (8000930 <UartTask_Func+0x214>)
 8000790:	701a      	strb	r2, [r3, #0]
					cntr++;
 8000792:	4b63      	ldr	r3, [pc, #396]	; (8000920 <UartTask_Func+0x204>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b61      	ldr	r3, [pc, #388]	; (8000920 <UartTask_Func+0x204>)
 800079c:	701a      	strb	r2, [r3, #0]
					break;
 800079e:	e00e      	b.n	80007be <UartTask_Func+0xa2>
				}
				cntr++;
 80007a0:	4b5f      	ldr	r3, [pc, #380]	; (8000920 <UartTask_Func+0x204>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b5d      	ldr	r3, [pc, #372]	; (8000920 <UartTask_Func+0x204>)
 80007aa:	701a      	strb	r2, [r3, #0]
			for (int i = start; i < start + BUFFER_LENGTH; i++)
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	3301      	adds	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4b5c      	ldr	r3, [pc, #368]	; (8000924 <UartTask_Func+0x208>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	3331      	adds	r3, #49	; 0x31
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	ddd8      	ble.n	8000770 <UartTask_Func+0x54>
			}
		}

		if (rcvd_complete)
 80007be:	4b5b      	ldr	r3, [pc, #364]	; (800092c <UartTask_Func+0x210>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f000 809c 	beq.w	8000900 <UartTask_Func+0x1e4>
		{
 80007c8:	466b      	mov	r3, sp
 80007ca:	461e      	mov	r6, r3
			uint8_t length = end - start;
 80007cc:	4b58      	ldr	r3, [pc, #352]	; (8000930 <UartTask_Func+0x214>)
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b54      	ldr	r3, [pc, #336]	; (8000924 <UartTask_Func+0x208>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	75fb      	strb	r3, [r7, #23]
			uint8_t tmpData[length];
 80007d8:	7df9      	ldrb	r1, [r7, #23]
 80007da:	460b      	mov	r3, r1
 80007dc:	3b01      	subs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	b2cb      	uxtb	r3, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	461c      	mov	r4, r3
 80007e6:	4615      	mov	r5, r2
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	00eb      	lsls	r3, r5, #3
 80007f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007f6:	00e2      	lsls	r2, r4, #3
 80007f8:	b2cb      	uxtb	r3, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	4698      	mov	r8, r3
 80007fe:	4691      	mov	r9, r2
 8000800:	f04f 0200 	mov.w	r2, #0
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800080c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000810:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000814:	460b      	mov	r3, r1
 8000816:	3307      	adds	r3, #7
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	ebad 0d03 	sub.w	sp, sp, r3
 8000820:	466b      	mov	r3, sp
 8000822:	3300      	adds	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < length; i++)
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e01a      	b.n	8000862 <UartTask_Func+0x146>
			{
				tmpData[i] = buffer[start + i];
 800082c:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <UartTask_Func+0x208>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	4413      	add	r3, r2
 8000836:	4a35      	ldr	r2, [pc, #212]	; (800090c <UartTask_Func+0x1f0>)
 8000838:	5cd1      	ldrb	r1, [r2, r3]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	4413      	add	r3, r2
 8000840:	460a      	mov	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
				echoData[i] = buffer[start + i];
 8000844:	4b37      	ldr	r3, [pc, #220]	; (8000924 <UartTask_Func+0x208>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	4413      	add	r3, r2
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <UartTask_Func+0x1f0>)
 8000850:	5cd1      	ldrb	r1, [r2, r3]
 8000852:	4a38      	ldr	r2, [pc, #224]	; (8000934 <UartTask_Func+0x218>)
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	4413      	add	r3, r2
 8000858:	460a      	mov	r2, r1
 800085a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < length; i++)
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	3301      	adds	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	429a      	cmp	r2, r3
 8000868:	dbe0      	blt.n	800082c <UartTask_Func+0x110>
			}
			echoLength = length;
 800086a:	4a33      	ldr	r2, [pc, #204]	; (8000938 <UartTask_Func+0x21c>)
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	7013      	strb	r3, [r2, #0]
			rcvd_complete = 0;
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <UartTask_Func+0x210>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			strOp(&tmpData);
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f000 f9f6 	bl	8000c68 <strOp>
			echoFlag = 1;
 800087c:	4b2f      	ldr	r3, [pc, #188]	; (800093c <UartTask_Func+0x220>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]

			switch (current_operation)
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <UartTask_Func+0x224>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2bff      	cmp	r3, #255	; 0xff
 8000888:	d012      	beq.n	80008b0 <UartTask_Func+0x194>
 800088a:	2bff      	cmp	r3, #255	; 0xff
 800088c:	dc33      	bgt.n	80008f6 <UartTask_Func+0x1da>
 800088e:	2b05      	cmp	r3, #5
 8000890:	d021      	beq.n	80008d6 <UartTask_Func+0x1ba>
 8000892:	2b05      	cmp	r3, #5
 8000894:	dc2f      	bgt.n	80008f6 <UartTask_Func+0x1da>
 8000896:	2b03      	cmp	r3, #3
 8000898:	d00e      	beq.n	80008b8 <UartTask_Func+0x19c>
 800089a:	2b04      	cmp	r3, #4
 800089c:	d12b      	bne.n	80008f6 <UartTask_Func+0x1da>
			{
			case OP_STOP:
		        vTaskSuspend(echoTaskHandle);
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <UartTask_Func+0x228>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fec0 	bl	8005628 <vTaskSuspend>
		        taskStopped = 1;
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <UartTask_Func+0x22c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
				break;
 80008ae:	e026      	b.n	80008fe <UartTask_Func+0x1e2>
			case OP_INVALID:
				printf("E_N_OK\n");
 80008b0:	4826      	ldr	r0, [pc, #152]	; (800094c <UartTask_Func+0x230>)
 80008b2:	f006 f973 	bl	8006b9c <puts>
				break;
 80008b6:	e022      	b.n	80008fe <UartTask_Func+0x1e2>
			case OP_START:
		        if (taskStopped)
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <UartTask_Func+0x22c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d007      	beq.n	80008d0 <UartTask_Func+0x1b4>
		        {
		          vTaskResume(echoTaskHandle);
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <UartTask_Func+0x228>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f004 ff73 	bl	80057b0 <vTaskResume>
		          taskStopped = 0;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <UartTask_Func+0x22c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
		        }
				echoFlag = 1;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <UartTask_Func+0x220>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
			case OP_BAUD:
				echoFlag = 1;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <UartTask_Func+0x220>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
				HAL_UART_Abort_IT(&hlpuart1);
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <UartTask_Func+0x1f4>)
 80008de:	f002 fb1b 	bl	8002f18 <HAL_UART_Abort_IT>
				HAL_UART_DeInit(&hlpuart1);
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <UartTask_Func+0x1f4>)
 80008e4:	f002 f9f0 	bl	8002cc8 <HAL_UART_DeInit>
				MX_LPUART1_UART_Init();
 80008e8:	f000 fb62 	bl	8000fb0 <MX_LPUART1_UART_Init>
				HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 80008ec:	2232      	movs	r2, #50	; 0x32
 80008ee:	4907      	ldr	r1, [pc, #28]	; (800090c <UartTask_Func+0x1f0>)
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <UartTask_Func+0x1f4>)
 80008f2:	f002 fabb 	bl	8002e6c <HAL_UART_Receive_IT>
			default:
				echoFlag = 1;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <UartTask_Func+0x220>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
				break;
 80008fc:	bf00      	nop
 80008fe:	46b5      	mov	sp, r6
			}
		}
		osDelay(20);
 8000900:	2014      	movs	r0, #20
 8000902:	f004 fc4b 	bl	800519c <osDelay>
		if(debugIT) {
 8000906:	e70e      	b.n	8000726 <UartTask_Func+0xa>
 8000908:	2000010d 	.word	0x2000010d
 800090c:	20000120 	.word	0x20000120
 8000910:	20000330 	.word	0x20000330
 8000914:	2000010e 	.word	0x2000010e
 8000918:	08007c5c 	.word	0x08007c5c
 800091c:	2000011c 	.word	0x2000011c
 8000920:	20000321 	.word	0x20000321
 8000924:	20000323 	.word	0x20000323
 8000928:	20000320 	.word	0x20000320
 800092c:	20000322 	.word	0x20000322
 8000930:	20000324 	.word	0x20000324
 8000934:	200000a8 	.word	0x200000a8
 8000938:	2000010c 	.word	0x2000010c
 800093c:	2000010f 	.word	0x2000010f
 8000940:	20000000 	.word	0x20000000
 8000944:	20000118 	.word	0x20000118
 8000948:	2000000d 	.word	0x2000000d
 800094c:	08007c64 	.word	0x08007c64

08000950 <echoTask_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_echoTask_Func */
void echoTask_Func(void const * argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN echoTask_Func */
  /* Infinite loop */
  for(;;)
  {
	if(echoFlag) {
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <echoTask_Func+0x38>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00e      	beq.n	800097e <echoTask_Func+0x2e>
		echoFlag = 0;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <echoTask_Func+0x38>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1,echoData, echoLength, 0xFFFF);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <echoTask_Func+0x3c>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b29a      	uxth	r2, r3
 800096c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000970:	4907      	ldr	r1, [pc, #28]	; (8000990 <echoTask_Func+0x40>)
 8000972:	4808      	ldr	r0, [pc, #32]	; (8000994 <echoTask_Func+0x44>)
 8000974:	f002 f9e4 	bl	8002d40 <HAL_UART_Transmit>
		printf("\n");
 8000978:	200a      	movs	r0, #10
 800097a:	f006 f88b 	bl	8006a94 <putchar>
	}
    osDelay(20);
 800097e:	2014      	movs	r0, #20
 8000980:	f004 fc0c 	bl	800519c <osDelay>
	if(echoFlag) {
 8000984:	e7e8      	b.n	8000958 <echoTask_Func+0x8>
 8000986:	bf00      	nop
 8000988:	2000010f 	.word	0x2000010f
 800098c:	2000010c 	.word	0x2000010c
 8000990:	200000a8 	.word	0x200000a8
 8000994:	20000330 	.word	0x20000330

08000998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a28      	ldr	r2, [pc, #160]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009cc:	f043 0320 	orr.w	r3, r3, #32
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0320 	and.w	r3, r3, #32
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_GPIO_Init+0xd4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f001 f895 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <MX_GPIO_Init+0xd8>)
 8000a32:	f000 fe23 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a36:	2320      	movs	r3, #32
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f000 fe14 	bl	800167c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2105      	movs	r1, #5
 8000a58:	2028      	movs	r0, #40	; 0x28
 8000a5a:	f000 fd0c 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5e:	2028      	movs	r0, #40	; 0x28
 8000a60:	f000 fd23 	bl	80014aa <HAL_NVIC_EnableIRQ>

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000800 	.word	0x48000800

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f000 fb8d 	bl	8001196 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f814 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f7ff ff8a 	bl	8000998 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000a84:	f000 fa94 	bl	8000fb0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 8000a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8c:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <main+0x2c>)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <main+0x30>)
 8000a90:	f002 f9ec 	bl	8002e6c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a94:	f7ff fd96 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a98:	f004 fb52 	bl	8005140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <main+0x28>
 8000a9e:	bf00      	nop
 8000aa0:	20000120 	.word	0x20000120
 8000aa4:	20000330 	.word	0x20000330

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	; 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	2238      	movs	r2, #56	; 0x38
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 ff4f 	bl	800695a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f001 f876 	bl	8001bbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ada:	2340      	movs	r3, #64	; 0x40
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000aea:	2355      	movs	r3, #85	; 0x55
 8000aec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 0318 	add.w	r3, r7, #24
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f910 	bl	8001d24 <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b0a:	f000 f843 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b12:	2303      	movs	r3, #3
 8000b14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2104      	movs	r1, #4
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fc14 	bl	8002354 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b32:	f000 f82f 	bl	8000b94 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 8000b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4c:	4905      	ldr	r1, [pc, #20]	; (8000b64 <HAL_UART_RxCpltCallback+0x24>)
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <HAL_UART_RxCpltCallback+0x28>)
 8000b50:	f002 f98c 	bl	8002e6c <HAL_UART_Receive_IT>
	  uartItFlag = 1;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_UART_RxCpltCallback+0x2c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000120 	.word	0x20000120
 8000b68:	20000330 	.word	0x20000330
 8000b6c:	2000011c 	.word	0x2000011c

08000b70 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000b78:	1d39      	adds	r1, r7, #4
 8000b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <__io_putchar+0x20>)
 8000b82:	f002 f8dd 	bl	8002d40 <HAL_UART_Transmit>

  return ch;
 8000b86:	687b      	ldr	r3, [r7, #4]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000330 	.word	0x20000330

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_MspInit+0x50>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_MspInit+0x50>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x50>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_MspInit+0x50>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_MspInit+0x50>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x50>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210f      	movs	r1, #15
 8000bda:	f06f 0001 	mvn.w	r0, #1
 8000bde:	f000 fc4a 	bl	8001476 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000be2:	f001 f88f 	bl	8001d04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 fb0a 	bl	800123c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c28:	f005 f8f0 	bl	8005e0c <xTaskGetSchedulerState>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d001      	beq.n	8000c36 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c32:	f005 fb31 	bl	8006298 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c3e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c42:	f000 ff97 	bl	8001b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <LPUART1_IRQHandler+0x14>)
 8000c52:	f002 fa97 	bl	8003184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */
  uartItFlag=1;
 8000c56:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <LPUART1_IRQHandler+0x18>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000330 	.word	0x20000330
 8000c64:	2000011c 	.word	0x2000011c

08000c68 <strOp>:
    printf("%s\n", data);
    return;
}

void strOp(uint8_t *input)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
    char *p = strtok(input, "=");
 8000c74:	4952      	ldr	r1, [pc, #328]	; (8000dc0 <strOp+0x158>)
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f006 f86c 	bl	8006d54 <strtok>
 8000c7c:	6138      	str	r0, [r7, #16]
    char *array[2];

    while (p != NULL)
 8000c7e:	e00d      	b.n	8000c9c <strOp+0x34>
    {
        array[i++] = p;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	617a      	str	r2, [r7, #20]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	3318      	adds	r3, #24
 8000c8a:	443b      	add	r3, r7
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	f843 2c10 	str.w	r2, [r3, #-16]
        p = strtok(NULL, "/");
 8000c92:	494c      	ldr	r1, [pc, #304]	; (8000dc4 <strOp+0x15c>)
 8000c94:	2000      	movs	r0, #0
 8000c96:	f006 f85d 	bl	8006d54 <strtok>
 8000c9a:	6138      	str	r0, [r7, #16]
    while (p != NULL)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1ee      	bne.n	8000c80 <strOp+0x18>
    }

    if (strstr(array[0], "ledon"))
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	4948      	ldr	r1, [pc, #288]	; (8000dc8 <strOp+0x160>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f006 f83d 	bl	8006d26 <strstr>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00e      	beq.n	8000cd0 <strOp+0x68>
    {
        current_operation = OP_LED_ON;
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <strOp+0x164>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8000cb8:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <strOp+0x168>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
        ledOnTime = atoi(array[1]);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 fd23 	bl	800670c <atoi>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b42      	ldr	r3, [pc, #264]	; (8000dd4 <strOp+0x16c>)
 8000ccc:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        current_operation = OP_INVALID;
    }
    return;
 8000cce:	e073      	b.n	8000db8 <strOp+0x150>
    else if (strstr(array[0], "ledoff"))
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4941      	ldr	r1, [pc, #260]	; (8000dd8 <strOp+0x170>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 f826 	bl	8006d26 <strstr>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00e      	beq.n	8000cfe <strOp+0x96>
        current_operation = OP_LED_OFF;
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <strOp+0x164>)
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8000ce6:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <strOp+0x168>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
        ledOffTime = atoi(array[1]);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f005 fd0c 	bl	800670c <atoi>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <strOp+0x174>)
 8000cfa:	801a      	strh	r2, [r3, #0]
    return;
 8000cfc:	e05c      	b.n	8000db8 <strOp+0x150>
    else if (strstr(array[0], "start"))
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	4937      	ldr	r1, [pc, #220]	; (8000de0 <strOp+0x178>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 f80f 	bl	8006d26 <strstr>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00e      	beq.n	8000d2c <strOp+0xc4>
        current_operation = OP_START;
 8000d0e:	4b2f      	ldr	r3, [pc, #188]	; (8000dcc <strOp+0x164>)
 8000d10:	2203      	movs	r2, #3
 8000d12:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <strOp+0x168>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
        ledOnTime = ledOnTime_previous;
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <strOp+0x17c>)
 8000d1c:	881a      	ldrh	r2, [r3, #0]
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <strOp+0x16c>)
 8000d20:	801a      	strh	r2, [r3, #0]
        ledOffTime = ledOffTime_previous;
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <strOp+0x180>)
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <strOp+0x174>)
 8000d28:	801a      	strh	r2, [r3, #0]
    return;
 8000d2a:	e045      	b.n	8000db8 <strOp+0x150>
    else if (strstr(array[0], "stop"))
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	492f      	ldr	r1, [pc, #188]	; (8000dec <strOp+0x184>)
 8000d30:	4618      	mov	r0, r3
 8000d32:	f005 fff8 	bl	8006d26 <strstr>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d016      	beq.n	8000d6a <strOp+0x102>
        current_operation = OP_STOP;
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <strOp+0x164>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <strOp+0x168>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
        ledOffTime_previous = ledOffTime;
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <strOp+0x174>)
 8000d4a:	881a      	ldrh	r2, [r3, #0]
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <strOp+0x180>)
 8000d4e:	801a      	strh	r2, [r3, #0]
        ledOnTime_previous = ledOnTime;
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <strOp+0x16c>)
 8000d52:	881a      	ldrh	r2, [r3, #0]
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <strOp+0x17c>)
 8000d56:	801a      	strh	r2, [r3, #0]
        ledOnTime = 1000;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <strOp+0x16c>)
 8000d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d5e:	801a      	strh	r2, [r3, #0]
        ledOffTime = 1000; 
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <strOp+0x174>)
 8000d62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d66:	801a      	strh	r2, [r3, #0]
    return;
 8000d68:	e026      	b.n	8000db8 <strOp+0x150>
    else if (strstr(array[0], "baud"))
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	4920      	ldr	r1, [pc, #128]	; (8000df0 <strOp+0x188>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f005 ffd9 	bl	8006d26 <strstr>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00e      	beq.n	8000d98 <strOp+0x130>
        current_operation = OP_BAUD;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <strOp+0x164>)
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	701a      	strb	r2, [r3, #0]
        uartEvent = 1;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <strOp+0x18c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
        baud = atoi(array[1]);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 fcbf 	bl	800670c <atoi>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <strOp+0x190>)
 8000d94:	601a      	str	r2, [r3, #0]
    return;
 8000d96:	e00f      	b.n	8000db8 <strOp+0x150>
    else if (strstr(array[0], "wordlength"))
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4918      	ldr	r1, [pc, #96]	; (8000dfc <strOp+0x194>)
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f005 ffc2 	bl	8006d26 <strstr>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <strOp+0x148>
        current_operation = OP_WORLD_LENGTH;///  TODO(VahitL)
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <strOp+0x164>)
 8000daa:	2206      	movs	r2, #6
 8000dac:	701a      	strb	r2, [r3, #0]
    return;
 8000dae:	e003      	b.n	8000db8 <strOp+0x150>
        current_operation = OP_INVALID;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <strOp+0x164>)
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	701a      	strb	r2, [r3, #0]
    return;
 8000db6:	bf00      	nop
}
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08007c6c 	.word	0x08007c6c
 8000dc4:	08007c70 	.word	0x08007c70
 8000dc8:	08007c74 	.word	0x08007c74
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	200000a0 	.word	0x200000a0
 8000dd4:	20000002 	.word	0x20000002
 8000dd8:	08007c7c 	.word	0x08007c7c
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	08007c84 	.word	0x08007c84
 8000de4:	20000326 	.word	0x20000326
 8000de8:	20000328 	.word	0x20000328
 8000dec:	08007c8c 	.word	0x08007c8c
 8000df0:	08007c94 	.word	0x08007c94
 8000df4:	200000a1 	.word	0x200000a1
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	08007c9c 	.word	0x08007c9c

08000e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return 1;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_kill>:

int _kill(int pid, int sig)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e1a:	f005 fc7b 	bl	8006714 <__errno>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2216      	movs	r2, #22
 8000e22:	601a      	str	r2, [r3, #0]
  return -1;
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_exit>:

void _exit (int status)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ffe7 	bl	8000e10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e42:	e7fe      	b.n	8000e42 <_exit+0x12>

08000e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e00a      	b.n	8000e6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e56:	f3af 8000 	nop.w
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	b2ca      	uxtb	r2, r1
 8000e64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf0      	blt.n	8000e56 <_read+0x12>
  }

  return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e009      	b.n	8000ea4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe69 	bl	8000b70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf1      	blt.n	8000e90 <_write+0x12>
  }
  return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_close>:

int _close(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ede:	605a      	str	r2, [r3, #4]
  return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_isatty>:

int _isatty(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f005 fbe0 	bl	8006714 <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20020000 	.word	0x20020000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	2000032c 	.word	0x2000032c
 8000f88:	20002d28 	.word	0x20002d28

08000f8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fb6:	4a22      	ldr	r2, [pc, #136]	; (8001040 <MX_LPUART1_UART_Init+0x90>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ff2:	4812      	ldr	r0, [pc, #72]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000ff4:	f001 fe18 	bl	8002c28 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ffe:	f7ff fdc9 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8001006:	f003 ffb8 	bl	8004f7a <HAL_UARTEx_SetTxFifoThreshold>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001010:	f7ff fdc0 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001014:	2100      	movs	r1, #0
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8001018:	f003 ffed 	bl	8004ff6 <HAL_UARTEx_SetRxFifoThreshold>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001022:	f7ff fdb7 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8001028:	f003 ff6e 	bl	8004f08 <HAL_UARTEx_DisableFifoMode>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001032:	f7ff fdaf 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000330 	.word	0x20000330
 8001040:	40008000 	.word	0x40008000

08001044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09e      	sub	sp, #120	; 0x78
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2254      	movs	r2, #84	; 0x54
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f005 fc78 	bl	800695a <memset>
  if(uartHandle->Instance==LPUART1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <HAL_UART_MspInit+0xb8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d13e      	bne.n	80010f2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001074:	2320      	movs	r3, #32
 8001076:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fb83 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800108c:	f7ff fd82 	bl	8000b94 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_UART_MspInit+0xbc>)
 8001092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001094:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <HAL_UART_MspInit+0xbc>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_UART_MspInit+0xbc>)
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_UART_MspInit+0xbc>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_MspInit+0xbc>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_UART_MspInit+0xbc>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80010c0:	230c      	movs	r3, #12
 80010c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010d0:	230c      	movs	r3, #12
 80010d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f000 facd 	bl	800167c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2105      	movs	r1, #5
 80010e6:	205b      	movs	r0, #91	; 0x5b
 80010e8:	f000 f9c5 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80010ec:	205b      	movs	r0, #91	; 0x5b
 80010ee:	f000 f9dc 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80010f2:	bf00      	nop
 80010f4:	3778      	adds	r7, #120	; 0x78
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40008000 	.word	0x40008000
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_UART_MspDeInit+0x38>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10d      	bne.n	8001132 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_UART_MspDeInit+0x3c>)
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <HAL_UART_MspDeInit+0x3c>)
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, LPUART1_TX_Pin|LPUART1_RX_Pin);
 8001122:	210c      	movs	r1, #12
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f000 fc2a 	bl	8001980 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800112c:	205b      	movs	r0, #91	; 0x5b
 800112e:	f000 f9ca 	bl	80014c6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40008000 	.word	0x40008000
 8001140:	40021000 	.word	0x40021000

08001144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001146:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <LoopForever+0x6>)
  ldr r1, =_edata
 800114a:	490e      	ldr	r1, [pc, #56]	; (8001184 <LoopForever+0xa>)
  ldr r2, =_sidata
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <LoopForever+0xe>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001160:	4c0b      	ldr	r4, [pc, #44]	; (8001190 <LoopForever+0x16>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800116e:	f7ff ff0d 	bl	8000f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001172:	f005 fbcb 	bl	800690c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001176:	f7ff fc7d 	bl	8000a74 <main>

0800117a <LoopForever>:

LoopForever:
    b LoopForever
 800117a:	e7fe      	b.n	800117a <LoopForever>
  ldr   r0, =_estack
 800117c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001188:	08007f48 	.word	0x08007f48
  ldr r2, =_sbss
 800118c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001190:	20002d28 	.word	0x20002d28

08001194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC1_2_IRQHandler>

08001196 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f95d 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a6:	200f      	movs	r0, #15
 80011a8:	f000 f80e 	bl	80011c8 <HAL_InitTick>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	e001      	b.n	80011bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b8:	f7ff fcf2 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011bc:	79fb      	ldrb	r3, [r7, #7]

}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_InitTick+0x68>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d022      	beq.n	8001222 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_InitTick+0x6c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_InitTick+0x68>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f976 	bl	80014e2 <HAL_SYSTICK_Config>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10f      	bne.n	800121c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	d809      	bhi.n	8001216 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001202:	2200      	movs	r2, #0
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	f04f 30ff 	mov.w	r0, #4294967295
 800120a:	f000 f934 	bl	8001476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_InitTick+0x70>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	e007      	b.n	8001226 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e004      	b.n	8001226 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e001      	b.n	8001226 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000018 	.word	0x20000018
 8001234:	20000010 	.word	0x20000010
 8001238:	20000014 	.word	0x20000014

0800123c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x1c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x20>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4413      	add	r3, r2
 800124a:	4a03      	ldr	r2, [pc, #12]	; (8001258 <HAL_IncTick+0x1c>)
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	200003c0 	.word	0x200003c0
 800125c:	20000018 	.word	0x20000018

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	200003c0 	.word	0x200003c0

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db12      	blt.n	8001350 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	490a      	ldr	r1, [pc, #40]	; (800135c <__NVIC_DisableIRQ+0x44>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	3320      	adds	r3, #32
 8001340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001344:	f3bf 8f4f 	dsb	sy
}
 8001348:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800134a:	f3bf 8f6f 	isb	sy
}
 800134e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff05 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff1c 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff90 	bl	80013b4 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5f 	bl	8001360 <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff0f 	bl	80012dc <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff1f 	bl	8001318 <__NVIC_DisableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff96 	bl	800141c <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d005      	beq.n	800151e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2204      	movs	r2, #4
 8001516:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e037      	b.n	800158e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 020e 	bic.w	r2, r2, #14
 800152c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800153c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f003 021f 	and.w	r2, r3, #31
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800156a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00c      	beq.n	800158e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001582:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800158c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d00d      	beq.n	80015e0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2204      	movs	r2, #4
 80015c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e047      	b.n	8001670 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 020e 	bic.w	r2, r2, #14
 80015ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800160e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	2101      	movs	r1, #1
 800161e:	fa01 f202 	lsl.w	r2, r1, r2
 8001622:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800162c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00c      	beq.n	8001650 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001644:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800164e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
    }
  }
  return status;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800168a:	e15a      	b.n	8001942 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 814c 	beq.w	800193c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d005      	beq.n	80016bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d130      	bne.n	800171e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f2:	2201      	movs	r2, #1
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f003 0201 	and.w	r2, r3, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b03      	cmp	r3, #3
 8001728:	d017      	beq.n	800175a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d123      	bne.n	80017ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	08da      	lsrs	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3208      	adds	r2, #8
 80017a8:	6939      	ldr	r1, [r7, #16]
 80017aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0203 	and.w	r2, r3, #3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80a6 	beq.w	800193c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f0:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <HAL_GPIO_Init+0x2e4>)
 80017f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f4:	4a5a      	ldr	r2, [pc, #360]	; (8001960 <HAL_GPIO_Init+0x2e4>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6613      	str	r3, [r2, #96]	; 0x60
 80017fc:	4b58      	ldr	r3, [pc, #352]	; (8001960 <HAL_GPIO_Init+0x2e4>)
 80017fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001808:	4a56      	ldr	r2, [pc, #344]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001832:	d01f      	beq.n	8001874 <HAL_GPIO_Init+0x1f8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_GPIO_Init+0x2ec>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d019      	beq.n	8001870 <HAL_GPIO_Init+0x1f4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a4b      	ldr	r2, [pc, #300]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d013      	beq.n	800186c <HAL_GPIO_Init+0x1f0>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a4a      	ldr	r2, [pc, #296]	; (8001970 <HAL_GPIO_Init+0x2f4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00d      	beq.n	8001868 <HAL_GPIO_Init+0x1ec>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a49      	ldr	r2, [pc, #292]	; (8001974 <HAL_GPIO_Init+0x2f8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_Init+0x1e8>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a48      	ldr	r2, [pc, #288]	; (8001978 <HAL_GPIO_Init+0x2fc>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_GPIO_Init+0x1e4>
 800185c:	2305      	movs	r3, #5
 800185e:	e00a      	b.n	8001876 <HAL_GPIO_Init+0x1fa>
 8001860:	2306      	movs	r3, #6
 8001862:	e008      	b.n	8001876 <HAL_GPIO_Init+0x1fa>
 8001864:	2304      	movs	r3, #4
 8001866:	e006      	b.n	8001876 <HAL_GPIO_Init+0x1fa>
 8001868:	2303      	movs	r3, #3
 800186a:	e004      	b.n	8001876 <HAL_GPIO_Init+0x1fa>
 800186c:	2302      	movs	r3, #2
 800186e:	e002      	b.n	8001876 <HAL_GPIO_Init+0x1fa>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <HAL_GPIO_Init+0x1fa>
 8001874:	2300      	movs	r3, #0
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	f002 0203 	and.w	r2, r2, #3
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	4093      	lsls	r3, r2
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001886:	4937      	ldr	r1, [pc, #220]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001894:	4b39      	ldr	r3, [pc, #228]	; (800197c <HAL_GPIO_Init+0x300>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b8:	4a30      	ldr	r2, [pc, #192]	; (800197c <HAL_GPIO_Init+0x300>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <HAL_GPIO_Init+0x300>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018e2:	4a26      	ldr	r2, [pc, #152]	; (800197c <HAL_GPIO_Init+0x300>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_GPIO_Init+0x300>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_GPIO_Init+0x300>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <HAL_GPIO_Init+0x300>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_GPIO_Init+0x300>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	f47f ae9d 	bne.w	800168c <HAL_GPIO_Init+0x10>
  }
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	48000400 	.word	0x48000400
 800196c:	48000800 	.word	0x48000800
 8001970:	48000c00 	.word	0x48000c00
 8001974:	48001000 	.word	0x48001000
 8001978:	48001400 	.word	0x48001400
 800197c:	40010400 	.word	0x40010400

08001980 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800198e:	e0bd      	b.n	8001b0c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8001990:	2201      	movs	r2, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80b0 	beq.w	8001b06 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80019a6:	4a60      	ldr	r2, [pc, #384]	; (8001b28 <HAL_GPIO_DeInit+0x1a8>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ce:	d01f      	beq.n	8001a10 <HAL_GPIO_DeInit+0x90>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <HAL_GPIO_DeInit+0x1ac>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d019      	beq.n	8001a0c <HAL_GPIO_DeInit+0x8c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a55      	ldr	r2, [pc, #340]	; (8001b30 <HAL_GPIO_DeInit+0x1b0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d013      	beq.n	8001a08 <HAL_GPIO_DeInit+0x88>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <HAL_GPIO_DeInit+0x1b4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00d      	beq.n	8001a04 <HAL_GPIO_DeInit+0x84>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a53      	ldr	r2, [pc, #332]	; (8001b38 <HAL_GPIO_DeInit+0x1b8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d007      	beq.n	8001a00 <HAL_GPIO_DeInit+0x80>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_GPIO_DeInit+0x1bc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_GPIO_DeInit+0x7c>
 80019f8:	2305      	movs	r3, #5
 80019fa:	e00a      	b.n	8001a12 <HAL_GPIO_DeInit+0x92>
 80019fc:	2306      	movs	r3, #6
 80019fe:	e008      	b.n	8001a12 <HAL_GPIO_DeInit+0x92>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_DeInit+0x92>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_DeInit+0x92>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_DeInit+0x92>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_DeInit+0x92>
 8001a10:	2300      	movs	r3, #0
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d132      	bne.n	8001a88 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_GPIO_DeInit+0x1c0>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4945      	ldr	r1, [pc, #276]	; (8001b40 <HAL_GPIO_DeInit+0x1c0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001a30:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <HAL_GPIO_DeInit+0x1c0>)
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4941      	ldr	r1, [pc, #260]	; (8001b40 <HAL_GPIO_DeInit+0x1c0>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001a3e:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <HAL_GPIO_DeInit+0x1c0>)
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	493e      	ldr	r1, [pc, #248]	; (8001b40 <HAL_GPIO_DeInit+0x1c0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001a4c:	4b3c      	ldr	r3, [pc, #240]	; (8001b40 <HAL_GPIO_DeInit+0x1c0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	493a      	ldr	r1, [pc, #232]	; (8001b40 <HAL_GPIO_DeInit+0x1c0>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001a6a:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <HAL_GPIO_DeInit+0x1a8>)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	482b      	ldr	r0, [pc, #172]	; (8001b28 <HAL_GPIO_DeInit+0x1a8>)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	400a      	ands	r2, r1
 8001a82:	3302      	adds	r3, #2
 8001a84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2103      	movs	r1, #3
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	08d2      	lsrs	r2, r2, #3
 8001abc:	4019      	ands	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2103      	movs	r1, #3
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2103      	movs	r1, #3
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	401a      	ands	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f af3b 	bne.w	8001990 <HAL_GPIO_DeInit+0x10>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	48000400 	.word	0x48000400
 8001b30:	48000800 	.word	0x48000800
 8001b34:	48000c00 	.word	0x48000c00
 8001b38:	48001000 	.word	0x48001000
 8001b3c:	48001400 	.word	0x48001400
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f806 	bl	8001ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d141      	bne.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bca:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd6:	d131      	bne.n	8001c3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd8:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bde:	4a46      	ldr	r2, [pc, #280]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be8:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bf0:	4a41      	ldr	r2, [pc, #260]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf8:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2232      	movs	r2, #50	; 0x32
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	4a3f      	ldr	r2, [pc, #252]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	0c9b      	lsrs	r3, r3, #18
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c0e:	e002      	b.n	8001c16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c22:	d102      	bne.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f2      	bne.n	8001c10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c2a:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d158      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e057      	b.n	8001cec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c42:	4a2d      	ldr	r2, [pc, #180]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c4c:	e04d      	b.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c54:	d141      	bne.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c56:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c62:	d131      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c6a:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2232      	movs	r2, #50	; 0x32
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	0c9b      	lsrs	r3, r3, #18
 8001c96:	3301      	adds	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9a:	e002      	b.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d102      	bne.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f2      	bne.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc2:	d112      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e011      	b.n	8001cec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cd8:	e007      	b.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	20000010 	.word	0x20000010
 8001d00:	431bde83 	.word	0x431bde83

08001d04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d12:	6093      	str	r3, [r2, #8]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40007000 	.word	0x40007000

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e306      	b.n	8002344 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d075      	beq.n	8001e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d42:	4b97      	ldr	r3, [pc, #604]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d4c:	4b94      	ldr	r3, [pc, #592]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3e>
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_OscConfig+0x44>
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	4b8d      	ldr	r3, [pc, #564]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d05b      	beq.n	8001e2c <HAL_RCC_OscConfig+0x108>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d157      	bne.n	8001e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e2e1      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x74>
 8001d8a:	4b85      	ldr	r3, [pc, #532]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a84      	ldr	r2, [pc, #528]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x98>
 8001da2:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a7e      	ldr	r2, [pc, #504]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7b      	ldr	r2, [pc, #492]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001dbc:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a77      	ldr	r2, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a74      	ldr	r2, [pc, #464]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fa40 	bl	8001260 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fa3c 	bl	8001260 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e2a6      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xc0>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fa2c 	bl	8001260 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fa28 	bl	8001260 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e292      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1e:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0xe8>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d075      	beq.n	8001f26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3a:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e44:	4b56      	ldr	r3, [pc, #344]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b0c      	cmp	r3, #12
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_OscConfig+0x136>
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_OscConfig+0x13c>
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d11f      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e60:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_OscConfig+0x154>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e265      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	4946      	ldr	r1, [pc, #280]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e8c:	4b45      	ldr	r3, [pc, #276]	; (8001fa4 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff f999 	bl	80011c8 <HAL_InitTick>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d043      	beq.n	8001f24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e251      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d023      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea8:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a3c      	ldr	r2, [pc, #240]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f9d4 	bl	8001260 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff f9d0 	bl	8001260 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e23a      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ece:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	061b      	lsls	r3, r3, #24
 8001ee8:	492d      	ldr	r1, [pc, #180]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
 8001eee:	e01a      	b.n	8001f26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2a      	ldr	r2, [pc, #168]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f9b0 	bl	8001260 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f04:	f7ff f9ac 	bl	8001260 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e216      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1e0>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d041      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01c      	beq.n	8001f74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7ff f989 	bl	8001260 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f52:	f7ff f985 	bl	8001260 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e1ef      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0ef      	beq.n	8001f52 <HAL_RCC_OscConfig+0x22e>
 8001f72:	e020      	b.n	8001fb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff f96c 	bl	8001260 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f8a:	e00d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f968 	bl	8001260 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d906      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1d2      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa8:	4b8c      	ldr	r3, [pc, #560]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8001faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ea      	bne.n	8001f8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80a6 	beq.w	8002110 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fc8:	4b84      	ldr	r3, [pc, #528]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x2b4>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x2b6>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00d      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b7f      	ldr	r3, [pc, #508]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	4a7e      	ldr	r2, [pc, #504]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fea:	4b7c      	ldr	r3, [pc, #496]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffa:	4b79      	ldr	r3, [pc, #484]	; (80021e0 <HAL_RCC_OscConfig+0x4bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002006:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <HAL_RCC_OscConfig+0x4bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a75      	ldr	r2, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4bc>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7ff f925 	bl	8001260 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7ff f921 	bl	8001260 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e18b      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202c:	4b6c      	ldr	r3, [pc, #432]	; (80021e0 <HAL_RCC_OscConfig+0x4bc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d108      	bne.n	8002052 <HAL_RCC_OscConfig+0x32e>
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002050:	e024      	b.n	800209c <HAL_RCC_OscConfig+0x378>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b05      	cmp	r3, #5
 8002058:	d110      	bne.n	800207c <HAL_RCC_OscConfig+0x358>
 800205a:	4b60      	ldr	r3, [pc, #384]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	4a5e      	ldr	r2, [pc, #376]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206a:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	4a5a      	ldr	r2, [pc, #360]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207a:	e00f      	b.n	800209c <HAL_RCC_OscConfig+0x378>
 800207c:	4b57      	ldr	r3, [pc, #348]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	4a56      	ldr	r2, [pc, #344]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800208c:	4b53      	ldr	r3, [pc, #332]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d016      	beq.n	80020d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7ff f8dc 	bl	8001260 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7ff f8d8 	bl	8001260 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e140      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ed      	beq.n	80020ac <HAL_RCC_OscConfig+0x388>
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7ff f8c5 	bl	8001260 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff f8c1 	bl	8001260 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e129      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f0:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ed      	bne.n	80020da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020fe:	7ffb      	ldrb	r3, [r7, #31]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	4b35      	ldr	r3, [pc, #212]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	4a34      	ldr	r2, [pc, #208]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 800210a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03c      	beq.n	8002196 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01c      	beq.n	800215e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800212a:	4a2c      	ldr	r2, [pc, #176]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7ff f894 	bl	8001260 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213c:	f7ff f890 	bl	8001260 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0fa      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214e:	4b23      	ldr	r3, [pc, #140]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ef      	beq.n	800213c <HAL_RCC_OscConfig+0x418>
 800215c:	e01b      	b.n	8002196 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7ff f877 	bl	8001260 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002176:	f7ff f873 	bl	8001260 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0dd      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 800218a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ef      	bne.n	8002176 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80d1 	beq.w	8002342 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b0c      	cmp	r3, #12
 80021aa:	f000 808b 	beq.w	80022c4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d15e      	bne.n	8002274 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_RCC_OscConfig+0x4b8>)
 80021bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7ff f84d 	bl	8001260 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c8:	e00c      	b.n	80021e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff f849 	bl	8001260 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d905      	bls.n	80021e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0b3      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_OscConfig+0x628>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1ec      	bne.n	80021ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f0:	4b56      	ldr	r3, [pc, #344]	; (800234c <HAL_RCC_OscConfig+0x628>)
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	4b56      	ldr	r3, [pc, #344]	; (8002350 <HAL_RCC_OscConfig+0x62c>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6a11      	ldr	r1, [r2, #32]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002200:	3a01      	subs	r2, #1
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800220a:	0212      	lsls	r2, r2, #8
 800220c:	4311      	orrs	r1, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002212:	0852      	lsrs	r2, r2, #1
 8002214:	3a01      	subs	r2, #1
 8002216:	0552      	lsls	r2, r2, #21
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800221e:	0852      	lsrs	r2, r2, #1
 8002220:	3a01      	subs	r2, #1
 8002222:	0652      	lsls	r2, r2, #25
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800222a:	06d2      	lsls	r2, r2, #27
 800222c:	430a      	orrs	r2, r1
 800222e:	4947      	ldr	r1, [pc, #284]	; (800234c <HAL_RCC_OscConfig+0x628>)
 8002230:	4313      	orrs	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002234:	4b45      	ldr	r3, [pc, #276]	; (800234c <HAL_RCC_OscConfig+0x628>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a44      	ldr	r2, [pc, #272]	; (800234c <HAL_RCC_OscConfig+0x628>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002240:	4b42      	ldr	r3, [pc, #264]	; (800234c <HAL_RCC_OscConfig+0x628>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a41      	ldr	r2, [pc, #260]	; (800234c <HAL_RCC_OscConfig+0x628>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7ff f808 	bl	8001260 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7ff f804 	bl	8001260 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e06e      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_OscConfig+0x628>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x530>
 8002272:	e066      	b.n	8002342 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <HAL_RCC_OscConfig+0x628>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a34      	ldr	r2, [pc, #208]	; (800234c <HAL_RCC_OscConfig+0x628>)
 800227a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002280:	4b32      	ldr	r3, [pc, #200]	; (800234c <HAL_RCC_OscConfig+0x628>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a31      	ldr	r2, [pc, #196]	; (800234c <HAL_RCC_OscConfig+0x628>)
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800228c:	4b2f      	ldr	r3, [pc, #188]	; (800234c <HAL_RCC_OscConfig+0x628>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a2e      	ldr	r2, [pc, #184]	; (800234c <HAL_RCC_OscConfig+0x628>)
 8002292:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe ffe0 	bl	8001260 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe ffdc 	bl	8001260 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e046      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b6:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_RCC_OscConfig+0x628>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x580>
 80022c2:	e03e      	b.n	8002342 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e039      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_OscConfig+0x628>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0203 	and.w	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d12c      	bne.n	800233e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	3b01      	subs	r3, #1
 80022f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d123      	bne.n	800233e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d11b      	bne.n	800233e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d113      	bne.n	800233e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	3b01      	subs	r3, #1
 8002324:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d109      	bne.n	800233e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	3b01      	subs	r3, #1
 8002338:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	019f800c 	.word	0x019f800c

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e11e      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b91      	ldr	r3, [pc, #580]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b8e      	ldr	r3, [pc, #568]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	498c      	ldr	r1, [pc, #560]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b8a      	ldr	r3, [pc, #552]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e106      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d073      	beq.n	8002490 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d129      	bne.n	8002404 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b0:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0f4      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023c0:	f000 f99e 	bl	8002700 <RCC_GetSysClockFreqFromPLLSource>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a7c      	ldr	r2, [pc, #496]	; (80025bc <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d93f      	bls.n	800244e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023ce:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d033      	beq.n	800244e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d12f      	bne.n	800244e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ee:	4b72      	ldr	r3, [pc, #456]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f6:	4a70      	ldr	r2, [pc, #448]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e024      	b.n	800244e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0c6      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0be      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800242c:	f000 f8ce 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002430:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4a61      	ldr	r2, [pc, #388]	; (80025bc <HAL_RCC_ClockConfig+0x268>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d909      	bls.n	800244e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800243a:	4b5f      	ldr	r3, [pc, #380]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002442:	4a5d      	ldr	r2, [pc, #372]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002448:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b5a      	ldr	r3, [pc, #360]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4957      	ldr	r1, [pc, #348]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fefe 	bl	8001260 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fefa 	bl	8001260 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e095      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b4e      	ldr	r3, [pc, #312]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d023      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a42      	ldr	r2, [pc, #264]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024c0:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024c8:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4936      	ldr	r1, [pc, #216]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b80      	cmp	r3, #128	; 0x80
 80024e8:	d105      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4a32      	ldr	r2, [pc, #200]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f6:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d21d      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 020f 	bic.w	r2, r3, #15
 800250c:	4929      	ldr	r1, [pc, #164]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002514:	f7fe fea4 	bl	8001260 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fea0 	bl	8001260 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e03b      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d1ed      	bne.n	800251c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4917      	ldr	r1, [pc, #92]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490f      	ldr	r1, [pc, #60]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800257e:	f000 f825 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	490c      	ldr	r1, [pc, #48]	; (80025c0 <HAL_RCC_ClockConfig+0x26c>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_RCC_ClockConfig+0x270>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_ClockConfig+0x274>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fe10 	bl	80011c8 <HAL_InitTick>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	04c4b400 	.word	0x04c4b400
 80025c0:	08007cb0 	.word	0x08007cb0
 80025c4:	20000010 	.word	0x20000010
 80025c8:	20000014 	.word	0x20000014

080025cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d102      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025de:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	e047      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f0:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e03e      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d136      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3301      	adds	r3, #1
 8002618:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d10c      	bne.n	800263a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002620:	4a1a      	ldr	r2, [pc, #104]	; (800268c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	4a16      	ldr	r2, [pc, #88]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262a:	68d2      	ldr	r2, [r2, #12]
 800262c:	0a12      	lsrs	r2, r2, #8
 800262e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
      break;
 8002638:	e00c      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	0a12      	lsrs	r2, r2, #8
 8002648:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
      break;
 8002652:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0e5b      	lsrs	r3, r3, #25
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	3301      	adds	r3, #1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	fbb2 f3f3 	udiv	r3, r2, r3
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e001      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002674:	693b      	ldr	r3, [r7, #16]
}
 8002676:	4618      	mov	r0, r3
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	00f42400 	.word	0x00f42400
 800268c:	016e3600 	.word	0x016e3600

08002690 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000010 	.word	0x20000010

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026ac:	f7ff fff0 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4904      	ldr	r1, [pc, #16]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08007cc0 	.word	0x08007cc0

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d8:	f7ff ffda 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0adb      	lsrs	r3, r3, #11
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4904      	ldr	r1, [pc, #16]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08007cc0 	.word	0x08007cc0

08002700 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3301      	adds	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d10c      	bne.n	800273e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800272e:	68d2      	ldr	r2, [r2, #12]
 8002730:	0a12      	lsrs	r2, r2, #8
 8002732:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
    break;
 800273c:	e00c      	b.n	8002758 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002748:	68d2      	ldr	r2, [r2, #12]
 800274a:	0a12      	lsrs	r2, r2, #8
 800274c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
    break;
 8002756:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0e5b      	lsrs	r3, r3, #25
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	3301      	adds	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002772:	687b      	ldr	r3, [r7, #4]
}
 8002774:	4618      	mov	r0, r3
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40021000 	.word	0x40021000
 8002784:	016e3600 	.word	0x016e3600
 8002788:	00f42400 	.word	0x00f42400

0800278c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002794:	2300      	movs	r3, #0
 8002796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002798:	2300      	movs	r3, #0
 800279a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8098 	beq.w	80028da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b43      	ldr	r3, [pc, #268]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	4a3f      	ldr	r2, [pc, #252]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6593      	str	r3, [r2, #88]	; 0x58
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d6:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a39      	ldr	r2, [pc, #228]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fd3d 	bl	8001260 <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e8:	e009      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7fe fd39 	bl	8001260 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d902      	bls.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	74fb      	strb	r3, [r7, #19]
        break;
 80027fc:	e005      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ef      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d159      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002810:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01e      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	d019      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002836:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002858:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fcf9 	bl	8001260 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002870:	e00b      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fcf5 	bl	8001260 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d902      	bls.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	74fb      	strb	r3, [r7, #19]
            break;
 8002888:	e006      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ec      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10b      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028b4:	e008      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	74bb      	strb	r3, [r7, #18]
 80028ba:	e005      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c8:	7c7b      	ldrb	r3, [r7, #17]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d105      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ce:	4ba7      	ldr	r3, [pc, #668]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	4aa6      	ldr	r2, [pc, #664]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e6:	4ba1      	ldr	r3, [pc, #644]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f023 0203 	bic.w	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	499d      	ldr	r1, [pc, #628]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002908:	4b98      	ldr	r3, [pc, #608]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 020c 	bic.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	4995      	ldr	r1, [pc, #596]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292a:	4b90      	ldr	r3, [pc, #576]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	498c      	ldr	r1, [pc, #560]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800294c:	4b87      	ldr	r3, [pc, #540]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	4984      	ldr	r1, [pc, #528]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800296e:	4b7f      	ldr	r3, [pc, #508]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	497b      	ldr	r1, [pc, #492]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002990:	4b76      	ldr	r3, [pc, #472]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4973      	ldr	r1, [pc, #460]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b2:	4b6e      	ldr	r3, [pc, #440]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	496a      	ldr	r1, [pc, #424]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029d4:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4962      	ldr	r1, [pc, #392]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	4959      	ldr	r1, [pc, #356]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a18:	4b54      	ldr	r3, [pc, #336]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	4951      	ldr	r1, [pc, #324]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a3a:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	4948      	ldr	r1, [pc, #288]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a5c:	4b43      	ldr	r3, [pc, #268]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4940      	ldr	r1, [pc, #256]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a3a      	ldr	r2, [pc, #232]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	4932      	ldr	r1, [pc, #200]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a2c      	ldr	r2, [pc, #176]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002abe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	4924      	ldr	r1, [pc, #144]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aea:	d105      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aec:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d015      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	4916      	ldr	r1, [pc, #88]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b22:	d105      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d019      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5a:	d109      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a02      	ldr	r2, [pc, #8]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b66:	60d3      	str	r3, [r2, #12]
 8002b68:	e002      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d015      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	4926      	ldr	r1, [pc, #152]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b9c:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc2:	4918      	ldr	r1, [pc, #96]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d015      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	490a      	ldr	r1, [pc, #40]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c18:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e042      	b.n	8002cc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7fe f9f9 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2224      	movs	r2, #36	; 0x24
 8002c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fdcc 	bl	8003808 <UART_SetConfig>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e022      	b.n	8002cc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f001 f8bc 	bl	8003e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 f943 	bl	8003f44 <UART_CheckIdleState>
 8002cbe:	4603      	mov	r3, r0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e02e      	b.n	8002d38 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2224      	movs	r2, #36	; 0x24
 8002cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe f9fa 	bl	8001104 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	f040 8083 	bne.w	8002e62 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_UART_Transmit+0x28>
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e07b      	b.n	8002e64 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Transmit+0x3a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e074      	b.n	8002e64 <HAL_UART_Transmit+0x124>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2221      	movs	r2, #33	; 0x21
 8002d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d92:	f7fe fa65 	bl	8001260 <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db0:	d108      	bne.n	8002dc4 <HAL_UART_Transmit+0x84>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e003      	b.n	8002dcc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002dd4:	e02c      	b.n	8002e30 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f001 f8fa 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e039      	b.n	8002e64 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e007      	b.n	8002e1e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1cc      	bne.n	8002dd6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f001 f8c7 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e006      	b.n	8002e64 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d142      	bne.n	8002f0a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_UART_Receive_IT+0x24>
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e03b      	b.n	8002f0c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Receive_IT+0x36>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e034      	b.n	8002f0c <HAL_UART_Receive_IT+0xa0>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <HAL_UART_Receive_IT+0xa8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01f      	beq.n	8002efa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d018      	beq.n	8002efa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	623b      	str	r3, [r7, #32]
 8002ee8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	69f9      	ldr	r1, [r7, #28]
 8002eec:	6a3a      	ldr	r2, [r7, #32]
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e6      	bne.n	8002ec8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	461a      	mov	r2, r3
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f001 f933 	bl	800416c <UART_Start_Receive_IT>
 8002f06:	4603      	mov	r3, r0
 8002f08:	e000      	b.n	8002f0c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40008000 	.word	0x40008000

08002f18 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b0a2      	sub	sp, #136	; 0x88
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f36:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8002f3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f4a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e4      	bne.n	8002f26 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6e:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002f80:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f88:	e841 2300 	strex	r3, r2, [r1]
 8002f8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1e3      	bne.n	8002f5c <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d118      	bne.n	8002fce <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	f023 0310 	bic.w	r3, r3, #16
 8002fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
 8002fbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e6      	bne.n	8002f9c <HAL_UART_Abort_IT+0x84>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00f      	beq.n	8002ff6 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe0:	2b80      	cmp	r3, #128	; 0x80
 8002fe2:	d104      	bne.n	8002fee <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe8:	4a64      	ldr	r2, [pc, #400]	; (800317c <HAL_UART_Abort_IT+0x264>)
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38
 8002fec:	e003      	b.n	8002ff6 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00f      	beq.n	800301e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d104      	bne.n	8003016 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003010:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <HAL_UART_Abort_IT+0x268>)
 8003012:	639a      	str	r2, [r3, #56]	; 0x38
 8003014:	e003      	b.n	800301e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800301a:	2200      	movs	r2, #0
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	2b80      	cmp	r3, #128	; 0x80
 800302a:	d12d      	bne.n	8003088 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3308      	adds	r3, #8
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	623b      	str	r3, [r7, #32]
   return(result);
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003042:	677b      	str	r3, [r7, #116]	; 0x74
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3308      	adds	r3, #8
 800304a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800304c:	633a      	str	r2, [r7, #48]	; 0x30
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e5      	bne.n	800302c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00f      	beq.n	8003088 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fa9d 	bl	80015ac <HAL_DMA_Abort_IT>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307c:	2200      	movs	r2, #0
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
 8003080:	e002      	b.n	8003088 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        abortcplt = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d130      	bne.n	80030f8 <HAL_UART_Abort_IT+0x1e0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3308      	adds	r3, #8
 800309c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ac:	673b      	str	r3, [r7, #112]	; 0x70
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3308      	adds	r3, #8
 80030b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80030b6:	61fa      	str	r2, [r7, #28]
 80030b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	617b      	str	r3, [r7, #20]
   return(result);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e5      	bne.n	8003096 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d012      	beq.n	80030f8 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fa68 	bl	80015ac <HAL_DMA_Abort_IT>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e6:	2200      	movs	r2, #0
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030f0:	e002      	b.n	80030f8 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        abortcplt = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 80030f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d138      	bne.n	8003172 <HAL_UART_Abort_IT+0x25a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->RxXferCount = 0U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	220f      	movs	r2, #15
 800312a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003134:	d107      	bne.n	8003146 <HAL_UART_Abort_IT+0x22e>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0210 	orr.w	r2, r2, #16
 8003144:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0208 	orr.w	r2, r2, #8
 8003154:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fb35 	bl	80037dc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3788      	adds	r7, #136	; 0x88
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	080044b9 	.word	0x080044b9
 8003180:	08004541 	.word	0x08004541

08003184 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b0ba      	sub	sp, #232	; 0xe8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80031b2:	4013      	ands	r3, r2
 80031b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d11b      	bne.n	80031f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 82d6 	beq.w	800379a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
      }
      return;
 80031f6:	e2d0      	b.n	800379a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 811f 	beq.w	8003440 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003202:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003206:	4b8b      	ldr	r3, [pc, #556]	; (8003434 <HAL_UART_IRQHandler+0x2b0>)
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800320e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <HAL_UART_IRQHandler+0x2b4>)
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8112 	beq.w	8003440 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800321c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d011      	beq.n	800324c <HAL_UART_IRQHandler+0xc8>
 8003228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800324c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d011      	beq.n	800327c <HAL_UART_IRQHandler+0xf8>
 8003258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2202      	movs	r2, #2
 800326a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d011      	beq.n	80032ac <HAL_UART_IRQHandler+0x128>
 8003288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2204      	movs	r2, #4
 800329a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d017      	beq.n	80032e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80032c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80032c8:	4b5a      	ldr	r3, [pc, #360]	; (8003434 <HAL_UART_IRQHandler+0x2b0>)
 80032ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2208      	movs	r2, #8
 80032d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032de:	f043 0208 	orr.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d012      	beq.n	800331a <HAL_UART_IRQHandler+0x196>
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00c      	beq.n	800331a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 823c 	beq.w	800379e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d013      	beq.n	800335a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800333e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003360:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d005      	beq.n	800337e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003376:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04f      	beq.n	800341e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f001 f81e 	bl	80043c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b40      	cmp	r3, #64	; 0x40
 8003390:	d141      	bne.n	8003416 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3308      	adds	r3, #8
 8003398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3308      	adds	r3, #8
 80033ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1d9      	bne.n	8003392 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d013      	beq.n	800340e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_UART_IRQHandler+0x2b8>)
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe f8da 	bl	80015ac <HAL_DMA_Abort_IT>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d017      	beq.n	800342e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003408:	4610      	mov	r0, r2
 800340a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	e00f      	b.n	800342e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9da 	bl	80037c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	e00b      	b.n	800342e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f9d6 	bl	80037c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	e007      	b.n	800342e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f9d2 	bl	80037c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800342c:	e1b7      	b.n	800379e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342e:	bf00      	nop
    return;
 8003430:	e1b5      	b.n	800379e <HAL_UART_IRQHandler+0x61a>
 8003432:	bf00      	nop
 8003434:	10000001 	.word	0x10000001
 8003438:	04000120 	.word	0x04000120
 800343c:	0800448d 	.word	0x0800448d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 814a 	bne.w	80036de <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800344a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8143 	beq.w	80036de <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 813c 	beq.w	80036de <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2210      	movs	r2, #16
 800346c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	f040 80b5 	bne.w	80035e8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800348a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8187 	beq.w	80037a2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800349a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800349e:	429a      	cmp	r2, r3
 80034a0:	f080 817f 	bcs.w	80037a2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 8086 	bne.w	80035cc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1da      	bne.n	80034c0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3308      	adds	r3, #8
 8003510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800351a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800352e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e1      	bne.n	800350a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800356a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800356c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e3      	bne.n	8003546 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800359a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359c:	f023 0310 	bic.w	r3, r3, #16
 80035a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80035b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e4      	bne.n	800358c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd ff97 	bl	80014fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f905 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035e6:	e0dc      	b.n	80037a2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80ce 	beq.w	80037a6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800360a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80c9 	beq.w	80037a6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003636:	647b      	str	r3, [r7, #68]	; 0x44
 8003638:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800363c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e4      	bne.n	8003614 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3308      	adds	r3, #8
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	623b      	str	r3, [r7, #32]
   return(result);
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3308      	adds	r3, #8
 800366e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003672:	633a      	str	r2, [r7, #48]	; 0x30
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e1      	bne.n	800364a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0310 	bic.w	r3, r3, #16
 80036ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	69b9      	ldr	r1, [r7, #24]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	617b      	str	r3, [r7, #20]
   return(result);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e4      	bne.n	800369a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f88a 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036dc:	e063      	b.n	80037a6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00e      	beq.n	8003708 <HAL_UART_IRQHandler+0x584>
 80036ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f001 fbe3 	bl	8004ecc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003706:	e051      	b.n	80037ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d014      	beq.n	800373e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003730:	2b00      	cmp	r3, #0
 8003732:	d03a      	beq.n	80037aa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
    }
    return;
 800373c:	e035      	b.n	80037aa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_UART_IRQHandler+0x5da>
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 ff31 	bl	80045be <UART_EndTransmit_IT>
    return;
 800375c:	e026      	b.n	80037ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_UART_IRQHandler+0x5fa>
 800376a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800376e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f001 fbbc 	bl	8004ef4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800377c:	e016      	b.n	80037ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d010      	beq.n	80037ac <HAL_UART_IRQHandler+0x628>
 800378a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378e:	2b00      	cmp	r3, #0
 8003790:	da0c      	bge.n	80037ac <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f001 fba4 	bl	8004ee0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003798:	e008      	b.n	80037ac <HAL_UART_IRQHandler+0x628>
      return;
 800379a:	bf00      	nop
 800379c:	e006      	b.n	80037ac <HAL_UART_IRQHandler+0x628>
    return;
 800379e:	bf00      	nop
 80037a0:	e004      	b.n	80037ac <HAL_UART_IRQHandler+0x628>
      return;
 80037a2:	bf00      	nop
 80037a4:	e002      	b.n	80037ac <HAL_UART_IRQHandler+0x628>
      return;
 80037a6:	bf00      	nop
 80037a8:	e000      	b.n	80037ac <HAL_UART_IRQHandler+0x628>
    return;
 80037aa:	bf00      	nop
  }
}
 80037ac:	37e8      	adds	r7, #232	; 0xe8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop

080037b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800380c:	b08c      	sub	sp, #48	; 0x30
 800380e:	af00      	add	r7, sp, #0
 8003810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	431a      	orrs	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4313      	orrs	r3, r2
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4baa      	ldr	r3, [pc, #680]	; (8003ae0 <UART_SetConfig+0x2d8>)
 8003838:	4013      	ands	r3, r2
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003840:	430b      	orrs	r3, r1
 8003842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a9f      	ldr	r2, [pc, #636]	; (8003ae4 <UART_SetConfig+0x2dc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003870:	4313      	orrs	r3, r2
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800387e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f023 010f 	bic.w	r1, r3, #15
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a90      	ldr	r2, [pc, #576]	; (8003ae8 <UART_SetConfig+0x2e0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d125      	bne.n	80038f8 <UART_SetConfig+0xf0>
 80038ac:	4b8f      	ldr	r3, [pc, #572]	; (8003aec <UART_SetConfig+0x2e4>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d81a      	bhi.n	80038f0 <UART_SetConfig+0xe8>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0xb8>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038e1 	.word	0x080038e1
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d6:	e116      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038de:	e112      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e6:	e10e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ee:	e10a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e106      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7c      	ldr	r2, [pc, #496]	; (8003af0 <UART_SetConfig+0x2e8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d138      	bne.n	8003974 <UART_SetConfig+0x16c>
 8003902:	4b7a      	ldr	r3, [pc, #488]	; (8003aec <UART_SetConfig+0x2e4>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d82d      	bhi.n	800396c <UART_SetConfig+0x164>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0x110>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800394d 	.word	0x0800394d
 800391c:	0800396d 	.word	0x0800396d
 8003920:	0800396d 	.word	0x0800396d
 8003924:	0800396d 	.word	0x0800396d
 8003928:	0800395d 	.word	0x0800395d
 800392c:	0800396d 	.word	0x0800396d
 8003930:	0800396d 	.word	0x0800396d
 8003934:	0800396d 	.word	0x0800396d
 8003938:	08003955 	.word	0x08003955
 800393c:	0800396d 	.word	0x0800396d
 8003940:	0800396d 	.word	0x0800396d
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003965 	.word	0x08003965
 800394c:	2300      	movs	r3, #0
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003952:	e0d8      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003954:	2302      	movs	r3, #2
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395a:	e0d4      	b.n	8003b06 <UART_SetConfig+0x2fe>
 800395c:	2304      	movs	r3, #4
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003962:	e0d0      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003964:	2308      	movs	r3, #8
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396a:	e0cc      	b.n	8003b06 <UART_SetConfig+0x2fe>
 800396c:	2310      	movs	r3, #16
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003972:	e0c8      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5e      	ldr	r2, [pc, #376]	; (8003af4 <UART_SetConfig+0x2ec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d125      	bne.n	80039ca <UART_SetConfig+0x1c2>
 800397e:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <UART_SetConfig+0x2e4>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d016      	beq.n	80039ba <UART_SetConfig+0x1b2>
 800398c:	2b30      	cmp	r3, #48	; 0x30
 800398e:	d818      	bhi.n	80039c2 <UART_SetConfig+0x1ba>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d00a      	beq.n	80039aa <UART_SetConfig+0x1a2>
 8003994:	2b20      	cmp	r3, #32
 8003996:	d814      	bhi.n	80039c2 <UART_SetConfig+0x1ba>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <UART_SetConfig+0x19a>
 800399c:	2b10      	cmp	r3, #16
 800399e:	d008      	beq.n	80039b2 <UART_SetConfig+0x1aa>
 80039a0:	e00f      	b.n	80039c2 <UART_SetConfig+0x1ba>
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a8:	e0ad      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039aa:	2302      	movs	r3, #2
 80039ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b0:	e0a9      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039b2:	2304      	movs	r3, #4
 80039b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b8:	e0a5      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039ba:	2308      	movs	r3, #8
 80039bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c0:	e0a1      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039c2:	2310      	movs	r3, #16
 80039c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c8:	e09d      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a4a      	ldr	r2, [pc, #296]	; (8003af8 <UART_SetConfig+0x2f0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d125      	bne.n	8003a20 <UART_SetConfig+0x218>
 80039d4:	4b45      	ldr	r3, [pc, #276]	; (8003aec <UART_SetConfig+0x2e4>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039de:	2bc0      	cmp	r3, #192	; 0xc0
 80039e0:	d016      	beq.n	8003a10 <UART_SetConfig+0x208>
 80039e2:	2bc0      	cmp	r3, #192	; 0xc0
 80039e4:	d818      	bhi.n	8003a18 <UART_SetConfig+0x210>
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	d00a      	beq.n	8003a00 <UART_SetConfig+0x1f8>
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d814      	bhi.n	8003a18 <UART_SetConfig+0x210>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <UART_SetConfig+0x1f0>
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d008      	beq.n	8003a08 <UART_SetConfig+0x200>
 80039f6:	e00f      	b.n	8003a18 <UART_SetConfig+0x210>
 80039f8:	2300      	movs	r3, #0
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fe:	e082      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a00:	2302      	movs	r3, #2
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a06:	e07e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0e:	e07a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a10:	2308      	movs	r3, #8
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a16:	e076      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1e:	e072      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a35      	ldr	r2, [pc, #212]	; (8003afc <UART_SetConfig+0x2f4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d12a      	bne.n	8003a80 <UART_SetConfig+0x278>
 8003a2a:	4b30      	ldr	r3, [pc, #192]	; (8003aec <UART_SetConfig+0x2e4>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a38:	d01a      	beq.n	8003a70 <UART_SetConfig+0x268>
 8003a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a3e:	d81b      	bhi.n	8003a78 <UART_SetConfig+0x270>
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a44:	d00c      	beq.n	8003a60 <UART_SetConfig+0x258>
 8003a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4a:	d815      	bhi.n	8003a78 <UART_SetConfig+0x270>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <UART_SetConfig+0x250>
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a54:	d008      	beq.n	8003a68 <UART_SetConfig+0x260>
 8003a56:	e00f      	b.n	8003a78 <UART_SetConfig+0x270>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5e:	e052      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a60:	2302      	movs	r3, #2
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a66:	e04e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6e:	e04a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a70:	2308      	movs	r3, #8
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a76:	e046      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7e:	e042      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <UART_SetConfig+0x2dc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d13a      	bne.n	8003b00 <UART_SetConfig+0x2f8>
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <UART_SetConfig+0x2e4>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a98:	d01a      	beq.n	8003ad0 <UART_SetConfig+0x2c8>
 8003a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a9e:	d81b      	bhi.n	8003ad8 <UART_SetConfig+0x2d0>
 8003aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa4:	d00c      	beq.n	8003ac0 <UART_SetConfig+0x2b8>
 8003aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aaa:	d815      	bhi.n	8003ad8 <UART_SetConfig+0x2d0>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <UART_SetConfig+0x2b0>
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab4:	d008      	beq.n	8003ac8 <UART_SetConfig+0x2c0>
 8003ab6:	e00f      	b.n	8003ad8 <UART_SetConfig+0x2d0>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003abe:	e022      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ac6:	e01e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ace:	e01a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad6:	e016      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ade:	e012      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ae0:	cfff69f3 	.word	0xcfff69f3
 8003ae4:	40008000 	.word	0x40008000
 8003ae8:	40013800 	.word	0x40013800
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40004400 	.word	0x40004400
 8003af4:	40004800 	.word	0x40004800
 8003af8:	40004c00 	.word	0x40004c00
 8003afc:	40005000 	.word	0x40005000
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4aae      	ldr	r2, [pc, #696]	; (8003dc4 <UART_SetConfig+0x5bc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f040 8097 	bne.w	8003c40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d823      	bhi.n	8003b62 <UART_SetConfig+0x35a>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <UART_SetConfig+0x318>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b45 	.word	0x08003b45
 8003b24:	08003b63 	.word	0x08003b63
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b53 	.word	0x08003b53
 8003b34:	08003b63 	.word	0x08003b63
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003b63 	.word	0x08003b63
 8003b40:	08003b5b 	.word	0x08003b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b44:	f7fe fdb0 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003b48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b4a:	e010      	b.n	8003b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b9e      	ldr	r3, [pc, #632]	; (8003dc8 <UART_SetConfig+0x5c0>)
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b50:	e00d      	b.n	8003b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe fd3b 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003b56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b58:	e009      	b.n	8003b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b60:	e005      	b.n	8003b6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8130 	beq.w	8003dd6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	4a94      	ldr	r2, [pc, #592]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d305      	bcc.n	8003ba6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d903      	bls.n	8003bae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bac:	e113      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	60fa      	str	r2, [r7, #12]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	4a84      	ldr	r2, [pc, #528]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bd0:	f7fc fb76 	bl	80002c0 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	020b      	lsls	r3, r1, #8
 8003be6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bea:	0202      	lsls	r2, r0, #8
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	6849      	ldr	r1, [r1, #4]
 8003bf0:	0849      	lsrs	r1, r1, #1
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	4605      	mov	r5, r0
 8003bf8:	eb12 0804 	adds.w	r8, r2, r4
 8003bfc:	eb43 0905 	adc.w	r9, r3, r5
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	469a      	mov	sl, r3
 8003c08:	4693      	mov	fp, r2
 8003c0a:	4652      	mov	r2, sl
 8003c0c:	465b      	mov	r3, fp
 8003c0e:	4640      	mov	r0, r8
 8003c10:	4649      	mov	r1, r9
 8003c12:	f7fc fb55 	bl	80002c0 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c24:	d308      	bcc.n	8003c38 <UART_SetConfig+0x430>
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2c:	d204      	bcs.n	8003c38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	e0ce      	b.n	8003dd6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c3e:	e0ca      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c48:	d166      	bne.n	8003d18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d827      	bhi.n	8003ca2 <UART_SetConfig+0x49a>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0x450>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08003ca3 	.word	0x08003ca3
 8003c68:	08003c93 	.word	0x08003c93
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003ca3 	.word	0x08003ca3
 8003c74:	08003ca3 	.word	0x08003ca3
 8003c78:	08003c9b 	.word	0x08003c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f7fe fd14 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c82:	e014      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7fe fd26 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8003c88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c8a:	e010      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8c:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <UART_SetConfig+0x5c0>)
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c90:	e00d      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c92:	f7fe fc9b 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003c96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c98:	e009      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ca0:	e005      	b.n	8003cae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8090 	beq.w	8003dd6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	4a44      	ldr	r2, [pc, #272]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cc8:	005a      	lsls	r2, r3, #1
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	441a      	add	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d916      	bls.n	8003d10 <UART_SetConfig+0x508>
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d212      	bcs.n	8003d10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f023 030f 	bic.w	r3, r3, #15
 8003cf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	8bfb      	ldrh	r3, [r7, #30]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	8bfa      	ldrh	r2, [r7, #30]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	e062      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d16:	e05e      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d828      	bhi.n	8003d72 <UART_SetConfig+0x56a>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0x520>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fe fcac 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d52:	e014      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7fe fcbe 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8003d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d5a:	e010      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <UART_SetConfig+0x5c0>)
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d60:	e00d      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7fe fc33 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d68:	e009      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d70:	e005      	b.n	8003d7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d028      	beq.n	8003dd6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	441a      	add	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	d910      	bls.n	8003dd0 <UART_SetConfig+0x5c8>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d20c      	bcs.n	8003dd0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60da      	str	r2, [r3, #12]
 8003dc0:	e009      	b.n	8003dd6 <UART_SetConfig+0x5ce>
 8003dc2:	bf00      	nop
 8003dc4:	40008000 	.word	0x40008000
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	08007cc8 	.word	0x08007cc8
      }
      else
      {
        ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003df2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3730      	adds	r7, #48	; 0x30
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efe:	d10a      	bne.n	8003f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f54:	f7fd f984 	bl	8001260 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d10e      	bne.n	8003f86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f82f 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e025      	b.n	8003fd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d10e      	bne.n	8003fb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f819 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e00f      	b.n	8003fd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b09c      	sub	sp, #112	; 0x70
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fea:	e0a9      	b.n	8004140 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	f000 80a5 	beq.w	8004140 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7fd f933 	bl	8001260 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004002:	429a      	cmp	r2, r3
 8004004:	d302      	bcc.n	800400c <UART_WaitOnFlagUntilTimeout+0x32>
 8004006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004008:	2b00      	cmp	r3, #0
 800400a:	d140      	bne.n	800408e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800401a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004020:	667b      	str	r3, [r7, #100]	; 0x64
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800402a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800402c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004030:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e6      	bne.n	800400c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3308      	adds	r3, #8
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	663b      	str	r3, [r7, #96]	; 0x60
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800405e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004060:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800406c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e5      	bne.n	800403e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e069      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d051      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040aa:	d149      	bne.n	8004140 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
 80040d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e6      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3308      	adds	r3, #8
 80040ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	613b      	str	r3, [r7, #16]
   return(result);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004108:	623a      	str	r2, [r7, #32]
 800410a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	69f9      	ldr	r1, [r7, #28]
 800410e:	6a3a      	ldr	r2, [r7, #32]
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	61bb      	str	r3, [r7, #24]
   return(result);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e5      	bne.n	80040e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e010      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	429a      	cmp	r2, r3
 800415c:	f43f af46 	beq.w	8003fec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3770      	adds	r7, #112	; 0x70
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800416c:	b480      	push	{r7}
 800416e:	b0a3      	sub	sp, #140	; 0x8c
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	88fa      	ldrh	r2, [r7, #6]
 8004184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419e:	d10e      	bne.n	80041be <UART_Start_Receive_IT+0x52>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <UART_Start_Receive_IT+0x48>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041b2:	e02d      	b.n	8004210 <UART_Start_Receive_IT+0xa4>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	22ff      	movs	r2, #255	; 0xff
 80041b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041bc:	e028      	b.n	8004210 <UART_Start_Receive_IT+0xa4>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10d      	bne.n	80041e2 <UART_Start_Receive_IT+0x76>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <UART_Start_Receive_IT+0x6c>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	22ff      	movs	r2, #255	; 0xff
 80041d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041d6:	e01b      	b.n	8004210 <UART_Start_Receive_IT+0xa4>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	227f      	movs	r2, #127	; 0x7f
 80041dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041e0:	e016      	b.n	8004210 <UART_Start_Receive_IT+0xa4>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ea:	d10d      	bne.n	8004208 <UART_Start_Receive_IT+0x9c>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <UART_Start_Receive_IT+0x92>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	227f      	movs	r2, #127	; 0x7f
 80041f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041fc:	e008      	b.n	8004210 <UART_Start_Receive_IT+0xa4>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	223f      	movs	r2, #63	; 0x3f
 8004202:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004206:	e003      	b.n	8004210 <UART_Start_Receive_IT+0xa4>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2222      	movs	r2, #34	; 0x22
 800421c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004244:	673a      	str	r2, [r7, #112]	; 0x70
 8004246:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800424a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e3      	bne.n	8004220 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800425c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004260:	d153      	bne.n	800430a <UART_Start_Receive_IT+0x19e>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004268:	88fa      	ldrh	r2, [r7, #6]
 800426a:	429a      	cmp	r2, r3
 800426c:	d34d      	bcc.n	800430a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d107      	bne.n	8004288 <UART_Start_Receive_IT+0x11c>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d103      	bne.n	8004288 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a4b      	ldr	r2, [pc, #300]	; (80043b0 <UART_Start_Receive_IT+0x244>)
 8004284:	671a      	str	r2, [r3, #112]	; 0x70
 8004286:	e002      	b.n	800428e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <UART_Start_Receive_IT+0x248>)
 800428c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01a      	beq.n	80042d4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e4      	bne.n	800429e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80042f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80042f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_Start_Receive_IT+0x168>
 8004308:	e04a      	b.n	80043a0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	d107      	bne.n	8004324 <UART_Start_Receive_IT+0x1b8>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d103      	bne.n	8004324 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <UART_Start_Receive_IT+0x24c>)
 8004320:	671a      	str	r2, [r3, #112]	; 0x70
 8004322:	e002      	b.n	800432a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <UART_Start_Receive_IT+0x250>)
 8004328:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d019      	beq.n	800436e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800434e:	677b      	str	r3, [r7, #116]	; 0x74
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e6      	bne.n	800433a <UART_Start_Receive_IT+0x1ce>
 800436c:	e018      	b.n	80043a0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f043 0320 	orr.w	r3, r3, #32
 8004382:	67bb      	str	r3, [r7, #120]	; 0x78
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	69f9      	ldr	r1, [r7, #28]
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	61bb      	str	r3, [r7, #24]
   return(result);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e6      	bne.n	800436e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	378c      	adds	r7, #140	; 0x8c
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	08004bcd 	.word	0x08004bcd
 80043b4:	080048d5 	.word	0x080048d5
 80043b8:	08004775 	.word	0x08004775
 80043bc:	08004615 	.word	0x08004615

080043c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b095      	sub	sp, #84	; 0x54
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e6:	643b      	str	r3, [r7, #64]	; 0x40
 80043e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e6      	bne.n	80043c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3308      	adds	r3, #8
 8004400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	61fb      	str	r3, [r7, #28]
   return(result);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	64bb      	str	r3, [r7, #72]	; 0x48
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3308      	adds	r3, #8
 800441c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800441e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e3      	bne.n	80043fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004436:	2b01      	cmp	r3, #1
 8004438:	d118      	bne.n	800446c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	60bb      	str	r3, [r7, #8]
   return(result);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 0310 	bic.w	r3, r3, #16
 800444e:	647b      	str	r3, [r7, #68]	; 0x44
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6979      	ldr	r1, [r7, #20]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	613b      	str	r3, [r7, #16]
   return(result);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e6      	bne.n	800443a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004480:	bf00      	nop
 8004482:	3754      	adds	r7, #84	; 0x54
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff f98c 	bl	80037c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ca:	2200      	movs	r2, #0
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d12b      	bne.n	8004538 <UART_DMATxAbortCallback+0x80>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	220f      	movs	r2, #15
 80044fe:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004508:	d107      	bne.n	800451a <UART_DMATxAbortCallback+0x62>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0210 	orr.w	r2, r2, #16
 8004518:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff f953 	bl	80037dc <HAL_UART_AbortCpltCallback>
 8004536:	e000      	b.n	800453a <UART_DMATxAbortCallback+0x82>
      return;
 8004538:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004552:	2200      	movs	r2, #0
 8004554:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455a:	2b00      	cmp	r3, #0
 800455c:	d004      	beq.n	8004568 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	d126      	bne.n	80045b6 <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	220f      	movs	r2, #15
 8004586:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0208 	orr.w	r2, r2, #8
 8004596:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff f914 	bl	80037dc <HAL_UART_AbortCpltCallback>
 80045b4:	e000      	b.n	80045b8 <UART_DMARxAbortCallback+0x78>
      return;
 80045b6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b088      	sub	sp, #32
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6979      	ldr	r1, [r7, #20]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	613b      	str	r3, [r7, #16]
   return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e6      	bne.n	80045c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff f8d4 	bl	80037b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460c:	bf00      	nop
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b096      	sub	sp, #88	; 0x58
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004622:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	2b22      	cmp	r3, #34	; 0x22
 800462e:	f040 8095 	bne.w	800475c <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800463c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004640:	b2d9      	uxtb	r1, r3
 8004642:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004646:	b2da      	uxtb	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464c:	400a      	ands	r2, r1
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d178      	bne.n	800476c <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800468e:	653b      	str	r3, [r7, #80]	; 0x50
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004698:	647b      	str	r3, [r7, #68]	; 0x44
 800469a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800469e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e6      	bne.n	800467a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3308      	adds	r3, #8
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	623b      	str	r3, [r7, #32]
   return(result);
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046cc:	633a      	str	r2, [r7, #48]	; 0x30
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d12e      	bne.n	8004754 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	60fb      	str	r3, [r7, #12]
   return(result);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	64bb      	str	r3, [r7, #72]	; 0x48
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	617b      	str	r3, [r7, #20]
   return(result);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e6      	bne.n	80046fc <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b10      	cmp	r3, #16
 800473a:	d103      	bne.n	8004744 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2210      	movs	r2, #16
 8004742:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff f84f 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004752:	e00b      	b.n	800476c <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fc f9f3 	bl	8000b40 <HAL_UART_RxCpltCallback>
}
 800475a:	e007      	b.n	800476c <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	619a      	str	r2, [r3, #24]
}
 800476c:	bf00      	nop
 800476e:	3758      	adds	r7, #88	; 0x58
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b096      	sub	sp, #88	; 0x58
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004782:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	2b22      	cmp	r3, #34	; 0x22
 800478e:	f040 8095 	bne.w	80048bc <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80047a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80047a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047aa:	4013      	ands	r3, r2
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b6:	1c9a      	adds	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d178      	bne.n	80048cc <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f8:	643b      	str	r3, [r7, #64]	; 0x40
 80047fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e6      	bne.n	80047da <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3308      	adds	r3, #8
 8004812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	61fb      	str	r3, [r7, #28]
   return(result);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	64bb      	str	r3, [r7, #72]	; 0x48
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800482c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004852:	2b01      	cmp	r3, #1
 8004854:	d12e      	bne.n	80048b4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	60bb      	str	r3, [r7, #8]
   return(result);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f023 0310 	bic.w	r3, r3, #16
 8004870:	647b      	str	r3, [r7, #68]	; 0x44
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6979      	ldr	r1, [r7, #20]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	613b      	str	r3, [r7, #16]
   return(result);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e6      	bne.n	800485c <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b10      	cmp	r3, #16
 800489a:	d103      	bne.n	80048a4 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2210      	movs	r2, #16
 80048a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fe ff9f 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048b2:	e00b      	b.n	80048cc <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fc f943 	bl	8000b40 <HAL_UART_RxCpltCallback>
}
 80048ba:	e007      	b.n	80048cc <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0208 	orr.w	r2, r2, #8
 80048ca:	619a      	str	r2, [r3, #24]
}
 80048cc:	bf00      	nop
 80048ce:	3758      	adds	r7, #88	; 0x58
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b0a6      	sub	sp, #152	; 0x98
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80048e2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	2b22      	cmp	r3, #34	; 0x22
 800490c:	f040 814f 	bne.w	8004bae <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004916:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800491a:	e0f6      	b.n	8004b0a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004926:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800492a:	b2d9      	uxtb	r1, r3
 800492c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8004930:	b2da      	uxtb	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	400a      	ands	r2, r1
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004962:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	2b00      	cmp	r3, #0
 800496c:	d053      	beq.n	8004a16 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800496e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d011      	beq.n	800499e <UART_RxISR_8BIT_FIFOEN+0xca>
 800497a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2201      	movs	r2, #1
 800498c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004994:	f043 0201 	orr.w	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800499e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d011      	beq.n	80049ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 80049aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2202      	movs	r2, #2
 80049bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c4:	f043 0204 	orr.w	r2, r3, #4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d011      	beq.n	80049fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 80049da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2204      	movs	r2, #4
 80049ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f4:	f043 0202 	orr.w	r2, r3, #2
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d006      	beq.n	8004a16 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fe fedd 	bl	80037c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d173      	bne.n	8004b0a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a46:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004a4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e4      	bne.n	8004a22 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a7c:	657a      	str	r2, [r7, #84]	; 0x54
 8004a7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e3      	bne.n	8004a58 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d12e      	bne.n	8004b04 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	f023 0310 	bic.w	r3, r3, #16
 8004ac0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aca:	643b      	str	r3, [r7, #64]	; 0x40
 8004acc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e6      	bne.n	8004aac <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d103      	bne.n	8004af4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2210      	movs	r2, #16
 8004af2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fe fe77 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
 8004b02:	e002      	b.n	8004b0a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7fc f81b 	bl	8000b40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8004b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f47f aefe 	bne.w	800491c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004b2a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d045      	beq.n	8004bbe <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004b38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d23e      	bcs.n	8004bbe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b56:	673b      	str	r3, [r7, #112]	; 0x70
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e5      	bne.n	8004b40 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004b78:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f043 0320 	orr.w	r3, r3, #32
 8004b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6979      	ldr	r1, [r7, #20]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e6      	bne.n	8004b7a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bac:	e007      	b.n	8004bbe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0208 	orr.w	r2, r2, #8
 8004bbc:	619a      	str	r2, [r3, #24]
}
 8004bbe:	bf00      	nop
 8004bc0:	3798      	adds	r7, #152	; 0x98
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08004615 	.word	0x08004615

08004bcc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b0a8      	sub	sp, #160	; 0xa0
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004bda:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	2b22      	cmp	r3, #34	; 0x22
 8004c04:	f040 8153 	bne.w	8004eae <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c12:	e0fa      	b.n	8004e0a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8004c26:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004c2a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004c2e:	4013      	ands	r3, r2
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	1c9a      	adds	r2, r3, #2
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d053      	beq.n	8004d12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d011      	beq.n	8004c9a <UART_RxISR_16BIT_FIFOEN+0xce>
 8004c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2201      	movs	r2, #1
 8004c88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c90:	f043 0201 	orr.w	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d011      	beq.n	8004cca <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc0:	f043 0204 	orr.w	r2, r3, #4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d011      	beq.n	8004cfa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf0:	f043 0202 	orr.w	r2, r3, #2
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d006      	beq.n	8004d12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fe fd5f 	bl	80037c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d175      	bne.n	8004e0a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d42:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e4      	bne.n	8004d1e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3308      	adds	r3, #8
 8004d78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e1      	bne.n	8004d54 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d12e      	bne.n	8004e04 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	f023 0310 	bic.w	r3, r3, #16
 8004dc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dca:	647b      	str	r3, [r7, #68]	; 0x44
 8004dcc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e6      	bne.n	8004dac <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d103      	bne.n	8004df4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2210      	movs	r2, #16
 8004df2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fe fcf7 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
 8004e02:	e002      	b.n	8004e0a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fe9b 	bl	8000b40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e0a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d006      	beq.n	8004e20 <UART_RxISR_16BIT_FIFOEN+0x254>
 8004e12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f47f aefa 	bne.w	8004c14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e26:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004e2a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d045      	beq.n	8004ebe <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004e38:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d23e      	bcs.n	8004ebe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	623b      	str	r3, [r7, #32]
   return(result);
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e56:	677b      	str	r3, [r7, #116]	; 0x74
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e60:	633a      	str	r2, [r7, #48]	; 0x30
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e5      	bne.n	8004e40 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8004e78:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f043 0320 	orr.w	r3, r3, #32
 8004e8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	69b9      	ldr	r1, [r7, #24]
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e6      	bne.n	8004e7a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004eac:	e007      	b.n	8004ebe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0208 	orr.w	r2, r2, #8
 8004ebc:	619a      	str	r2, [r3, #24]
}
 8004ebe:	bf00      	nop
 8004ec0:	37a0      	adds	r7, #160	; 0xa0
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	08004775 	.word	0x08004775

08004ecc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_UARTEx_DisableFifoMode+0x16>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e027      	b.n	8004f6e <HAL_UARTEx_DisableFifoMode+0x66>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2224      	movs	r2, #36	; 0x24
 8004f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0201 	bic.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e02d      	b.n	8004fee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2224      	movs	r2, #36	; 0x24
 8004f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f850 	bl	8005074 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800500a:	2302      	movs	r3, #2
 800500c:	e02d      	b.n	800506a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2224      	movs	r2, #36	; 0x24
 800501a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f812 	bl	8005074 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005080:	2b00      	cmp	r3, #0
 8005082:	d108      	bne.n	8005096 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005094:	e031      	b.n	80050fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005096:	2308      	movs	r3, #8
 8005098:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800509a:	2308      	movs	r3, #8
 800509c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	0e5b      	lsrs	r3, r3, #25
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	0f5b      	lsrs	r3, r3, #29
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050be:	7bbb      	ldrb	r3, [r7, #14]
 80050c0:	7b3a      	ldrb	r2, [r7, #12]
 80050c2:	4911      	ldr	r1, [pc, #68]	; (8005108 <UARTEx_SetNbDataToProcess+0x94>)
 80050c4:	5c8a      	ldrb	r2, [r1, r2]
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050ca:	7b3a      	ldrb	r2, [r7, #12]
 80050cc:	490f      	ldr	r1, [pc, #60]	; (800510c <UARTEx_SetNbDataToProcess+0x98>)
 80050ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	7b7a      	ldrb	r2, [r7, #13]
 80050e0:	4909      	ldr	r1, [pc, #36]	; (8005108 <UARTEx_SetNbDataToProcess+0x94>)
 80050e2:	5c8a      	ldrb	r2, [r1, r2]
 80050e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050e8:	7b7a      	ldrb	r2, [r7, #13]
 80050ea:	4908      	ldr	r1, [pc, #32]	; (800510c <UARTEx_SetNbDataToProcess+0x98>)
 80050ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	08007ce0 	.word	0x08007ce0
 800510c:	08007ce8 	.word	0x08007ce8

08005110 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800511e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005122:	2b84      	cmp	r3, #132	; 0x84
 8005124:	d005      	beq.n	8005132 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005126:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	3303      	adds	r3, #3
 8005130:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005132:	68fb      	ldr	r3, [r7, #12]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005144:	f000 fb92 	bl	800586c <vTaskStartScheduler>
  
  return osOK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	bd80      	pop	{r7, pc}

0800514e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800514e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005150:	b087      	sub	sp, #28
 8005152:	af02      	add	r7, sp, #8
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685c      	ldr	r4, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005164:	b29e      	uxth	r6, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff ffcf 	bl	8005110 <makeFreeRtosPriority>
 8005172:	4602      	mov	r2, r0
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	9200      	str	r2, [sp, #0]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4632      	mov	r2, r6
 8005180:	4629      	mov	r1, r5
 8005182:	4620      	mov	r0, r4
 8005184:	f000 f8d2 	bl	800532c <xTaskCreate>
 8005188:	4603      	mov	r3, r0
 800518a:	2b01      	cmp	r3, #1
 800518c:	d001      	beq.n	8005192 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8005192:	68fb      	ldr	r3, [r7, #12]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800519c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <osDelay+0x16>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	e000      	b.n	80051b4 <osDelay+0x18>
 80051b2:	2301      	movs	r3, #1
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fa03 	bl	80055c0 <vTaskDelay>
  
  return osOK;
 80051ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f103 0208 	add.w	r2, r3, #8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f103 0208 	add.w	r2, r3, #8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f103 0208 	add.w	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d103      	bne.n	8005286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	e00c      	b.n	80052a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3308      	adds	r3, #8
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e002      	b.n	8005294 <vListInsert+0x2e>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	d2f6      	bcs.n	800528e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	601a      	str	r2, [r3, #0]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6892      	ldr	r2, [r2, #8]
 80052ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6852      	ldr	r2, [r2, #4]
 80052f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	d103      	bne.n	800530c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	1e5a      	subs	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08c      	sub	sp, #48	; 0x30
 8005330:	af04      	add	r7, sp, #16
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fff9 	bl	8006338 <pvPortMalloc>
 8005346:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00e      	beq.n	800536c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800534e:	20b4      	movs	r0, #180	; 0xb4
 8005350:	f000 fff2 	bl	8006338 <pvPortMalloc>
 8005354:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
 8005362:	e005      	b.n	8005370 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005364:	6978      	ldr	r0, [r7, #20]
 8005366:	f001 f8b3 	bl	80064d0 <vPortFree>
 800536a:	e001      	b.n	8005370 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d013      	beq.n	800539e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	2300      	movs	r3, #0
 800537a:	9303      	str	r3, [sp, #12]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f80f 	bl	80053b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005392:	69f8      	ldr	r0, [r7, #28]
 8005394:	f000 f8aa 	bl	80054ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005398:	2301      	movs	r3, #1
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	e002      	b.n	80053a4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053a4:	69bb      	ldr	r3, [r7, #24]
	}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	3b01      	subs	r3, #1
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f023 0307 	bic.w	r3, r3, #7
 80053d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01f      	beq.n	800543e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	e012      	b.n	800542a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	7819      	ldrb	r1, [r3, #0]
 800540c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	3334      	adds	r3, #52	; 0x34
 8005414:	460a      	mov	r2, r1
 8005416:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	3301      	adds	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b0f      	cmp	r3, #15
 800542e:	d9e9      	bls.n	8005404 <prvInitialiseNewTask+0x54>
 8005430:	e000      	b.n	8005434 <prvInitialiseNewTask+0x84>
			{
				break;
 8005432:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800543c:	e003      	b.n	8005446 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	2b06      	cmp	r3, #6
 800544a:	d901      	bls.n	8005450 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800544c:	2306      	movs	r3, #6
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005454:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2200      	movs	r2, #0
 8005460:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	3304      	adds	r3, #4
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fecc 	bl	8005204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	3318      	adds	r3, #24
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff fec7 	bl	8005204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	f1c3 0207 	rsb	r2, r3, #7
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	2200      	movs	r2, #0
 8005498:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	334c      	adds	r3, #76	; 0x4c
 80054a0:	2260      	movs	r2, #96	; 0x60
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 fa58 	bl	800695a <memset>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <prvInitialiseNewTask+0x130>)
 80054ae:	651a      	str	r2, [r3, #80]	; 0x50
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <prvInitialiseNewTask+0x134>)
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	4a0b      	ldr	r2, [pc, #44]	; (80054e8 <prvInitialiseNewTask+0x138>)
 80054ba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	69b8      	ldr	r0, [r7, #24]
 80054c2:	f000 fd27 	bl	8005f14 <pxPortInitialiseStack>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d8:	bf00      	nop
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	08007d10 	.word	0x08007d10
 80054e4:	08007d30 	.word	0x08007d30
 80054e8:	08007cf0 	.word	0x08007cf0

080054ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054f4:	f000 fe3e 	bl	8006174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054f8:	4b2a      	ldr	r3, [pc, #168]	; (80055a4 <prvAddNewTaskToReadyList+0xb8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a29      	ldr	r2, [pc, #164]	; (80055a4 <prvAddNewTaskToReadyList+0xb8>)
 8005500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005502:	4b29      	ldr	r3, [pc, #164]	; (80055a8 <prvAddNewTaskToReadyList+0xbc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800550a:	4a27      	ldr	r2, [pc, #156]	; (80055a8 <prvAddNewTaskToReadyList+0xbc>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005510:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <prvAddNewTaskToReadyList+0xb8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d110      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005518:	f000 fbd4 	bl	8005cc4 <prvInitialiseTaskLists>
 800551c:	e00d      	b.n	800553a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800551e:	4b23      	ldr	r3, [pc, #140]	; (80055ac <prvAddNewTaskToReadyList+0xc0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005526:	4b20      	ldr	r3, [pc, #128]	; (80055a8 <prvAddNewTaskToReadyList+0xbc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d802      	bhi.n	800553a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005534:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <prvAddNewTaskToReadyList+0xbc>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800553a:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 8005542:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	2201      	movs	r2, #1
 800554a:	409a      	lsls	r2, r3
 800554c:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4313      	orrs	r3, r2
 8005552:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <prvAddNewTaskToReadyList+0xcc>)
 8005564:	441a      	add	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f7ff fe56 	bl	800521e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005572:	f000 fe2f 	bl	80061d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005576:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <prvAddNewTaskToReadyList+0xc0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00e      	beq.n	800559c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <prvAddNewTaskToReadyList+0xbc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d207      	bcs.n	800559c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	200004c4 	.word	0x200004c4
 80055a8:	200003c4 	.word	0x200003c4
 80055ac:	200004d0 	.word	0x200004d0
 80055b0:	200004e0 	.word	0x200004e0
 80055b4:	200004cc 	.word	0x200004cc
 80055b8:	200003c8 	.word	0x200003c8
 80055bc:	e000ed04 	.word	0xe000ed04

080055c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d017      	beq.n	8005602 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055d2:	4b13      	ldr	r3, [pc, #76]	; (8005620 <vTaskDelay+0x60>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <vTaskDelay+0x30>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	60bb      	str	r3, [r7, #8]
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055f0:	f000 f98c 	bl	800590c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055f4:	2100      	movs	r1, #0
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fc26 	bl	8005e48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055fc:	f000 f994 	bl	8005928 <xTaskResumeAll>
 8005600:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d107      	bne.n	8005618 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <vTaskDelay+0x64>)
 800560a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200004ec 	.word	0x200004ec
 8005624:	e000ed04 	.word	0xe000ed04

08005628 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005630:	f000 fda0 	bl	8006174 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <vTaskSuspend+0x18>
 800563a:	4b3c      	ldr	r3, [pc, #240]	; (800572c <vTaskSuspend+0x104>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	e000      	b.n	8005642 <vTaskSuspend+0x1a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3304      	adds	r3, #4
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fe45 	bl	80052d8 <uxListRemove>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d115      	bne.n	8005680 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	4935      	ldr	r1, [pc, #212]	; (8005730 <vTaskSuspend+0x108>)
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <vTaskSuspend+0x58>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	2201      	movs	r2, #1
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43da      	mvns	r2, r3
 8005676:	4b2f      	ldr	r3, [pc, #188]	; (8005734 <vTaskSuspend+0x10c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4013      	ands	r3, r2
 800567c:	4a2d      	ldr	r2, [pc, #180]	; (8005734 <vTaskSuspend+0x10c>)
 800567e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3318      	adds	r3, #24
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fe23 	bl	80052d8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3304      	adds	r3, #4
 8005696:	4619      	mov	r1, r3
 8005698:	4827      	ldr	r0, [pc, #156]	; (8005738 <vTaskSuspend+0x110>)
 800569a:	f7ff fdc0 	bl	800521e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d103      	bne.n	80056b2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80056b2:	f000 fd8f 	bl	80061d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80056b6:	4b21      	ldr	r3, [pc, #132]	; (800573c <vTaskSuspend+0x114>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80056be:	f000 fd59 	bl	8006174 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80056c2:	f000 fb83 	bl	8005dcc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80056c6:	f000 fd85 	bl	80061d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80056ca:	4b18      	ldr	r3, [pc, #96]	; (800572c <vTaskSuspend+0x104>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d127      	bne.n	8005724 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80056d4:	4b19      	ldr	r3, [pc, #100]	; (800573c <vTaskSuspend+0x114>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d017      	beq.n	800570c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80056dc:	4b18      	ldr	r3, [pc, #96]	; (8005740 <vTaskSuspend+0x118>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <vTaskSuspend+0xd2>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	60bb      	str	r3, [r7, #8]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <vTaskSuspend+0x11c>)
 80056fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800570a:	e00b      	b.n	8005724 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <vTaskSuspend+0x110>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <vTaskSuspend+0x120>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d103      	bne.n	8005720 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <vTaskSuspend+0x104>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
	}
 800571e:	e001      	b.n	8005724 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8005720:	f000 fa56 	bl	8005bd0 <vTaskSwitchContext>
	}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	200003c4 	.word	0x200003c4
 8005730:	200003c8 	.word	0x200003c8
 8005734:	200004cc 	.word	0x200004cc
 8005738:	200004b0 	.word	0x200004b0
 800573c:	200004d0 	.word	0x200004d0
 8005740:	200004ec 	.word	0x200004ec
 8005744:	e000ed04 	.word	0xe000ed04
 8005748:	200004c4 	.word	0x200004c4

0800574c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	60fb      	str	r3, [r7, #12]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <prvTaskIsTaskSuspended+0x5c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10a      	bne.n	8005798 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	4a09      	ldr	r2, [pc, #36]	; (80057ac <prvTaskIsTaskSuspended+0x60>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d005      	beq.n	8005798 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005794:	2301      	movs	r3, #1
 8005796:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005798:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	200004b0 	.word	0x200004b0
 80057ac:	20000484 	.word	0x20000484

080057b0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <vTaskResume+0x28>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80057d8:	4b20      	ldr	r3, [pc, #128]	; (800585c <vTaskResume+0xac>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d037      	beq.n	8005852 <vTaskResume+0xa2>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d034      	beq.n	8005852 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80057e8:	f000 fcc4 	bl	8006174 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7ff ffad 	bl	800574c <prvTaskIsTaskSuspended>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d02a      	beq.n	800584e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff fd6b 	bl	80052d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	2201      	movs	r2, #1
 8005808:	409a      	lsls	r2, r3
 800580a:	4b15      	ldr	r3, [pc, #84]	; (8005860 <vTaskResume+0xb0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4313      	orrs	r3, r2
 8005810:	4a13      	ldr	r2, [pc, #76]	; (8005860 <vTaskResume+0xb0>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a10      	ldr	r2, [pc, #64]	; (8005864 <vTaskResume+0xb4>)
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7ff fcf7 	bl	800521e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <vTaskResume+0xac>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	429a      	cmp	r2, r3
 800583c:	d307      	bcc.n	800584e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800583e:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <vTaskResume+0xb8>)
 8005840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800584e:	f000 fcc1 	bl	80061d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	200003c4 	.word	0x200003c4
 8005860:	200004cc 	.word	0x200004cc
 8005864:	200003c8 	.word	0x200003c8
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005872:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <vTaskStartScheduler+0x80>)
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	2300      	movs	r3, #0
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	2300      	movs	r3, #0
 800587c:	2280      	movs	r2, #128	; 0x80
 800587e:	491c      	ldr	r1, [pc, #112]	; (80058f0 <vTaskStartScheduler+0x84>)
 8005880:	481c      	ldr	r0, [pc, #112]	; (80058f4 <vTaskStartScheduler+0x88>)
 8005882:	f7ff fd53 	bl	800532c <xTaskCreate>
 8005886:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d11b      	bne.n	80058c6 <vTaskStartScheduler+0x5a>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	60bb      	str	r3, [r7, #8]
}
 80058a0:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <vTaskStartScheduler+0x8c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	334c      	adds	r3, #76	; 0x4c
 80058a8:	4a14      	ldr	r2, [pc, #80]	; (80058fc <vTaskStartScheduler+0x90>)
 80058aa:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058ac:	4b14      	ldr	r3, [pc, #80]	; (8005900 <vTaskStartScheduler+0x94>)
 80058ae:	f04f 32ff 	mov.w	r2, #4294967295
 80058b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058b4:	4b13      	ldr	r3, [pc, #76]	; (8005904 <vTaskStartScheduler+0x98>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058ba:	4b13      	ldr	r3, [pc, #76]	; (8005908 <vTaskStartScheduler+0x9c>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058c0:	f000 fbb6 	bl	8006030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058c4:	e00e      	b.n	80058e4 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d10a      	bne.n	80058e4 <vTaskStartScheduler+0x78>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <vTaskStartScheduler+0x76>
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	200004e8 	.word	0x200004e8
 80058f0:	08007ca8 	.word	0x08007ca8
 80058f4:	08005c95 	.word	0x08005c95
 80058f8:	200003c4 	.word	0x200003c4
 80058fc:	20000020 	.word	0x20000020
 8005900:	200004e4 	.word	0x200004e4
 8005904:	200004d0 	.word	0x200004d0
 8005908:	200004c8 	.word	0x200004c8

0800590c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <vTaskSuspendAll+0x18>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	4a03      	ldr	r2, [pc, #12]	; (8005924 <vTaskSuspendAll+0x18>)
 8005918:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800591a:	bf00      	nop
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	200004ec 	.word	0x200004ec

08005928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005932:	2300      	movs	r3, #0
 8005934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005936:	4b41      	ldr	r3, [pc, #260]	; (8005a3c <xTaskResumeAll+0x114>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <xTaskResumeAll+0x2c>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	603b      	str	r3, [r7, #0]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005954:	f000 fc0e 	bl	8006174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005958:	4b38      	ldr	r3, [pc, #224]	; (8005a3c <xTaskResumeAll+0x114>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3b01      	subs	r3, #1
 800595e:	4a37      	ldr	r2, [pc, #220]	; (8005a3c <xTaskResumeAll+0x114>)
 8005960:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005962:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <xTaskResumeAll+0x114>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d161      	bne.n	8005a2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800596a:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <xTaskResumeAll+0x118>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d05d      	beq.n	8005a2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005972:	e02e      	b.n	80059d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005974:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <xTaskResumeAll+0x11c>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3318      	adds	r3, #24
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fca9 	bl	80052d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3304      	adds	r3, #4
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fca4 	bl	80052d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	2201      	movs	r2, #1
 8005996:	409a      	lsls	r2, r3
 8005998:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <xTaskResumeAll+0x120>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4313      	orrs	r3, r2
 800599e:	4a2a      	ldr	r2, [pc, #168]	; (8005a48 <xTaskResumeAll+0x120>)
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4a27      	ldr	r2, [pc, #156]	; (8005a4c <xTaskResumeAll+0x124>)
 80059b0:	441a      	add	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f7ff fc30 	bl	800521e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c2:	4b23      	ldr	r3, [pc, #140]	; (8005a50 <xTaskResumeAll+0x128>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <xTaskResumeAll+0x12c>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059d2:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <xTaskResumeAll+0x11c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1cc      	bne.n	8005974 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059e0:	f000 f9f4 	bl	8005dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059e4:	4b1c      	ldr	r3, [pc, #112]	; (8005a58 <xTaskResumeAll+0x130>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d010      	beq.n	8005a12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059f0:	f000 f836 	bl	8005a60 <xTaskIncrementTick>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80059fa:	4b16      	ldr	r3, [pc, #88]	; (8005a54 <xTaskResumeAll+0x12c>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f1      	bne.n	80059f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005a0c:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <xTaskResumeAll+0x130>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <xTaskResumeAll+0x12c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <xTaskResumeAll+0x134>)
 8005a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a2e:	f000 fbd1 	bl	80061d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a32:	68bb      	ldr	r3, [r7, #8]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	200004ec 	.word	0x200004ec
 8005a40:	200004c4 	.word	0x200004c4
 8005a44:	20000484 	.word	0x20000484
 8005a48:	200004cc 	.word	0x200004cc
 8005a4c:	200003c8 	.word	0x200003c8
 8005a50:	200003c4 	.word	0x200003c4
 8005a54:	200004d8 	.word	0x200004d8
 8005a58:	200004d4 	.word	0x200004d4
 8005a5c:	e000ed04 	.word	0xe000ed04

08005a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a6a:	4b4e      	ldr	r3, [pc, #312]	; (8005ba4 <xTaskIncrementTick+0x144>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 808e 	bne.w	8005b90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a74:	4b4c      	ldr	r3, [pc, #304]	; (8005ba8 <xTaskIncrementTick+0x148>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a7c:	4a4a      	ldr	r2, [pc, #296]	; (8005ba8 <xTaskIncrementTick+0x148>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d120      	bne.n	8005aca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a88:	4b48      	ldr	r3, [pc, #288]	; (8005bac <xTaskIncrementTick+0x14c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	603b      	str	r3, [r7, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <xTaskIncrementTick+0x46>
 8005aa8:	4b40      	ldr	r3, [pc, #256]	; (8005bac <xTaskIncrementTick+0x14c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	4b40      	ldr	r3, [pc, #256]	; (8005bb0 <xTaskIncrementTick+0x150>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a3e      	ldr	r2, [pc, #248]	; (8005bac <xTaskIncrementTick+0x14c>)
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4a3e      	ldr	r2, [pc, #248]	; (8005bb0 <xTaskIncrementTick+0x150>)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	4b3d      	ldr	r3, [pc, #244]	; (8005bb4 <xTaskIncrementTick+0x154>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4a3c      	ldr	r2, [pc, #240]	; (8005bb4 <xTaskIncrementTick+0x154>)
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	f000 f981 	bl	8005dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005aca:	4b3b      	ldr	r3, [pc, #236]	; (8005bb8 <xTaskIncrementTick+0x158>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d348      	bcc.n	8005b66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad4:	4b35      	ldr	r3, [pc, #212]	; (8005bac <xTaskIncrementTick+0x14c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ade:	4b36      	ldr	r3, [pc, #216]	; (8005bb8 <xTaskIncrementTick+0x158>)
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae4:	601a      	str	r2, [r3, #0]
					break;
 8005ae6:	e03e      	b.n	8005b66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae8:	4b30      	ldr	r3, [pc, #192]	; (8005bac <xTaskIncrementTick+0x14c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d203      	bcs.n	8005b08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b00:	4a2d      	ldr	r2, [pc, #180]	; (8005bb8 <xTaskIncrementTick+0x158>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b06:	e02e      	b.n	8005b66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff fbe3 	bl	80052d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d004      	beq.n	8005b24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3318      	adds	r3, #24
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fbda 	bl	80052d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	2201      	movs	r2, #1
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <xTaskIncrementTick+0x15c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	4a22      	ldr	r2, [pc, #136]	; (8005bbc <xTaskIncrementTick+0x15c>)
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4a1f      	ldr	r2, [pc, #124]	; (8005bc0 <xTaskIncrementTick+0x160>)
 8005b44:	441a      	add	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f7ff fb66 	bl	800521e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <xTaskIncrementTick+0x164>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d3b9      	bcc.n	8005ad4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b64:	e7b6      	b.n	8005ad4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b66:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <xTaskIncrementTick+0x164>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4914      	ldr	r1, [pc, #80]	; (8005bc0 <xTaskIncrementTick+0x160>)
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d901      	bls.n	8005b82 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b82:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <xTaskIncrementTick+0x168>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e004      	b.n	8005b9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b90:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <xTaskIncrementTick+0x16c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	4a0d      	ldr	r2, [pc, #52]	; (8005bcc <xTaskIncrementTick+0x16c>)
 8005b98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b9a:	697b      	ldr	r3, [r7, #20]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	200004ec 	.word	0x200004ec
 8005ba8:	200004c8 	.word	0x200004c8
 8005bac:	2000047c 	.word	0x2000047c
 8005bb0:	20000480 	.word	0x20000480
 8005bb4:	200004dc 	.word	0x200004dc
 8005bb8:	200004e4 	.word	0x200004e4
 8005bbc:	200004cc 	.word	0x200004cc
 8005bc0:	200003c8 	.word	0x200003c8
 8005bc4:	200003c4 	.word	0x200003c4
 8005bc8:	200004d8 	.word	0x200004d8
 8005bcc:	200004d4 	.word	0x200004d4

08005bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bd6:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <vTaskSwitchContext+0xac>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bde:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <vTaskSwitchContext+0xb0>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005be4:	e044      	b.n	8005c70 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <vTaskSwitchContext+0xb0>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bec:	4b25      	ldr	r3, [pc, #148]	; (8005c84 <vTaskSwitchContext+0xb4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	fab3 f383 	clz	r3, r3
 8005bf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005bfa:	7afb      	ldrb	r3, [r7, #11]
 8005bfc:	f1c3 031f 	rsb	r3, r3, #31
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	4921      	ldr	r1, [pc, #132]	; (8005c88 <vTaskSwitchContext+0xb8>)
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	607b      	str	r3, [r7, #4]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <vTaskSwitchContext+0x5a>
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <vTaskSwitchContext+0xb8>)
 8005c38:	4413      	add	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d104      	bne.n	8005c5c <vTaskSwitchContext+0x8c>
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	605a      	str	r2, [r3, #4]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <vTaskSwitchContext+0xbc>)
 8005c64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <vTaskSwitchContext+0xbc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	334c      	adds	r3, #76	; 0x4c
 8005c6c:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <vTaskSwitchContext+0xc0>)
 8005c6e:	6013      	str	r3, [r2, #0]
}
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	200004ec 	.word	0x200004ec
 8005c80:	200004d8 	.word	0x200004d8
 8005c84:	200004cc 	.word	0x200004cc
 8005c88:	200003c8 	.word	0x200003c8
 8005c8c:	200003c4 	.word	0x200003c4
 8005c90:	20000020 	.word	0x20000020

08005c94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c9c:	f000 f852 	bl	8005d44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ca0:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <prvIdleTask+0x28>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d9f9      	bls.n	8005c9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <prvIdleTask+0x2c>)
 8005caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cb8:	e7f0      	b.n	8005c9c <prvIdleTask+0x8>
 8005cba:	bf00      	nop
 8005cbc:	200003c8 	.word	0x200003c8
 8005cc0:	e000ed04 	.word	0xe000ed04

08005cc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	e00c      	b.n	8005cea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4a12      	ldr	r2, [pc, #72]	; (8005d24 <prvInitialiseTaskLists+0x60>)
 8005cdc:	4413      	add	r3, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fa70 	bl	80051c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b06      	cmp	r3, #6
 8005cee:	d9ef      	bls.n	8005cd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cf0:	480d      	ldr	r0, [pc, #52]	; (8005d28 <prvInitialiseTaskLists+0x64>)
 8005cf2:	f7ff fa67 	bl	80051c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cf6:	480d      	ldr	r0, [pc, #52]	; (8005d2c <prvInitialiseTaskLists+0x68>)
 8005cf8:	f7ff fa64 	bl	80051c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cfc:	480c      	ldr	r0, [pc, #48]	; (8005d30 <prvInitialiseTaskLists+0x6c>)
 8005cfe:	f7ff fa61 	bl	80051c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d02:	480c      	ldr	r0, [pc, #48]	; (8005d34 <prvInitialiseTaskLists+0x70>)
 8005d04:	f7ff fa5e 	bl	80051c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d08:	480b      	ldr	r0, [pc, #44]	; (8005d38 <prvInitialiseTaskLists+0x74>)
 8005d0a:	f7ff fa5b 	bl	80051c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <prvInitialiseTaskLists+0x78>)
 8005d10:	4a05      	ldr	r2, [pc, #20]	; (8005d28 <prvInitialiseTaskLists+0x64>)
 8005d12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d14:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <prvInitialiseTaskLists+0x7c>)
 8005d16:	4a05      	ldr	r2, [pc, #20]	; (8005d2c <prvInitialiseTaskLists+0x68>)
 8005d18:	601a      	str	r2, [r3, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200003c8 	.word	0x200003c8
 8005d28:	20000454 	.word	0x20000454
 8005d2c:	20000468 	.word	0x20000468
 8005d30:	20000484 	.word	0x20000484
 8005d34:	20000498 	.word	0x20000498
 8005d38:	200004b0 	.word	0x200004b0
 8005d3c:	2000047c 	.word	0x2000047c
 8005d40:	20000480 	.word	0x20000480

08005d44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d4a:	e019      	b.n	8005d80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d4c:	f000 fa12 	bl	8006174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d50:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <prvCheckTasksWaitingTermination+0x50>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff fabb 	bl	80052d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d62:	4b0d      	ldr	r3, [pc, #52]	; (8005d98 <prvCheckTasksWaitingTermination+0x54>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	4a0b      	ldr	r2, [pc, #44]	; (8005d98 <prvCheckTasksWaitingTermination+0x54>)
 8005d6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <prvCheckTasksWaitingTermination+0x58>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <prvCheckTasksWaitingTermination+0x58>)
 8005d74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d76:	f000 fa2d 	bl	80061d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f810 	bl	8005da0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d80:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <prvCheckTasksWaitingTermination+0x58>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e1      	bne.n	8005d4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000498 	.word	0x20000498
 8005d98:	200004c4 	.word	0x200004c4
 8005d9c:	200004ac 	.word	0x200004ac

08005da0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	334c      	adds	r3, #76	; 0x4c
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 ff0b 	bl	8006bc8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fb8a 	bl	80064d0 <vPortFree>
			vPortFree( pxTCB );
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fb87 	bl	80064d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <prvResetNextTaskUnblockTime+0x38>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <prvResetNextTaskUnblockTime+0x3c>)
 8005dde:	f04f 32ff 	mov.w	r2, #4294967295
 8005de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005de4:	e008      	b.n	8005df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <prvResetNextTaskUnblockTime+0x38>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <prvResetNextTaskUnblockTime+0x3c>)
 8005df6:	6013      	str	r3, [r2, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	2000047c 	.word	0x2000047c
 8005e08:	200004e4 	.word	0x200004e4

08005e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <xTaskGetSchedulerState+0x34>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	607b      	str	r3, [r7, #4]
 8005e1e:	e008      	b.n	8005e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e20:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <xTaskGetSchedulerState+0x38>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	e001      	b.n	8005e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e32:	687b      	ldr	r3, [r7, #4]
	}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	200004d0 	.word	0x200004d0
 8005e44:	200004ec 	.word	0x200004ec

08005e48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e52:	4b29      	ldr	r3, [pc, #164]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e58:	4b28      	ldr	r3, [pc, #160]	; (8005efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fa3a 	bl	80052d8 <uxListRemove>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	2201      	movs	r2, #1
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	43da      	mvns	r2, r3
 8005e78:	4b21      	ldr	r3, [pc, #132]	; (8005f00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	4a20      	ldr	r2, [pc, #128]	; (8005f00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d10a      	bne.n	8005ea0 <prvAddCurrentTaskToDelayedList+0x58>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e90:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3304      	adds	r3, #4
 8005e96:	4619      	mov	r1, r3
 8005e98:	481a      	ldr	r0, [pc, #104]	; (8005f04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e9a:	f7ff f9c0 	bl	800521e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e9e:	e026      	b.n	8005eee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ea8:	4b14      	ldr	r3, [pc, #80]	; (8005efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d209      	bcs.n	8005ecc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb8:	4b13      	ldr	r3, [pc, #76]	; (8005f08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7ff f9ce 	bl	8005266 <vListInsert>
}
 8005eca:	e010      	b.n	8005eee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f7ff f9c4 	bl	8005266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ede:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d202      	bcs.n	8005eee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ee8:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6013      	str	r3, [r2, #0]
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200004c8 	.word	0x200004c8
 8005efc:	200003c4 	.word	0x200003c4
 8005f00:	200004cc 	.word	0x200004cc
 8005f04:	200004b0 	.word	0x200004b0
 8005f08:	20000480 	.word	0x20000480
 8005f0c:	2000047c 	.word	0x2000047c
 8005f10:	200004e4 	.word	0x200004e4

08005f14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3b04      	subs	r3, #4
 8005f24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3b04      	subs	r3, #4
 8005f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f023 0201 	bic.w	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3b04      	subs	r3, #4
 8005f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f44:	4a0c      	ldr	r2, [pc, #48]	; (8005f78 <pxPortInitialiseStack+0x64>)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3b14      	subs	r3, #20
 8005f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f06f 0202 	mvn.w	r2, #2
 8005f62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3b20      	subs	r3, #32
 8005f68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	08005f7d 	.word	0x08005f7d

08005f7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f86:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <prvTaskExitError+0x54>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d00a      	beq.n	8005fa6 <prvTaskExitError+0x2a>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60fb      	str	r3, [r7, #12]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <prvTaskExitError+0x28>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60bb      	str	r3, [r7, #8]
}
 8005fb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fba:	bf00      	nop
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0fc      	beq.n	8005fbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	2000001c 	.word	0x2000001c
	...

08005fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <pxCurrentTCBConst2>)
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	6808      	ldr	r0, [r1, #0]
 8005fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fea:	f380 8809 	msr	PSP, r0
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f04f 0000 	mov.w	r0, #0
 8005ff6:	f380 8811 	msr	BASEPRI, r0
 8005ffa:	4770      	bx	lr
 8005ffc:	f3af 8000 	nop.w

08006000 <pxCurrentTCBConst2>:
 8006000:	200003c4 	.word	0x200003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006008:	4808      	ldr	r0, [pc, #32]	; (800602c <prvPortStartFirstTask+0x24>)
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	6800      	ldr	r0, [r0, #0]
 800600e:	f380 8808 	msr	MSP, r0
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8814 	msr	CONTROL, r0
 800601a:	b662      	cpsie	i
 800601c:	b661      	cpsie	f
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	df00      	svc	0
 8006028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800602a:	bf00      	nop
 800602c:	e000ed08 	.word	0xe000ed08

08006030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006036:	4b46      	ldr	r3, [pc, #280]	; (8006150 <xPortStartScheduler+0x120>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a46      	ldr	r2, [pc, #280]	; (8006154 <xPortStartScheduler+0x124>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10a      	bne.n	8006056 <xPortStartScheduler+0x26>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	613b      	str	r3, [r7, #16]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006056:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <xPortStartScheduler+0x120>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3f      	ldr	r2, [pc, #252]	; (8006158 <xPortStartScheduler+0x128>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10a      	bne.n	8006076 <xPortStartScheduler+0x46>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60fb      	str	r3, [r7, #12]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006076:	4b39      	ldr	r3, [pc, #228]	; (800615c <xPortStartScheduler+0x12c>)
 8006078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	22ff      	movs	r2, #255	; 0xff
 8006086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006098:	b2da      	uxtb	r2, r3
 800609a:	4b31      	ldr	r3, [pc, #196]	; (8006160 <xPortStartScheduler+0x130>)
 800609c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800609e:	4b31      	ldr	r3, [pc, #196]	; (8006164 <xPortStartScheduler+0x134>)
 80060a0:	2207      	movs	r2, #7
 80060a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060a4:	e009      	b.n	80060ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <xPortStartScheduler+0x134>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	4a2d      	ldr	r2, [pc, #180]	; (8006164 <xPortStartScheduler+0x134>)
 80060ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d0ef      	beq.n	80060a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060c6:	4b27      	ldr	r3, [pc, #156]	; (8006164 <xPortStartScheduler+0x134>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1c3 0307 	rsb	r3, r3, #7
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d00a      	beq.n	80060e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60bb      	str	r3, [r7, #8]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060e8:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <xPortStartScheduler+0x134>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <xPortStartScheduler+0x134>)
 80060f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <xPortStartScheduler+0x134>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <xPortStartScheduler+0x134>)
 80060fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006106:	4b18      	ldr	r3, [pc, #96]	; (8006168 <xPortStartScheduler+0x138>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a17      	ldr	r2, [pc, #92]	; (8006168 <xPortStartScheduler+0x138>)
 800610c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006112:	4b15      	ldr	r3, [pc, #84]	; (8006168 <xPortStartScheduler+0x138>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a14      	ldr	r2, [pc, #80]	; (8006168 <xPortStartScheduler+0x138>)
 8006118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800611c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800611e:	f000 f8dd 	bl	80062dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006122:	4b12      	ldr	r3, [pc, #72]	; (800616c <xPortStartScheduler+0x13c>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006128:	f000 f8fc 	bl	8006324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800612c:	4b10      	ldr	r3, [pc, #64]	; (8006170 <xPortStartScheduler+0x140>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0f      	ldr	r2, [pc, #60]	; (8006170 <xPortStartScheduler+0x140>)
 8006132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006138:	f7ff ff66 	bl	8006008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800613c:	f7ff fd48 	bl	8005bd0 <vTaskSwitchContext>
	prvTaskExitError();
 8006140:	f7ff ff1c 	bl	8005f7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	e000ed00 	.word	0xe000ed00
 8006154:	410fc271 	.word	0x410fc271
 8006158:	410fc270 	.word	0x410fc270
 800615c:	e000e400 	.word	0xe000e400
 8006160:	200004f0 	.word	0x200004f0
 8006164:	200004f4 	.word	0x200004f4
 8006168:	e000ed20 	.word	0xe000ed20
 800616c:	2000001c 	.word	0x2000001c
 8006170:	e000ef34 	.word	0xe000ef34

08006174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	607b      	str	r3, [r7, #4]
}
 800618c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <vPortEnterCritical+0x58>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	4a0d      	ldr	r2, [pc, #52]	; (80061cc <vPortEnterCritical+0x58>)
 8006196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <vPortEnterCritical+0x58>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10f      	bne.n	80061c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <vPortEnterCritical+0x5c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	603b      	str	r3, [r7, #0]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <vPortEnterCritical+0x4a>
	}
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	2000001c 	.word	0x2000001c
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <vPortExitCritical+0x50>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <vPortExitCritical+0x24>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	607b      	str	r3, [r7, #4]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <vPortExitCritical+0x50>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	4a09      	ldr	r2, [pc, #36]	; (8006224 <vPortExitCritical+0x50>)
 8006200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <vPortExitCritical+0x50>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <vPortExitCritical+0x42>
 800620a:	2300      	movs	r3, #0
 800620c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	2000001c 	.word	0x2000001c
	...

08006230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006230:	f3ef 8009 	mrs	r0, PSP
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <pxCurrentTCBConst>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	f01e 0f10 	tst.w	lr, #16
 8006240:	bf08      	it	eq
 8006242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624a:	6010      	str	r0, [r2, #0]
 800624c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006254:	f380 8811 	msr	BASEPRI, r0
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f7ff fcb6 	bl	8005bd0 <vTaskSwitchContext>
 8006264:	f04f 0000 	mov.w	r0, #0
 8006268:	f380 8811 	msr	BASEPRI, r0
 800626c:	bc09      	pop	{r0, r3}
 800626e:	6819      	ldr	r1, [r3, #0]
 8006270:	6808      	ldr	r0, [r1, #0]
 8006272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006276:	f01e 0f10 	tst.w	lr, #16
 800627a:	bf08      	it	eq
 800627c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006280:	f380 8809 	msr	PSP, r0
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst>:
 8006290:	200003c4 	.word	0x200003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062b2:	f7ff fbd5 	bl	8005a60 <xTaskIncrementTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <xPortSysTickHandler+0x40>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <vPortSetupTimerInterrupt+0x34>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <vPortSetupTimerInterrupt+0x38>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <vPortSetupTimerInterrupt+0x3c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0a      	ldr	r2, [pc, #40]	; (800631c <vPortSetupTimerInterrupt+0x40>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	4a09      	ldr	r2, [pc, #36]	; (8006320 <vPortSetupTimerInterrupt+0x44>)
 80062fa:	3b01      	subs	r3, #1
 80062fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <vPortSetupTimerInterrupt+0x34>)
 8006300:	2207      	movs	r2, #7
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	e000e010 	.word	0xe000e010
 8006314:	e000e018 	.word	0xe000e018
 8006318:	20000010 	.word	0x20000010
 800631c:	10624dd3 	.word	0x10624dd3
 8006320:	e000e014 	.word	0xe000e014

08006324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006334 <vPortEnableVFP+0x10>
 8006328:	6801      	ldr	r1, [r0, #0]
 800632a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800632e:	6001      	str	r1, [r0, #0]
 8006330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006332:	bf00      	nop
 8006334:	e000ed88 	.word	0xe000ed88

08006338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006344:	f7ff fae2 	bl	800590c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006348:	4b5b      	ldr	r3, [pc, #364]	; (80064b8 <pvPortMalloc+0x180>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006350:	f000 f920 	bl	8006594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006354:	4b59      	ldr	r3, [pc, #356]	; (80064bc <pvPortMalloc+0x184>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	f040 8093 	bne.w	8006488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01d      	beq.n	80063a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006368:	2208      	movs	r2, #8
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b00      	cmp	r3, #0
 8006378:	d014      	beq.n	80063a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f023 0307 	bic.w	r3, r3, #7
 8006380:	3308      	adds	r3, #8
 8006382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <pvPortMalloc+0x6c>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	617b      	str	r3, [r7, #20]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d06e      	beq.n	8006488 <pvPortMalloc+0x150>
 80063aa:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <pvPortMalloc+0x188>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d869      	bhi.n	8006488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063b4:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <pvPortMalloc+0x18c>)
 80063b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063b8:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <pvPortMalloc+0x18c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063be:	e004      	b.n	80063ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d903      	bls.n	80063dc <pvPortMalloc+0xa4>
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f1      	bne.n	80063c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063dc:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <pvPortMalloc+0x180>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d050      	beq.n	8006488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2208      	movs	r2, #8
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	2308      	movs	r3, #8
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	429a      	cmp	r2, r3
 8006406:	d91f      	bls.n	8006448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <pvPortMalloc+0xf8>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	613b      	str	r3, [r7, #16]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006442:	69b8      	ldr	r0, [r7, #24]
 8006444:	f000 f908 	bl	8006658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006448:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <pvPortMalloc+0x188>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <pvPortMalloc+0x188>)
 8006454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006456:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <pvPortMalloc+0x188>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <pvPortMalloc+0x190>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d203      	bcs.n	800646a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006462:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <pvPortMalloc+0x188>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <pvPortMalloc+0x190>)
 8006468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	4b13      	ldr	r3, [pc, #76]	; (80064bc <pvPortMalloc+0x184>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	431a      	orrs	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <pvPortMalloc+0x194>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <pvPortMalloc+0x194>)
 8006486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006488:	f7ff fa4e 	bl	8005928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <pvPortMalloc+0x174>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60fb      	str	r3, [r7, #12]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <pvPortMalloc+0x172>
	return pvReturn;
 80064ac:	69fb      	ldr	r3, [r7, #28]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3728      	adds	r7, #40	; 0x28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20002d00 	.word	0x20002d00
 80064bc:	20002d14 	.word	0x20002d14
 80064c0:	20002d04 	.word	0x20002d04
 80064c4:	20002cf8 	.word	0x20002cf8
 80064c8:	20002d08 	.word	0x20002d08
 80064cc:	20002d0c 	.word	0x20002d0c

080064d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d04d      	beq.n	800657e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064e2:	2308      	movs	r3, #8
 80064e4:	425b      	negs	r3, r3
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4413      	add	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	4b24      	ldr	r3, [pc, #144]	; (8006588 <vPortFree+0xb8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <vPortFree+0x44>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60fb      	str	r3, [r7, #12]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <vPortFree+0x62>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60bb      	str	r3, [r7, #8]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <vPortFree+0xb8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d11a      	bne.n	800657e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <vPortFree+0xb8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	43db      	mvns	r3, r3
 8006552:	401a      	ands	r2, r3
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006558:	f7ff f9d8 	bl	800590c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	4b0a      	ldr	r3, [pc, #40]	; (800658c <vPortFree+0xbc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4413      	add	r3, r2
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <vPortFree+0xbc>)
 8006568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f000 f874 	bl	8006658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <vPortFree+0xc0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a06      	ldr	r2, [pc, #24]	; (8006590 <vPortFree+0xc0>)
 8006578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800657a:	f7ff f9d5 	bl	8005928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800657e:	bf00      	nop
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20002d14 	.word	0x20002d14
 800658c:	20002d04 	.word	0x20002d04
 8006590:	20002d10 	.word	0x20002d10

08006594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800659a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800659e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065a0:	4b27      	ldr	r3, [pc, #156]	; (8006640 <prvHeapInit+0xac>)
 80065a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00c      	beq.n	80065c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3307      	adds	r3, #7
 80065b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0307 	bic.w	r3, r3, #7
 80065ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <prvHeapInit+0xac>)
 80065c4:	4413      	add	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065cc:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <prvHeapInit+0xb0>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <prvHeapInit+0xb0>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4413      	add	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065e0:	2208      	movs	r2, #8
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0307 	bic.w	r3, r3, #7
 80065ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a15      	ldr	r2, [pc, #84]	; (8006648 <prvHeapInit+0xb4>)
 80065f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <prvHeapInit+0xb4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2200      	movs	r2, #0
 80065fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <prvHeapInit+0xb4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <prvHeapInit+0xb4>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a0a      	ldr	r2, [pc, #40]	; (800664c <prvHeapInit+0xb8>)
 8006622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4a09      	ldr	r2, [pc, #36]	; (8006650 <prvHeapInit+0xbc>)
 800662a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <prvHeapInit+0xc0>)
 800662e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006632:	601a      	str	r2, [r3, #0]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	200004f8 	.word	0x200004f8
 8006644:	20002cf8 	.word	0x20002cf8
 8006648:	20002d00 	.word	0x20002d00
 800664c:	20002d08 	.word	0x20002d08
 8006650:	20002d04 	.word	0x20002d04
 8006654:	20002d14 	.word	0x20002d14

08006658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006660:	4b28      	ldr	r3, [pc, #160]	; (8006704 <prvInsertBlockIntoFreeList+0xac>)
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e002      	b.n	800666c <prvInsertBlockIntoFreeList+0x14>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	d8f7      	bhi.n	8006666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4413      	add	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d108      	bne.n	800669a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	441a      	add	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d118      	bne.n	80066e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <prvInsertBlockIntoFreeList+0xb0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d00d      	beq.n	80066d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	441a      	add	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e008      	b.n	80066e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066d6:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <prvInsertBlockIntoFreeList+0xb0>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	e003      	b.n	80066e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d002      	beq.n	80066f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20002cf8 	.word	0x20002cf8
 8006708:	20002d00 	.word	0x20002d00

0800670c <atoi>:
 800670c:	220a      	movs	r2, #10
 800670e:	2100      	movs	r1, #0
 8006710:	f000 bbfe 	b.w	8006f10 <strtol>

08006714 <__errno>:
 8006714:	4b01      	ldr	r3, [pc, #4]	; (800671c <__errno+0x8>)
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20000020 	.word	0x20000020

08006720 <std>:
 8006720:	2300      	movs	r3, #0
 8006722:	b510      	push	{r4, lr}
 8006724:	4604      	mov	r4, r0
 8006726:	e9c0 3300 	strd	r3, r3, [r0]
 800672a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800672e:	6083      	str	r3, [r0, #8]
 8006730:	8181      	strh	r1, [r0, #12]
 8006732:	6643      	str	r3, [r0, #100]	; 0x64
 8006734:	81c2      	strh	r2, [r0, #14]
 8006736:	6183      	str	r3, [r0, #24]
 8006738:	4619      	mov	r1, r3
 800673a:	2208      	movs	r2, #8
 800673c:	305c      	adds	r0, #92	; 0x5c
 800673e:	f000 f90c 	bl	800695a <memset>
 8006742:	4b05      	ldr	r3, [pc, #20]	; (8006758 <std+0x38>)
 8006744:	6263      	str	r3, [r4, #36]	; 0x24
 8006746:	4b05      	ldr	r3, [pc, #20]	; (800675c <std+0x3c>)
 8006748:	62a3      	str	r3, [r4, #40]	; 0x28
 800674a:	4b05      	ldr	r3, [pc, #20]	; (8006760 <std+0x40>)
 800674c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800674e:	4b05      	ldr	r3, [pc, #20]	; (8006764 <std+0x44>)
 8006750:	6224      	str	r4, [r4, #32]
 8006752:	6323      	str	r3, [r4, #48]	; 0x30
 8006754:	bd10      	pop	{r4, pc}
 8006756:	bf00      	nop
 8006758:	08006ca1 	.word	0x08006ca1
 800675c:	08006cc3 	.word	0x08006cc3
 8006760:	08006cfb 	.word	0x08006cfb
 8006764:	08006d1f 	.word	0x08006d1f

08006768 <_cleanup_r>:
 8006768:	4901      	ldr	r1, [pc, #4]	; (8006770 <_cleanup_r+0x8>)
 800676a:	f000 b8af 	b.w	80068cc <_fwalk_reent>
 800676e:	bf00      	nop
 8006770:	08007231 	.word	0x08007231

08006774 <__sfmoreglue>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	2268      	movs	r2, #104	; 0x68
 8006778:	1e4d      	subs	r5, r1, #1
 800677a:	4355      	muls	r5, r2
 800677c:	460e      	mov	r6, r1
 800677e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006782:	f000 f913 	bl	80069ac <_malloc_r>
 8006786:	4604      	mov	r4, r0
 8006788:	b140      	cbz	r0, 800679c <__sfmoreglue+0x28>
 800678a:	2100      	movs	r1, #0
 800678c:	e9c0 1600 	strd	r1, r6, [r0]
 8006790:	300c      	adds	r0, #12
 8006792:	60a0      	str	r0, [r4, #8]
 8006794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006798:	f000 f8df 	bl	800695a <memset>
 800679c:	4620      	mov	r0, r4
 800679e:	bd70      	pop	{r4, r5, r6, pc}

080067a0 <__sfp_lock_acquire>:
 80067a0:	4801      	ldr	r0, [pc, #4]	; (80067a8 <__sfp_lock_acquire+0x8>)
 80067a2:	f000 b8d8 	b.w	8006956 <__retarget_lock_acquire_recursive>
 80067a6:	bf00      	nop
 80067a8:	20002d19 	.word	0x20002d19

080067ac <__sfp_lock_release>:
 80067ac:	4801      	ldr	r0, [pc, #4]	; (80067b4 <__sfp_lock_release+0x8>)
 80067ae:	f000 b8d3 	b.w	8006958 <__retarget_lock_release_recursive>
 80067b2:	bf00      	nop
 80067b4:	20002d19 	.word	0x20002d19

080067b8 <__sinit_lock_acquire>:
 80067b8:	4801      	ldr	r0, [pc, #4]	; (80067c0 <__sinit_lock_acquire+0x8>)
 80067ba:	f000 b8cc 	b.w	8006956 <__retarget_lock_acquire_recursive>
 80067be:	bf00      	nop
 80067c0:	20002d1a 	.word	0x20002d1a

080067c4 <__sinit_lock_release>:
 80067c4:	4801      	ldr	r0, [pc, #4]	; (80067cc <__sinit_lock_release+0x8>)
 80067c6:	f000 b8c7 	b.w	8006958 <__retarget_lock_release_recursive>
 80067ca:	bf00      	nop
 80067cc:	20002d1a 	.word	0x20002d1a

080067d0 <__sinit>:
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4604      	mov	r4, r0
 80067d4:	f7ff fff0 	bl	80067b8 <__sinit_lock_acquire>
 80067d8:	69a3      	ldr	r3, [r4, #24]
 80067da:	b11b      	cbz	r3, 80067e4 <__sinit+0x14>
 80067dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e0:	f7ff bff0 	b.w	80067c4 <__sinit_lock_release>
 80067e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80067e8:	6523      	str	r3, [r4, #80]	; 0x50
 80067ea:	4b13      	ldr	r3, [pc, #76]	; (8006838 <__sinit+0x68>)
 80067ec:	4a13      	ldr	r2, [pc, #76]	; (800683c <__sinit+0x6c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	bf04      	itt	eq
 80067f6:	2301      	moveq	r3, #1
 80067f8:	61a3      	streq	r3, [r4, #24]
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 f820 	bl	8006840 <__sfp>
 8006800:	6060      	str	r0, [r4, #4]
 8006802:	4620      	mov	r0, r4
 8006804:	f000 f81c 	bl	8006840 <__sfp>
 8006808:	60a0      	str	r0, [r4, #8]
 800680a:	4620      	mov	r0, r4
 800680c:	f000 f818 	bl	8006840 <__sfp>
 8006810:	2200      	movs	r2, #0
 8006812:	60e0      	str	r0, [r4, #12]
 8006814:	2104      	movs	r1, #4
 8006816:	6860      	ldr	r0, [r4, #4]
 8006818:	f7ff ff82 	bl	8006720 <std>
 800681c:	68a0      	ldr	r0, [r4, #8]
 800681e:	2201      	movs	r2, #1
 8006820:	2109      	movs	r1, #9
 8006822:	f7ff ff7d 	bl	8006720 <std>
 8006826:	68e0      	ldr	r0, [r4, #12]
 8006828:	2202      	movs	r2, #2
 800682a:	2112      	movs	r1, #18
 800682c:	f7ff ff78 	bl	8006720 <std>
 8006830:	2301      	movs	r3, #1
 8006832:	61a3      	str	r3, [r4, #24]
 8006834:	e7d2      	b.n	80067dc <__sinit+0xc>
 8006836:	bf00      	nop
 8006838:	08007d50 	.word	0x08007d50
 800683c:	08006769 	.word	0x08006769

08006840 <__sfp>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	4607      	mov	r7, r0
 8006844:	f7ff ffac 	bl	80067a0 <__sfp_lock_acquire>
 8006848:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <__sfp+0x84>)
 800684a:	681e      	ldr	r6, [r3, #0]
 800684c:	69b3      	ldr	r3, [r6, #24]
 800684e:	b913      	cbnz	r3, 8006856 <__sfp+0x16>
 8006850:	4630      	mov	r0, r6
 8006852:	f7ff ffbd 	bl	80067d0 <__sinit>
 8006856:	3648      	adds	r6, #72	; 0x48
 8006858:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800685c:	3b01      	subs	r3, #1
 800685e:	d503      	bpl.n	8006868 <__sfp+0x28>
 8006860:	6833      	ldr	r3, [r6, #0]
 8006862:	b30b      	cbz	r3, 80068a8 <__sfp+0x68>
 8006864:	6836      	ldr	r6, [r6, #0]
 8006866:	e7f7      	b.n	8006858 <__sfp+0x18>
 8006868:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800686c:	b9d5      	cbnz	r5, 80068a4 <__sfp+0x64>
 800686e:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <__sfp+0x88>)
 8006870:	60e3      	str	r3, [r4, #12]
 8006872:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006876:	6665      	str	r5, [r4, #100]	; 0x64
 8006878:	f000 f86c 	bl	8006954 <__retarget_lock_init_recursive>
 800687c:	f7ff ff96 	bl	80067ac <__sfp_lock_release>
 8006880:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006884:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006888:	6025      	str	r5, [r4, #0]
 800688a:	61a5      	str	r5, [r4, #24]
 800688c:	2208      	movs	r2, #8
 800688e:	4629      	mov	r1, r5
 8006890:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006894:	f000 f861 	bl	800695a <memset>
 8006898:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800689c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068a0:	4620      	mov	r0, r4
 80068a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a4:	3468      	adds	r4, #104	; 0x68
 80068a6:	e7d9      	b.n	800685c <__sfp+0x1c>
 80068a8:	2104      	movs	r1, #4
 80068aa:	4638      	mov	r0, r7
 80068ac:	f7ff ff62 	bl	8006774 <__sfmoreglue>
 80068b0:	4604      	mov	r4, r0
 80068b2:	6030      	str	r0, [r6, #0]
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d1d5      	bne.n	8006864 <__sfp+0x24>
 80068b8:	f7ff ff78 	bl	80067ac <__sfp_lock_release>
 80068bc:	230c      	movs	r3, #12
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	e7ee      	b.n	80068a0 <__sfp+0x60>
 80068c2:	bf00      	nop
 80068c4:	08007d50 	.word	0x08007d50
 80068c8:	ffff0001 	.word	0xffff0001

080068cc <_fwalk_reent>:
 80068cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d0:	4606      	mov	r6, r0
 80068d2:	4688      	mov	r8, r1
 80068d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068d8:	2700      	movs	r7, #0
 80068da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068de:	f1b9 0901 	subs.w	r9, r9, #1
 80068e2:	d505      	bpl.n	80068f0 <_fwalk_reent+0x24>
 80068e4:	6824      	ldr	r4, [r4, #0]
 80068e6:	2c00      	cmp	r4, #0
 80068e8:	d1f7      	bne.n	80068da <_fwalk_reent+0xe>
 80068ea:	4638      	mov	r0, r7
 80068ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f0:	89ab      	ldrh	r3, [r5, #12]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d907      	bls.n	8006906 <_fwalk_reent+0x3a>
 80068f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068fa:	3301      	adds	r3, #1
 80068fc:	d003      	beq.n	8006906 <_fwalk_reent+0x3a>
 80068fe:	4629      	mov	r1, r5
 8006900:	4630      	mov	r0, r6
 8006902:	47c0      	blx	r8
 8006904:	4307      	orrs	r7, r0
 8006906:	3568      	adds	r5, #104	; 0x68
 8006908:	e7e9      	b.n	80068de <_fwalk_reent+0x12>
	...

0800690c <__libc_init_array>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	4d0d      	ldr	r5, [pc, #52]	; (8006944 <__libc_init_array+0x38>)
 8006910:	4c0d      	ldr	r4, [pc, #52]	; (8006948 <__libc_init_array+0x3c>)
 8006912:	1b64      	subs	r4, r4, r5
 8006914:	10a4      	asrs	r4, r4, #2
 8006916:	2600      	movs	r6, #0
 8006918:	42a6      	cmp	r6, r4
 800691a:	d109      	bne.n	8006930 <__libc_init_array+0x24>
 800691c:	4d0b      	ldr	r5, [pc, #44]	; (800694c <__libc_init_array+0x40>)
 800691e:	4c0c      	ldr	r4, [pc, #48]	; (8006950 <__libc_init_array+0x44>)
 8006920:	f001 f962 	bl	8007be8 <_init>
 8006924:	1b64      	subs	r4, r4, r5
 8006926:	10a4      	asrs	r4, r4, #2
 8006928:	2600      	movs	r6, #0
 800692a:	42a6      	cmp	r6, r4
 800692c:	d105      	bne.n	800693a <__libc_init_array+0x2e>
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	f855 3b04 	ldr.w	r3, [r5], #4
 8006934:	4798      	blx	r3
 8006936:	3601      	adds	r6, #1
 8006938:	e7ee      	b.n	8006918 <__libc_init_array+0xc>
 800693a:	f855 3b04 	ldr.w	r3, [r5], #4
 800693e:	4798      	blx	r3
 8006940:	3601      	adds	r6, #1
 8006942:	e7f2      	b.n	800692a <__libc_init_array+0x1e>
 8006944:	08007f40 	.word	0x08007f40
 8006948:	08007f40 	.word	0x08007f40
 800694c:	08007f40 	.word	0x08007f40
 8006950:	08007f44 	.word	0x08007f44

08006954 <__retarget_lock_init_recursive>:
 8006954:	4770      	bx	lr

08006956 <__retarget_lock_acquire_recursive>:
 8006956:	4770      	bx	lr

08006958 <__retarget_lock_release_recursive>:
 8006958:	4770      	bx	lr

0800695a <memset>:
 800695a:	4402      	add	r2, r0
 800695c:	4603      	mov	r3, r0
 800695e:	4293      	cmp	r3, r2
 8006960:	d100      	bne.n	8006964 <memset+0xa>
 8006962:	4770      	bx	lr
 8006964:	f803 1b01 	strb.w	r1, [r3], #1
 8006968:	e7f9      	b.n	800695e <memset+0x4>
	...

0800696c <sbrk_aligned>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	4e0e      	ldr	r6, [pc, #56]	; (80069a8 <sbrk_aligned+0x3c>)
 8006970:	460c      	mov	r4, r1
 8006972:	6831      	ldr	r1, [r6, #0]
 8006974:	4605      	mov	r5, r0
 8006976:	b911      	cbnz	r1, 800697e <sbrk_aligned+0x12>
 8006978:	f000 f982 	bl	8006c80 <_sbrk_r>
 800697c:	6030      	str	r0, [r6, #0]
 800697e:	4621      	mov	r1, r4
 8006980:	4628      	mov	r0, r5
 8006982:	f000 f97d 	bl	8006c80 <_sbrk_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d00a      	beq.n	80069a0 <sbrk_aligned+0x34>
 800698a:	1cc4      	adds	r4, r0, #3
 800698c:	f024 0403 	bic.w	r4, r4, #3
 8006990:	42a0      	cmp	r0, r4
 8006992:	d007      	beq.n	80069a4 <sbrk_aligned+0x38>
 8006994:	1a21      	subs	r1, r4, r0
 8006996:	4628      	mov	r0, r5
 8006998:	f000 f972 	bl	8006c80 <_sbrk_r>
 800699c:	3001      	adds	r0, #1
 800699e:	d101      	bne.n	80069a4 <sbrk_aligned+0x38>
 80069a0:	f04f 34ff 	mov.w	r4, #4294967295
 80069a4:	4620      	mov	r0, r4
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	20002d20 	.word	0x20002d20

080069ac <_malloc_r>:
 80069ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b0:	1ccd      	adds	r5, r1, #3
 80069b2:	f025 0503 	bic.w	r5, r5, #3
 80069b6:	3508      	adds	r5, #8
 80069b8:	2d0c      	cmp	r5, #12
 80069ba:	bf38      	it	cc
 80069bc:	250c      	movcc	r5, #12
 80069be:	2d00      	cmp	r5, #0
 80069c0:	4607      	mov	r7, r0
 80069c2:	db01      	blt.n	80069c8 <_malloc_r+0x1c>
 80069c4:	42a9      	cmp	r1, r5
 80069c6:	d905      	bls.n	80069d4 <_malloc_r+0x28>
 80069c8:	230c      	movs	r3, #12
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	2600      	movs	r6, #0
 80069ce:	4630      	mov	r0, r6
 80069d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d4:	4e2e      	ldr	r6, [pc, #184]	; (8006a90 <_malloc_r+0xe4>)
 80069d6:	f000 fcf9 	bl	80073cc <__malloc_lock>
 80069da:	6833      	ldr	r3, [r6, #0]
 80069dc:	461c      	mov	r4, r3
 80069de:	bb34      	cbnz	r4, 8006a2e <_malloc_r+0x82>
 80069e0:	4629      	mov	r1, r5
 80069e2:	4638      	mov	r0, r7
 80069e4:	f7ff ffc2 	bl	800696c <sbrk_aligned>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	4604      	mov	r4, r0
 80069ec:	d14d      	bne.n	8006a8a <_malloc_r+0xde>
 80069ee:	6834      	ldr	r4, [r6, #0]
 80069f0:	4626      	mov	r6, r4
 80069f2:	2e00      	cmp	r6, #0
 80069f4:	d140      	bne.n	8006a78 <_malloc_r+0xcc>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	4631      	mov	r1, r6
 80069fa:	4638      	mov	r0, r7
 80069fc:	eb04 0803 	add.w	r8, r4, r3
 8006a00:	f000 f93e 	bl	8006c80 <_sbrk_r>
 8006a04:	4580      	cmp	r8, r0
 8006a06:	d13a      	bne.n	8006a7e <_malloc_r+0xd2>
 8006a08:	6821      	ldr	r1, [r4, #0]
 8006a0a:	3503      	adds	r5, #3
 8006a0c:	1a6d      	subs	r5, r5, r1
 8006a0e:	f025 0503 	bic.w	r5, r5, #3
 8006a12:	3508      	adds	r5, #8
 8006a14:	2d0c      	cmp	r5, #12
 8006a16:	bf38      	it	cc
 8006a18:	250c      	movcc	r5, #12
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f7ff ffa5 	bl	800696c <sbrk_aligned>
 8006a22:	3001      	adds	r0, #1
 8006a24:	d02b      	beq.n	8006a7e <_malloc_r+0xd2>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	442b      	add	r3, r5
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	e00e      	b.n	8006a4c <_malloc_r+0xa0>
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	1b52      	subs	r2, r2, r5
 8006a32:	d41e      	bmi.n	8006a72 <_malloc_r+0xc6>
 8006a34:	2a0b      	cmp	r2, #11
 8006a36:	d916      	bls.n	8006a66 <_malloc_r+0xba>
 8006a38:	1961      	adds	r1, r4, r5
 8006a3a:	42a3      	cmp	r3, r4
 8006a3c:	6025      	str	r5, [r4, #0]
 8006a3e:	bf18      	it	ne
 8006a40:	6059      	strne	r1, [r3, #4]
 8006a42:	6863      	ldr	r3, [r4, #4]
 8006a44:	bf08      	it	eq
 8006a46:	6031      	streq	r1, [r6, #0]
 8006a48:	5162      	str	r2, [r4, r5]
 8006a4a:	604b      	str	r3, [r1, #4]
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	f104 060b 	add.w	r6, r4, #11
 8006a52:	f000 fcc1 	bl	80073d8 <__malloc_unlock>
 8006a56:	f026 0607 	bic.w	r6, r6, #7
 8006a5a:	1d23      	adds	r3, r4, #4
 8006a5c:	1af2      	subs	r2, r6, r3
 8006a5e:	d0b6      	beq.n	80069ce <_malloc_r+0x22>
 8006a60:	1b9b      	subs	r3, r3, r6
 8006a62:	50a3      	str	r3, [r4, r2]
 8006a64:	e7b3      	b.n	80069ce <_malloc_r+0x22>
 8006a66:	6862      	ldr	r2, [r4, #4]
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	bf0c      	ite	eq
 8006a6c:	6032      	streq	r2, [r6, #0]
 8006a6e:	605a      	strne	r2, [r3, #4]
 8006a70:	e7ec      	b.n	8006a4c <_malloc_r+0xa0>
 8006a72:	4623      	mov	r3, r4
 8006a74:	6864      	ldr	r4, [r4, #4]
 8006a76:	e7b2      	b.n	80069de <_malloc_r+0x32>
 8006a78:	4634      	mov	r4, r6
 8006a7a:	6876      	ldr	r6, [r6, #4]
 8006a7c:	e7b9      	b.n	80069f2 <_malloc_r+0x46>
 8006a7e:	230c      	movs	r3, #12
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	4638      	mov	r0, r7
 8006a84:	f000 fca8 	bl	80073d8 <__malloc_unlock>
 8006a88:	e7a1      	b.n	80069ce <_malloc_r+0x22>
 8006a8a:	6025      	str	r5, [r4, #0]
 8006a8c:	e7de      	b.n	8006a4c <_malloc_r+0xa0>
 8006a8e:	bf00      	nop
 8006a90:	20002d1c 	.word	0x20002d1c

08006a94 <putchar>:
 8006a94:	4b09      	ldr	r3, [pc, #36]	; (8006abc <putchar+0x28>)
 8006a96:	b513      	push	{r0, r1, r4, lr}
 8006a98:	681c      	ldr	r4, [r3, #0]
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	b134      	cbz	r4, 8006aac <putchar+0x18>
 8006a9e:	69a3      	ldr	r3, [r4, #24]
 8006aa0:	b923      	cbnz	r3, 8006aac <putchar+0x18>
 8006aa2:	9001      	str	r0, [sp, #4]
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f7ff fe93 	bl	80067d0 <__sinit>
 8006aaa:	9901      	ldr	r1, [sp, #4]
 8006aac:	68a2      	ldr	r2, [r4, #8]
 8006aae:	4620      	mov	r0, r4
 8006ab0:	b002      	add	sp, #8
 8006ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab6:	f000 bfcf 	b.w	8007a58 <_putc_r>
 8006aba:	bf00      	nop
 8006abc:	20000020 	.word	0x20000020

08006ac0 <_puts_r>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	460e      	mov	r6, r1
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	b118      	cbz	r0, 8006ad0 <_puts_r+0x10>
 8006ac8:	6983      	ldr	r3, [r0, #24]
 8006aca:	b90b      	cbnz	r3, 8006ad0 <_puts_r+0x10>
 8006acc:	f7ff fe80 	bl	80067d0 <__sinit>
 8006ad0:	69ab      	ldr	r3, [r5, #24]
 8006ad2:	68ac      	ldr	r4, [r5, #8]
 8006ad4:	b913      	cbnz	r3, 8006adc <_puts_r+0x1c>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f7ff fe7a 	bl	80067d0 <__sinit>
 8006adc:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <_puts_r+0xd0>)
 8006ade:	429c      	cmp	r4, r3
 8006ae0:	d120      	bne.n	8006b24 <_puts_r+0x64>
 8006ae2:	686c      	ldr	r4, [r5, #4]
 8006ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae6:	07db      	lsls	r3, r3, #31
 8006ae8:	d405      	bmi.n	8006af6 <_puts_r+0x36>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	0598      	lsls	r0, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_puts_r+0x36>
 8006af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af2:	f7ff ff30 	bl	8006956 <__retarget_lock_acquire_recursive>
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	0719      	lsls	r1, r3, #28
 8006afa:	d51d      	bpl.n	8006b38 <_puts_r+0x78>
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	b1db      	cbz	r3, 8006b38 <_puts_r+0x78>
 8006b00:	3e01      	subs	r6, #1
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	60a3      	str	r3, [r4, #8]
 8006b0c:	bb39      	cbnz	r1, 8006b5e <_puts_r+0x9e>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	da38      	bge.n	8006b84 <_puts_r+0xc4>
 8006b12:	4622      	mov	r2, r4
 8006b14:	210a      	movs	r1, #10
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fa04 	bl	8006f24 <__swbuf_r>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d011      	beq.n	8006b44 <_puts_r+0x84>
 8006b20:	250a      	movs	r5, #10
 8006b22:	e011      	b.n	8006b48 <_puts_r+0x88>
 8006b24:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <_puts_r+0xd4>)
 8006b26:	429c      	cmp	r4, r3
 8006b28:	d101      	bne.n	8006b2e <_puts_r+0x6e>
 8006b2a:	68ac      	ldr	r4, [r5, #8]
 8006b2c:	e7da      	b.n	8006ae4 <_puts_r+0x24>
 8006b2e:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <_puts_r+0xd8>)
 8006b30:	429c      	cmp	r4, r3
 8006b32:	bf08      	it	eq
 8006b34:	68ec      	ldreq	r4, [r5, #12]
 8006b36:	e7d5      	b.n	8006ae4 <_puts_r+0x24>
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f000 fa56 	bl	8006fec <__swsetup_r>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d0dd      	beq.n	8006b00 <_puts_r+0x40>
 8006b44:	f04f 35ff 	mov.w	r5, #4294967295
 8006b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b4a:	07da      	lsls	r2, r3, #31
 8006b4c:	d405      	bmi.n	8006b5a <_puts_r+0x9a>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	059b      	lsls	r3, r3, #22
 8006b52:	d402      	bmi.n	8006b5a <_puts_r+0x9a>
 8006b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b56:	f7ff feff 	bl	8006958 <__retarget_lock_release_recursive>
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	bd70      	pop	{r4, r5, r6, pc}
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da04      	bge.n	8006b6c <_puts_r+0xac>
 8006b62:	69a2      	ldr	r2, [r4, #24]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	dc06      	bgt.n	8006b76 <_puts_r+0xb6>
 8006b68:	290a      	cmp	r1, #10
 8006b6a:	d004      	beq.n	8006b76 <_puts_r+0xb6>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	7019      	strb	r1, [r3, #0]
 8006b74:	e7c5      	b.n	8006b02 <_puts_r+0x42>
 8006b76:	4622      	mov	r2, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 f9d3 	bl	8006f24 <__swbuf_r>
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d1bf      	bne.n	8006b02 <_puts_r+0x42>
 8006b82:	e7df      	b.n	8006b44 <_puts_r+0x84>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	250a      	movs	r5, #10
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	701d      	strb	r5, [r3, #0]
 8006b8e:	e7db      	b.n	8006b48 <_puts_r+0x88>
 8006b90:	08007d10 	.word	0x08007d10
 8006b94:	08007d30 	.word	0x08007d30
 8006b98:	08007cf0 	.word	0x08007cf0

08006b9c <puts>:
 8006b9c:	4b02      	ldr	r3, [pc, #8]	; (8006ba8 <puts+0xc>)
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f7ff bf8d 	b.w	8006ac0 <_puts_r>
 8006ba6:	bf00      	nop
 8006ba8:	20000020 	.word	0x20000020

08006bac <cleanup_glue>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	460c      	mov	r4, r1
 8006bb0:	6809      	ldr	r1, [r1, #0]
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	b109      	cbz	r1, 8006bba <cleanup_glue+0xe>
 8006bb6:	f7ff fff9 	bl	8006bac <cleanup_glue>
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc2:	f000 bc0f 	b.w	80073e4 <_free_r>
	...

08006bc8 <_reclaim_reent>:
 8006bc8:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <_reclaim_reent+0xb4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4283      	cmp	r3, r0
 8006bce:	b570      	push	{r4, r5, r6, lr}
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	d051      	beq.n	8006c78 <_reclaim_reent+0xb0>
 8006bd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bd6:	b143      	cbz	r3, 8006bea <_reclaim_reent+0x22>
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d14a      	bne.n	8006c74 <_reclaim_reent+0xac>
 8006bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be0:	6819      	ldr	r1, [r3, #0]
 8006be2:	b111      	cbz	r1, 8006bea <_reclaim_reent+0x22>
 8006be4:	4620      	mov	r0, r4
 8006be6:	f000 fbfd 	bl	80073e4 <_free_r>
 8006bea:	6961      	ldr	r1, [r4, #20]
 8006bec:	b111      	cbz	r1, 8006bf4 <_reclaim_reent+0x2c>
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 fbf8 	bl	80073e4 <_free_r>
 8006bf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006bf6:	b111      	cbz	r1, 8006bfe <_reclaim_reent+0x36>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fbf3 	bl	80073e4 <_free_r>
 8006bfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c00:	b111      	cbz	r1, 8006c08 <_reclaim_reent+0x40>
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 fbee 	bl	80073e4 <_free_r>
 8006c08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c0a:	b111      	cbz	r1, 8006c12 <_reclaim_reent+0x4a>
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fbe9 	bl	80073e4 <_free_r>
 8006c12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c14:	b111      	cbz	r1, 8006c1c <_reclaim_reent+0x54>
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 fbe4 	bl	80073e4 <_free_r>
 8006c1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c1e:	b111      	cbz	r1, 8006c26 <_reclaim_reent+0x5e>
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fbdf 	bl	80073e4 <_free_r>
 8006c26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c28:	b111      	cbz	r1, 8006c30 <_reclaim_reent+0x68>
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fbda 	bl	80073e4 <_free_r>
 8006c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c32:	b111      	cbz	r1, 8006c3a <_reclaim_reent+0x72>
 8006c34:	4620      	mov	r0, r4
 8006c36:	f000 fbd5 	bl	80073e4 <_free_r>
 8006c3a:	69a3      	ldr	r3, [r4, #24]
 8006c3c:	b1e3      	cbz	r3, 8006c78 <_reclaim_reent+0xb0>
 8006c3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c40:	4620      	mov	r0, r4
 8006c42:	4798      	blx	r3
 8006c44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c46:	b1b9      	cbz	r1, 8006c78 <_reclaim_reent+0xb0>
 8006c48:	4620      	mov	r0, r4
 8006c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c4e:	f7ff bfad 	b.w	8006bac <cleanup_glue>
 8006c52:	5949      	ldr	r1, [r1, r5]
 8006c54:	b941      	cbnz	r1, 8006c68 <_reclaim_reent+0xa0>
 8006c56:	3504      	adds	r5, #4
 8006c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c5a:	2d80      	cmp	r5, #128	; 0x80
 8006c5c:	68d9      	ldr	r1, [r3, #12]
 8006c5e:	d1f8      	bne.n	8006c52 <_reclaim_reent+0x8a>
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fbbf 	bl	80073e4 <_free_r>
 8006c66:	e7ba      	b.n	8006bde <_reclaim_reent+0x16>
 8006c68:	680e      	ldr	r6, [r1, #0]
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 fbba 	bl	80073e4 <_free_r>
 8006c70:	4631      	mov	r1, r6
 8006c72:	e7ef      	b.n	8006c54 <_reclaim_reent+0x8c>
 8006c74:	2500      	movs	r5, #0
 8006c76:	e7ef      	b.n	8006c58 <_reclaim_reent+0x90>
 8006c78:	bd70      	pop	{r4, r5, r6, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000020 	.word	0x20000020

08006c80 <_sbrk_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d06      	ldr	r5, [pc, #24]	; (8006c9c <_sbrk_r+0x1c>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	602b      	str	r3, [r5, #0]
 8006c8c:	f7fa f948 	bl	8000f20 <_sbrk>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_sbrk_r+0x1a>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_sbrk_r+0x1a>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	20002d24 	.word	0x20002d24

08006ca0 <__sread>:
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca8:	f000 ff1e 	bl	8007ae8 <_read_r>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	bfab      	itete	ge
 8006cb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cb4:	181b      	addge	r3, r3, r0
 8006cb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cba:	bfac      	ite	ge
 8006cbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cbe:	81a3      	strhlt	r3, [r4, #12]
 8006cc0:	bd10      	pop	{r4, pc}

08006cc2 <__swrite>:
 8006cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc6:	461f      	mov	r7, r3
 8006cc8:	898b      	ldrh	r3, [r1, #12]
 8006cca:	05db      	lsls	r3, r3, #23
 8006ccc:	4605      	mov	r5, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	d505      	bpl.n	8006ce0 <__swrite+0x1e>
 8006cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd8:	2302      	movs	r3, #2
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f000 faf6 	bl	80072cc <_lseek_r>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	4632      	mov	r2, r6
 8006cee:	463b      	mov	r3, r7
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf6:	f000 b967 	b.w	8006fc8 <_write_r>

08006cfa <__sseek>:
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d02:	f000 fae3 	bl	80072cc <_lseek_r>
 8006d06:	1c43      	adds	r3, r0, #1
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	bf15      	itete	ne
 8006d0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d16:	81a3      	strheq	r3, [r4, #12]
 8006d18:	bf18      	it	ne
 8006d1a:	81a3      	strhne	r3, [r4, #12]
 8006d1c:	bd10      	pop	{r4, pc}

08006d1e <__sclose>:
 8006d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d22:	f000 b9ef 	b.w	8007104 <_close_r>

08006d26 <strstr>:
 8006d26:	780a      	ldrb	r2, [r1, #0]
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	b96a      	cbnz	r2, 8006d48 <strstr+0x22>
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d109      	bne.n	8006d46 <strstr+0x20>
 8006d32:	460c      	mov	r4, r1
 8006d34:	4605      	mov	r5, r0
 8006d36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0f6      	beq.n	8006d2c <strstr+0x6>
 8006d3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006d42:	429e      	cmp	r6, r3
 8006d44:	d0f7      	beq.n	8006d36 <strstr+0x10>
 8006d46:	3001      	adds	r0, #1
 8006d48:	7803      	ldrb	r3, [r0, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1ef      	bne.n	8006d2e <strstr+0x8>
 8006d4e:	4618      	mov	r0, r3
 8006d50:	e7ec      	b.n	8006d2c <strstr+0x6>
	...

08006d54 <strtok>:
 8006d54:	4b16      	ldr	r3, [pc, #88]	; (8006db0 <strtok+0x5c>)
 8006d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d58:	681e      	ldr	r6, [r3, #0]
 8006d5a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	b9fc      	cbnz	r4, 8006da0 <strtok+0x4c>
 8006d60:	2050      	movs	r0, #80	; 0x50
 8006d62:	9101      	str	r1, [sp, #4]
 8006d64:	f000 fb2a 	bl	80073bc <malloc>
 8006d68:	9901      	ldr	r1, [sp, #4]
 8006d6a:	65b0      	str	r0, [r6, #88]	; 0x58
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	b920      	cbnz	r0, 8006d7a <strtok+0x26>
 8006d70:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <strtok+0x60>)
 8006d72:	4811      	ldr	r0, [pc, #68]	; (8006db8 <strtok+0x64>)
 8006d74:	2157      	movs	r1, #87	; 0x57
 8006d76:	f000 f9a7 	bl	80070c8 <__assert_func>
 8006d7a:	e9c0 4400 	strd	r4, r4, [r0]
 8006d7e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006d82:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006d86:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006d8a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006d8e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006d92:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006d96:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006d9a:	6184      	str	r4, [r0, #24]
 8006d9c:	7704      	strb	r4, [r0, #28]
 8006d9e:	6244      	str	r4, [r0, #36]	; 0x24
 8006da0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006da2:	2301      	movs	r3, #1
 8006da4:	4628      	mov	r0, r5
 8006da6:	b002      	add	sp, #8
 8006da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dac:	f000 b806 	b.w	8006dbc <__strtok_r>
 8006db0:	20000020 	.word	0x20000020
 8006db4:	08007d54 	.word	0x08007d54
 8006db8:	08007d6b 	.word	0x08007d6b

08006dbc <__strtok_r>:
 8006dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dbe:	b908      	cbnz	r0, 8006dc4 <__strtok_r+0x8>
 8006dc0:	6810      	ldr	r0, [r2, #0]
 8006dc2:	b188      	cbz	r0, 8006de8 <__strtok_r+0x2c>
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006dcc:	460f      	mov	r7, r1
 8006dce:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006dd2:	b91e      	cbnz	r6, 8006ddc <__strtok_r+0x20>
 8006dd4:	b965      	cbnz	r5, 8006df0 <__strtok_r+0x34>
 8006dd6:	6015      	str	r5, [r2, #0]
 8006dd8:	4628      	mov	r0, r5
 8006dda:	e005      	b.n	8006de8 <__strtok_r+0x2c>
 8006ddc:	42b5      	cmp	r5, r6
 8006dde:	d1f6      	bne.n	8006dce <__strtok_r+0x12>
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1f0      	bne.n	8006dc6 <__strtok_r+0xa>
 8006de4:	6014      	str	r4, [r2, #0]
 8006de6:	7003      	strb	r3, [r0, #0]
 8006de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dea:	461c      	mov	r4, r3
 8006dec:	e00c      	b.n	8006e08 <__strtok_r+0x4c>
 8006dee:	b915      	cbnz	r5, 8006df6 <__strtok_r+0x3a>
 8006df0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006df4:	460e      	mov	r6, r1
 8006df6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006dfa:	42ab      	cmp	r3, r5
 8006dfc:	d1f7      	bne.n	8006dee <__strtok_r+0x32>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0f3      	beq.n	8006dea <__strtok_r+0x2e>
 8006e02:	2300      	movs	r3, #0
 8006e04:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e08:	6014      	str	r4, [r2, #0]
 8006e0a:	e7ed      	b.n	8006de8 <__strtok_r+0x2c>

08006e0c <_strtol_l.constprop.0>:
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e12:	d001      	beq.n	8006e18 <_strtol_l.constprop.0+0xc>
 8006e14:	2b24      	cmp	r3, #36	; 0x24
 8006e16:	d906      	bls.n	8006e26 <_strtol_l.constprop.0+0x1a>
 8006e18:	f7ff fc7c 	bl	8006714 <__errno>
 8006e1c:	2316      	movs	r3, #22
 8006e1e:	6003      	str	r3, [r0, #0]
 8006e20:	2000      	movs	r0, #0
 8006e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f0c <_strtol_l.constprop.0+0x100>
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	462e      	mov	r6, r5
 8006e2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e32:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006e36:	f017 0708 	ands.w	r7, r7, #8
 8006e3a:	d1f7      	bne.n	8006e2c <_strtol_l.constprop.0+0x20>
 8006e3c:	2c2d      	cmp	r4, #45	; 0x2d
 8006e3e:	d132      	bne.n	8006ea6 <_strtol_l.constprop.0+0x9a>
 8006e40:	782c      	ldrb	r4, [r5, #0]
 8006e42:	2701      	movs	r7, #1
 8006e44:	1cb5      	adds	r5, r6, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d05b      	beq.n	8006f02 <_strtol_l.constprop.0+0xf6>
 8006e4a:	2b10      	cmp	r3, #16
 8006e4c:	d109      	bne.n	8006e62 <_strtol_l.constprop.0+0x56>
 8006e4e:	2c30      	cmp	r4, #48	; 0x30
 8006e50:	d107      	bne.n	8006e62 <_strtol_l.constprop.0+0x56>
 8006e52:	782c      	ldrb	r4, [r5, #0]
 8006e54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e58:	2c58      	cmp	r4, #88	; 0x58
 8006e5a:	d14d      	bne.n	8006ef8 <_strtol_l.constprop.0+0xec>
 8006e5c:	786c      	ldrb	r4, [r5, #1]
 8006e5e:	2310      	movs	r3, #16
 8006e60:	3502      	adds	r5, #2
 8006e62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e66:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e6a:	f04f 0c00 	mov.w	ip, #0
 8006e6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e72:	4666      	mov	r6, ip
 8006e74:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e78:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006e7c:	f1be 0f09 	cmp.w	lr, #9
 8006e80:	d816      	bhi.n	8006eb0 <_strtol_l.constprop.0+0xa4>
 8006e82:	4674      	mov	r4, lr
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	dd24      	ble.n	8006ed2 <_strtol_l.constprop.0+0xc6>
 8006e88:	f1bc 0f00 	cmp.w	ip, #0
 8006e8c:	db1e      	blt.n	8006ecc <_strtol_l.constprop.0+0xc0>
 8006e8e:	45b1      	cmp	r9, r6
 8006e90:	d31c      	bcc.n	8006ecc <_strtol_l.constprop.0+0xc0>
 8006e92:	d101      	bne.n	8006e98 <_strtol_l.constprop.0+0x8c>
 8006e94:	45a2      	cmp	sl, r4
 8006e96:	db19      	blt.n	8006ecc <_strtol_l.constprop.0+0xc0>
 8006e98:	fb06 4603 	mla	r6, r6, r3, r4
 8006e9c:	f04f 0c01 	mov.w	ip, #1
 8006ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ea4:	e7e8      	b.n	8006e78 <_strtol_l.constprop.0+0x6c>
 8006ea6:	2c2b      	cmp	r4, #43	; 0x2b
 8006ea8:	bf04      	itt	eq
 8006eaa:	782c      	ldrbeq	r4, [r5, #0]
 8006eac:	1cb5      	addeq	r5, r6, #2
 8006eae:	e7ca      	b.n	8006e46 <_strtol_l.constprop.0+0x3a>
 8006eb0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006eb4:	f1be 0f19 	cmp.w	lr, #25
 8006eb8:	d801      	bhi.n	8006ebe <_strtol_l.constprop.0+0xb2>
 8006eba:	3c37      	subs	r4, #55	; 0x37
 8006ebc:	e7e2      	b.n	8006e84 <_strtol_l.constprop.0+0x78>
 8006ebe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006ec2:	f1be 0f19 	cmp.w	lr, #25
 8006ec6:	d804      	bhi.n	8006ed2 <_strtol_l.constprop.0+0xc6>
 8006ec8:	3c57      	subs	r4, #87	; 0x57
 8006eca:	e7db      	b.n	8006e84 <_strtol_l.constprop.0+0x78>
 8006ecc:	f04f 3cff 	mov.w	ip, #4294967295
 8006ed0:	e7e6      	b.n	8006ea0 <_strtol_l.constprop.0+0x94>
 8006ed2:	f1bc 0f00 	cmp.w	ip, #0
 8006ed6:	da05      	bge.n	8006ee4 <_strtol_l.constprop.0+0xd8>
 8006ed8:	2322      	movs	r3, #34	; 0x22
 8006eda:	6003      	str	r3, [r0, #0]
 8006edc:	4646      	mov	r6, r8
 8006ede:	b942      	cbnz	r2, 8006ef2 <_strtol_l.constprop.0+0xe6>
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	e79e      	b.n	8006e22 <_strtol_l.constprop.0+0x16>
 8006ee4:	b107      	cbz	r7, 8006ee8 <_strtol_l.constprop.0+0xdc>
 8006ee6:	4276      	negs	r6, r6
 8006ee8:	2a00      	cmp	r2, #0
 8006eea:	d0f9      	beq.n	8006ee0 <_strtol_l.constprop.0+0xd4>
 8006eec:	f1bc 0f00 	cmp.w	ip, #0
 8006ef0:	d000      	beq.n	8006ef4 <_strtol_l.constprop.0+0xe8>
 8006ef2:	1e69      	subs	r1, r5, #1
 8006ef4:	6011      	str	r1, [r2, #0]
 8006ef6:	e7f3      	b.n	8006ee0 <_strtol_l.constprop.0+0xd4>
 8006ef8:	2430      	movs	r4, #48	; 0x30
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1b1      	bne.n	8006e62 <_strtol_l.constprop.0+0x56>
 8006efe:	2308      	movs	r3, #8
 8006f00:	e7af      	b.n	8006e62 <_strtol_l.constprop.0+0x56>
 8006f02:	2c30      	cmp	r4, #48	; 0x30
 8006f04:	d0a5      	beq.n	8006e52 <_strtol_l.constprop.0+0x46>
 8006f06:	230a      	movs	r3, #10
 8006f08:	e7ab      	b.n	8006e62 <_strtol_l.constprop.0+0x56>
 8006f0a:	bf00      	nop
 8006f0c:	08007e05 	.word	0x08007e05

08006f10 <strtol>:
 8006f10:	4613      	mov	r3, r2
 8006f12:	460a      	mov	r2, r1
 8006f14:	4601      	mov	r1, r0
 8006f16:	4802      	ldr	r0, [pc, #8]	; (8006f20 <strtol+0x10>)
 8006f18:	6800      	ldr	r0, [r0, #0]
 8006f1a:	f7ff bf77 	b.w	8006e0c <_strtol_l.constprop.0>
 8006f1e:	bf00      	nop
 8006f20:	20000020 	.word	0x20000020

08006f24 <__swbuf_r>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	460e      	mov	r6, r1
 8006f28:	4614      	mov	r4, r2
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	b118      	cbz	r0, 8006f36 <__swbuf_r+0x12>
 8006f2e:	6983      	ldr	r3, [r0, #24]
 8006f30:	b90b      	cbnz	r3, 8006f36 <__swbuf_r+0x12>
 8006f32:	f7ff fc4d 	bl	80067d0 <__sinit>
 8006f36:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <__swbuf_r+0x98>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	d12b      	bne.n	8006f94 <__swbuf_r+0x70>
 8006f3c:	686c      	ldr	r4, [r5, #4]
 8006f3e:	69a3      	ldr	r3, [r4, #24]
 8006f40:	60a3      	str	r3, [r4, #8]
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	071a      	lsls	r2, r3, #28
 8006f46:	d52f      	bpl.n	8006fa8 <__swbuf_r+0x84>
 8006f48:	6923      	ldr	r3, [r4, #16]
 8006f4a:	b36b      	cbz	r3, 8006fa8 <__swbuf_r+0x84>
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	6820      	ldr	r0, [r4, #0]
 8006f50:	1ac0      	subs	r0, r0, r3
 8006f52:	6963      	ldr	r3, [r4, #20]
 8006f54:	b2f6      	uxtb	r6, r6
 8006f56:	4283      	cmp	r3, r0
 8006f58:	4637      	mov	r7, r6
 8006f5a:	dc04      	bgt.n	8006f66 <__swbuf_r+0x42>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f966 	bl	8007230 <_fflush_r>
 8006f64:	bb30      	cbnz	r0, 8006fb4 <__swbuf_r+0x90>
 8006f66:	68a3      	ldr	r3, [r4, #8]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	60a3      	str	r3, [r4, #8]
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	6022      	str	r2, [r4, #0]
 8006f72:	701e      	strb	r6, [r3, #0]
 8006f74:	6963      	ldr	r3, [r4, #20]
 8006f76:	3001      	adds	r0, #1
 8006f78:	4283      	cmp	r3, r0
 8006f7a:	d004      	beq.n	8006f86 <__swbuf_r+0x62>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	07db      	lsls	r3, r3, #31
 8006f80:	d506      	bpl.n	8006f90 <__swbuf_r+0x6c>
 8006f82:	2e0a      	cmp	r6, #10
 8006f84:	d104      	bne.n	8006f90 <__swbuf_r+0x6c>
 8006f86:	4621      	mov	r1, r4
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f000 f951 	bl	8007230 <_fflush_r>
 8006f8e:	b988      	cbnz	r0, 8006fb4 <__swbuf_r+0x90>
 8006f90:	4638      	mov	r0, r7
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <__swbuf_r+0x9c>)
 8006f96:	429c      	cmp	r4, r3
 8006f98:	d101      	bne.n	8006f9e <__swbuf_r+0x7a>
 8006f9a:	68ac      	ldr	r4, [r5, #8]
 8006f9c:	e7cf      	b.n	8006f3e <__swbuf_r+0x1a>
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <__swbuf_r+0xa0>)
 8006fa0:	429c      	cmp	r4, r3
 8006fa2:	bf08      	it	eq
 8006fa4:	68ec      	ldreq	r4, [r5, #12]
 8006fa6:	e7ca      	b.n	8006f3e <__swbuf_r+0x1a>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 f81e 	bl	8006fec <__swsetup_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d0cb      	beq.n	8006f4c <__swbuf_r+0x28>
 8006fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fb8:	e7ea      	b.n	8006f90 <__swbuf_r+0x6c>
 8006fba:	bf00      	nop
 8006fbc:	08007d10 	.word	0x08007d10
 8006fc0:	08007d30 	.word	0x08007d30
 8006fc4:	08007cf0 	.word	0x08007cf0

08006fc8 <_write_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d07      	ldr	r5, [pc, #28]	; (8006fe8 <_write_r+0x20>)
 8006fcc:	4604      	mov	r4, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	602a      	str	r2, [r5, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7f9 ff51 	bl	8000e7e <_write>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_write_r+0x1e>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_write_r+0x1e>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20002d24 	.word	0x20002d24

08006fec <__swsetup_r>:
 8006fec:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <__swsetup_r+0xcc>)
 8006fee:	b570      	push	{r4, r5, r6, lr}
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	b125      	cbz	r5, 8007002 <__swsetup_r+0x16>
 8006ff8:	69ab      	ldr	r3, [r5, #24]
 8006ffa:	b913      	cbnz	r3, 8007002 <__swsetup_r+0x16>
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f7ff fbe7 	bl	80067d0 <__sinit>
 8007002:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <__swsetup_r+0xd0>)
 8007004:	429c      	cmp	r4, r3
 8007006:	d10f      	bne.n	8007028 <__swsetup_r+0x3c>
 8007008:	686c      	ldr	r4, [r5, #4]
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007010:	0719      	lsls	r1, r3, #28
 8007012:	d42c      	bmi.n	800706e <__swsetup_r+0x82>
 8007014:	06dd      	lsls	r5, r3, #27
 8007016:	d411      	bmi.n	800703c <__swsetup_r+0x50>
 8007018:	2309      	movs	r3, #9
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	e03e      	b.n	80070a6 <__swsetup_r+0xba>
 8007028:	4b25      	ldr	r3, [pc, #148]	; (80070c0 <__swsetup_r+0xd4>)
 800702a:	429c      	cmp	r4, r3
 800702c:	d101      	bne.n	8007032 <__swsetup_r+0x46>
 800702e:	68ac      	ldr	r4, [r5, #8]
 8007030:	e7eb      	b.n	800700a <__swsetup_r+0x1e>
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <__swsetup_r+0xd8>)
 8007034:	429c      	cmp	r4, r3
 8007036:	bf08      	it	eq
 8007038:	68ec      	ldreq	r4, [r5, #12]
 800703a:	e7e6      	b.n	800700a <__swsetup_r+0x1e>
 800703c:	0758      	lsls	r0, r3, #29
 800703e:	d512      	bpl.n	8007066 <__swsetup_r+0x7a>
 8007040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007042:	b141      	cbz	r1, 8007056 <__swsetup_r+0x6a>
 8007044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007048:	4299      	cmp	r1, r3
 800704a:	d002      	beq.n	8007052 <__swsetup_r+0x66>
 800704c:	4630      	mov	r0, r6
 800704e:	f000 f9c9 	bl	80073e4 <_free_r>
 8007052:	2300      	movs	r3, #0
 8007054:	6363      	str	r3, [r4, #52]	; 0x34
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	2300      	movs	r3, #0
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f043 0308 	orr.w	r3, r3, #8
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	b94b      	cbnz	r3, 8007086 <__swsetup_r+0x9a>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800707c:	d003      	beq.n	8007086 <__swsetup_r+0x9a>
 800707e:	4621      	mov	r1, r4
 8007080:	4630      	mov	r0, r6
 8007082:	f000 f95b 	bl	800733c <__smakebuf_r>
 8007086:	89a0      	ldrh	r0, [r4, #12]
 8007088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800708c:	f010 0301 	ands.w	r3, r0, #1
 8007090:	d00a      	beq.n	80070a8 <__swsetup_r+0xbc>
 8007092:	2300      	movs	r3, #0
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	6963      	ldr	r3, [r4, #20]
 8007098:	425b      	negs	r3, r3
 800709a:	61a3      	str	r3, [r4, #24]
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	b943      	cbnz	r3, 80070b2 <__swsetup_r+0xc6>
 80070a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070a4:	d1ba      	bne.n	800701c <__swsetup_r+0x30>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	0781      	lsls	r1, r0, #30
 80070aa:	bf58      	it	pl
 80070ac:	6963      	ldrpl	r3, [r4, #20]
 80070ae:	60a3      	str	r3, [r4, #8]
 80070b0:	e7f4      	b.n	800709c <__swsetup_r+0xb0>
 80070b2:	2000      	movs	r0, #0
 80070b4:	e7f7      	b.n	80070a6 <__swsetup_r+0xba>
 80070b6:	bf00      	nop
 80070b8:	20000020 	.word	0x20000020
 80070bc:	08007d10 	.word	0x08007d10
 80070c0:	08007d30 	.word	0x08007d30
 80070c4:	08007cf0 	.word	0x08007cf0

080070c8 <__assert_func>:
 80070c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ca:	4614      	mov	r4, r2
 80070cc:	461a      	mov	r2, r3
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <__assert_func+0x2c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4605      	mov	r5, r0
 80070d4:	68d8      	ldr	r0, [r3, #12]
 80070d6:	b14c      	cbz	r4, 80070ec <__assert_func+0x24>
 80070d8:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <__assert_func+0x30>)
 80070da:	9100      	str	r1, [sp, #0]
 80070dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070e0:	4906      	ldr	r1, [pc, #24]	; (80070fc <__assert_func+0x34>)
 80070e2:	462b      	mov	r3, r5
 80070e4:	f000 f8e0 	bl	80072a8 <fiprintf>
 80070e8:	f000 fd10 	bl	8007b0c <abort>
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <__assert_func+0x38>)
 80070ee:	461c      	mov	r4, r3
 80070f0:	e7f3      	b.n	80070da <__assert_func+0x12>
 80070f2:	bf00      	nop
 80070f4:	20000020 	.word	0x20000020
 80070f8:	08007dc8 	.word	0x08007dc8
 80070fc:	08007dd5 	.word	0x08007dd5
 8007100:	08007e03 	.word	0x08007e03

08007104 <_close_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d06      	ldr	r5, [pc, #24]	; (8007120 <_close_r+0x1c>)
 8007108:	2300      	movs	r3, #0
 800710a:	4604      	mov	r4, r0
 800710c:	4608      	mov	r0, r1
 800710e:	602b      	str	r3, [r5, #0]
 8007110:	f7f9 fed1 	bl	8000eb6 <_close>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d102      	bne.n	800711e <_close_r+0x1a>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	b103      	cbz	r3, 800711e <_close_r+0x1a>
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	20002d24 	.word	0x20002d24

08007124 <__sflush_r>:
 8007124:	898a      	ldrh	r2, [r1, #12]
 8007126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712a:	4605      	mov	r5, r0
 800712c:	0710      	lsls	r0, r2, #28
 800712e:	460c      	mov	r4, r1
 8007130:	d458      	bmi.n	80071e4 <__sflush_r+0xc0>
 8007132:	684b      	ldr	r3, [r1, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	dc05      	bgt.n	8007144 <__sflush_r+0x20>
 8007138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	dc02      	bgt.n	8007144 <__sflush_r+0x20>
 800713e:	2000      	movs	r0, #0
 8007140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007146:	2e00      	cmp	r6, #0
 8007148:	d0f9      	beq.n	800713e <__sflush_r+0x1a>
 800714a:	2300      	movs	r3, #0
 800714c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007150:	682f      	ldr	r7, [r5, #0]
 8007152:	602b      	str	r3, [r5, #0]
 8007154:	d032      	beq.n	80071bc <__sflush_r+0x98>
 8007156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	075a      	lsls	r2, r3, #29
 800715c:	d505      	bpl.n	800716a <__sflush_r+0x46>
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	1ac0      	subs	r0, r0, r3
 8007162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007164:	b10b      	cbz	r3, 800716a <__sflush_r+0x46>
 8007166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007168:	1ac0      	subs	r0, r0, r3
 800716a:	2300      	movs	r3, #0
 800716c:	4602      	mov	r2, r0
 800716e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007170:	6a21      	ldr	r1, [r4, #32]
 8007172:	4628      	mov	r0, r5
 8007174:	47b0      	blx	r6
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	d106      	bne.n	800718a <__sflush_r+0x66>
 800717c:	6829      	ldr	r1, [r5, #0]
 800717e:	291d      	cmp	r1, #29
 8007180:	d82c      	bhi.n	80071dc <__sflush_r+0xb8>
 8007182:	4a2a      	ldr	r2, [pc, #168]	; (800722c <__sflush_r+0x108>)
 8007184:	40ca      	lsrs	r2, r1
 8007186:	07d6      	lsls	r6, r2, #31
 8007188:	d528      	bpl.n	80071dc <__sflush_r+0xb8>
 800718a:	2200      	movs	r2, #0
 800718c:	6062      	str	r2, [r4, #4]
 800718e:	04d9      	lsls	r1, r3, #19
 8007190:	6922      	ldr	r2, [r4, #16]
 8007192:	6022      	str	r2, [r4, #0]
 8007194:	d504      	bpl.n	80071a0 <__sflush_r+0x7c>
 8007196:	1c42      	adds	r2, r0, #1
 8007198:	d101      	bne.n	800719e <__sflush_r+0x7a>
 800719a:	682b      	ldr	r3, [r5, #0]
 800719c:	b903      	cbnz	r3, 80071a0 <__sflush_r+0x7c>
 800719e:	6560      	str	r0, [r4, #84]	; 0x54
 80071a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071a2:	602f      	str	r7, [r5, #0]
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d0ca      	beq.n	800713e <__sflush_r+0x1a>
 80071a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ac:	4299      	cmp	r1, r3
 80071ae:	d002      	beq.n	80071b6 <__sflush_r+0x92>
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 f917 	bl	80073e4 <_free_r>
 80071b6:	2000      	movs	r0, #0
 80071b8:	6360      	str	r0, [r4, #52]	; 0x34
 80071ba:	e7c1      	b.n	8007140 <__sflush_r+0x1c>
 80071bc:	6a21      	ldr	r1, [r4, #32]
 80071be:	2301      	movs	r3, #1
 80071c0:	4628      	mov	r0, r5
 80071c2:	47b0      	blx	r6
 80071c4:	1c41      	adds	r1, r0, #1
 80071c6:	d1c7      	bne.n	8007158 <__sflush_r+0x34>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0c4      	beq.n	8007158 <__sflush_r+0x34>
 80071ce:	2b1d      	cmp	r3, #29
 80071d0:	d001      	beq.n	80071d6 <__sflush_r+0xb2>
 80071d2:	2b16      	cmp	r3, #22
 80071d4:	d101      	bne.n	80071da <__sflush_r+0xb6>
 80071d6:	602f      	str	r7, [r5, #0]
 80071d8:	e7b1      	b.n	800713e <__sflush_r+0x1a>
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	e7ad      	b.n	8007140 <__sflush_r+0x1c>
 80071e4:	690f      	ldr	r7, [r1, #16]
 80071e6:	2f00      	cmp	r7, #0
 80071e8:	d0a9      	beq.n	800713e <__sflush_r+0x1a>
 80071ea:	0793      	lsls	r3, r2, #30
 80071ec:	680e      	ldr	r6, [r1, #0]
 80071ee:	bf08      	it	eq
 80071f0:	694b      	ldreq	r3, [r1, #20]
 80071f2:	600f      	str	r7, [r1, #0]
 80071f4:	bf18      	it	ne
 80071f6:	2300      	movne	r3, #0
 80071f8:	eba6 0807 	sub.w	r8, r6, r7
 80071fc:	608b      	str	r3, [r1, #8]
 80071fe:	f1b8 0f00 	cmp.w	r8, #0
 8007202:	dd9c      	ble.n	800713e <__sflush_r+0x1a>
 8007204:	6a21      	ldr	r1, [r4, #32]
 8007206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007208:	4643      	mov	r3, r8
 800720a:	463a      	mov	r2, r7
 800720c:	4628      	mov	r0, r5
 800720e:	47b0      	blx	r6
 8007210:	2800      	cmp	r0, #0
 8007212:	dc06      	bgt.n	8007222 <__sflush_r+0xfe>
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800721a:	81a3      	strh	r3, [r4, #12]
 800721c:	f04f 30ff 	mov.w	r0, #4294967295
 8007220:	e78e      	b.n	8007140 <__sflush_r+0x1c>
 8007222:	4407      	add	r7, r0
 8007224:	eba8 0800 	sub.w	r8, r8, r0
 8007228:	e7e9      	b.n	80071fe <__sflush_r+0xda>
 800722a:	bf00      	nop
 800722c:	20400001 	.word	0x20400001

08007230 <_fflush_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	690b      	ldr	r3, [r1, #16]
 8007234:	4605      	mov	r5, r0
 8007236:	460c      	mov	r4, r1
 8007238:	b913      	cbnz	r3, 8007240 <_fflush_r+0x10>
 800723a:	2500      	movs	r5, #0
 800723c:	4628      	mov	r0, r5
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	b118      	cbz	r0, 800724a <_fflush_r+0x1a>
 8007242:	6983      	ldr	r3, [r0, #24]
 8007244:	b90b      	cbnz	r3, 800724a <_fflush_r+0x1a>
 8007246:	f7ff fac3 	bl	80067d0 <__sinit>
 800724a:	4b14      	ldr	r3, [pc, #80]	; (800729c <_fflush_r+0x6c>)
 800724c:	429c      	cmp	r4, r3
 800724e:	d11b      	bne.n	8007288 <_fflush_r+0x58>
 8007250:	686c      	ldr	r4, [r5, #4]
 8007252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0ef      	beq.n	800723a <_fflush_r+0xa>
 800725a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800725c:	07d0      	lsls	r0, r2, #31
 800725e:	d404      	bmi.n	800726a <_fflush_r+0x3a>
 8007260:	0599      	lsls	r1, r3, #22
 8007262:	d402      	bmi.n	800726a <_fflush_r+0x3a>
 8007264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007266:	f7ff fb76 	bl	8006956 <__retarget_lock_acquire_recursive>
 800726a:	4628      	mov	r0, r5
 800726c:	4621      	mov	r1, r4
 800726e:	f7ff ff59 	bl	8007124 <__sflush_r>
 8007272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007274:	07da      	lsls	r2, r3, #31
 8007276:	4605      	mov	r5, r0
 8007278:	d4e0      	bmi.n	800723c <_fflush_r+0xc>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	059b      	lsls	r3, r3, #22
 800727e:	d4dd      	bmi.n	800723c <_fflush_r+0xc>
 8007280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007282:	f7ff fb69 	bl	8006958 <__retarget_lock_release_recursive>
 8007286:	e7d9      	b.n	800723c <_fflush_r+0xc>
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <_fflush_r+0x70>)
 800728a:	429c      	cmp	r4, r3
 800728c:	d101      	bne.n	8007292 <_fflush_r+0x62>
 800728e:	68ac      	ldr	r4, [r5, #8]
 8007290:	e7df      	b.n	8007252 <_fflush_r+0x22>
 8007292:	4b04      	ldr	r3, [pc, #16]	; (80072a4 <_fflush_r+0x74>)
 8007294:	429c      	cmp	r4, r3
 8007296:	bf08      	it	eq
 8007298:	68ec      	ldreq	r4, [r5, #12]
 800729a:	e7da      	b.n	8007252 <_fflush_r+0x22>
 800729c:	08007d10 	.word	0x08007d10
 80072a0:	08007d30 	.word	0x08007d30
 80072a4:	08007cf0 	.word	0x08007cf0

080072a8 <fiprintf>:
 80072a8:	b40e      	push	{r1, r2, r3}
 80072aa:	b503      	push	{r0, r1, lr}
 80072ac:	4601      	mov	r1, r0
 80072ae:	ab03      	add	r3, sp, #12
 80072b0:	4805      	ldr	r0, [pc, #20]	; (80072c8 <fiprintf+0x20>)
 80072b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b6:	6800      	ldr	r0, [r0, #0]
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	f000 f909 	bl	80074d0 <_vfiprintf_r>
 80072be:	b002      	add	sp, #8
 80072c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c4:	b003      	add	sp, #12
 80072c6:	4770      	bx	lr
 80072c8:	20000020 	.word	0x20000020

080072cc <_lseek_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d07      	ldr	r5, [pc, #28]	; (80072ec <_lseek_r+0x20>)
 80072d0:	4604      	mov	r4, r0
 80072d2:	4608      	mov	r0, r1
 80072d4:	4611      	mov	r1, r2
 80072d6:	2200      	movs	r2, #0
 80072d8:	602a      	str	r2, [r5, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	f7f9 fe12 	bl	8000f04 <_lseek>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_lseek_r+0x1e>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_lseek_r+0x1e>
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	20002d24 	.word	0x20002d24

080072f0 <__swhatbuf_r>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	460e      	mov	r6, r1
 80072f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f8:	2900      	cmp	r1, #0
 80072fa:	b096      	sub	sp, #88	; 0x58
 80072fc:	4614      	mov	r4, r2
 80072fe:	461d      	mov	r5, r3
 8007300:	da08      	bge.n	8007314 <__swhatbuf_r+0x24>
 8007302:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	602a      	str	r2, [r5, #0]
 800730a:	061a      	lsls	r2, r3, #24
 800730c:	d410      	bmi.n	8007330 <__swhatbuf_r+0x40>
 800730e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007312:	e00e      	b.n	8007332 <__swhatbuf_r+0x42>
 8007314:	466a      	mov	r2, sp
 8007316:	f000 fc01 	bl	8007b1c <_fstat_r>
 800731a:	2800      	cmp	r0, #0
 800731c:	dbf1      	blt.n	8007302 <__swhatbuf_r+0x12>
 800731e:	9a01      	ldr	r2, [sp, #4]
 8007320:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007324:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007328:	425a      	negs	r2, r3
 800732a:	415a      	adcs	r2, r3
 800732c:	602a      	str	r2, [r5, #0]
 800732e:	e7ee      	b.n	800730e <__swhatbuf_r+0x1e>
 8007330:	2340      	movs	r3, #64	; 0x40
 8007332:	2000      	movs	r0, #0
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	b016      	add	sp, #88	; 0x58
 8007338:	bd70      	pop	{r4, r5, r6, pc}
	...

0800733c <__smakebuf_r>:
 800733c:	898b      	ldrh	r3, [r1, #12]
 800733e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007340:	079d      	lsls	r5, r3, #30
 8007342:	4606      	mov	r6, r0
 8007344:	460c      	mov	r4, r1
 8007346:	d507      	bpl.n	8007358 <__smakebuf_r+0x1c>
 8007348:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	2301      	movs	r3, #1
 8007352:	6163      	str	r3, [r4, #20]
 8007354:	b002      	add	sp, #8
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	ab01      	add	r3, sp, #4
 800735a:	466a      	mov	r2, sp
 800735c:	f7ff ffc8 	bl	80072f0 <__swhatbuf_r>
 8007360:	9900      	ldr	r1, [sp, #0]
 8007362:	4605      	mov	r5, r0
 8007364:	4630      	mov	r0, r6
 8007366:	f7ff fb21 	bl	80069ac <_malloc_r>
 800736a:	b948      	cbnz	r0, 8007380 <__smakebuf_r+0x44>
 800736c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007370:	059a      	lsls	r2, r3, #22
 8007372:	d4ef      	bmi.n	8007354 <__smakebuf_r+0x18>
 8007374:	f023 0303 	bic.w	r3, r3, #3
 8007378:	f043 0302 	orr.w	r3, r3, #2
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	e7e3      	b.n	8007348 <__smakebuf_r+0xc>
 8007380:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <__smakebuf_r+0x7c>)
 8007382:	62b3      	str	r3, [r6, #40]	; 0x28
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	6020      	str	r0, [r4, #0]
 8007388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	9b00      	ldr	r3, [sp, #0]
 8007390:	6163      	str	r3, [r4, #20]
 8007392:	9b01      	ldr	r3, [sp, #4]
 8007394:	6120      	str	r0, [r4, #16]
 8007396:	b15b      	cbz	r3, 80073b0 <__smakebuf_r+0x74>
 8007398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800739c:	4630      	mov	r0, r6
 800739e:	f000 fbcf 	bl	8007b40 <_isatty_r>
 80073a2:	b128      	cbz	r0, 80073b0 <__smakebuf_r+0x74>
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	89a0      	ldrh	r0, [r4, #12]
 80073b2:	4305      	orrs	r5, r0
 80073b4:	81a5      	strh	r5, [r4, #12]
 80073b6:	e7cd      	b.n	8007354 <__smakebuf_r+0x18>
 80073b8:	08006769 	.word	0x08006769

080073bc <malloc>:
 80073bc:	4b02      	ldr	r3, [pc, #8]	; (80073c8 <malloc+0xc>)
 80073be:	4601      	mov	r1, r0
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	f7ff baf3 	b.w	80069ac <_malloc_r>
 80073c6:	bf00      	nop
 80073c8:	20000020 	.word	0x20000020

080073cc <__malloc_lock>:
 80073cc:	4801      	ldr	r0, [pc, #4]	; (80073d4 <__malloc_lock+0x8>)
 80073ce:	f7ff bac2 	b.w	8006956 <__retarget_lock_acquire_recursive>
 80073d2:	bf00      	nop
 80073d4:	20002d18 	.word	0x20002d18

080073d8 <__malloc_unlock>:
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <__malloc_unlock+0x8>)
 80073da:	f7ff babd 	b.w	8006958 <__retarget_lock_release_recursive>
 80073de:	bf00      	nop
 80073e0:	20002d18 	.word	0x20002d18

080073e4 <_free_r>:
 80073e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073e6:	2900      	cmp	r1, #0
 80073e8:	d044      	beq.n	8007474 <_free_r+0x90>
 80073ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ee:	9001      	str	r0, [sp, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f1a1 0404 	sub.w	r4, r1, #4
 80073f6:	bfb8      	it	lt
 80073f8:	18e4      	addlt	r4, r4, r3
 80073fa:	f7ff ffe7 	bl	80073cc <__malloc_lock>
 80073fe:	4a1e      	ldr	r2, [pc, #120]	; (8007478 <_free_r+0x94>)
 8007400:	9801      	ldr	r0, [sp, #4]
 8007402:	6813      	ldr	r3, [r2, #0]
 8007404:	b933      	cbnz	r3, 8007414 <_free_r+0x30>
 8007406:	6063      	str	r3, [r4, #4]
 8007408:	6014      	str	r4, [r2, #0]
 800740a:	b003      	add	sp, #12
 800740c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007410:	f7ff bfe2 	b.w	80073d8 <__malloc_unlock>
 8007414:	42a3      	cmp	r3, r4
 8007416:	d908      	bls.n	800742a <_free_r+0x46>
 8007418:	6825      	ldr	r5, [r4, #0]
 800741a:	1961      	adds	r1, r4, r5
 800741c:	428b      	cmp	r3, r1
 800741e:	bf01      	itttt	eq
 8007420:	6819      	ldreq	r1, [r3, #0]
 8007422:	685b      	ldreq	r3, [r3, #4]
 8007424:	1949      	addeq	r1, r1, r5
 8007426:	6021      	streq	r1, [r4, #0]
 8007428:	e7ed      	b.n	8007406 <_free_r+0x22>
 800742a:	461a      	mov	r2, r3
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	b10b      	cbz	r3, 8007434 <_free_r+0x50>
 8007430:	42a3      	cmp	r3, r4
 8007432:	d9fa      	bls.n	800742a <_free_r+0x46>
 8007434:	6811      	ldr	r1, [r2, #0]
 8007436:	1855      	adds	r5, r2, r1
 8007438:	42a5      	cmp	r5, r4
 800743a:	d10b      	bne.n	8007454 <_free_r+0x70>
 800743c:	6824      	ldr	r4, [r4, #0]
 800743e:	4421      	add	r1, r4
 8007440:	1854      	adds	r4, r2, r1
 8007442:	42a3      	cmp	r3, r4
 8007444:	6011      	str	r1, [r2, #0]
 8007446:	d1e0      	bne.n	800740a <_free_r+0x26>
 8007448:	681c      	ldr	r4, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	6053      	str	r3, [r2, #4]
 800744e:	4421      	add	r1, r4
 8007450:	6011      	str	r1, [r2, #0]
 8007452:	e7da      	b.n	800740a <_free_r+0x26>
 8007454:	d902      	bls.n	800745c <_free_r+0x78>
 8007456:	230c      	movs	r3, #12
 8007458:	6003      	str	r3, [r0, #0]
 800745a:	e7d6      	b.n	800740a <_free_r+0x26>
 800745c:	6825      	ldr	r5, [r4, #0]
 800745e:	1961      	adds	r1, r4, r5
 8007460:	428b      	cmp	r3, r1
 8007462:	bf04      	itt	eq
 8007464:	6819      	ldreq	r1, [r3, #0]
 8007466:	685b      	ldreq	r3, [r3, #4]
 8007468:	6063      	str	r3, [r4, #4]
 800746a:	bf04      	itt	eq
 800746c:	1949      	addeq	r1, r1, r5
 800746e:	6021      	streq	r1, [r4, #0]
 8007470:	6054      	str	r4, [r2, #4]
 8007472:	e7ca      	b.n	800740a <_free_r+0x26>
 8007474:	b003      	add	sp, #12
 8007476:	bd30      	pop	{r4, r5, pc}
 8007478:	20002d1c 	.word	0x20002d1c

0800747c <__sfputc_r>:
 800747c:	6893      	ldr	r3, [r2, #8]
 800747e:	3b01      	subs	r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	b410      	push	{r4}
 8007484:	6093      	str	r3, [r2, #8]
 8007486:	da08      	bge.n	800749a <__sfputc_r+0x1e>
 8007488:	6994      	ldr	r4, [r2, #24]
 800748a:	42a3      	cmp	r3, r4
 800748c:	db01      	blt.n	8007492 <__sfputc_r+0x16>
 800748e:	290a      	cmp	r1, #10
 8007490:	d103      	bne.n	800749a <__sfputc_r+0x1e>
 8007492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007496:	f7ff bd45 	b.w	8006f24 <__swbuf_r>
 800749a:	6813      	ldr	r3, [r2, #0]
 800749c:	1c58      	adds	r0, r3, #1
 800749e:	6010      	str	r0, [r2, #0]
 80074a0:	7019      	strb	r1, [r3, #0]
 80074a2:	4608      	mov	r0, r1
 80074a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <__sfputs_r>:
 80074aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ac:	4606      	mov	r6, r0
 80074ae:	460f      	mov	r7, r1
 80074b0:	4614      	mov	r4, r2
 80074b2:	18d5      	adds	r5, r2, r3
 80074b4:	42ac      	cmp	r4, r5
 80074b6:	d101      	bne.n	80074bc <__sfputs_r+0x12>
 80074b8:	2000      	movs	r0, #0
 80074ba:	e007      	b.n	80074cc <__sfputs_r+0x22>
 80074bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c0:	463a      	mov	r2, r7
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7ff ffda 	bl	800747c <__sfputc_r>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d1f3      	bne.n	80074b4 <__sfputs_r+0xa>
 80074cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074d0 <_vfiprintf_r>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	460d      	mov	r5, r1
 80074d6:	b09d      	sub	sp, #116	; 0x74
 80074d8:	4614      	mov	r4, r2
 80074da:	4698      	mov	r8, r3
 80074dc:	4606      	mov	r6, r0
 80074de:	b118      	cbz	r0, 80074e8 <_vfiprintf_r+0x18>
 80074e0:	6983      	ldr	r3, [r0, #24]
 80074e2:	b90b      	cbnz	r3, 80074e8 <_vfiprintf_r+0x18>
 80074e4:	f7ff f974 	bl	80067d0 <__sinit>
 80074e8:	4b89      	ldr	r3, [pc, #548]	; (8007710 <_vfiprintf_r+0x240>)
 80074ea:	429d      	cmp	r5, r3
 80074ec:	d11b      	bne.n	8007526 <_vfiprintf_r+0x56>
 80074ee:	6875      	ldr	r5, [r6, #4]
 80074f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f2:	07d9      	lsls	r1, r3, #31
 80074f4:	d405      	bmi.n	8007502 <_vfiprintf_r+0x32>
 80074f6:	89ab      	ldrh	r3, [r5, #12]
 80074f8:	059a      	lsls	r2, r3, #22
 80074fa:	d402      	bmi.n	8007502 <_vfiprintf_r+0x32>
 80074fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074fe:	f7ff fa2a 	bl	8006956 <__retarget_lock_acquire_recursive>
 8007502:	89ab      	ldrh	r3, [r5, #12]
 8007504:	071b      	lsls	r3, r3, #28
 8007506:	d501      	bpl.n	800750c <_vfiprintf_r+0x3c>
 8007508:	692b      	ldr	r3, [r5, #16]
 800750a:	b9eb      	cbnz	r3, 8007548 <_vfiprintf_r+0x78>
 800750c:	4629      	mov	r1, r5
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff fd6c 	bl	8006fec <__swsetup_r>
 8007514:	b1c0      	cbz	r0, 8007548 <_vfiprintf_r+0x78>
 8007516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007518:	07dc      	lsls	r4, r3, #31
 800751a:	d50e      	bpl.n	800753a <_vfiprintf_r+0x6a>
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	b01d      	add	sp, #116	; 0x74
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	4b7b      	ldr	r3, [pc, #492]	; (8007714 <_vfiprintf_r+0x244>)
 8007528:	429d      	cmp	r5, r3
 800752a:	d101      	bne.n	8007530 <_vfiprintf_r+0x60>
 800752c:	68b5      	ldr	r5, [r6, #8]
 800752e:	e7df      	b.n	80074f0 <_vfiprintf_r+0x20>
 8007530:	4b79      	ldr	r3, [pc, #484]	; (8007718 <_vfiprintf_r+0x248>)
 8007532:	429d      	cmp	r5, r3
 8007534:	bf08      	it	eq
 8007536:	68f5      	ldreq	r5, [r6, #12]
 8007538:	e7da      	b.n	80074f0 <_vfiprintf_r+0x20>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	0598      	lsls	r0, r3, #22
 800753e:	d4ed      	bmi.n	800751c <_vfiprintf_r+0x4c>
 8007540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007542:	f7ff fa09 	bl	8006958 <__retarget_lock_release_recursive>
 8007546:	e7e9      	b.n	800751c <_vfiprintf_r+0x4c>
 8007548:	2300      	movs	r3, #0
 800754a:	9309      	str	r3, [sp, #36]	; 0x24
 800754c:	2320      	movs	r3, #32
 800754e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007552:	f8cd 800c 	str.w	r8, [sp, #12]
 8007556:	2330      	movs	r3, #48	; 0x30
 8007558:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800771c <_vfiprintf_r+0x24c>
 800755c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007560:	f04f 0901 	mov.w	r9, #1
 8007564:	4623      	mov	r3, r4
 8007566:	469a      	mov	sl, r3
 8007568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800756c:	b10a      	cbz	r2, 8007572 <_vfiprintf_r+0xa2>
 800756e:	2a25      	cmp	r2, #37	; 0x25
 8007570:	d1f9      	bne.n	8007566 <_vfiprintf_r+0x96>
 8007572:	ebba 0b04 	subs.w	fp, sl, r4
 8007576:	d00b      	beq.n	8007590 <_vfiprintf_r+0xc0>
 8007578:	465b      	mov	r3, fp
 800757a:	4622      	mov	r2, r4
 800757c:	4629      	mov	r1, r5
 800757e:	4630      	mov	r0, r6
 8007580:	f7ff ff93 	bl	80074aa <__sfputs_r>
 8007584:	3001      	adds	r0, #1
 8007586:	f000 80aa 	beq.w	80076de <_vfiprintf_r+0x20e>
 800758a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800758c:	445a      	add	r2, fp
 800758e:	9209      	str	r2, [sp, #36]	; 0x24
 8007590:	f89a 3000 	ldrb.w	r3, [sl]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80a2 	beq.w	80076de <_vfiprintf_r+0x20e>
 800759a:	2300      	movs	r3, #0
 800759c:	f04f 32ff 	mov.w	r2, #4294967295
 80075a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075a4:	f10a 0a01 	add.w	sl, sl, #1
 80075a8:	9304      	str	r3, [sp, #16]
 80075aa:	9307      	str	r3, [sp, #28]
 80075ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075b0:	931a      	str	r3, [sp, #104]	; 0x68
 80075b2:	4654      	mov	r4, sl
 80075b4:	2205      	movs	r2, #5
 80075b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ba:	4858      	ldr	r0, [pc, #352]	; (800771c <_vfiprintf_r+0x24c>)
 80075bc:	f7f8 fe30 	bl	8000220 <memchr>
 80075c0:	9a04      	ldr	r2, [sp, #16]
 80075c2:	b9d8      	cbnz	r0, 80075fc <_vfiprintf_r+0x12c>
 80075c4:	06d1      	lsls	r1, r2, #27
 80075c6:	bf44      	itt	mi
 80075c8:	2320      	movmi	r3, #32
 80075ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ce:	0713      	lsls	r3, r2, #28
 80075d0:	bf44      	itt	mi
 80075d2:	232b      	movmi	r3, #43	; 0x2b
 80075d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d8:	f89a 3000 	ldrb.w	r3, [sl]
 80075dc:	2b2a      	cmp	r3, #42	; 0x2a
 80075de:	d015      	beq.n	800760c <_vfiprintf_r+0x13c>
 80075e0:	9a07      	ldr	r2, [sp, #28]
 80075e2:	4654      	mov	r4, sl
 80075e4:	2000      	movs	r0, #0
 80075e6:	f04f 0c0a 	mov.w	ip, #10
 80075ea:	4621      	mov	r1, r4
 80075ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f0:	3b30      	subs	r3, #48	; 0x30
 80075f2:	2b09      	cmp	r3, #9
 80075f4:	d94e      	bls.n	8007694 <_vfiprintf_r+0x1c4>
 80075f6:	b1b0      	cbz	r0, 8007626 <_vfiprintf_r+0x156>
 80075f8:	9207      	str	r2, [sp, #28]
 80075fa:	e014      	b.n	8007626 <_vfiprintf_r+0x156>
 80075fc:	eba0 0308 	sub.w	r3, r0, r8
 8007600:	fa09 f303 	lsl.w	r3, r9, r3
 8007604:	4313      	orrs	r3, r2
 8007606:	9304      	str	r3, [sp, #16]
 8007608:	46a2      	mov	sl, r4
 800760a:	e7d2      	b.n	80075b2 <_vfiprintf_r+0xe2>
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	1d19      	adds	r1, r3, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	9103      	str	r1, [sp, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	bfbb      	ittet	lt
 8007618:	425b      	neglt	r3, r3
 800761a:	f042 0202 	orrlt.w	r2, r2, #2
 800761e:	9307      	strge	r3, [sp, #28]
 8007620:	9307      	strlt	r3, [sp, #28]
 8007622:	bfb8      	it	lt
 8007624:	9204      	strlt	r2, [sp, #16]
 8007626:	7823      	ldrb	r3, [r4, #0]
 8007628:	2b2e      	cmp	r3, #46	; 0x2e
 800762a:	d10c      	bne.n	8007646 <_vfiprintf_r+0x176>
 800762c:	7863      	ldrb	r3, [r4, #1]
 800762e:	2b2a      	cmp	r3, #42	; 0x2a
 8007630:	d135      	bne.n	800769e <_vfiprintf_r+0x1ce>
 8007632:	9b03      	ldr	r3, [sp, #12]
 8007634:	1d1a      	adds	r2, r3, #4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	9203      	str	r2, [sp, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	bfb8      	it	lt
 800763e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007642:	3402      	adds	r4, #2
 8007644:	9305      	str	r3, [sp, #20]
 8007646:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800772c <_vfiprintf_r+0x25c>
 800764a:	7821      	ldrb	r1, [r4, #0]
 800764c:	2203      	movs	r2, #3
 800764e:	4650      	mov	r0, sl
 8007650:	f7f8 fde6 	bl	8000220 <memchr>
 8007654:	b140      	cbz	r0, 8007668 <_vfiprintf_r+0x198>
 8007656:	2340      	movs	r3, #64	; 0x40
 8007658:	eba0 000a 	sub.w	r0, r0, sl
 800765c:	fa03 f000 	lsl.w	r0, r3, r0
 8007660:	9b04      	ldr	r3, [sp, #16]
 8007662:	4303      	orrs	r3, r0
 8007664:	3401      	adds	r4, #1
 8007666:	9304      	str	r3, [sp, #16]
 8007668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800766c:	482c      	ldr	r0, [pc, #176]	; (8007720 <_vfiprintf_r+0x250>)
 800766e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007672:	2206      	movs	r2, #6
 8007674:	f7f8 fdd4 	bl	8000220 <memchr>
 8007678:	2800      	cmp	r0, #0
 800767a:	d03f      	beq.n	80076fc <_vfiprintf_r+0x22c>
 800767c:	4b29      	ldr	r3, [pc, #164]	; (8007724 <_vfiprintf_r+0x254>)
 800767e:	bb1b      	cbnz	r3, 80076c8 <_vfiprintf_r+0x1f8>
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	3307      	adds	r3, #7
 8007684:	f023 0307 	bic.w	r3, r3, #7
 8007688:	3308      	adds	r3, #8
 800768a:	9303      	str	r3, [sp, #12]
 800768c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768e:	443b      	add	r3, r7
 8007690:	9309      	str	r3, [sp, #36]	; 0x24
 8007692:	e767      	b.n	8007564 <_vfiprintf_r+0x94>
 8007694:	fb0c 3202 	mla	r2, ip, r2, r3
 8007698:	460c      	mov	r4, r1
 800769a:	2001      	movs	r0, #1
 800769c:	e7a5      	b.n	80075ea <_vfiprintf_r+0x11a>
 800769e:	2300      	movs	r3, #0
 80076a0:	3401      	adds	r4, #1
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	4619      	mov	r1, r3
 80076a6:	f04f 0c0a 	mov.w	ip, #10
 80076aa:	4620      	mov	r0, r4
 80076ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b0:	3a30      	subs	r2, #48	; 0x30
 80076b2:	2a09      	cmp	r2, #9
 80076b4:	d903      	bls.n	80076be <_vfiprintf_r+0x1ee>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0c5      	beq.n	8007646 <_vfiprintf_r+0x176>
 80076ba:	9105      	str	r1, [sp, #20]
 80076bc:	e7c3      	b.n	8007646 <_vfiprintf_r+0x176>
 80076be:	fb0c 2101 	mla	r1, ip, r1, r2
 80076c2:	4604      	mov	r4, r0
 80076c4:	2301      	movs	r3, #1
 80076c6:	e7f0      	b.n	80076aa <_vfiprintf_r+0x1da>
 80076c8:	ab03      	add	r3, sp, #12
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	462a      	mov	r2, r5
 80076ce:	4b16      	ldr	r3, [pc, #88]	; (8007728 <_vfiprintf_r+0x258>)
 80076d0:	a904      	add	r1, sp, #16
 80076d2:	4630      	mov	r0, r6
 80076d4:	f3af 8000 	nop.w
 80076d8:	4607      	mov	r7, r0
 80076da:	1c78      	adds	r0, r7, #1
 80076dc:	d1d6      	bne.n	800768c <_vfiprintf_r+0x1bc>
 80076de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e0:	07d9      	lsls	r1, r3, #31
 80076e2:	d405      	bmi.n	80076f0 <_vfiprintf_r+0x220>
 80076e4:	89ab      	ldrh	r3, [r5, #12]
 80076e6:	059a      	lsls	r2, r3, #22
 80076e8:	d402      	bmi.n	80076f0 <_vfiprintf_r+0x220>
 80076ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ec:	f7ff f934 	bl	8006958 <__retarget_lock_release_recursive>
 80076f0:	89ab      	ldrh	r3, [r5, #12]
 80076f2:	065b      	lsls	r3, r3, #25
 80076f4:	f53f af12 	bmi.w	800751c <_vfiprintf_r+0x4c>
 80076f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076fa:	e711      	b.n	8007520 <_vfiprintf_r+0x50>
 80076fc:	ab03      	add	r3, sp, #12
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	462a      	mov	r2, r5
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <_vfiprintf_r+0x258>)
 8007704:	a904      	add	r1, sp, #16
 8007706:	4630      	mov	r0, r6
 8007708:	f000 f880 	bl	800780c <_printf_i>
 800770c:	e7e4      	b.n	80076d8 <_vfiprintf_r+0x208>
 800770e:	bf00      	nop
 8007710:	08007d10 	.word	0x08007d10
 8007714:	08007d30 	.word	0x08007d30
 8007718:	08007cf0 	.word	0x08007cf0
 800771c:	08007f05 	.word	0x08007f05
 8007720:	08007f0f 	.word	0x08007f0f
 8007724:	00000000 	.word	0x00000000
 8007728:	080074ab 	.word	0x080074ab
 800772c:	08007f0b 	.word	0x08007f0b

08007730 <_printf_common>:
 8007730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	4616      	mov	r6, r2
 8007736:	4699      	mov	r9, r3
 8007738:	688a      	ldr	r2, [r1, #8]
 800773a:	690b      	ldr	r3, [r1, #16]
 800773c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007740:	4293      	cmp	r3, r2
 8007742:	bfb8      	it	lt
 8007744:	4613      	movlt	r3, r2
 8007746:	6033      	str	r3, [r6, #0]
 8007748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800774c:	4607      	mov	r7, r0
 800774e:	460c      	mov	r4, r1
 8007750:	b10a      	cbz	r2, 8007756 <_printf_common+0x26>
 8007752:	3301      	adds	r3, #1
 8007754:	6033      	str	r3, [r6, #0]
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	0699      	lsls	r1, r3, #26
 800775a:	bf42      	ittt	mi
 800775c:	6833      	ldrmi	r3, [r6, #0]
 800775e:	3302      	addmi	r3, #2
 8007760:	6033      	strmi	r3, [r6, #0]
 8007762:	6825      	ldr	r5, [r4, #0]
 8007764:	f015 0506 	ands.w	r5, r5, #6
 8007768:	d106      	bne.n	8007778 <_printf_common+0x48>
 800776a:	f104 0a19 	add.w	sl, r4, #25
 800776e:	68e3      	ldr	r3, [r4, #12]
 8007770:	6832      	ldr	r2, [r6, #0]
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	42ab      	cmp	r3, r5
 8007776:	dc26      	bgt.n	80077c6 <_printf_common+0x96>
 8007778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800777c:	1e13      	subs	r3, r2, #0
 800777e:	6822      	ldr	r2, [r4, #0]
 8007780:	bf18      	it	ne
 8007782:	2301      	movne	r3, #1
 8007784:	0692      	lsls	r2, r2, #26
 8007786:	d42b      	bmi.n	80077e0 <_printf_common+0xb0>
 8007788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800778c:	4649      	mov	r1, r9
 800778e:	4638      	mov	r0, r7
 8007790:	47c0      	blx	r8
 8007792:	3001      	adds	r0, #1
 8007794:	d01e      	beq.n	80077d4 <_printf_common+0xa4>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	68e5      	ldr	r5, [r4, #12]
 800779a:	6832      	ldr	r2, [r6, #0]
 800779c:	f003 0306 	and.w	r3, r3, #6
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	bf08      	it	eq
 80077a4:	1aad      	subeq	r5, r5, r2
 80077a6:	68a3      	ldr	r3, [r4, #8]
 80077a8:	6922      	ldr	r2, [r4, #16]
 80077aa:	bf0c      	ite	eq
 80077ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b0:	2500      	movne	r5, #0
 80077b2:	4293      	cmp	r3, r2
 80077b4:	bfc4      	itt	gt
 80077b6:	1a9b      	subgt	r3, r3, r2
 80077b8:	18ed      	addgt	r5, r5, r3
 80077ba:	2600      	movs	r6, #0
 80077bc:	341a      	adds	r4, #26
 80077be:	42b5      	cmp	r5, r6
 80077c0:	d11a      	bne.n	80077f8 <_printf_common+0xc8>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e008      	b.n	80077d8 <_printf_common+0xa8>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4652      	mov	r2, sl
 80077ca:	4649      	mov	r1, r9
 80077cc:	4638      	mov	r0, r7
 80077ce:	47c0      	blx	r8
 80077d0:	3001      	adds	r0, #1
 80077d2:	d103      	bne.n	80077dc <_printf_common+0xac>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077dc:	3501      	adds	r5, #1
 80077de:	e7c6      	b.n	800776e <_printf_common+0x3e>
 80077e0:	18e1      	adds	r1, r4, r3
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	2030      	movs	r0, #48	; 0x30
 80077e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ea:	4422      	add	r2, r4
 80077ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077f4:	3302      	adds	r3, #2
 80077f6:	e7c7      	b.n	8007788 <_printf_common+0x58>
 80077f8:	2301      	movs	r3, #1
 80077fa:	4622      	mov	r2, r4
 80077fc:	4649      	mov	r1, r9
 80077fe:	4638      	mov	r0, r7
 8007800:	47c0      	blx	r8
 8007802:	3001      	adds	r0, #1
 8007804:	d0e6      	beq.n	80077d4 <_printf_common+0xa4>
 8007806:	3601      	adds	r6, #1
 8007808:	e7d9      	b.n	80077be <_printf_common+0x8e>
	...

0800780c <_printf_i>:
 800780c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	7e0f      	ldrb	r7, [r1, #24]
 8007812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007814:	2f78      	cmp	r7, #120	; 0x78
 8007816:	4691      	mov	r9, r2
 8007818:	4680      	mov	r8, r0
 800781a:	460c      	mov	r4, r1
 800781c:	469a      	mov	sl, r3
 800781e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007822:	d807      	bhi.n	8007834 <_printf_i+0x28>
 8007824:	2f62      	cmp	r7, #98	; 0x62
 8007826:	d80a      	bhi.n	800783e <_printf_i+0x32>
 8007828:	2f00      	cmp	r7, #0
 800782a:	f000 80d8 	beq.w	80079de <_printf_i+0x1d2>
 800782e:	2f58      	cmp	r7, #88	; 0x58
 8007830:	f000 80a3 	beq.w	800797a <_printf_i+0x16e>
 8007834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800783c:	e03a      	b.n	80078b4 <_printf_i+0xa8>
 800783e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007842:	2b15      	cmp	r3, #21
 8007844:	d8f6      	bhi.n	8007834 <_printf_i+0x28>
 8007846:	a101      	add	r1, pc, #4	; (adr r1, 800784c <_printf_i+0x40>)
 8007848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800784c:	080078a5 	.word	0x080078a5
 8007850:	080078b9 	.word	0x080078b9
 8007854:	08007835 	.word	0x08007835
 8007858:	08007835 	.word	0x08007835
 800785c:	08007835 	.word	0x08007835
 8007860:	08007835 	.word	0x08007835
 8007864:	080078b9 	.word	0x080078b9
 8007868:	08007835 	.word	0x08007835
 800786c:	08007835 	.word	0x08007835
 8007870:	08007835 	.word	0x08007835
 8007874:	08007835 	.word	0x08007835
 8007878:	080079c5 	.word	0x080079c5
 800787c:	080078e9 	.word	0x080078e9
 8007880:	080079a7 	.word	0x080079a7
 8007884:	08007835 	.word	0x08007835
 8007888:	08007835 	.word	0x08007835
 800788c:	080079e7 	.word	0x080079e7
 8007890:	08007835 	.word	0x08007835
 8007894:	080078e9 	.word	0x080078e9
 8007898:	08007835 	.word	0x08007835
 800789c:	08007835 	.word	0x08007835
 80078a0:	080079af 	.word	0x080079af
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	602a      	str	r2, [r5, #0]
 80078ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078b4:	2301      	movs	r3, #1
 80078b6:	e0a3      	b.n	8007a00 <_printf_i+0x1f4>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	6829      	ldr	r1, [r5, #0]
 80078bc:	0606      	lsls	r6, r0, #24
 80078be:	f101 0304 	add.w	r3, r1, #4
 80078c2:	d50a      	bpl.n	80078da <_printf_i+0xce>
 80078c4:	680e      	ldr	r6, [r1, #0]
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	da03      	bge.n	80078d4 <_printf_i+0xc8>
 80078cc:	232d      	movs	r3, #45	; 0x2d
 80078ce:	4276      	negs	r6, r6
 80078d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d4:	485e      	ldr	r0, [pc, #376]	; (8007a50 <_printf_i+0x244>)
 80078d6:	230a      	movs	r3, #10
 80078d8:	e019      	b.n	800790e <_printf_i+0x102>
 80078da:	680e      	ldr	r6, [r1, #0]
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078e2:	bf18      	it	ne
 80078e4:	b236      	sxthne	r6, r6
 80078e6:	e7ef      	b.n	80078c8 <_printf_i+0xbc>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	6820      	ldr	r0, [r4, #0]
 80078ec:	1d19      	adds	r1, r3, #4
 80078ee:	6029      	str	r1, [r5, #0]
 80078f0:	0601      	lsls	r1, r0, #24
 80078f2:	d501      	bpl.n	80078f8 <_printf_i+0xec>
 80078f4:	681e      	ldr	r6, [r3, #0]
 80078f6:	e002      	b.n	80078fe <_printf_i+0xf2>
 80078f8:	0646      	lsls	r6, r0, #25
 80078fa:	d5fb      	bpl.n	80078f4 <_printf_i+0xe8>
 80078fc:	881e      	ldrh	r6, [r3, #0]
 80078fe:	4854      	ldr	r0, [pc, #336]	; (8007a50 <_printf_i+0x244>)
 8007900:	2f6f      	cmp	r7, #111	; 0x6f
 8007902:	bf0c      	ite	eq
 8007904:	2308      	moveq	r3, #8
 8007906:	230a      	movne	r3, #10
 8007908:	2100      	movs	r1, #0
 800790a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800790e:	6865      	ldr	r5, [r4, #4]
 8007910:	60a5      	str	r5, [r4, #8]
 8007912:	2d00      	cmp	r5, #0
 8007914:	bfa2      	ittt	ge
 8007916:	6821      	ldrge	r1, [r4, #0]
 8007918:	f021 0104 	bicge.w	r1, r1, #4
 800791c:	6021      	strge	r1, [r4, #0]
 800791e:	b90e      	cbnz	r6, 8007924 <_printf_i+0x118>
 8007920:	2d00      	cmp	r5, #0
 8007922:	d04d      	beq.n	80079c0 <_printf_i+0x1b4>
 8007924:	4615      	mov	r5, r2
 8007926:	fbb6 f1f3 	udiv	r1, r6, r3
 800792a:	fb03 6711 	mls	r7, r3, r1, r6
 800792e:	5dc7      	ldrb	r7, [r0, r7]
 8007930:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007934:	4637      	mov	r7, r6
 8007936:	42bb      	cmp	r3, r7
 8007938:	460e      	mov	r6, r1
 800793a:	d9f4      	bls.n	8007926 <_printf_i+0x11a>
 800793c:	2b08      	cmp	r3, #8
 800793e:	d10b      	bne.n	8007958 <_printf_i+0x14c>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	07de      	lsls	r6, r3, #31
 8007944:	d508      	bpl.n	8007958 <_printf_i+0x14c>
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	6861      	ldr	r1, [r4, #4]
 800794a:	4299      	cmp	r1, r3
 800794c:	bfde      	ittt	le
 800794e:	2330      	movle	r3, #48	; 0x30
 8007950:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007954:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007958:	1b52      	subs	r2, r2, r5
 800795a:	6122      	str	r2, [r4, #16]
 800795c:	f8cd a000 	str.w	sl, [sp]
 8007960:	464b      	mov	r3, r9
 8007962:	aa03      	add	r2, sp, #12
 8007964:	4621      	mov	r1, r4
 8007966:	4640      	mov	r0, r8
 8007968:	f7ff fee2 	bl	8007730 <_printf_common>
 800796c:	3001      	adds	r0, #1
 800796e:	d14c      	bne.n	8007a0a <_printf_i+0x1fe>
 8007970:	f04f 30ff 	mov.w	r0, #4294967295
 8007974:	b004      	add	sp, #16
 8007976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797a:	4835      	ldr	r0, [pc, #212]	; (8007a50 <_printf_i+0x244>)
 800797c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007980:	6829      	ldr	r1, [r5, #0]
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	f851 6b04 	ldr.w	r6, [r1], #4
 8007988:	6029      	str	r1, [r5, #0]
 800798a:	061d      	lsls	r5, r3, #24
 800798c:	d514      	bpl.n	80079b8 <_printf_i+0x1ac>
 800798e:	07df      	lsls	r7, r3, #31
 8007990:	bf44      	itt	mi
 8007992:	f043 0320 	orrmi.w	r3, r3, #32
 8007996:	6023      	strmi	r3, [r4, #0]
 8007998:	b91e      	cbnz	r6, 80079a2 <_printf_i+0x196>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	f023 0320 	bic.w	r3, r3, #32
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	2310      	movs	r3, #16
 80079a4:	e7b0      	b.n	8007908 <_printf_i+0xfc>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	f043 0320 	orr.w	r3, r3, #32
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	2378      	movs	r3, #120	; 0x78
 80079b0:	4828      	ldr	r0, [pc, #160]	; (8007a54 <_printf_i+0x248>)
 80079b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079b6:	e7e3      	b.n	8007980 <_printf_i+0x174>
 80079b8:	0659      	lsls	r1, r3, #25
 80079ba:	bf48      	it	mi
 80079bc:	b2b6      	uxthmi	r6, r6
 80079be:	e7e6      	b.n	800798e <_printf_i+0x182>
 80079c0:	4615      	mov	r5, r2
 80079c2:	e7bb      	b.n	800793c <_printf_i+0x130>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	6826      	ldr	r6, [r4, #0]
 80079c8:	6961      	ldr	r1, [r4, #20]
 80079ca:	1d18      	adds	r0, r3, #4
 80079cc:	6028      	str	r0, [r5, #0]
 80079ce:	0635      	lsls	r5, r6, #24
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	d501      	bpl.n	80079d8 <_printf_i+0x1cc>
 80079d4:	6019      	str	r1, [r3, #0]
 80079d6:	e002      	b.n	80079de <_printf_i+0x1d2>
 80079d8:	0670      	lsls	r0, r6, #25
 80079da:	d5fb      	bpl.n	80079d4 <_printf_i+0x1c8>
 80079dc:	8019      	strh	r1, [r3, #0]
 80079de:	2300      	movs	r3, #0
 80079e0:	6123      	str	r3, [r4, #16]
 80079e2:	4615      	mov	r5, r2
 80079e4:	e7ba      	b.n	800795c <_printf_i+0x150>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	1d1a      	adds	r2, r3, #4
 80079ea:	602a      	str	r2, [r5, #0]
 80079ec:	681d      	ldr	r5, [r3, #0]
 80079ee:	6862      	ldr	r2, [r4, #4]
 80079f0:	2100      	movs	r1, #0
 80079f2:	4628      	mov	r0, r5
 80079f4:	f7f8 fc14 	bl	8000220 <memchr>
 80079f8:	b108      	cbz	r0, 80079fe <_printf_i+0x1f2>
 80079fa:	1b40      	subs	r0, r0, r5
 80079fc:	6060      	str	r0, [r4, #4]
 80079fe:	6863      	ldr	r3, [r4, #4]
 8007a00:	6123      	str	r3, [r4, #16]
 8007a02:	2300      	movs	r3, #0
 8007a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a08:	e7a8      	b.n	800795c <_printf_i+0x150>
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	462a      	mov	r2, r5
 8007a0e:	4649      	mov	r1, r9
 8007a10:	4640      	mov	r0, r8
 8007a12:	47d0      	blx	sl
 8007a14:	3001      	adds	r0, #1
 8007a16:	d0ab      	beq.n	8007970 <_printf_i+0x164>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	079b      	lsls	r3, r3, #30
 8007a1c:	d413      	bmi.n	8007a46 <_printf_i+0x23a>
 8007a1e:	68e0      	ldr	r0, [r4, #12]
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	4298      	cmp	r0, r3
 8007a24:	bfb8      	it	lt
 8007a26:	4618      	movlt	r0, r3
 8007a28:	e7a4      	b.n	8007974 <_printf_i+0x168>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4640      	mov	r0, r8
 8007a32:	47d0      	blx	sl
 8007a34:	3001      	adds	r0, #1
 8007a36:	d09b      	beq.n	8007970 <_printf_i+0x164>
 8007a38:	3501      	adds	r5, #1
 8007a3a:	68e3      	ldr	r3, [r4, #12]
 8007a3c:	9903      	ldr	r1, [sp, #12]
 8007a3e:	1a5b      	subs	r3, r3, r1
 8007a40:	42ab      	cmp	r3, r5
 8007a42:	dcf2      	bgt.n	8007a2a <_printf_i+0x21e>
 8007a44:	e7eb      	b.n	8007a1e <_printf_i+0x212>
 8007a46:	2500      	movs	r5, #0
 8007a48:	f104 0619 	add.w	r6, r4, #25
 8007a4c:	e7f5      	b.n	8007a3a <_printf_i+0x22e>
 8007a4e:	bf00      	nop
 8007a50:	08007f16 	.word	0x08007f16
 8007a54:	08007f27 	.word	0x08007f27

08007a58 <_putc_r>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	460d      	mov	r5, r1
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	4606      	mov	r6, r0
 8007a60:	b118      	cbz	r0, 8007a6a <_putc_r+0x12>
 8007a62:	6983      	ldr	r3, [r0, #24]
 8007a64:	b90b      	cbnz	r3, 8007a6a <_putc_r+0x12>
 8007a66:	f7fe feb3 	bl	80067d0 <__sinit>
 8007a6a:	4b1c      	ldr	r3, [pc, #112]	; (8007adc <_putc_r+0x84>)
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	d124      	bne.n	8007aba <_putc_r+0x62>
 8007a70:	6874      	ldr	r4, [r6, #4]
 8007a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a74:	07d8      	lsls	r0, r3, #31
 8007a76:	d405      	bmi.n	8007a84 <_putc_r+0x2c>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	0599      	lsls	r1, r3, #22
 8007a7c:	d402      	bmi.n	8007a84 <_putc_r+0x2c>
 8007a7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a80:	f7fe ff69 	bl	8006956 <__retarget_lock_acquire_recursive>
 8007a84:	68a3      	ldr	r3, [r4, #8]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	60a3      	str	r3, [r4, #8]
 8007a8c:	da05      	bge.n	8007a9a <_putc_r+0x42>
 8007a8e:	69a2      	ldr	r2, [r4, #24]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	db1c      	blt.n	8007ace <_putc_r+0x76>
 8007a94:	b2eb      	uxtb	r3, r5
 8007a96:	2b0a      	cmp	r3, #10
 8007a98:	d019      	beq.n	8007ace <_putc_r+0x76>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	701d      	strb	r5, [r3, #0]
 8007aa2:	b2ed      	uxtb	r5, r5
 8007aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aa6:	07da      	lsls	r2, r3, #31
 8007aa8:	d405      	bmi.n	8007ab6 <_putc_r+0x5e>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	059b      	lsls	r3, r3, #22
 8007aae:	d402      	bmi.n	8007ab6 <_putc_r+0x5e>
 8007ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ab2:	f7fe ff51 	bl	8006958 <__retarget_lock_release_recursive>
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	bd70      	pop	{r4, r5, r6, pc}
 8007aba:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <_putc_r+0x88>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d101      	bne.n	8007ac4 <_putc_r+0x6c>
 8007ac0:	68b4      	ldr	r4, [r6, #8]
 8007ac2:	e7d6      	b.n	8007a72 <_putc_r+0x1a>
 8007ac4:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <_putc_r+0x8c>)
 8007ac6:	429c      	cmp	r4, r3
 8007ac8:	bf08      	it	eq
 8007aca:	68f4      	ldreq	r4, [r6, #12]
 8007acc:	e7d1      	b.n	8007a72 <_putc_r+0x1a>
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7ff fa26 	bl	8006f24 <__swbuf_r>
 8007ad8:	4605      	mov	r5, r0
 8007ada:	e7e3      	b.n	8007aa4 <_putc_r+0x4c>
 8007adc:	08007d10 	.word	0x08007d10
 8007ae0:	08007d30 	.word	0x08007d30
 8007ae4:	08007cf0 	.word	0x08007cf0

08007ae8 <_read_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d07      	ldr	r5, [pc, #28]	; (8007b08 <_read_r+0x20>)
 8007aec:	4604      	mov	r4, r0
 8007aee:	4608      	mov	r0, r1
 8007af0:	4611      	mov	r1, r2
 8007af2:	2200      	movs	r2, #0
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f7f9 f9a4 	bl	8000e44 <_read>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_read_r+0x1e>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_read_r+0x1e>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	20002d24 	.word	0x20002d24

08007b0c <abort>:
 8007b0c:	b508      	push	{r3, lr}
 8007b0e:	2006      	movs	r0, #6
 8007b10:	f000 f84e 	bl	8007bb0 <raise>
 8007b14:	2001      	movs	r0, #1
 8007b16:	f7f9 f98b 	bl	8000e30 <_exit>
	...

08007b1c <_fstat_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d07      	ldr	r5, [pc, #28]	; (8007b3c <_fstat_r+0x20>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	f7f9 f9d0 	bl	8000ece <_fstat>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	d102      	bne.n	8007b38 <_fstat_r+0x1c>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	b103      	cbz	r3, 8007b38 <_fstat_r+0x1c>
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20002d24 	.word	0x20002d24

08007b40 <_isatty_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d06      	ldr	r5, [pc, #24]	; (8007b5c <_isatty_r+0x1c>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	f7f9 f9cf 	bl	8000eee <_isatty>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_isatty_r+0x1a>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_isatty_r+0x1a>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	20002d24 	.word	0x20002d24

08007b60 <_raise_r>:
 8007b60:	291f      	cmp	r1, #31
 8007b62:	b538      	push	{r3, r4, r5, lr}
 8007b64:	4604      	mov	r4, r0
 8007b66:	460d      	mov	r5, r1
 8007b68:	d904      	bls.n	8007b74 <_raise_r+0x14>
 8007b6a:	2316      	movs	r3, #22
 8007b6c:	6003      	str	r3, [r0, #0]
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b76:	b112      	cbz	r2, 8007b7e <_raise_r+0x1e>
 8007b78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b7c:	b94b      	cbnz	r3, 8007b92 <_raise_r+0x32>
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 f830 	bl	8007be4 <_getpid_r>
 8007b84:	462a      	mov	r2, r5
 8007b86:	4601      	mov	r1, r0
 8007b88:	4620      	mov	r0, r4
 8007b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b8e:	f000 b817 	b.w	8007bc0 <_kill_r>
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d00a      	beq.n	8007bac <_raise_r+0x4c>
 8007b96:	1c59      	adds	r1, r3, #1
 8007b98:	d103      	bne.n	8007ba2 <_raise_r+0x42>
 8007b9a:	2316      	movs	r3, #22
 8007b9c:	6003      	str	r3, [r0, #0]
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	e7e7      	b.n	8007b72 <_raise_r+0x12>
 8007ba2:	2400      	movs	r4, #0
 8007ba4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ba8:	4628      	mov	r0, r5
 8007baa:	4798      	blx	r3
 8007bac:	2000      	movs	r0, #0
 8007bae:	e7e0      	b.n	8007b72 <_raise_r+0x12>

08007bb0 <raise>:
 8007bb0:	4b02      	ldr	r3, [pc, #8]	; (8007bbc <raise+0xc>)
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	f7ff bfd3 	b.w	8007b60 <_raise_r>
 8007bba:	bf00      	nop
 8007bbc:	20000020 	.word	0x20000020

08007bc0 <_kill_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4d07      	ldr	r5, [pc, #28]	; (8007be0 <_kill_r+0x20>)
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	4608      	mov	r0, r1
 8007bca:	4611      	mov	r1, r2
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	f7f9 f91f 	bl	8000e10 <_kill>
 8007bd2:	1c43      	adds	r3, r0, #1
 8007bd4:	d102      	bne.n	8007bdc <_kill_r+0x1c>
 8007bd6:	682b      	ldr	r3, [r5, #0]
 8007bd8:	b103      	cbz	r3, 8007bdc <_kill_r+0x1c>
 8007bda:	6023      	str	r3, [r4, #0]
 8007bdc:	bd38      	pop	{r3, r4, r5, pc}
 8007bde:	bf00      	nop
 8007be0:	20002d24 	.word	0x20002d24

08007be4 <_getpid_r>:
 8007be4:	f7f9 b90c 	b.w	8000e00 <_getpid>

08007be8 <_init>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	bf00      	nop
 8007bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bee:	bc08      	pop	{r3}
 8007bf0:	469e      	mov	lr, r3
 8007bf2:	4770      	bx	lr

08007bf4 <_fini>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	bf00      	nop
 8007bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfa:	bc08      	pop	{r3}
 8007bfc:	469e      	mov	lr, r3
 8007bfe:	4770      	bx	lr


G47_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a40  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08007c20  08007c20  00017c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f58  08007f58  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f60  08007f60  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ca4  20000084  08007fec  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d28  08007fec  00022d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014225  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003227  00000000  00000000  000342d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00037500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  000384c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fd5  00000000  00000000  00039338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013af5  00000000  00000000  0006130d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3737  00000000  00000000  00074e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  0016858c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007c08 	.word	0x08007c08

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08007c08 	.word	0x08007c08

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, LedTask_func, osPriorityNormal, 0, 256);
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_FREERTOS_Init+0x70>)
 80005cc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	682b      	ldr	r3, [r5, #0]
 80005d8:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80005da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 fdca 	bl	800517a <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_FREERTOS_Init+0x74>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, UartTask_Func, osPriorityIdle, 0, 1500);
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_FREERTOS_Init+0x78>)
 80005ee:	f107 0418 	add.w	r4, r7, #24
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	6023      	str	r3, [r4, #0]
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fdb9 	bl	800517a <osThreadCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <MX_FREERTOS_Init+0x7c>)
 800060c:	6013      	str	r3, [r2, #0]

  /* definition and creation of echoTask */
  osThreadDef(echoTask, echoTask_Func, osPriorityIdle, 0, 256);
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_FREERTOS_Init+0x80>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	682b      	ldr	r3, [r5, #0]
 800061a:	6023      	str	r3, [r4, #0]
  echoTaskHandle = osThreadCreate(osThread(echoTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fdaa 	bl	800517a <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <MX_FREERTOS_Init+0x84>)
 800062a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800062c:	bf00      	nop
 800062e:	3740      	adds	r7, #64	; 0x40
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08007c40 	.word	0x08007c40
 8000638:	20000110 	.word	0x20000110
 800063c:	08007c54 	.word	0x08007c54
 8000640:	20000114 	.word	0x20000114
 8000644:	08007c68 	.word	0x08007c68
 8000648:	20000118 	.word	0x20000118

0800064c <LedTask_func>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LedTask_func */
void LedTask_func(void const * argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask_func */
	/* Infinite loop */
	for (;;)
	{
		if (ledEvent == 1)
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <LedTask_func+0xbc>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d105      	bne.n	8000668 <LedTask_func+0x1c>
		{
			ledEvent = 0;
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <LedTask_func+0xbc>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
			led_state = STATE_LED_ON_INITIAL;
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <LedTask_func+0xc0>)
 8000664:	2202      	movs	r2, #2
 8000666:	701a      	strb	r2, [r3, #0]
		}
		switch (led_state)
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <LedTask_func+0xc0>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	2b03      	cmp	r3, #3
 8000670:	d845      	bhi.n	80006fe <LedTask_func+0xb2>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <LedTask_func+0x2c>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	080006d3 	.word	0x080006d3
 800067c:	08000689 	.word	0x08000689
 8000680:	080006ad 	.word	0x080006ad
 8000684:	0800069b 	.word	0x0800069b
		{
		case STATE_LED_ON_INITIAL:
			ledCounter = ledOnTime;
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <LedTask_func+0xc4>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <LedTask_func+0xc8>)
 8000690:	601a      	str	r2, [r3, #0]
			led_state = STATE_LED_ON_ONGOING;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <LedTask_func+0xc0>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
			break;
 8000698:	e031      	b.n	80006fe <LedTask_func+0xb2>
		case STATE_LED_OFF_INITIAL:
			ledCounter = ledOffTime;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <LedTask_func+0xcc>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <LedTask_func+0xc8>)
 80006a2:	601a      	str	r2, [r3, #0]
			led_state = STATE_LED_OFF_ONGOING;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <LedTask_func+0xc0>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	701a      	strb	r2, [r3, #0]
			break;
 80006aa:	e028      	b.n	80006fe <LedTask_func+0xb2>
		case STATE_LED_OFF_ONGOING:
			ledCounter--;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <LedTask_func+0xc8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <LedTask_func+0xc8>)
 80006b4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f001 fa57 	bl	8001b70 <HAL_GPIO_WritePin>
			if (ledCounter == 0)
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <LedTask_func+0xc8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d116      	bne.n	80006f8 <LedTask_func+0xac>
			{
				led_state = STATE_LED_ON_INITIAL;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <LedTask_func+0xc0>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006d0:	e012      	b.n	80006f8 <LedTask_func+0xac>
		case STATE_LED_ON_ONGOING:
			ledCounter--;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <LedTask_func+0xc8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <LedTask_func+0xc8>)
 80006da:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f001 fa44 	bl	8001b70 <HAL_GPIO_WritePin>
			if (ledCounter == 0)
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <LedTask_func+0xc8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d105      	bne.n	80006fc <LedTask_func+0xb0>
			{
				led_state = STATE_LED_OFF_INITIAL;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <LedTask_func+0xc0>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006f6:	e001      	b.n	80006fc <LedTask_func+0xb0>
			break;
 80006f8:	bf00      	nop
 80006fa:	e000      	b.n	80006fe <LedTask_func+0xb2>
			break;
 80006fc:	bf00      	nop
		}
		osDelay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f004 fd62 	bl	80051c8 <osDelay>
		if (ledEvent == 1)
 8000704:	e7a6      	b.n	8000654 <LedTask_func+0x8>
 8000706:	bf00      	nop
 8000708:	200000a0 	.word	0x200000a0
 800070c:	2000000c 	.word	0x2000000c
 8000710:	20000002 	.word	0x20000002
 8000714:	200000a4 	.word	0x200000a4
 8000718:	20000004 	.word	0x20000004

0800071c <UartTask_Func>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UartTask_Func */
void UartTask_Func(void const * argument)
{
 800071c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000720:	b089      	sub	sp, #36	; 0x24
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartTask_Func */
	/* Infinite loop */
	for (;;)
	{
		if(debugIT) {
 8000726:	4b7b      	ldr	r3, [pc, #492]	; (8000914 <UartTask_Func+0x1f8>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d007      	beq.n	800073e <UartTask_Func+0x22>
			debugIT = 0;
 800072e:	4b79      	ldr	r3, [pc, #484]	; (8000914 <UartTask_Func+0x1f8>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 8000734:	2232      	movs	r2, #50	; 0x32
 8000736:	4978      	ldr	r1, [pc, #480]	; (8000918 <UartTask_Func+0x1fc>)
 8000738:	4878      	ldr	r0, [pc, #480]	; (800091c <UartTask_Func+0x200>)
 800073a:	f002 fbad 	bl	8002e98 <HAL_UART_Receive_IT>
		}
		if(debugPrint) {
 800073e:	4b78      	ldr	r3, [pc, #480]	; (8000920 <UartTask_Func+0x204>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d005      	beq.n	8000752 <UartTask_Func+0x36>
			debugPrint = 0;
 8000746:	4b76      	ldr	r3, [pc, #472]	; (8000920 <UartTask_Func+0x204>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
			printf("test\n");
 800074c:	4875      	ldr	r0, [pc, #468]	; (8000924 <UartTask_Func+0x208>)
 800074e:	f006 fa35 	bl	8006bbc <puts>
		}
		if (uartItFlag)
 8000752:	4b75      	ldr	r3, [pc, #468]	; (8000928 <UartTask_Func+0x20c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d031      	beq.n	80007be <UartTask_Func+0xa2>
		{
			uartItFlag = 0;
 800075a:	4b73      	ldr	r3, [pc, #460]	; (8000928 <UartTask_Func+0x20c>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
			start = cntr;
 8000760:	4b72      	ldr	r3, [pc, #456]	; (800092c <UartTask_Func+0x210>)
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	4b72      	ldr	r3, [pc, #456]	; (8000930 <UartTask_Func+0x214>)
 8000766:	701a      	strb	r2, [r3, #0]
			for (int i = start; i < start + BUFFER_LENGTH; i++)
 8000768:	4b71      	ldr	r3, [pc, #452]	; (8000930 <UartTask_Func+0x214>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	e020      	b.n	80007b2 <UartTask_Func+0x96>
			{
				rcvd_data = buffer[i];
 8000770:	4a69      	ldr	r2, [pc, #420]	; (8000918 <UartTask_Func+0x1fc>)
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	4413      	add	r3, r2
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	4b6e      	ldr	r3, [pc, #440]	; (8000934 <UartTask_Func+0x218>)
 800077a:	701a      	strb	r2, [r3, #0]
				if (rcvd_data == 10)
 800077c:	4b6d      	ldr	r3, [pc, #436]	; (8000934 <UartTask_Func+0x218>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d10d      	bne.n	80007a0 <UartTask_Func+0x84>
				{
					rcvd_complete = 1;
 8000784:	4b6c      	ldr	r3, [pc, #432]	; (8000938 <UartTask_Func+0x21c>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
					end = cntr;
 800078a:	4b68      	ldr	r3, [pc, #416]	; (800092c <UartTask_Func+0x210>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	4b6b      	ldr	r3, [pc, #428]	; (800093c <UartTask_Func+0x220>)
 8000790:	701a      	strb	r2, [r3, #0]
					cntr++;
 8000792:	4b66      	ldr	r3, [pc, #408]	; (800092c <UartTask_Func+0x210>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b64      	ldr	r3, [pc, #400]	; (800092c <UartTask_Func+0x210>)
 800079c:	701a      	strb	r2, [r3, #0]
					break;
 800079e:	e00e      	b.n	80007be <UartTask_Func+0xa2>
				}
				cntr++;
 80007a0:	4b62      	ldr	r3, [pc, #392]	; (800092c <UartTask_Func+0x210>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b60      	ldr	r3, [pc, #384]	; (800092c <UartTask_Func+0x210>)
 80007aa:	701a      	strb	r2, [r3, #0]
			for (int i = start; i < start + BUFFER_LENGTH; i++)
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	3301      	adds	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4b5f      	ldr	r3, [pc, #380]	; (8000930 <UartTask_Func+0x214>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	3331      	adds	r3, #49	; 0x31
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	ddd8      	ble.n	8000770 <UartTask_Func+0x54>
			}
		}

		if (rcvd_complete)
 80007be:	4b5e      	ldr	r3, [pc, #376]	; (8000938 <UartTask_Func+0x21c>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f000 80a1 	beq.w	800090a <UartTask_Func+0x1ee>
		{
 80007c8:	466b      	mov	r3, sp
 80007ca:	461e      	mov	r6, r3
			uint8_t length = end - start;
 80007cc:	4b5b      	ldr	r3, [pc, #364]	; (800093c <UartTask_Func+0x220>)
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b57      	ldr	r3, [pc, #348]	; (8000930 <UartTask_Func+0x214>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	75fb      	strb	r3, [r7, #23]
			uint8_t tmpData[length];
 80007d8:	7df9      	ldrb	r1, [r7, #23]
 80007da:	460b      	mov	r3, r1
 80007dc:	3b01      	subs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	b2cb      	uxtb	r3, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	461c      	mov	r4, r3
 80007e6:	4615      	mov	r5, r2
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	00eb      	lsls	r3, r5, #3
 80007f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007f6:	00e2      	lsls	r2, r4, #3
 80007f8:	b2cb      	uxtb	r3, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	4698      	mov	r8, r3
 80007fe:	4691      	mov	r9, r2
 8000800:	f04f 0200 	mov.w	r2, #0
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800080c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000810:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000814:	460b      	mov	r3, r1
 8000816:	3307      	adds	r3, #7
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	ebad 0d03 	sub.w	sp, sp, r3
 8000820:	466b      	mov	r3, sp
 8000822:	3300      	adds	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < length; i++)
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e01a      	b.n	8000862 <UartTask_Func+0x146>
			{
				tmpData[i] = buffer[start + i];
 800082c:	4b40      	ldr	r3, [pc, #256]	; (8000930 <UartTask_Func+0x214>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	4413      	add	r3, r2
 8000836:	4a38      	ldr	r2, [pc, #224]	; (8000918 <UartTask_Func+0x1fc>)
 8000838:	5cd1      	ldrb	r1, [r2, r3]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	4413      	add	r3, r2
 8000840:	460a      	mov	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
				echoData[i] = buffer[start + i];
 8000844:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <UartTask_Func+0x214>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	4413      	add	r3, r2
 800084e:	4a32      	ldr	r2, [pc, #200]	; (8000918 <UartTask_Func+0x1fc>)
 8000850:	5cd1      	ldrb	r1, [r2, r3]
 8000852:	4a3b      	ldr	r2, [pc, #236]	; (8000940 <UartTask_Func+0x224>)
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	4413      	add	r3, r2
 8000858:	460a      	mov	r2, r1
 800085a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < length; i++)
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	3301      	adds	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	429a      	cmp	r2, r3
 8000868:	dbe0      	blt.n	800082c <UartTask_Func+0x110>
			}
			echoLength = length;
 800086a:	4a36      	ldr	r2, [pc, #216]	; (8000944 <UartTask_Func+0x228>)
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	7013      	strb	r3, [r2, #0]
			rcvd_complete = 0;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <UartTask_Func+0x21c>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			strOp(&tmpData);
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f000 f9fc 	bl	8000c74 <strOp>
			echoFlag = 1;
 800087c:	4b32      	ldr	r3, [pc, #200]	; (8000948 <UartTask_Func+0x22c>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]

			switch (current_operation)
 8000882:	4b32      	ldr	r3, [pc, #200]	; (800094c <UartTask_Func+0x230>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2bff      	cmp	r3, #255	; 0xff
 8000888:	d016      	beq.n	80008b8 <UartTask_Func+0x19c>
 800088a:	2bff      	cmp	r3, #255	; 0xff
 800088c:	dc37      	bgt.n	80008fe <UartTask_Func+0x1e2>
 800088e:	2b05      	cmp	r3, #5
 8000890:	d025      	beq.n	80008de <UartTask_Func+0x1c2>
 8000892:	2b05      	cmp	r3, #5
 8000894:	dc33      	bgt.n	80008fe <UartTask_Func+0x1e2>
 8000896:	2b03      	cmp	r3, #3
 8000898:	d012      	beq.n	80008c0 <UartTask_Func+0x1a4>
 800089a:	2b04      	cmp	r3, #4
 800089c:	d12f      	bne.n	80008fe <UartTask_Func+0x1e2>
			{
			case OP_STOP:
				if (!taskStopped)
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <UartTask_Func+0x234>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d12f      	bne.n	8000906 <UartTask_Func+0x1ea>
				{
					vTaskSuspend(echoTaskHandle);
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <UartTask_Func+0x238>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fed2 	bl	8005654 <vTaskSuspend>
					taskStopped = 1;
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <UartTask_Func+0x234>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80008b6:	e026      	b.n	8000906 <UartTask_Func+0x1ea>
			case OP_INVALID:
				printf("E_N_OK\n");
 80008b8:	4827      	ldr	r0, [pc, #156]	; (8000958 <UartTask_Func+0x23c>)
 80008ba:	f006 f97f 	bl	8006bbc <puts>
				break;
 80008be:	e023      	b.n	8000908 <UartTask_Func+0x1ec>
			case OP_START:
				if (taskStopped)
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <UartTask_Func+0x234>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d007      	beq.n	80008d8 <UartTask_Func+0x1bc>
				{
					vTaskResume(echoTaskHandle);
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <UartTask_Func+0x238>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f004 ff85 	bl	80057dc <vTaskResume>
					taskStopped = 0;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <UartTask_Func+0x234>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
				}
				echoFlag = 1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <UartTask_Func+0x22c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
			case OP_BAUD:
				echoFlag = 1;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <UartTask_Func+0x22c>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Abort_IT(&hlpuart1);
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <UartTask_Func+0x200>)
 80008e6:	f002 fb2d 	bl	8002f44 <HAL_UART_Abort_IT>
				HAL_UART_DeInit(&hlpuart1);
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <UartTask_Func+0x200>)
 80008ec:	f002 fa02 	bl	8002cf4 <HAL_UART_DeInit>
				MX_LPUART1_UART_Init();
 80008f0:	f000 fb74 	bl	8000fdc <MX_LPUART1_UART_Init>
				HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 80008f4:	2232      	movs	r2, #50	; 0x32
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <UartTask_Func+0x1fc>)
 80008f8:	4808      	ldr	r0, [pc, #32]	; (800091c <UartTask_Func+0x200>)
 80008fa:	f002 facd 	bl	8002e98 <HAL_UART_Receive_IT>
			default:
				echoFlag = 1;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <UartTask_Func+0x22c>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
				break;
 8000904:	e000      	b.n	8000908 <UartTask_Func+0x1ec>
				break;
 8000906:	bf00      	nop
 8000908:	46b5      	mov	sp, r6
			}
		}
		osDelay(1);
 800090a:	2001      	movs	r0, #1
 800090c:	f004 fc5c 	bl	80051c8 <osDelay>
		if(debugIT) {
 8000910:	e709      	b.n	8000726 <UartTask_Func+0xa>
 8000912:	bf00      	nop
 8000914:	2000010d 	.word	0x2000010d
 8000918:	20000120 	.word	0x20000120
 800091c:	20000330 	.word	0x20000330
 8000920:	2000010e 	.word	0x2000010e
 8000924:	08007c7c 	.word	0x08007c7c
 8000928:	2000011c 	.word	0x2000011c
 800092c:	20000321 	.word	0x20000321
 8000930:	20000323 	.word	0x20000323
 8000934:	20000320 	.word	0x20000320
 8000938:	20000322 	.word	0x20000322
 800093c:	20000324 	.word	0x20000324
 8000940:	200000a8 	.word	0x200000a8
 8000944:	2000010c 	.word	0x2000010c
 8000948:	2000010f 	.word	0x2000010f
 800094c:	20000000 	.word	0x20000000
 8000950:	2000000d 	.word	0x2000000d
 8000954:	20000118 	.word	0x20000118
 8000958:	08007c84 	.word	0x08007c84

0800095c <echoTask_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_echoTask_Func */
void echoTask_Func(void const * argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN echoTask_Func */
  /* Infinite loop */
  for(;;)
  {
	if(echoFlag) {
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <echoTask_Func+0x38>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00e      	beq.n	800098a <echoTask_Func+0x2e>
		echoFlag = 0;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <echoTask_Func+0x38>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1,echoData, echoLength, 0xFFFF);
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <echoTask_Func+0x3c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800097c:	4907      	ldr	r1, [pc, #28]	; (800099c <echoTask_Func+0x40>)
 800097e:	4808      	ldr	r0, [pc, #32]	; (80009a0 <echoTask_Func+0x44>)
 8000980:	f002 f9f4 	bl	8002d6c <HAL_UART_Transmit>
		printf("\n");
 8000984:	200a      	movs	r0, #10
 8000986:	f006 f895 	bl	8006ab4 <putchar>
	}
    osDelay(20);
 800098a:	2014      	movs	r0, #20
 800098c:	f004 fc1c 	bl	80051c8 <osDelay>
	if(echoFlag) {
 8000990:	e7e8      	b.n	8000964 <echoTask_Func+0x8>
 8000992:	bf00      	nop
 8000994:	2000010f 	.word	0x2000010f
 8000998:	2000010c 	.word	0x2000010c
 800099c:	200000a8 	.word	0x200000a8
 80009a0:	20000330 	.word	0x20000330

080009a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0320 	and.w	r3, r3, #32
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_GPIO_Init+0xd4>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_GPIO_Init+0xd4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <MX_GPIO_Init+0xd4>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_GPIO_Init+0xd4>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f001 f8a5 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <MX_GPIO_Init+0xd8>)
 8000a3e:	f000 fe33 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a42:	2320      	movs	r3, #32
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fe24 	bl	80016a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2105      	movs	r1, #5
 8000a64:	2028      	movs	r0, #40	; 0x28
 8000a66:	f000 fd1c 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a6a:	2028      	movs	r0, #40	; 0x28
 8000a6c:	f000 fd33 	bl	80014d6 <HAL_NVIC_EnableIRQ>

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000800 	.word	0x48000800

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a84:	f000 fb9d 	bl	80011c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a88:	f000 f814 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f7ff ff8a 	bl	80009a4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000a90:	f000 faa4 	bl	8000fdc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 8000a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a98:	4904      	ldr	r1, [pc, #16]	; (8000aac <main+0x2c>)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <main+0x30>)
 8000a9c:	f002 f9fc 	bl	8002e98 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000aa0:	f7ff fd90 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000aa4:	f004 fb62 	bl	800516c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x28>
 8000aaa:	bf00      	nop
 8000aac:	20000120 	.word	0x20000120
 8000ab0:	20000330 	.word	0x20000330

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	2238      	movs	r2, #56	; 0x38
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 ff59 	bl	800697a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f001 f886 	bl	8001be8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aee:	2302      	movs	r3, #2
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000af2:	2304      	movs	r3, #4
 8000af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000af6:	2355      	movs	r3, #85	; 0x55
 8000af8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0318 	add.w	r3, r7, #24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 f920 	bl	8001d50 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b16:	f000 f843 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2104      	movs	r1, #4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fc24 	bl	8002380 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b3e:	f000 f82f 	bl	8000ba0 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	; 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 8000b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b58:	4905      	ldr	r1, [pc, #20]	; (8000b70 <HAL_UART_RxCpltCallback+0x24>)
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <HAL_UART_RxCpltCallback+0x28>)
 8000b5c:	f002 f99c 	bl	8002e98 <HAL_UART_Receive_IT>
	  uartItFlag = 1;
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_UART_RxCpltCallback+0x2c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000120 	.word	0x20000120
 8000b74:	20000330 	.word	0x20000330
 8000b78:	2000011c 	.word	0x2000011c

08000b7c <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000b84:	1d39      	adds	r1, r7, #4
 8000b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <__io_putchar+0x20>)
 8000b8e:	f002 f8ed 	bl	8002d6c <HAL_UART_Transmit>

  return ch;
 8000b92:	687b      	ldr	r3, [r7, #4]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000330 	.word	0x20000330

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_MspInit+0x50>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_MspInit+0x50>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x50>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x50>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_MspInit+0x50>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x50>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	210f      	movs	r1, #15
 8000be6:	f06f 0001 	mvn.w	r0, #1
 8000bea:	f000 fc5a 	bl	80014a2 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bee:	f001 f89f 	bl	8001d30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 fb1a 	bl	8001268 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c34:	f005 f900 	bl	8005e38 <xTaskGetSchedulerState>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d001      	beq.n	8000c42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c3e:	f005 fb3b 	bl	80062b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c4e:	f000 ffa7 	bl	8001ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <LPUART1_IRQHandler+0x14>)
 8000c5e:	f002 faa7 	bl	80031b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */
  uartItFlag=1;
 8000c62:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <LPUART1_IRQHandler+0x18>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000330 	.word	0x20000330
 8000c70:	2000011c 	.word	0x2000011c

08000c74 <strOp>:
    printf("%s\n", data);
    return;
}

void strOp(uint8_t *input)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    previous_operation = current_operation;
 8000c7c:	4b5a      	ldr	r3, [pc, #360]	; (8000de8 <strOp+0x174>)
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b5a      	ldr	r3, [pc, #360]	; (8000dec <strOp+0x178>)
 8000c82:	701a      	strb	r2, [r3, #0]
    int i = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
    char *p = strtok(input, "=");
 8000c88:	4959      	ldr	r1, [pc, #356]	; (8000df0 <strOp+0x17c>)
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f006 f872 	bl	8006d74 <strtok>
 8000c90:	6138      	str	r0, [r7, #16]
    char *array[2];

    while (p != NULL)
 8000c92:	e00d      	b.n	8000cb0 <strOp+0x3c>
    {
        array[i++] = p;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	617a      	str	r2, [r7, #20]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	3318      	adds	r3, #24
 8000c9e:	443b      	add	r3, r7
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	f843 2c10 	str.w	r2, [r3, #-16]
        p = strtok(NULL, "/");
 8000ca6:	4953      	ldr	r1, [pc, #332]	; (8000df4 <strOp+0x180>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f006 f863 	bl	8006d74 <strtok>
 8000cae:	6138      	str	r0, [r7, #16]
    while (p != NULL)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1ee      	bne.n	8000c94 <strOp+0x20>
    }

    if (strstr(array[0], "ledon"))
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	494f      	ldr	r1, [pc, #316]	; (8000df8 <strOp+0x184>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f006 f843 	bl	8006d46 <strstr>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d013      	beq.n	8000cee <strOp+0x7a>
    {
        if (previous_operation != OP_STOP)
 8000cc6:	4b49      	ldr	r3, [pc, #292]	; (8000dec <strOp+0x178>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	f000 8087 	beq.w	8000dde <strOp+0x16a>
        {
            current_operation = OP_LED_ON;
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <strOp+0x174>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
            ledEvent = 1;
 8000cd6:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <strOp+0x188>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
            ledOnTime = atoi(array[1]);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f005 fd24 	bl	800672c <atoi>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b45      	ldr	r3, [pc, #276]	; (8000e00 <strOp+0x18c>)
 8000cea:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        current_operation = OP_INVALID;
    }
    return;
 8000cec:	e077      	b.n	8000dde <strOp+0x16a>
    else if (strstr(array[0], "ledoff"))
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	4944      	ldr	r1, [pc, #272]	; (8000e04 <strOp+0x190>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f006 f827 	bl	8006d46 <strstr>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d012      	beq.n	8000d24 <strOp+0xb0>
        if (previous_operation != OP_STOP)
 8000cfe:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <strOp+0x178>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d06b      	beq.n	8000dde <strOp+0x16a>
            current_operation = OP_LED_OFF;
 8000d06:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <strOp+0x174>)
 8000d08:	2202      	movs	r2, #2
 8000d0a:	701a      	strb	r2, [r3, #0]
            ledEvent = 1;
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <strOp+0x188>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
            ledOffTime = atoi(array[1]);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f005 fd09 	bl	800672c <atoi>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <strOp+0x194>)
 8000d20:	801a      	strh	r2, [r3, #0]
    return;
 8000d22:	e05c      	b.n	8000dde <strOp+0x16a>
    else if (strstr(array[0], "start"))
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4939      	ldr	r1, [pc, #228]	; (8000e0c <strOp+0x198>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 f80c 	bl	8006d46 <strstr>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00e      	beq.n	8000d52 <strOp+0xde>
        current_operation = OP_START;
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <strOp+0x174>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <strOp+0x188>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
        ledOnTime = ledOnTime_previous;
 8000d40:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <strOp+0x19c>)
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <strOp+0x18c>)
 8000d46:	801a      	strh	r2, [r3, #0]
        ledOffTime = ledOffTime_previous;
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <strOp+0x1a0>)
 8000d4a:	881a      	ldrh	r2, [r3, #0]
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <strOp+0x194>)
 8000d4e:	801a      	strh	r2, [r3, #0]
    return;
 8000d50:	e045      	b.n	8000dde <strOp+0x16a>
    else if (strstr(array[0], "stop"))
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	4930      	ldr	r1, [pc, #192]	; (8000e18 <strOp+0x1a4>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f005 fff5 	bl	8006d46 <strstr>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d016      	beq.n	8000d90 <strOp+0x11c>
        current_operation = OP_STOP;
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <strOp+0x174>)
 8000d64:	2204      	movs	r2, #4
 8000d66:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <strOp+0x188>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
        ledOffTime_previous = ledOffTime;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <strOp+0x194>)
 8000d70:	881a      	ldrh	r2, [r3, #0]
 8000d72:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <strOp+0x1a0>)
 8000d74:	801a      	strh	r2, [r3, #0]
        ledOnTime_previous = ledOnTime;
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <strOp+0x18c>)
 8000d78:	881a      	ldrh	r2, [r3, #0]
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <strOp+0x19c>)
 8000d7c:	801a      	strh	r2, [r3, #0]
        ledOnTime = 1000;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <strOp+0x18c>)
 8000d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d84:	801a      	strh	r2, [r3, #0]
        ledOffTime = 1000;
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <strOp+0x194>)
 8000d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d8c:	801a      	strh	r2, [r3, #0]
    return;
 8000d8e:	e026      	b.n	8000dde <strOp+0x16a>
    else if (strstr(array[0], "baud"))
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4922      	ldr	r1, [pc, #136]	; (8000e1c <strOp+0x1a8>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f005 ffd6 	bl	8006d46 <strstr>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00e      	beq.n	8000dbe <strOp+0x14a>
        current_operation = OP_BAUD;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <strOp+0x174>)
 8000da2:	2205      	movs	r2, #5
 8000da4:	701a      	strb	r2, [r3, #0]
        uartEvent = 1;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <strOp+0x1ac>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
        baud = atoi(array[1]);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fcbc 	bl	800672c <atoi>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <strOp+0x1b0>)
 8000dba:	601a      	str	r2, [r3, #0]
    return;
 8000dbc:	e00f      	b.n	8000dde <strOp+0x16a>
    else if (strstr(array[0], "wordlength"))
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	4919      	ldr	r1, [pc, #100]	; (8000e28 <strOp+0x1b4>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f005 ffbf 	bl	8006d46 <strstr>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <strOp+0x162>
        current_operation = OP_WORLD_LENGTH; ///  TODO(VahitL)
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <strOp+0x174>)
 8000dd0:	2206      	movs	r2, #6
 8000dd2:	701a      	strb	r2, [r3, #0]
    return;
 8000dd4:	e003      	b.n	8000dde <strOp+0x16a>
        current_operation = OP_INVALID;
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <strOp+0x174>)
 8000dd8:	22ff      	movs	r2, #255	; 0xff
 8000dda:	701a      	strb	r2, [r3, #0]
    return;
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
}
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000000 	.word	0x20000000
 8000dec:	2000032a 	.word	0x2000032a
 8000df0:	08007c8c 	.word	0x08007c8c
 8000df4:	08007c90 	.word	0x08007c90
 8000df8:	08007c94 	.word	0x08007c94
 8000dfc:	200000a0 	.word	0x200000a0
 8000e00:	20000002 	.word	0x20000002
 8000e04:	08007c9c 	.word	0x08007c9c
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	08007ca4 	.word	0x08007ca4
 8000e10:	20000326 	.word	0x20000326
 8000e14:	20000328 	.word	0x20000328
 8000e18:	08007cac 	.word	0x08007cac
 8000e1c:	08007cb4 	.word	0x08007cb4
 8000e20:	200000a1 	.word	0x200000a1
 8000e24:	20000008 	.word	0x20000008
 8000e28:	08007cbc 	.word	0x08007cbc

08000e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return 1;
 8000e30:	2301      	movs	r3, #1
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_kill>:

int _kill(int pid, int sig)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e46:	f005 fc75 	bl	8006734 <__errno>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2216      	movs	r2, #22
 8000e4e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_exit>:

void _exit (int status)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ffe7 	bl	8000e3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e6e:	e7fe      	b.n	8000e6e <_exit+0x12>

08000e70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	e00a      	b.n	8000e98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e82:	f3af 8000 	nop.w
 8000e86:	4601      	mov	r1, r0
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	60ba      	str	r2, [r7, #8]
 8000e8e:	b2ca      	uxtb	r2, r1
 8000e90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dbf0      	blt.n	8000e82 <_read+0x12>
  }

  return len;
 8000ea0:	687b      	ldr	r3, [r7, #4]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e009      	b.n	8000ed0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe59 	bl	8000b7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf1      	blt.n	8000ebc <_write+0x12>
  }
  return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_close>:

int _close(int file)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_isatty>:

int _isatty(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <_sbrk+0x5c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <_sbrk+0x60>)
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <_sbrk+0x64>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <_sbrk+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f7c:	f005 fbda 	bl	8006734 <__errno>
 8000f80:	4603      	mov	r3, r0
 8000f82:	220c      	movs	r2, #12
 8000f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e009      	b.n	8000fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <_sbrk+0x64>)
 8000f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20020000 	.word	0x20020000
 8000fac:	00000400 	.word	0x00000400
 8000fb0:	2000032c 	.word	0x2000032c
 8000fb4:	20002d28 	.word	0x20002d28

08000fb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8000fe2:	4a22      	ldr	r2, [pc, #136]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800101e:	4812      	ldr	r0, [pc, #72]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8001020:	f001 fe18 	bl	8002c54 <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800102a:	f7ff fdb9 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8001032:	f003 ffb8 	bl	8004fa6 <HAL_UARTEx_SetTxFifoThreshold>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800103c:	f7ff fdb0 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8001044:	f003 ffed 	bl	8005022 <HAL_UARTEx_SetRxFifoThreshold>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800104e:	f7ff fda7 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_LPUART1_UART_Init+0x8c>)
 8001054:	f003 ff6e 	bl	8004f34 <HAL_UARTEx_DisableFifoMode>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800105e:	f7ff fd9f 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000330 	.word	0x20000330
 800106c:	40008000 	.word	0x40008000

08001070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b09e      	sub	sp, #120	; 0x78
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	2254      	movs	r2, #84	; 0x54
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f005 fc72 	bl	800697a <memset>
  if(uartHandle->Instance==LPUART1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a23      	ldr	r2, [pc, #140]	; (8001128 <HAL_UART_MspInit+0xb8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d13e      	bne.n	800111e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010a0:	2320      	movs	r3, #32
 80010a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fb83 	bl	80027b8 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010b8:	f7ff fd72 	bl	8000ba0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_UART_MspInit+0xbc>)
 80010be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_UART_MspInit+0xbc>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_UART_MspInit+0xbc>)
 80010ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_MspInit+0xbc>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <HAL_UART_MspInit+0xbc>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_UART_MspInit+0xbc>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80010ec:	230c      	movs	r3, #12
 80010ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010fc:	230c      	movs	r3, #12
 80010fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 facd 	bl	80016a8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2105      	movs	r1, #5
 8001112:	205b      	movs	r0, #91	; 0x5b
 8001114:	f000 f9c5 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001118:	205b      	movs	r0, #91	; 0x5b
 800111a:	f000 f9dc 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3778      	adds	r7, #120	; 0x78
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40008000 	.word	0x40008000
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_UART_MspDeInit+0x38>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10d      	bne.n	800115e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_UART_MspDeInit+0x3c>)
 8001144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_UART_MspDeInit+0x3c>)
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, LPUART1_TX_Pin|LPUART1_RX_Pin);
 800114e:	210c      	movs	r1, #12
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f000 fc2a 	bl	80019ac <HAL_GPIO_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8001158:	205b      	movs	r0, #91	; 0x5b
 800115a:	f000 f9ca 	bl	80014f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40008000 	.word	0x40008000
 800116c:	40021000 	.word	0x40021000

08001170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001172:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <LoopForever+0x6>)
  ldr r1, =_edata
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <LoopForever+0xe>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800118c:	4c0b      	ldr	r4, [pc, #44]	; (80011bc <LoopForever+0x16>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800119a:	f7ff ff0d 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119e:	f005 fbc5 	bl	800692c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a2:	f7ff fc6d 	bl	8000a80 <main>

080011a6 <LoopForever>:

LoopForever:
    b LoopForever
 80011a6:	e7fe      	b.n	80011a6 <LoopForever>
  ldr   r0, =_estack
 80011a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80011b4:	08007f68 	.word	0x08007f68
  ldr r2, =_sbss
 80011b8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80011bc:	20002d28 	.word	0x20002d28

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>

080011c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f95d 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d2:	200f      	movs	r0, #15
 80011d4:	f000 f80e 	bl	80011f4 <HAL_InitTick>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e001      	b.n	80011e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011e4:	f7ff fce2 	bl	8000bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e8:	79fb      	ldrb	r3, [r7, #7]

}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_InitTick+0x68>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d022      	beq.n	800124e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_InitTick+0x6c>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_InitTick+0x68>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001214:	fbb1 f3f3 	udiv	r3, r1, r3
 8001218:	fbb2 f3f3 	udiv	r3, r2, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f976 	bl	800150e <HAL_SYSTICK_Config>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10f      	bne.n	8001248 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	d809      	bhi.n	8001242 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122e:	2200      	movs	r2, #0
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	f000 f934 	bl	80014a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_InitTick+0x70>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e007      	b.n	8001252 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	e004      	b.n	8001252 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e001      	b.n	8001252 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000018 	.word	0x20000018
 8001260:	20000010 	.word	0x20000010
 8001264:	20000014 	.word	0x20000014

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4413      	add	r3, r2
 8001276:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_IncTick+0x1c>)
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	200003c0 	.word	0x200003c0
 8001288:	20000018 	.word	0x20000018

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200003c0 	.word	0x200003c0

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db12      	blt.n	800137c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	490a      	ldr	r1, [pc, #40]	; (8001388 <__NVIC_DisableIRQ+0x44>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	3320      	adds	r3, #32
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001370:	f3bf 8f4f 	dsb	sy
}
 8001374:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001376:	f3bf 8f6f 	isb	sy
}
 800137a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff05 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff1c 	bl	80012ec <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff90 	bl	80013e0 <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5f 	bl	800138c <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff0f 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff1f 	bl	8001344 <__NVIC_DisableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ff96 	bl	8001448 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d005      	beq.n	800154a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2204      	movs	r2, #4
 8001542:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e037      	b.n	80015ba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 020e 	bic.w	r2, r2, #14
 8001558:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001568:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 021f 	and.w	r2, r3, #31
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2101      	movs	r1, #1
 8001588:	fa01 f202 	lsl.w	r2, r1, r2
 800158c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001596:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015b8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d00d      	beq.n	800160c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2204      	movs	r2, #4
 80015f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e047      	b.n	800169c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020e 	bic.w	r2, r2, #14
 800161a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001636:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f202 	lsl.w	r2, r1, r2
 800164e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001658:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00c      	beq.n	800167c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001670:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800167a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
    }
  }
  return status;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016b6:	e15a      	b.n	800196e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 814c 	beq.w	8001968 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d005      	beq.n	80016e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d130      	bne.n	800174a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800171e:	2201      	movs	r2, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	f003 0201 	and.w	r2, r3, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b03      	cmp	r3, #3
 8001754:	d017      	beq.n	8001786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d123      	bne.n	80017da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	6939      	ldr	r1, [r7, #16]
 80017d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0203 	and.w	r2, r3, #3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a6 	beq.w	8001968 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181c:	4b5b      	ldr	r3, [pc, #364]	; (800198c <HAL_GPIO_Init+0x2e4>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001820:	4a5a      	ldr	r2, [pc, #360]	; (800198c <HAL_GPIO_Init+0x2e4>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6613      	str	r3, [r2, #96]	; 0x60
 8001828:	4b58      	ldr	r3, [pc, #352]	; (800198c <HAL_GPIO_Init+0x2e4>)
 800182a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001834:	4a56      	ldr	r2, [pc, #344]	; (8001990 <HAL_GPIO_Init+0x2e8>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800185e:	d01f      	beq.n	80018a0 <HAL_GPIO_Init+0x1f8>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a4c      	ldr	r2, [pc, #304]	; (8001994 <HAL_GPIO_Init+0x2ec>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d019      	beq.n	800189c <HAL_GPIO_Init+0x1f4>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a4b      	ldr	r2, [pc, #300]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d013      	beq.n	8001898 <HAL_GPIO_Init+0x1f0>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a4a      	ldr	r2, [pc, #296]	; (800199c <HAL_GPIO_Init+0x2f4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00d      	beq.n	8001894 <HAL_GPIO_Init+0x1ec>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_GPIO_Init+0x2f8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d007      	beq.n	8001890 <HAL_GPIO_Init+0x1e8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_GPIO_Init+0x2fc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d101      	bne.n	800188c <HAL_GPIO_Init+0x1e4>
 8001888:	2305      	movs	r3, #5
 800188a:	e00a      	b.n	80018a2 <HAL_GPIO_Init+0x1fa>
 800188c:	2306      	movs	r3, #6
 800188e:	e008      	b.n	80018a2 <HAL_GPIO_Init+0x1fa>
 8001890:	2304      	movs	r3, #4
 8001892:	e006      	b.n	80018a2 <HAL_GPIO_Init+0x1fa>
 8001894:	2303      	movs	r3, #3
 8001896:	e004      	b.n	80018a2 <HAL_GPIO_Init+0x1fa>
 8001898:	2302      	movs	r3, #2
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x1fa>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_GPIO_Init+0x1fa>
 80018a0:	2300      	movs	r3, #0
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b2:	4937      	ldr	r1, [pc, #220]	; (8001990 <HAL_GPIO_Init+0x2e8>)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_GPIO_Init+0x300>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e4:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <HAL_GPIO_Init+0x300>)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x300>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001938:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <HAL_GPIO_Init+0x300>)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001962:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	f47f ae9d 	bne.w	80016b8 <HAL_GPIO_Init+0x10>
  }
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	48000400 	.word	0x48000400
 8001998:	48000800 	.word	0x48000800
 800199c:	48000c00 	.word	0x48000c00
 80019a0:	48001000 	.word	0x48001000
 80019a4:	48001400 	.word	0x48001400
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80019ba:	e0bd      	b.n	8001b38 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80019bc:	2201      	movs	r2, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80b0 	beq.w	8001b32 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80019d2:	4a60      	ldr	r2, [pc, #384]	; (8001b54 <HAL_GPIO_DeInit+0x1a8>)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019fa:	d01f      	beq.n	8001a3c <HAL_GPIO_DeInit+0x90>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_GPIO_DeInit+0x1ac>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d019      	beq.n	8001a38 <HAL_GPIO_DeInit+0x8c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <HAL_GPIO_DeInit+0x1b0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d013      	beq.n	8001a34 <HAL_GPIO_DeInit+0x88>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a54      	ldr	r2, [pc, #336]	; (8001b60 <HAL_GPIO_DeInit+0x1b4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00d      	beq.n	8001a30 <HAL_GPIO_DeInit+0x84>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a53      	ldr	r2, [pc, #332]	; (8001b64 <HAL_GPIO_DeInit+0x1b8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d007      	beq.n	8001a2c <HAL_GPIO_DeInit+0x80>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_GPIO_DeInit+0x1bc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_GPIO_DeInit+0x7c>
 8001a24:	2305      	movs	r3, #5
 8001a26:	e00a      	b.n	8001a3e <HAL_GPIO_DeInit+0x92>
 8001a28:	2306      	movs	r3, #6
 8001a2a:	e008      	b.n	8001a3e <HAL_GPIO_DeInit+0x92>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_DeInit+0x92>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_DeInit+0x92>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_DeInit+0x92>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_DeInit+0x92>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d132      	bne.n	8001ab4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_GPIO_DeInit+0x1c0>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4945      	ldr	r1, [pc, #276]	; (8001b6c <HAL_GPIO_DeInit+0x1c0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_GPIO_DeInit+0x1c0>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4941      	ldr	r1, [pc, #260]	; (8001b6c <HAL_GPIO_DeInit+0x1c0>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001a6a:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <HAL_GPIO_DeInit+0x1c0>)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	493e      	ldr	r1, [pc, #248]	; (8001b6c <HAL_GPIO_DeInit+0x1c0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001a78:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <HAL_GPIO_DeInit+0x1c0>)
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	493a      	ldr	r1, [pc, #232]	; (8001b6c <HAL_GPIO_DeInit+0x1c0>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001a96:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <HAL_GPIO_DeInit+0x1a8>)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	482b      	ldr	r0, [pc, #172]	; (8001b54 <HAL_GPIO_DeInit+0x1a8>)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	400a      	ands	r2, r1
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2103      	movs	r1, #3
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	08d2      	lsrs	r2, r2, #3
 8001ae8:	4019      	ands	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2103      	movs	r1, #3
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2103      	movs	r1, #3
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f af3b 	bne.w	80019bc <HAL_GPIO_DeInit+0x10>
  }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	48001000 	.word	0x48001000
 8001b68:	48001400 	.word	0x48001400
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f806 	bl	8001bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d141      	bne.n	8001c7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bf6:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c02:	d131      	bne.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c04:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c0a:	4a46      	ldr	r2, [pc, #280]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c14:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c24:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2232      	movs	r2, #50	; 0x32
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	0c9b      	lsrs	r3, r3, #18
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c3a:	e002      	b.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4e:	d102      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f2      	bne.n	8001c3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c56:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c62:	d158      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e057      	b.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c6e:	4a2d      	ldr	r2, [pc, #180]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c78:	e04d      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c80:	d141      	bne.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8e:	d131      	bne.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c96:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca8:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2232      	movs	r2, #50	; 0x32
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	0c9b      	lsrs	r3, r3, #18
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc6:	e002      	b.n	8001cce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cda:	d102      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f2      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d112      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e011      	b.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d04:	e007      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40007000 	.word	0x40007000
 8001d28:	20000010 	.word	0x20000010
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3e:	6093      	str	r3, [r2, #8]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40007000 	.word	0x40007000

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e306      	b.n	8002370 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d075      	beq.n	8001e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6e:	4b97      	ldr	r3, [pc, #604]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d78:	4b94      	ldr	r3, [pc, #592]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3e>
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_OscConfig+0x44>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d10b      	bne.n	8001dac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	4b8d      	ldr	r3, [pc, #564]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d05b      	beq.n	8001e58 <HAL_RCC_OscConfig+0x108>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d157      	bne.n	8001e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e2e1      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x74>
 8001db6:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a84      	ldr	r2, [pc, #528]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b7f      	ldr	r3, [pc, #508]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7e      	ldr	r2, [pc, #504]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b7c      	ldr	r3, [pc, #496]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a7b      	ldr	r2, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001de8:	4b78      	ldr	r3, [pc, #480]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a77      	ldr	r2, [pc, #476]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a74      	ldr	r2, [pc, #464]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fa40 	bl	800128c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fa3c 	bl	800128c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e2a6      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e22:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xc0>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fa2c 	bl	800128c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fa28 	bl	800128c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e292      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4a:	4b60      	ldr	r3, [pc, #384]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0xe8>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d075      	beq.n	8001f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e66:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e70:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0x136>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_OscConfig+0x13c>
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d11f      	bne.n	8001ecc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8c:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x154>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e265      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	061b      	lsls	r3, r3, #24
 8001eb2:	4946      	ldr	r1, [pc, #280]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001eb8:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <HAL_RCC_OscConfig+0x280>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f999 	bl	80011f4 <HAL_InitTick>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d043      	beq.n	8001f50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e251      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a3c      	ldr	r2, [pc, #240]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f9d4 	bl	800128c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff f9d0 	bl	800128c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e23a      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	061b      	lsls	r3, r3, #24
 8001f14:	492d      	ldr	r1, [pc, #180]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
 8001f1a:	e01a      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2a      	ldr	r2, [pc, #168]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff f9b0 	bl	800128c <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff f9ac 	bl	800128c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e216      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1e0>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d041      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7ff f989 	bl	800128c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7ff f985 	bl	800128c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1ef      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ef      	beq.n	8001f7e <HAL_RCC_OscConfig+0x22e>
 8001f9e:	e020      	b.n	8001fe2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7ff f96c 	bl	800128c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb6:	e00d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7ff f968 	bl	800128c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d906      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1d2      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd4:	4b8c      	ldr	r3, [pc, #560]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ea      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80a6 	beq.w	800213c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ff4:	4b84      	ldr	r3, [pc, #528]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_OscConfig+0x2b4>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x2b6>
 8002004:	2300      	movs	r3, #0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	4a7e      	ldr	r2, [pc, #504]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
 8002016:	4b7c      	ldr	r3, [pc, #496]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002022:	2301      	movs	r3, #1
 8002024:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	4b79      	ldr	r3, [pc, #484]	; (800220c <HAL_RCC_OscConfig+0x4bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d118      	bne.n	8002064 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002032:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x4bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a75      	ldr	r2, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x4bc>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203e:	f7ff f925 	bl	800128c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7ff f921 	bl	800128c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e18b      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002058:	4b6c      	ldr	r3, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x4bc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d108      	bne.n	800207e <HAL_RCC_OscConfig+0x32e>
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a65      	ldr	r2, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207c:	e024      	b.n	80020c8 <HAL_RCC_OscConfig+0x378>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d110      	bne.n	80020a8 <HAL_RCC_OscConfig+0x358>
 8002086:	4b60      	ldr	r3, [pc, #384]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	4a5e      	ldr	r2, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	4a5a      	ldr	r2, [pc, #360]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_OscConfig+0x378>
 80020a8:	4b57      	ldr	r3, [pc, #348]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a56      	ldr	r2, [pc, #344]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d016      	beq.n	80020fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7ff f8dc 	bl	800128c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7ff f8d8 	bl	800128c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e140      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ed      	beq.n	80020d8 <HAL_RCC_OscConfig+0x388>
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7ff f8c5 	bl	800128c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff f8c1 	bl	800128c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e129      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ed      	bne.n	8002106 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800212a:	7ffb      	ldrb	r3, [r7, #31]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b35      	ldr	r3, [pc, #212]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a34      	ldr	r2, [pc, #208]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d03c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01c      	beq.n	800218a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002156:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7ff f894 	bl	800128c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002168:	f7ff f890 	bl	800128c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0fa      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800217c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ef      	beq.n	8002168 <HAL_RCC_OscConfig+0x418>
 8002188:	e01b      	b.n	80021c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 800218c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7ff f877 	bl	800128c <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a2:	f7ff f873 	bl	800128c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0dd      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ef      	bne.n	80021a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80d1 	beq.w	800236e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	f000 808b 	beq.w	80022f0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d15e      	bne.n	80022a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_RCC_OscConfig+0x4b8>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7ff f84d 	bl	800128c <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	e00c      	b.n	8002210 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7ff f849 	bl	800128c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d905      	bls.n	8002210 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0b3      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ec      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221c:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4b56      	ldr	r3, [pc, #344]	; (800237c <HAL_RCC_OscConfig+0x62c>)
 8002222:	4013      	ands	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6a11      	ldr	r1, [r2, #32]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800222c:	3a01      	subs	r2, #1
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002236:	0212      	lsls	r2, r2, #8
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800223e:	0852      	lsrs	r2, r2, #1
 8002240:	3a01      	subs	r2, #1
 8002242:	0552      	lsls	r2, r2, #21
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800224a:	0852      	lsrs	r2, r2, #1
 800224c:	3a01      	subs	r2, #1
 800224e:	0652      	lsls	r2, r2, #25
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002256:	06d2      	lsls	r2, r2, #27
 8002258:	430a      	orrs	r2, r1
 800225a:	4947      	ldr	r1, [pc, #284]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 800225c:	4313      	orrs	r3, r2
 800225e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002260:	4b45      	ldr	r3, [pc, #276]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a44      	ldr	r2, [pc, #272]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800226c:	4b42      	ldr	r3, [pc, #264]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a41      	ldr	r2, [pc, #260]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 8002272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002276:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff f808 	bl	800128c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7ff f804 	bl	800128c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e06e      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002292:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x530>
 800229e:	e066      	b.n	800236e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	4b35      	ldr	r3, [pc, #212]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a34      	ldr	r2, [pc, #208]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 80022a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022ac:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a31      	ldr	r2, [pc, #196]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 80022b2:	f023 0303 	bic.w	r3, r3, #3
 80022b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022b8:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a2e      	ldr	r2, [pc, #184]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 80022be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe ffe0 	bl	800128c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe ffdc 	bl	800128c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e046      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e2:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x580>
 80022ee:	e03e      	b.n	800236e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e039      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_RCC_OscConfig+0x628>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0203 	and.w	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	429a      	cmp	r2, r3
 800230e:	d12c      	bne.n	800236a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	3b01      	subs	r3, #1
 800231c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d123      	bne.n	800236a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d11b      	bne.n	800236a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d113      	bne.n	800236a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	085b      	lsrs	r3, r3, #1
 800234e:	3b01      	subs	r3, #1
 8002350:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d109      	bne.n	800236a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	3b01      	subs	r3, #1
 8002364:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	019f800c 	.word	0x019f800c

08002380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e11e      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b91      	ldr	r3, [pc, #580]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d910      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b8e      	ldr	r3, [pc, #568]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 020f 	bic.w	r2, r3, #15
 80023ae:	498c      	ldr	r1, [pc, #560]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b8a      	ldr	r3, [pc, #552]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e106      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d073      	beq.n	80024bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d129      	bne.n	8002430 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0f4      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023ec:	f000 f99e 	bl	800272c <RCC_GetSysClockFreqFromPLLSource>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4a7c      	ldr	r2, [pc, #496]	; (80025e8 <HAL_RCC_ClockConfig+0x268>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d93f      	bls.n	800247a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023fa:	4b7a      	ldr	r3, [pc, #488]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800240e:	2b00      	cmp	r3, #0
 8002410:	d033      	beq.n	800247a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d12f      	bne.n	800247a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800241a:	4b72      	ldr	r3, [pc, #456]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002422:	4a70      	ldr	r2, [pc, #448]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002428:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e024      	b.n	800247a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0c6      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002448:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0be      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002458:	f000 f8ce 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 800245c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4a61      	ldr	r2, [pc, #388]	; (80025e8 <HAL_RCC_ClockConfig+0x268>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d909      	bls.n	800247a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800246e:	4a5d      	ldr	r2, [pc, #372]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002474:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4957      	ldr	r1, [pc, #348]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248c:	f7fe fefe 	bl	800128c <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7fe fefa 	bl	800128c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e095      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d023      	beq.n	8002510 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a42      	ldr	r2, [pc, #264]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024ec:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024f4:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4936      	ldr	r1, [pc, #216]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
 800250e:	e008      	b.n	8002522 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	d105      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002516:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4a32      	ldr	r2, [pc, #200]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800251c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002520:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d21d      	bcs.n	800256c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 020f 	bic.w	r2, r3, #15
 8002538:	4929      	ldr	r1, [pc, #164]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002540:	f7fe fea4 	bl	800128c <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fea0 	bl	800128c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e03b      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d1ed      	bne.n	8002548 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4917      	ldr	r1, [pc, #92]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	490f      	ldr	r1, [pc, #60]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025aa:	f000 f825 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025ae:	4602      	mov	r2, r0
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	490c      	ldr	r1, [pc, #48]	; (80025ec <HAL_RCC_ClockConfig+0x26c>)
 80025bc:	5ccb      	ldrb	r3, [r1, r3]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x270>)
 80025c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fe10 	bl	80011f4 <HAL_InitTick>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	04c4b400 	.word	0x04c4b400
 80025ec:	08007cd0 	.word	0x08007cd0
 80025f0:	20000010 	.word	0x20000010
 80025f4:	20000014 	.word	0x20000014

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025fe:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b04      	cmp	r3, #4
 8002608:	d102      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800260a:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e047      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d102      	bne.n	8002622 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800261c:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e03e      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d136      	bne.n	800269c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3301      	adds	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800264c:	4a1a      	ldr	r2, [pc, #104]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002656:	68d2      	ldr	r2, [r2, #12]
 8002658:	0a12      	lsrs	r2, r2, #8
 800265a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
      break;
 8002664:	e00c      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002670:	68d2      	ldr	r2, [r2, #12]
 8002672:	0a12      	lsrs	r2, r2, #8
 8002674:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	617b      	str	r3, [r7, #20]
      break;
 800267e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0e5b      	lsrs	r3, r3, #25
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	3301      	adds	r3, #1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e001      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026a0:	693b      	ldr	r3, [r7, #16]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	00f42400 	.word	0x00f42400
 80026b8:	016e3600 	.word	0x016e3600

080026bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000010 	.word	0x20000010

080026d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026d8:	f7ff fff0 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4904      	ldr	r1, [pc, #16]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08007ce0 	.word	0x08007ce0

08002700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002704:	f7ff ffda 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0adb      	lsrs	r3, r3, #11
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4904      	ldr	r1, [pc, #16]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	08007ce0 	.word	0x08007ce0

0800272c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002732:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3301      	adds	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d10c      	bne.n	800276a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800275a:	68d2      	ldr	r2, [r2, #12]
 800275c:	0a12      	lsrs	r2, r2, #8
 800275e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
    break;
 8002768:	e00c      	b.n	8002784 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002774:	68d2      	ldr	r2, [r2, #12]
 8002776:	0a12      	lsrs	r2, r2, #8
 8002778:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	617b      	str	r3, [r7, #20]
    break;
 8002782:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0e5b      	lsrs	r3, r3, #25
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	3301      	adds	r3, #1
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	fbb2 f3f3 	udiv	r3, r2, r3
 800279c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800279e:	687b      	ldr	r3, [r7, #4]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	40021000 	.word	0x40021000
 80027b0:	016e3600 	.word	0x016e3600
 80027b4:	00f42400 	.word	0x00f42400

080027b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c0:	2300      	movs	r3, #0
 80027c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c4:	2300      	movs	r3, #0
 80027c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8098 	beq.w	8002906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027da:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10d      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	4a3f      	ldr	r2, [pc, #252]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6593      	str	r3, [r2, #88]	; 0x58
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fe:	2301      	movs	r3, #1
 8002800:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002802:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a39      	ldr	r2, [pc, #228]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800280e:	f7fe fd3d 	bl	800128c <HAL_GetTick>
 8002812:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002814:	e009      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7fe fd39 	bl	800128c <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d902      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	74fb      	strb	r3, [r7, #19]
        break;
 8002828:	e005      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800282a:	4b30      	ldr	r3, [pc, #192]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ef      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d159      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002846:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01e      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	d019      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002862:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002874:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fcf9 	bl	800128c <HAL_GetTick>
 800289a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289c:	e00b      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7fe fcf5 	bl	800128c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d902      	bls.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	74fb      	strb	r3, [r7, #19]
            break;
 80028b4:	e006      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ec      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10b      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d8:	4903      	ldr	r1, [pc, #12]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028e0:	e008      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	74bb      	strb	r3, [r7, #18]
 80028e6:	e005      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f4:	7c7b      	ldrb	r3, [r7, #17]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	4ba7      	ldr	r3, [pc, #668]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	4aa6      	ldr	r2, [pc, #664]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002912:	4ba1      	ldr	r3, [pc, #644]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 0203 	bic.w	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	499d      	ldr	r1, [pc, #628]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002934:	4b98      	ldr	r3, [pc, #608]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 020c 	bic.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4995      	ldr	r1, [pc, #596]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002956:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	498c      	ldr	r1, [pc, #560]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002978:	4b87      	ldr	r3, [pc, #540]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	4984      	ldr	r1, [pc, #528]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800299a:	4b7f      	ldr	r3, [pc, #508]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	497b      	ldr	r1, [pc, #492]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029bc:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	4973      	ldr	r1, [pc, #460]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029de:	4b6e      	ldr	r3, [pc, #440]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	496a      	ldr	r1, [pc, #424]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a00:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4962      	ldr	r1, [pc, #392]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a22:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	4959      	ldr	r1, [pc, #356]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a44:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a4a:	f023 0203 	bic.w	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	4951      	ldr	r1, [pc, #324]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a66:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	4948      	ldr	r1, [pc, #288]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4940      	ldr	r1, [pc, #256]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a3a      	ldr	r2, [pc, #232]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ac0:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	4932      	ldr	r1, [pc, #200]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ade:	d105      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	4924      	ldr	r1, [pc, #144]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	4916      	ldr	r1, [pc, #88]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d019      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b86:	d109      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a02      	ldr	r2, [pc, #8]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b92:	60d3      	str	r3, [r2, #12]
 8002b94:	e002      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	4926      	ldr	r1, [pc, #152]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d015      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bee:	4918      	ldr	r1, [pc, #96]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	490a      	ldr	r1, [pc, #40]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c36:	d105      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c44:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000

08002c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e042      	b.n	8002cec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7fe f9f9 	bl	8001070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2224      	movs	r2, #36	; 0x24
 8002c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fdcc 	bl	8003834 <UART_SetConfig>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e022      	b.n	8002cec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f001 f8bc 	bl	8003e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f001 f943 	bl	8003f70 <UART_CheckIdleState>
 8002cea:	4603      	mov	r3, r0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e02e      	b.n	8002d64 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2224      	movs	r2, #36	; 0x24
 8002d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe f9fa 	bl	8001130 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	f040 8083 	bne.w	8002e8e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_UART_Transmit+0x28>
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e07b      	b.n	8002e90 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_UART_Transmit+0x3a>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e074      	b.n	8002e90 <HAL_UART_Transmit+0x124>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2221      	movs	r2, #33	; 0x21
 8002dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dbe:	f7fe fa65 	bl	800128c <HAL_GetTick>
 8002dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ddc:	d108      	bne.n	8002df0 <HAL_UART_Transmit+0x84>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d104      	bne.n	8002df0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e003      	b.n	8002df8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002e00:	e02c      	b.n	8002e5c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f001 f8fa 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e039      	b.n	8002e90 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	3302      	adds	r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	e007      	b.n	8002e4a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1cc      	bne.n	8002e02 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2140      	movs	r1, #64	; 0x40
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f001 f8c7 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e006      	b.n	8002e90 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d142      	bne.n	8002f36 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_UART_Receive_IT+0x24>
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e03b      	b.n	8002f38 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Receive_IT+0x36>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e034      	b.n	8002f38 <HAL_UART_Receive_IT+0xa0>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <HAL_UART_Receive_IT+0xa8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01f      	beq.n	8002f26 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d018      	beq.n	8002f26 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	613b      	str	r3, [r7, #16]
   return(result);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f16:	69f9      	ldr	r1, [r7, #28]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e6      	bne.n	8002ef4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f001 f933 	bl	8004198 <UART_Start_Receive_IT>
 8002f32:	4603      	mov	r3, r0
 8002f34:	e000      	b.n	8002f38 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40008000 	.word	0x40008000

08002f44 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b0a2      	sub	sp, #136	; 0x88
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f5a:	e853 3f00 	ldrex	r3, [r3]
 8002f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f62:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8002f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f76:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f7c:	e841 2300 	strex	r3, r2, [r1]
 8002f80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e4      	bne.n	8002f52 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f9a:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3308      	adds	r3, #8
 8002faa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fac:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e3      	bne.n	8002f88 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d118      	bne.n	8002ffa <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd8:	f023 0310 	bic.w	r3, r3, #16
 8002fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e6      	bne.n	8002fc8 <HAL_UART_Abort_IT+0x84>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00f      	beq.n	8003022 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d104      	bne.n	800301a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003014:	4a64      	ldr	r2, [pc, #400]	; (80031a8 <HAL_UART_Abort_IT+0x264>)
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
 8003018:	e003      	b.n	8003022 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800301e:	2200      	movs	r2, #0
 8003020:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00f      	beq.n	800304a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d104      	bne.n	8003042 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800303c:	4a5b      	ldr	r2, [pc, #364]	; (80031ac <HAL_UART_Abort_IT+0x268>)
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
 8003040:	e003      	b.n	800304a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003046:	2200      	movs	r2, #0
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d12d      	bne.n	80030b4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3308      	adds	r3, #8
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	623b      	str	r3, [r7, #32]
   return(result);
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800306e:	677b      	str	r3, [r7, #116]	; 0x74
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003078:	633a      	str	r2, [r7, #48]	; 0x30
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800307e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e5      	bne.n	8003058 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00f      	beq.n	80030b4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fa9d 	bl	80015d8 <HAL_DMA_Abort_IT>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a8:	2200      	movs	r2, #0
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
 80030ac:	e002      	b.n	80030b4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        abortcplt = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d130      	bne.n	8003124 <HAL_UART_Abort_IT+0x1e0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d8:	673b      	str	r3, [r7, #112]	; 0x70
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3308      	adds	r3, #8
 80030e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80030e2:	61fa      	str	r2, [r7, #28]
 80030e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	617b      	str	r3, [r7, #20]
   return(result);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e5      	bne.n	80030c2 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d012      	beq.n	8003124 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe fa68 	bl	80015d8 <HAL_DMA_Abort_IT>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003112:	2200      	movs	r2, #0
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8003116:	2301      	movs	r3, #1
 8003118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800311c:	e002      	b.n	8003124 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        abortcplt = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8003124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003128:	2b01      	cmp	r3, #1
 800312a:	d138      	bne.n	800319e <HAL_UART_Abort_IT+0x25a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->RxXferCount = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	220f      	movs	r2, #15
 8003156:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003160:	d107      	bne.n	8003172 <HAL_UART_Abort_IT+0x22e>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0210 	orr.w	r2, r2, #16
 8003170:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0208 	orr.w	r2, r2, #8
 8003180:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fb35 	bl	8003808 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3788      	adds	r7, #136	; 0x88
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	080044e5 	.word	0x080044e5
 80031ac:	0800456d 	.word	0x0800456d

080031b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b0ba      	sub	sp, #232	; 0xe8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031da:	f640 030f 	movw	r3, #2063	; 0x80f
 80031de:	4013      	ands	r3, r2
 80031e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11b      	bne.n	8003224 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 82d6 	beq.w	80037c6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
      }
      return;
 8003222:	e2d0      	b.n	80037c6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 811f 	beq.w	800346c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800322e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003232:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <HAL_UART_IRQHandler+0x2b0>)
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800323a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800323e:	4b89      	ldr	r3, [pc, #548]	; (8003464 <HAL_UART_IRQHandler+0x2b4>)
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8112 	beq.w	800346c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d011      	beq.n	8003278 <HAL_UART_IRQHandler+0xc8>
 8003254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d011      	beq.n	80032a8 <HAL_UART_IRQHandler+0xf8>
 8003284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00b      	beq.n	80032a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2202      	movs	r2, #2
 8003296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329e:	f043 0204 	orr.w	r2, r3, #4
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d011      	beq.n	80032d8 <HAL_UART_IRQHandler+0x128>
 80032b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2204      	movs	r2, #4
 80032c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80032f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80032f4:	4b5a      	ldr	r3, [pc, #360]	; (8003460 <HAL_UART_IRQHandler+0x2b0>)
 80032f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2208      	movs	r2, #8
 8003302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800330a:	f043 0208 	orr.w	r2, r3, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <HAL_UART_IRQHandler+0x196>
 8003320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 823c 	beq.w	80037ca <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d013      	beq.n	8003386 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800335e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d105      	bne.n	8003376 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800336a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d005      	beq.n	80033aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800339e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d04f      	beq.n	800344a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f001 f81e 	bl	80043ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d141      	bne.n	8003442 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3308      	adds	r3, #8
 80033c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1d9      	bne.n	80033be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d013      	beq.n	800343a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003416:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_UART_IRQHandler+0x2b8>)
 8003418:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe f8da 	bl	80015d8 <HAL_DMA_Abort_IT>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d017      	beq.n	800345a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003434:	4610      	mov	r0, r2
 8003436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003438:	e00f      	b.n	800345a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9da 	bl	80037f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	e00b      	b.n	800345a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f9d6 	bl	80037f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003448:	e007      	b.n	800345a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9d2 	bl	80037f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003458:	e1b7      	b.n	80037ca <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345a:	bf00      	nop
    return;
 800345c:	e1b5      	b.n	80037ca <HAL_UART_IRQHandler+0x61a>
 800345e:	bf00      	nop
 8003460:	10000001 	.word	0x10000001
 8003464:	04000120 	.word	0x04000120
 8003468:	080044b9 	.word	0x080044b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003470:	2b01      	cmp	r3, #1
 8003472:	f040 814a 	bne.w	800370a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8143 	beq.w	800370a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 813c 	beq.w	800370a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2210      	movs	r2, #16
 8003498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	f040 80b5 	bne.w	8003614 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8187 	beq.w	80037ce <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80034c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034ca:	429a      	cmp	r2, r3
 80034cc:	f080 817f 	bcs.w	80037ce <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 8086 	bne.w	80035f8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800351a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003522:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800352e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1da      	bne.n	80034ec <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3308      	adds	r3, #8
 8003556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800355a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800355e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800356c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e1      	bne.n	8003536 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3308      	adds	r3, #8
 8003578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3308      	adds	r3, #8
 8003592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003596:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800359c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e3      	bne.n	8003572 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c8:	f023 0310 	bic.w	r3, r3, #16
 80035cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035da:	65bb      	str	r3, [r7, #88]	; 0x58
 80035dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e4      	bne.n	80035b8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd ff97 	bl	8001526 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003604:	b29b      	uxth	r3, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	b29b      	uxth	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f905 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003612:	e0dc      	b.n	80037ce <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003620:	b29b      	uxth	r3, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80ce 	beq.w	80037d2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80c9 	beq.w	80037d2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800364e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003662:	647b      	str	r3, [r7, #68]	; 0x44
 8003664:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e4      	bne.n	8003640 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3308      	adds	r3, #8
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	623b      	str	r3, [r7, #32]
   return(result);
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3308      	adds	r3, #8
 800369a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800369e:	633a      	str	r2, [r7, #48]	; 0x30
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e1      	bne.n	8003676 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0310 	bic.w	r3, r3, #16
 80036da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	69b9      	ldr	r1, [r7, #24]
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	617b      	str	r3, [r7, #20]
   return(result);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e4      	bne.n	80036c6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f88a 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003708:	e063      	b.n	80037d2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800370a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00e      	beq.n	8003734 <HAL_UART_IRQHandler+0x584>
 8003716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800372a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f001 fbe3 	bl	8004ef8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003732:	e051      	b.n	80037d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373c:	2b00      	cmp	r3, #0
 800373e:	d014      	beq.n	800376a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	2b00      	cmp	r3, #0
 800374a:	d105      	bne.n	8003758 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800374c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375c:	2b00      	cmp	r3, #0
 800375e:	d03a      	beq.n	80037d6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
    }
    return;
 8003768:	e035      	b.n	80037d6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_UART_IRQHandler+0x5da>
 8003776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 ff31 	bl	80045ea <UART_EndTransmit_IT>
    return;
 8003788:	e026      	b.n	80037d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_UART_IRQHandler+0x5fa>
 8003796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f001 fbbc 	bl	8004f20 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037a8:	e016      	b.n	80037d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_UART_IRQHandler+0x628>
 80037b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	da0c      	bge.n	80037d8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f001 fba4 	bl	8004f0c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037c4:	e008      	b.n	80037d8 <HAL_UART_IRQHandler+0x628>
      return;
 80037c6:	bf00      	nop
 80037c8:	e006      	b.n	80037d8 <HAL_UART_IRQHandler+0x628>
    return;
 80037ca:	bf00      	nop
 80037cc:	e004      	b.n	80037d8 <HAL_UART_IRQHandler+0x628>
      return;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <HAL_UART_IRQHandler+0x628>
      return;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <HAL_UART_IRQHandler+0x628>
    return;
 80037d6:	bf00      	nop
  }
}
 80037d8:	37e8      	adds	r7, #232	; 0xe8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop

080037e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003838:	b08c      	sub	sp, #48	; 0x30
 800383a:	af00      	add	r7, sp, #0
 800383c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	431a      	orrs	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	431a      	orrs	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	4313      	orrs	r3, r2
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4baa      	ldr	r3, [pc, #680]	; (8003b0c <UART_SetConfig+0x2d8>)
 8003864:	4013      	ands	r3, r2
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800386c:	430b      	orrs	r3, r1
 800386e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a9f      	ldr	r2, [pc, #636]	; (8003b10 <UART_SetConfig+0x2dc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800389c:	4313      	orrs	r3, r2
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80038aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	f023 010f 	bic.w	r1, r3, #15
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a90      	ldr	r2, [pc, #576]	; (8003b14 <UART_SetConfig+0x2e0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d125      	bne.n	8003924 <UART_SetConfig+0xf0>
 80038d8:	4b8f      	ldr	r3, [pc, #572]	; (8003b18 <UART_SetConfig+0x2e4>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d81a      	bhi.n	800391c <UART_SetConfig+0xe8>
 80038e6:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <UART_SetConfig+0xb8>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	0800390d 	.word	0x0800390d
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003915 	.word	0x08003915
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003902:	e116      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003904:	2302      	movs	r3, #2
 8003906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800390a:	e112      	b.n	8003b32 <UART_SetConfig+0x2fe>
 800390c:	2304      	movs	r3, #4
 800390e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003912:	e10e      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003914:	2308      	movs	r3, #8
 8003916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800391a:	e10a      	b.n	8003b32 <UART_SetConfig+0x2fe>
 800391c:	2310      	movs	r3, #16
 800391e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003922:	e106      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7c      	ldr	r2, [pc, #496]	; (8003b1c <UART_SetConfig+0x2e8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d138      	bne.n	80039a0 <UART_SetConfig+0x16c>
 800392e:	4b7a      	ldr	r3, [pc, #488]	; (8003b18 <UART_SetConfig+0x2e4>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d82d      	bhi.n	8003998 <UART_SetConfig+0x164>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0x110>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003979 	.word	0x08003979
 8003948:	08003999 	.word	0x08003999
 800394c:	08003999 	.word	0x08003999
 8003950:	08003999 	.word	0x08003999
 8003954:	08003989 	.word	0x08003989
 8003958:	08003999 	.word	0x08003999
 800395c:	08003999 	.word	0x08003999
 8003960:	08003999 	.word	0x08003999
 8003964:	08003981 	.word	0x08003981
 8003968:	08003999 	.word	0x08003999
 800396c:	08003999 	.word	0x08003999
 8003970:	08003999 	.word	0x08003999
 8003974:	08003991 	.word	0x08003991
 8003978:	2300      	movs	r3, #0
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800397e:	e0d8      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003980:	2302      	movs	r3, #2
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003986:	e0d4      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003988:	2304      	movs	r3, #4
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800398e:	e0d0      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003990:	2308      	movs	r3, #8
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003996:	e0cc      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003998:	2310      	movs	r3, #16
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399e:	e0c8      	b.n	8003b32 <UART_SetConfig+0x2fe>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a5e      	ldr	r2, [pc, #376]	; (8003b20 <UART_SetConfig+0x2ec>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d125      	bne.n	80039f6 <UART_SetConfig+0x1c2>
 80039aa:	4b5b      	ldr	r3, [pc, #364]	; (8003b18 <UART_SetConfig+0x2e4>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039b4:	2b30      	cmp	r3, #48	; 0x30
 80039b6:	d016      	beq.n	80039e6 <UART_SetConfig+0x1b2>
 80039b8:	2b30      	cmp	r3, #48	; 0x30
 80039ba:	d818      	bhi.n	80039ee <UART_SetConfig+0x1ba>
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d00a      	beq.n	80039d6 <UART_SetConfig+0x1a2>
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d814      	bhi.n	80039ee <UART_SetConfig+0x1ba>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <UART_SetConfig+0x19a>
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d008      	beq.n	80039de <UART_SetConfig+0x1aa>
 80039cc:	e00f      	b.n	80039ee <UART_SetConfig+0x1ba>
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d4:	e0ad      	b.n	8003b32 <UART_SetConfig+0x2fe>
 80039d6:	2302      	movs	r3, #2
 80039d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039dc:	e0a9      	b.n	8003b32 <UART_SetConfig+0x2fe>
 80039de:	2304      	movs	r3, #4
 80039e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e4:	e0a5      	b.n	8003b32 <UART_SetConfig+0x2fe>
 80039e6:	2308      	movs	r3, #8
 80039e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ec:	e0a1      	b.n	8003b32 <UART_SetConfig+0x2fe>
 80039ee:	2310      	movs	r3, #16
 80039f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039f4:	e09d      	b.n	8003b32 <UART_SetConfig+0x2fe>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <UART_SetConfig+0x2f0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d125      	bne.n	8003a4c <UART_SetConfig+0x218>
 8003a00:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <UART_SetConfig+0x2e4>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a0c:	d016      	beq.n	8003a3c <UART_SetConfig+0x208>
 8003a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a10:	d818      	bhi.n	8003a44 <UART_SetConfig+0x210>
 8003a12:	2b80      	cmp	r3, #128	; 0x80
 8003a14:	d00a      	beq.n	8003a2c <UART_SetConfig+0x1f8>
 8003a16:	2b80      	cmp	r3, #128	; 0x80
 8003a18:	d814      	bhi.n	8003a44 <UART_SetConfig+0x210>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <UART_SetConfig+0x1f0>
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d008      	beq.n	8003a34 <UART_SetConfig+0x200>
 8003a22:	e00f      	b.n	8003a44 <UART_SetConfig+0x210>
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2a:	e082      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a32:	e07e      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003a34:	2304      	movs	r3, #4
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3a:	e07a      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a42:	e076      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003a44:	2310      	movs	r3, #16
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a4a:	e072      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a35      	ldr	r2, [pc, #212]	; (8003b28 <UART_SetConfig+0x2f4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d12a      	bne.n	8003aac <UART_SetConfig+0x278>
 8003a56:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <UART_SetConfig+0x2e4>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a64:	d01a      	beq.n	8003a9c <UART_SetConfig+0x268>
 8003a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a6a:	d81b      	bhi.n	8003aa4 <UART_SetConfig+0x270>
 8003a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a70:	d00c      	beq.n	8003a8c <UART_SetConfig+0x258>
 8003a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a76:	d815      	bhi.n	8003aa4 <UART_SetConfig+0x270>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <UART_SetConfig+0x250>
 8003a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a80:	d008      	beq.n	8003a94 <UART_SetConfig+0x260>
 8003a82:	e00f      	b.n	8003aa4 <UART_SetConfig+0x270>
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a8a:	e052      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a92:	e04e      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003a94:	2304      	movs	r3, #4
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a9a:	e04a      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa2:	e046      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aaa:	e042      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <UART_SetConfig+0x2dc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d13a      	bne.n	8003b2c <UART_SetConfig+0x2f8>
 8003ab6:	4b18      	ldr	r3, [pc, #96]	; (8003b18 <UART_SetConfig+0x2e4>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac4:	d01a      	beq.n	8003afc <UART_SetConfig+0x2c8>
 8003ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aca:	d81b      	bhi.n	8003b04 <UART_SetConfig+0x2d0>
 8003acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad0:	d00c      	beq.n	8003aec <UART_SetConfig+0x2b8>
 8003ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad6:	d815      	bhi.n	8003b04 <UART_SetConfig+0x2d0>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <UART_SetConfig+0x2b0>
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d008      	beq.n	8003af4 <UART_SetConfig+0x2c0>
 8003ae2:	e00f      	b.n	8003b04 <UART_SetConfig+0x2d0>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aea:	e022      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003aec:	2302      	movs	r3, #2
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af2:	e01e      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003af4:	2304      	movs	r3, #4
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003afa:	e01a      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003afc:	2308      	movs	r3, #8
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b02:	e016      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003b04:	2310      	movs	r3, #16
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b0a:	e012      	b.n	8003b32 <UART_SetConfig+0x2fe>
 8003b0c:	cfff69f3 	.word	0xcfff69f3
 8003b10:	40008000 	.word	0x40008000
 8003b14:	40013800 	.word	0x40013800
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40004400 	.word	0x40004400
 8003b20:	40004800 	.word	0x40004800
 8003b24:	40004c00 	.word	0x40004c00
 8003b28:	40005000 	.word	0x40005000
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4aae      	ldr	r2, [pc, #696]	; (8003df0 <UART_SetConfig+0x5bc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f040 8097 	bne.w	8003c6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d823      	bhi.n	8003b8e <UART_SetConfig+0x35a>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <UART_SetConfig+0x318>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b71 	.word	0x08003b71
 8003b50:	08003b8f 	.word	0x08003b8f
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003b8f 	.word	0x08003b8f
 8003b5c:	08003b7f 	.word	0x08003b7f
 8003b60:	08003b8f 	.word	0x08003b8f
 8003b64:	08003b8f 	.word	0x08003b8f
 8003b68:	08003b8f 	.word	0x08003b8f
 8003b6c:	08003b87 	.word	0x08003b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b70:	f7fe fdb0 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 8003b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b76:	e010      	b.n	8003b9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b78:	4b9e      	ldr	r3, [pc, #632]	; (8003df4 <UART_SetConfig+0x5c0>)
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b7c:	e00d      	b.n	8003b9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7e:	f7fe fd3b 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b84:	e009      	b.n	8003b9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b8c:	e005      	b.n	8003b9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8130 	beq.w	8003e02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	4a94      	ldr	r2, [pc, #592]	; (8003df8 <UART_SetConfig+0x5c4>)
 8003ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bac:	461a      	mov	r2, r3
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4413      	add	r3, r2
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d305      	bcc.n	8003bd2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d903      	bls.n	8003bda <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bd8:	e113      	b.n	8003e02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	2200      	movs	r2, #0
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	60fa      	str	r2, [r7, #12]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	4a84      	ldr	r2, [pc, #528]	; (8003df8 <UART_SetConfig+0x5c4>)
 8003be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2200      	movs	r2, #0
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bfc:	f7fc fb60 	bl	80002c0 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	020b      	lsls	r3, r1, #8
 8003c12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c16:	0202      	lsls	r2, r0, #8
 8003c18:	6979      	ldr	r1, [r7, #20]
 8003c1a:	6849      	ldr	r1, [r1, #4]
 8003c1c:	0849      	lsrs	r1, r1, #1
 8003c1e:	2000      	movs	r0, #0
 8003c20:	460c      	mov	r4, r1
 8003c22:	4605      	mov	r5, r0
 8003c24:	eb12 0804 	adds.w	r8, r2, r4
 8003c28:	eb43 0905 	adc.w	r9, r3, r5
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	469a      	mov	sl, r3
 8003c34:	4693      	mov	fp, r2
 8003c36:	4652      	mov	r2, sl
 8003c38:	465b      	mov	r3, fp
 8003c3a:	4640      	mov	r0, r8
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	f7fc fb3f 	bl	80002c0 <__aeabi_uldivmod>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4613      	mov	r3, r2
 8003c48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c50:	d308      	bcc.n	8003c64 <UART_SetConfig+0x430>
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c58:	d204      	bcs.n	8003c64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a3a      	ldr	r2, [r7, #32]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	e0ce      	b.n	8003e02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c6a:	e0ca      	b.n	8003e02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c74:	d166      	bne.n	8003d44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003c76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d827      	bhi.n	8003cce <UART_SetConfig+0x49a>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0x450>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003ca9 	.word	0x08003ca9
 8003c88:	08003cb1 	.word	0x08003cb1
 8003c8c:	08003cb9 	.word	0x08003cb9
 8003c90:	08003ccf 	.word	0x08003ccf
 8003c94:	08003cbf 	.word	0x08003cbf
 8003c98:	08003ccf 	.word	0x08003ccf
 8003c9c:	08003ccf 	.word	0x08003ccf
 8003ca0:	08003ccf 	.word	0x08003ccf
 8003ca4:	08003cc7 	.word	0x08003cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca8:	f7fe fd14 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cae:	e014      	b.n	8003cda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7fe fd26 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cb6:	e010      	b.n	8003cda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb8:	4b4e      	ldr	r3, [pc, #312]	; (8003df4 <UART_SetConfig+0x5c0>)
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cbc:	e00d      	b.n	8003cda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cbe:	f7fe fc9b 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cc4:	e009      	b.n	8003cda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ccc:	e005      	b.n	8003cda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8090 	beq.w	8003e02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	4a44      	ldr	r2, [pc, #272]	; (8003df8 <UART_SetConfig+0x5c4>)
 8003ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cec:	461a      	mov	r2, r3
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cf4:	005a      	lsls	r2, r3, #1
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	441a      	add	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	2b0f      	cmp	r3, #15
 8003d0c:	d916      	bls.n	8003d3c <UART_SetConfig+0x508>
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d14:	d212      	bcs.n	8003d3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f023 030f 	bic.w	r3, r3, #15
 8003d1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	8bfb      	ldrh	r3, [r7, #30]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	8bfa      	ldrh	r2, [r7, #30]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	e062      	b.n	8003e02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d42:	e05e      	b.n	8003e02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d828      	bhi.n	8003d9e <UART_SetConfig+0x56a>
 8003d4c:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <UART_SetConfig+0x520>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003d9f 	.word	0x08003d9f
 8003d64:	08003d8f 	.word	0x08003d8f
 8003d68:	08003d9f 	.word	0x08003d9f
 8003d6c:	08003d9f 	.word	0x08003d9f
 8003d70:	08003d9f 	.word	0x08003d9f
 8003d74:	08003d97 	.word	0x08003d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7fe fcac 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 8003d7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d7e:	e014      	b.n	8003daa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe fcbe 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
 8003d84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d86:	e010      	b.n	8003daa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d88:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <UART_SetConfig+0x5c0>)
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d8c:	e00d      	b.n	8003daa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8e:	f7fe fc33 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8003d92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d94:	e009      	b.n	8003daa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d9c:	e005      	b.n	8003daa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003da8:	bf00      	nop
    }

    if (pclk != 0U)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d028      	beq.n	8003e02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <UART_SetConfig+0x5c4>)
 8003db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	441a      	add	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	2b0f      	cmp	r3, #15
 8003dd8:	d910      	bls.n	8003dfc <UART_SetConfig+0x5c8>
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d20c      	bcs.n	8003dfc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	e009      	b.n	8003e02 <UART_SetConfig+0x5ce>
 8003dee:	bf00      	nop
 8003df0:	40008000 	.word	0x40008000
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	08007ce8 	.word	0x08007ce8
      }
      else
      {
        ret = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2200      	movs	r2, #0
 8003e16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003e1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3730      	adds	r7, #48	; 0x30
 8003e26:	46bd      	mov	sp, r7
 8003e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01a      	beq.n	8003f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f2a:	d10a      	bne.n	8003f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f80:	f7fd f984 	bl	800128c <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d10e      	bne.n	8003fb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f82f 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e025      	b.n	8003ffe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d10e      	bne.n	8003fde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f819 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e00f      	b.n	8003ffe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b09c      	sub	sp, #112	; 0x70
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4613      	mov	r3, r2
 8004014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004016:	e0a9      	b.n	800416c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	f000 80a5 	beq.w	800416c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fd f933 	bl	800128c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <UART_WaitOnFlagUntilTimeout+0x32>
 8004032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004034:	2b00      	cmp	r3, #0
 8004036:	d140      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800404c:	667b      	str	r3, [r7, #100]	; 0x64
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004058:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800405c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e6      	bne.n	8004038 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3308      	adds	r3, #8
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	663b      	str	r3, [r7, #96]	; 0x60
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800408a:	64ba      	str	r2, [r7, #72]	; 0x48
 800408c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e069      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d051      	beq.n	800416c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d6:	d149      	bne.n	800416c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
 8004102:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e6      	bne.n	80040e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	613b      	str	r3, [r7, #16]
   return(result);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	66bb      	str	r3, [r7, #104]	; 0x68
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004134:	623a      	str	r2, [r7, #32]
 8004136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	69f9      	ldr	r1, [r7, #28]
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	61bb      	str	r3, [r7, #24]
   return(result);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e010      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4013      	ands	r3, r2
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	429a      	cmp	r2, r3
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	429a      	cmp	r2, r3
 8004188:	f43f af46 	beq.w	8004018 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3770      	adds	r7, #112	; 0x70
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004198:	b480      	push	{r7}
 800419a:	b0a3      	sub	sp, #140	; 0x8c
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	4613      	mov	r3, r2
 80041a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ca:	d10e      	bne.n	80041ea <UART_Start_Receive_IT+0x52>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <UART_Start_Receive_IT+0x48>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041de:	e02d      	b.n	800423c <UART_Start_Receive_IT+0xa4>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	22ff      	movs	r2, #255	; 0xff
 80041e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041e8:	e028      	b.n	800423c <UART_Start_Receive_IT+0xa4>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <UART_Start_Receive_IT+0x76>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <UART_Start_Receive_IT+0x6c>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	22ff      	movs	r2, #255	; 0xff
 80041fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004202:	e01b      	b.n	800423c <UART_Start_Receive_IT+0xa4>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	227f      	movs	r2, #127	; 0x7f
 8004208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800420c:	e016      	b.n	800423c <UART_Start_Receive_IT+0xa4>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004216:	d10d      	bne.n	8004234 <UART_Start_Receive_IT+0x9c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <UART_Start_Receive_IT+0x92>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	227f      	movs	r2, #127	; 0x7f
 8004224:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004228:	e008      	b.n	800423c <UART_Start_Receive_IT+0xa4>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	223f      	movs	r2, #63	; 0x3f
 800422e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004232:	e003      	b.n	800423c <UART_Start_Receive_IT+0xa4>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2222      	movs	r2, #34	; 0x22
 8004248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800425c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3308      	adds	r3, #8
 800426c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004270:	673a      	str	r2, [r7, #112]	; 0x70
 8004272:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004276:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800427e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e3      	bne.n	800424c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428c:	d153      	bne.n	8004336 <UART_Start_Receive_IT+0x19e>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	429a      	cmp	r2, r3
 8004298:	d34d      	bcc.n	8004336 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a2:	d107      	bne.n	80042b4 <UART_Start_Receive_IT+0x11c>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a4b      	ldr	r2, [pc, #300]	; (80043dc <UART_Start_Receive_IT+0x244>)
 80042b0:	671a      	str	r2, [r3, #112]	; 0x70
 80042b2:	e002      	b.n	80042ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a4a      	ldr	r2, [pc, #296]	; (80043e0 <UART_Start_Receive_IT+0x248>)
 80042b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01a      	beq.n	8004300 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e4      	bne.n	80042ca <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3308      	adds	r3, #8
 8004306:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004316:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004320:	64ba      	str	r2, [r7, #72]	; 0x48
 8004322:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800432e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_Start_Receive_IT+0x168>
 8004334:	e04a      	b.n	80043cc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433e:	d107      	bne.n	8004350 <UART_Start_Receive_IT+0x1b8>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <UART_Start_Receive_IT+0x24c>)
 800434c:	671a      	str	r2, [r3, #112]	; 0x70
 800434e:	e002      	b.n	8004356 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4a25      	ldr	r2, [pc, #148]	; (80043e8 <UART_Start_Receive_IT+0x250>)
 8004354:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d019      	beq.n	800439a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800437a:	677b      	str	r3, [r7, #116]	; 0x74
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
 8004386:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e6      	bne.n	8004366 <UART_Start_Receive_IT+0x1ce>
 8004398:	e018      	b.n	80043cc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	613b      	str	r3, [r7, #16]
   return(result);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f043 0320 	orr.w	r3, r3, #32
 80043ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	69f9      	ldr	r1, [r7, #28]
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	378c      	adds	r7, #140	; 0x8c
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	08004bf9 	.word	0x08004bf9
 80043e0:	08004901 	.word	0x08004901
 80043e4:	080047a1 	.word	0x080047a1
 80043e8:	08004641 	.word	0x08004641

080043ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b095      	sub	sp, #84	; 0x54
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004408:	64fb      	str	r3, [r7, #76]	; 0x4c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004412:	643b      	str	r3, [r7, #64]	; 0x40
 8004414:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e6      	bne.n	80043f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	61fb      	str	r3, [r7, #28]
   return(result);
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	64bb      	str	r3, [r7, #72]	; 0x48
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3308      	adds	r3, #8
 8004448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800444a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e3      	bne.n	8004426 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d118      	bne.n	8004498 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	60bb      	str	r3, [r7, #8]
   return(result);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f023 0310 	bic.w	r3, r3, #16
 800447a:	647b      	str	r3, [r7, #68]	; 0x44
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6979      	ldr	r1, [r7, #20]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	613b      	str	r3, [r7, #16]
   return(result);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e6      	bne.n	8004466 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80044ac:	bf00      	nop
 80044ae:	3754      	adds	r7, #84	; 0x54
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff f98c 	bl	80037f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044f6:	2200      	movs	r2, #0
 80044f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d12b      	bne.n	8004564 <UART_DMATxAbortCallback+0x80>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	220f      	movs	r2, #15
 800452a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004534:	d107      	bne.n	8004546 <UART_DMATxAbortCallback+0x62>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0210 	orr.w	r2, r2, #16
 8004544:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff f953 	bl	8003808 <HAL_UART_AbortCpltCallback>
 8004562:	e000      	b.n	8004566 <UART_DMATxAbortCallback+0x82>
      return;
 8004564:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457e:	2200      	movs	r2, #0
 8004580:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	2b00      	cmp	r3, #0
 8004592:	d126      	bne.n	80045e2 <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	220f      	movs	r2, #15
 80045b2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0208 	orr.w	r2, r2, #8
 80045c2:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff f914 	bl	8003808 <HAL_UART_AbortCpltCallback>
 80045e0:	e000      	b.n	80045e4 <UART_DMARxAbortCallback+0x78>
      return;
 80045e2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b088      	sub	sp, #32
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6979      	ldr	r1, [r7, #20]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	613b      	str	r3, [r7, #16]
   return(result);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e6      	bne.n	80045f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff f8d4 	bl	80037e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004638:	bf00      	nop
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b096      	sub	sp, #88	; 0x58
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800464e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	2b22      	cmp	r3, #34	; 0x22
 800465a:	f040 8095 	bne.w	8004788 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004668:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800466c:	b2d9      	uxtb	r1, r3
 800466e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004672:	b2da      	uxtb	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	400a      	ands	r2, r1
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d178      	bne.n	8004798 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ba:	653b      	str	r3, [r7, #80]	; 0x50
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c4:	647b      	str	r3, [r7, #68]	; 0x44
 80046c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	623b      	str	r3, [r7, #32]
   return(result);
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046f8:	633a      	str	r2, [r7, #48]	; 0x30
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d12e      	bne.n	8004780 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	60fb      	str	r3, [r7, #12]
   return(result);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 0310 	bic.w	r3, r3, #16
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	617b      	str	r3, [r7, #20]
   return(result);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e6      	bne.n	8004728 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b10      	cmp	r3, #16
 8004766:	d103      	bne.n	8004770 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2210      	movs	r2, #16
 800476e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff f84f 	bl	800381c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800477e:	e00b      	b.n	8004798 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fc f9e3 	bl	8000b4c <HAL_UART_RxCpltCallback>
}
 8004786:	e007      	b.n	8004798 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0208 	orr.w	r2, r2, #8
 8004796:	619a      	str	r2, [r3, #24]
}
 8004798:	bf00      	nop
 800479a:	3758      	adds	r7, #88	; 0x58
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b096      	sub	sp, #88	; 0x58
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80047ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	2b22      	cmp	r3, #34	; 0x22
 80047ba:	f040 8095 	bne.w	80048e8 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80047ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80047d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047d6:	4013      	ands	r3, r2
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	1c9a      	adds	r2, r3, #2
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d178      	bne.n	80048f8 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	643b      	str	r3, [r7, #64]	; 0x40
 8004826:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800482a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e6      	bne.n	8004806 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3308      	adds	r3, #8
 800483e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	61fb      	str	r3, [r7, #28]
   return(result);
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004858:	62fa      	str	r2, [r7, #44]	; 0x2c
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e5      	bne.n	8004838 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487e:	2b01      	cmp	r3, #1
 8004880:	d12e      	bne.n	80048e0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	60bb      	str	r3, [r7, #8]
   return(result);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f023 0310 	bic.w	r3, r3, #16
 800489c:	647b      	str	r3, [r7, #68]	; 0x44
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6979      	ldr	r1, [r7, #20]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	613b      	str	r3, [r7, #16]
   return(result);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e6      	bne.n	8004888 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d103      	bne.n	80048d0 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2210      	movs	r2, #16
 80048ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7fe ff9f 	bl	800381c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048de:	e00b      	b.n	80048f8 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fc f933 	bl	8000b4c <HAL_UART_RxCpltCallback>
}
 80048e6:	e007      	b.n	80048f8 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0208 	orr.w	r2, r2, #8
 80048f6:	619a      	str	r2, [r3, #24]
}
 80048f8:	bf00      	nop
 80048fa:	3758      	adds	r7, #88	; 0x58
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b0a6      	sub	sp, #152	; 0x98
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800490e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	2b22      	cmp	r3, #34	; 0x22
 8004938:	f040 814f 	bne.w	8004bda <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004942:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004946:	e0f6      	b.n	8004b36 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004952:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004956:	b2d9      	uxtb	r1, r3
 8004958:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800495c:	b2da      	uxtb	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	400a      	ands	r2, r1
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800498e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	2b00      	cmp	r3, #0
 8004998:	d053      	beq.n	8004a42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800499a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d011      	beq.n	80049ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80049a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2201      	movs	r2, #1
 80049b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c0:	f043 0201 	orr.w	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d011      	beq.n	80049fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80049d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2202      	movs	r2, #2
 80049e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f0:	f043 0204 	orr.w	r2, r3, #4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d011      	beq.n	8004a2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2204      	movs	r2, #4
 8004a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a20:	f043 0202 	orr.w	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d006      	beq.n	8004a42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fe fedd 	bl	80037f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d173      	bne.n	8004b36 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004a5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a72:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004a76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e4      	bne.n	8004a4e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004aa8:	657a      	str	r2, [r7, #84]	; 0x54
 8004aaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004aae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e3      	bne.n	8004a84 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d12e      	bne.n	8004b30 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	f023 0310 	bic.w	r3, r3, #16
 8004aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af6:	643b      	str	r3, [r7, #64]	; 0x40
 8004af8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e6      	bne.n	8004ad8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d103      	bne.n	8004b20 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7fe fe77 	bl	800381c <HAL_UARTEx_RxEventCallback>
 8004b2e:	e002      	b.n	8004b36 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7fc f80b 	bl	8000b4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d006      	beq.n	8004b4c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8004b3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f47f aefe 	bne.w	8004948 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004b56:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d045      	beq.n	8004bea <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004b64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d23e      	bcs.n	8004bea <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3308      	adds	r3, #8
 8004b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b82:	673b      	str	r3, [r7, #112]	; 0x70
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3308      	adds	r3, #8
 8004b8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e5      	bne.n	8004b6c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004ba4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f043 0320 	orr.w	r3, r3, #32
 8004bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6979      	ldr	r1, [r7, #20]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e6      	bne.n	8004ba6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bd8:	e007      	b.n	8004bea <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699a      	ldr	r2, [r3, #24]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0208 	orr.w	r2, r2, #8
 8004be8:	619a      	str	r2, [r3, #24]
}
 8004bea:	bf00      	nop
 8004bec:	3798      	adds	r7, #152	; 0x98
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	08004641 	.word	0x08004641

08004bf8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b0a8      	sub	sp, #160	; 0xa0
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004c06:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	2b22      	cmp	r3, #34	; 0x22
 8004c30:	f040 8153 	bne.w	8004eda <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c3e:	e0fa      	b.n	8004e36 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8004c52:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004c56:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	1c9a      	adds	r2, r3, #2
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d053      	beq.n	8004d3e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d011      	beq.n	8004cc6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004ca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cbc:	f043 0201 	orr.w	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d011      	beq.n	8004cf6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cec:	f043 0204 	orr.w	r2, r3, #4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d011      	beq.n	8004d26 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2204      	movs	r2, #4
 8004d14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1c:	f043 0202 	orr.w	r2, r3, #2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d006      	beq.n	8004d3e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7fe fd5f 	bl	80037f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d175      	bne.n	8004e36 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d6e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e4      	bne.n	8004d4a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3308      	adds	r3, #8
 8004da4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004da8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004daa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e1      	bne.n	8004d80 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d12e      	bne.n	8004e30 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	f023 0310 	bic.w	r3, r3, #16
 8004dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004df6:	647b      	str	r3, [r7, #68]	; 0x44
 8004df8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e6      	bne.n	8004dd8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d103      	bne.n	8004e20 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2210      	movs	r2, #16
 8004e1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fe fcf7 	bl	800381c <HAL_UARTEx_RxEventCallback>
 8004e2e:	e002      	b.n	8004e36 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fb fe8b 	bl	8000b4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <UART_RxISR_16BIT_FIFOEN+0x254>
 8004e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f47f aefa 	bne.w	8004c40 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e52:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004e56:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d045      	beq.n	8004eea <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004e64:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d23e      	bcs.n	8004eea <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3308      	adds	r3, #8
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e82:	677b      	str	r3, [r7, #116]	; 0x74
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e8c:	633a      	str	r2, [r7, #48]	; 0x30
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e5      	bne.n	8004e6c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a14      	ldr	r2, [pc, #80]	; (8004ef4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8004ea4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f043 0320 	orr.w	r3, r3, #32
 8004eba:	673b      	str	r3, [r7, #112]	; 0x70
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	69b9      	ldr	r1, [r7, #24]
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e6      	bne.n	8004ea6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ed8:	e007      	b.n	8004eea <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0208 	orr.w	r2, r2, #8
 8004ee8:	619a      	str	r2, [r3, #24]
}
 8004eea:	bf00      	nop
 8004eec:	37a0      	adds	r7, #160	; 0xa0
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	080047a1 	.word	0x080047a1

08004ef8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_UARTEx_DisableFifoMode+0x16>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e027      	b.n	8004f9a <HAL_UARTEx_DisableFifoMode+0x66>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2224      	movs	r2, #36	; 0x24
 8004f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e02d      	b.n	800501a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2224      	movs	r2, #36	; 0x24
 8004fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f850 	bl	80050a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005036:	2302      	movs	r3, #2
 8005038:	e02d      	b.n	8005096 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2224      	movs	r2, #36	; 0x24
 8005046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f812 	bl	80050a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d108      	bne.n	80050c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050c0:	e031      	b.n	8005126 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050c2:	2308      	movs	r3, #8
 80050c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050c6:	2308      	movs	r3, #8
 80050c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	0e5b      	lsrs	r3, r3, #25
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	0f5b      	lsrs	r3, r3, #29
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050ea:	7bbb      	ldrb	r3, [r7, #14]
 80050ec:	7b3a      	ldrb	r2, [r7, #12]
 80050ee:	4911      	ldr	r1, [pc, #68]	; (8005134 <UARTEx_SetNbDataToProcess+0x94>)
 80050f0:	5c8a      	ldrb	r2, [r1, r2]
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050f6:	7b3a      	ldrb	r2, [r7, #12]
 80050f8:	490f      	ldr	r1, [pc, #60]	; (8005138 <UARTEx_SetNbDataToProcess+0x98>)
 80050fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005100:	b29a      	uxth	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	7b7a      	ldrb	r2, [r7, #13]
 800510c:	4909      	ldr	r1, [pc, #36]	; (8005134 <UARTEx_SetNbDataToProcess+0x94>)
 800510e:	5c8a      	ldrb	r2, [r1, r2]
 8005110:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005114:	7b7a      	ldrb	r2, [r7, #13]
 8005116:	4908      	ldr	r1, [pc, #32]	; (8005138 <UARTEx_SetNbDataToProcess+0x98>)
 8005118:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800511a:	fb93 f3f2 	sdiv	r3, r3, r2
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	08007d00 	.word	0x08007d00
 8005138:	08007d08 	.word	0x08007d08

0800513c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800514a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800514e:	2b84      	cmp	r3, #132	; 0x84
 8005150:	d005      	beq.n	800515e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	3303      	adds	r3, #3
 800515c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800515e:	68fb      	ldr	r3, [r7, #12]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005170:	f000 fb92 	bl	8005898 <vTaskStartScheduler>
  
  return osOK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	bd80      	pop	{r7, pc}

0800517a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800517a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517c:	b087      	sub	sp, #28
 800517e:	af02      	add	r7, sp, #8
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685c      	ldr	r4, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005190:	b29e      	uxth	r6, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff ffcf 	bl	800513c <makeFreeRtosPriority>
 800519e:	4602      	mov	r2, r0
 80051a0:	f107 030c 	add.w	r3, r7, #12
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	9200      	str	r2, [sp, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4632      	mov	r2, r6
 80051ac:	4629      	mov	r1, r5
 80051ae:	4620      	mov	r0, r4
 80051b0:	f000 f8d2 	bl	8005358 <xTaskCreate>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d001      	beq.n	80051be <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e000      	b.n	80051c0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80051be:	68fb      	ldr	r3, [r7, #12]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <osDelay+0x16>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	e000      	b.n	80051e0 <osDelay+0x18>
 80051de:	2301      	movs	r3, #1
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fa03 	bl	80055ec <vTaskDelay>
  
  return osOK;
 80051e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f103 0208 	add.w	r2, r3, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f04f 32ff 	mov.w	r2, #4294967295
 8005208:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f103 0208 	add.w	r2, r3, #8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f103 0208 	add.w	r2, r3, #8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a8:	d103      	bne.n	80052b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e00c      	b.n	80052cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3308      	adds	r3, #8
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e002      	b.n	80052c0 <vListInsert+0x2e>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d2f6      	bcs.n	80052ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6892      	ldr	r2, [r2, #8]
 800531a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6852      	ldr	r2, [r2, #4]
 8005324:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d103      	bne.n	8005338 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	1e5a      	subs	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08c      	sub	sp, #48	; 0x30
 800535c:	af04      	add	r7, sp, #16
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005368:	88fb      	ldrh	r3, [r7, #6]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fff3 	bl	8006358 <pvPortMalloc>
 8005372:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00e      	beq.n	8005398 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800537a:	20b4      	movs	r0, #180	; 0xb4
 800537c:	f000 ffec 	bl	8006358 <pvPortMalloc>
 8005380:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
 800538e:	e005      	b.n	800539c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005390:	6978      	ldr	r0, [r7, #20]
 8005392:	f001 f8ad 	bl	80064f0 <vPortFree>
 8005396:	e001      	b.n	800539c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	2300      	movs	r3, #0
 80053a6:	9303      	str	r3, [sp, #12]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	9302      	str	r3, [sp, #8]
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f80f 	bl	80053dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053be:	69f8      	ldr	r0, [r7, #28]
 80053c0:	f000 f8aa 	bl	8005518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053c4:	2301      	movs	r3, #1
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	e002      	b.n	80053d0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053d0:	69bb      	ldr	r3, [r7, #24]
	}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053f4:	3b01      	subs	r3, #1
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f023 0307 	bic.w	r3, r3, #7
 8005402:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01f      	beq.n	800546a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	e012      	b.n	8005456 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	7819      	ldrb	r1, [r3, #0]
 8005438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	3334      	adds	r3, #52	; 0x34
 8005440:	460a      	mov	r2, r1
 8005442:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3301      	adds	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	2b0f      	cmp	r3, #15
 800545a:	d9e9      	bls.n	8005430 <prvInitialiseNewTask+0x54>
 800545c:	e000      	b.n	8005460 <prvInitialiseNewTask+0x84>
			{
				break;
 800545e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005468:	e003      	b.n	8005472 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	2b06      	cmp	r3, #6
 8005476:	d901      	bls.n	800547c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005478:	2306      	movs	r3, #6
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005480:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005486:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	2200      	movs	r2, #0
 800548c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff fecc 	bl	8005230 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	3318      	adds	r3, #24
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fec7 	bl	8005230 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f1c3 0207 	rsb	r2, r3, #7
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	334c      	adds	r3, #76	; 0x4c
 80054cc:	2260      	movs	r2, #96	; 0x60
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 fa52 	bl	800697a <memset>
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	4a0c      	ldr	r2, [pc, #48]	; (800550c <prvInitialiseNewTask+0x130>)
 80054da:	651a      	str	r2, [r3, #80]	; 0x50
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	4a0c      	ldr	r2, [pc, #48]	; (8005510 <prvInitialiseNewTask+0x134>)
 80054e0:	655a      	str	r2, [r3, #84]	; 0x54
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <prvInitialiseNewTask+0x138>)
 80054e6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	69b8      	ldr	r0, [r7, #24]
 80054ee:	f000 fd27 	bl	8005f40 <pxPortInitialiseStack>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005502:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005504:	bf00      	nop
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	08007d30 	.word	0x08007d30
 8005510:	08007d50 	.word	0x08007d50
 8005514:	08007d10 	.word	0x08007d10

08005518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005520:	f000 fe38 	bl	8006194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005524:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <prvAddNewTaskToReadyList+0xb8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3301      	adds	r3, #1
 800552a:	4a29      	ldr	r2, [pc, #164]	; (80055d0 <prvAddNewTaskToReadyList+0xb8>)
 800552c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800552e:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <prvAddNewTaskToReadyList+0xbc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005536:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <prvAddNewTaskToReadyList+0xbc>)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800553c:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <prvAddNewTaskToReadyList+0xb8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d110      	bne.n	8005566 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005544:	f000 fbd4 	bl	8005cf0 <prvInitialiseTaskLists>
 8005548:	e00d      	b.n	8005566 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800554a:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <prvAddNewTaskToReadyList+0xc0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005552:	4b20      	ldr	r3, [pc, #128]	; (80055d4 <prvAddNewTaskToReadyList+0xbc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	429a      	cmp	r2, r3
 800555e:	d802      	bhi.n	8005566 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005560:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <prvAddNewTaskToReadyList+0xbc>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <prvAddNewTaskToReadyList+0xc4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	4a1b      	ldr	r2, [pc, #108]	; (80055dc <prvAddNewTaskToReadyList+0xc4>)
 800556e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	2201      	movs	r2, #1
 8005576:	409a      	lsls	r2, r3
 8005578:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <prvAddNewTaskToReadyList+0xc8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4313      	orrs	r3, r2
 800557e:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <prvAddNewTaskToReadyList+0xc8>)
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4a15      	ldr	r2, [pc, #84]	; (80055e4 <prvAddNewTaskToReadyList+0xcc>)
 8005590:	441a      	add	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f7ff fe56 	bl	800524a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800559e:	f000 fe29 	bl	80061f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <prvAddNewTaskToReadyList+0xc0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00e      	beq.n	80055c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <prvAddNewTaskToReadyList+0xbc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d207      	bcs.n	80055c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <prvAddNewTaskToReadyList+0xd0>)
 80055ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200004c4 	.word	0x200004c4
 80055d4:	200003c4 	.word	0x200003c4
 80055d8:	200004d0 	.word	0x200004d0
 80055dc:	200004e0 	.word	0x200004e0
 80055e0:	200004cc 	.word	0x200004cc
 80055e4:	200003c8 	.word	0x200003c8
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055fe:	4b13      	ldr	r3, [pc, #76]	; (800564c <vTaskDelay+0x60>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <vTaskDelay+0x30>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60bb      	str	r3, [r7, #8]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800561c:	f000 f98c 	bl	8005938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005620:	2100      	movs	r1, #0
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fc26 	bl	8005e74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005628:	f000 f994 	bl	8005954 <xTaskResumeAll>
 800562c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <vTaskDelay+0x64>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	200004ec 	.word	0x200004ec
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800565c:	f000 fd9a 	bl	8006194 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <vTaskSuspend+0x18>
 8005666:	4b3c      	ldr	r3, [pc, #240]	; (8005758 <vTaskSuspend+0x104>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	e000      	b.n	800566e <vTaskSuspend+0x1a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3304      	adds	r3, #4
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fe45 	bl	8005304 <uxListRemove>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d115      	bne.n	80056ac <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	4935      	ldr	r1, [pc, #212]	; (800575c <vTaskSuspend+0x108>)
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <vTaskSuspend+0x58>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	2201      	movs	r2, #1
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43da      	mvns	r2, r3
 80056a2:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <vTaskSuspend+0x10c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4013      	ands	r3, r2
 80056a8:	4a2d      	ldr	r2, [pc, #180]	; (8005760 <vTaskSuspend+0x10c>)
 80056aa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3318      	adds	r3, #24
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff fe23 	bl	8005304 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4827      	ldr	r0, [pc, #156]	; (8005764 <vTaskSuspend+0x110>)
 80056c6:	f7ff fdc0 	bl	800524a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d103      	bne.n	80056de <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80056de:	f000 fd89 	bl	80061f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80056e2:	4b21      	ldr	r3, [pc, #132]	; (8005768 <vTaskSuspend+0x114>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80056ea:	f000 fd53 	bl	8006194 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80056ee:	f000 fb83 	bl	8005df8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80056f2:	f000 fd7f 	bl	80061f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80056f6:	4b18      	ldr	r3, [pc, #96]	; (8005758 <vTaskSuspend+0x104>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d127      	bne.n	8005750 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <vTaskSuspend+0x114>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d017      	beq.n	8005738 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005708:	4b18      	ldr	r3, [pc, #96]	; (800576c <vTaskSuspend+0x118>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <vTaskSuspend+0xd2>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	60bb      	str	r3, [r7, #8]
}
 8005722:	bf00      	nop
 8005724:	e7fe      	b.n	8005724 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8005726:	4b12      	ldr	r3, [pc, #72]	; (8005770 <vTaskSuspend+0x11c>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005736:	e00b      	b.n	8005750 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005738:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <vTaskSuspend+0x110>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <vTaskSuspend+0x120>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d103      	bne.n	800574c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <vTaskSuspend+0x104>)
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
	}
 800574a:	e001      	b.n	8005750 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800574c:	f000 fa56 	bl	8005bfc <vTaskSwitchContext>
	}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	200003c4 	.word	0x200003c4
 800575c:	200003c8 	.word	0x200003c8
 8005760:	200004cc 	.word	0x200004cc
 8005764:	200004b0 	.word	0x200004b0
 8005768:	200004d0 	.word	0x200004d0
 800576c:	200004ec 	.word	0x200004ec
 8005770:	e000ed04 	.word	0xe000ed04
 8005774:	200004c4 	.word	0x200004c4

08005778 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60fb      	str	r3, [r7, #12]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <prvTaskIsTaskSuspended+0x5c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d10a      	bne.n	80057c4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <prvTaskIsTaskSuspended+0x60>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d005      	beq.n	80057c4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057c4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80057c6:	4618      	mov	r0, r3
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	200004b0 	.word	0x200004b0
 80057d8:	20000484 	.word	0x20000484

080057dc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <vTaskResume+0x28>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	60bb      	str	r3, [r7, #8]
}
 8005800:	bf00      	nop
 8005802:	e7fe      	b.n	8005802 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005804:	4b20      	ldr	r3, [pc, #128]	; (8005888 <vTaskResume+0xac>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	429a      	cmp	r2, r3
 800580c:	d037      	beq.n	800587e <vTaskResume+0xa2>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d034      	beq.n	800587e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8005814:	f000 fcbe 	bl	8006194 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f7ff ffad 	bl	8005778 <prvTaskIsTaskSuspended>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d02a      	beq.n	800587a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3304      	adds	r3, #4
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff fd6b 	bl	8005304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	2201      	movs	r2, #1
 8005834:	409a      	lsls	r2, r3
 8005836:	4b15      	ldr	r3, [pc, #84]	; (800588c <vTaskResume+0xb0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	4a13      	ldr	r2, [pc, #76]	; (800588c <vTaskResume+0xb0>)
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4a10      	ldr	r2, [pc, #64]	; (8005890 <vTaskResume+0xb4>)
 800584e:	441a      	add	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f7ff fcf7 	bl	800524a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <vTaskResume+0xac>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	429a      	cmp	r2, r3
 8005868:	d307      	bcc.n	800587a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800586a:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <vTaskResume+0xb8>)
 800586c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800587a:	f000 fcbb 	bl	80061f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800587e:	bf00      	nop
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200003c4 	.word	0x200003c4
 800588c:	200004cc 	.word	0x200004cc
 8005890:	200003c8 	.word	0x200003c8
 8005894:	e000ed04 	.word	0xe000ed04

08005898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <vTaskStartScheduler+0x80>)
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	2300      	movs	r3, #0
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2300      	movs	r3, #0
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	491c      	ldr	r1, [pc, #112]	; (800591c <vTaskStartScheduler+0x84>)
 80058ac:	481c      	ldr	r0, [pc, #112]	; (8005920 <vTaskStartScheduler+0x88>)
 80058ae:	f7ff fd53 	bl	8005358 <xTaskCreate>
 80058b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d11b      	bne.n	80058f2 <vTaskStartScheduler+0x5a>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60bb      	str	r3, [r7, #8]
}
 80058cc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058ce:	4b15      	ldr	r3, [pc, #84]	; (8005924 <vTaskStartScheduler+0x8c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	334c      	adds	r3, #76	; 0x4c
 80058d4:	4a14      	ldr	r2, [pc, #80]	; (8005928 <vTaskStartScheduler+0x90>)
 80058d6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d8:	4b14      	ldr	r3, [pc, #80]	; (800592c <vTaskStartScheduler+0x94>)
 80058da:	f04f 32ff 	mov.w	r2, #4294967295
 80058de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <vTaskStartScheduler+0x98>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058e6:	4b13      	ldr	r3, [pc, #76]	; (8005934 <vTaskStartScheduler+0x9c>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058ec:	f000 fbb0 	bl	8006050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058f0:	e00e      	b.n	8005910 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d10a      	bne.n	8005910 <vTaskStartScheduler+0x78>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	607b      	str	r3, [r7, #4]
}
 800590c:	bf00      	nop
 800590e:	e7fe      	b.n	800590e <vTaskStartScheduler+0x76>
}
 8005910:	bf00      	nop
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	200004e8 	.word	0x200004e8
 800591c:	08007cc8 	.word	0x08007cc8
 8005920:	08005cc1 	.word	0x08005cc1
 8005924:	200003c4 	.word	0x200003c4
 8005928:	20000020 	.word	0x20000020
 800592c:	200004e4 	.word	0x200004e4
 8005930:	200004d0 	.word	0x200004d0
 8005934:	200004c8 	.word	0x200004c8

08005938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <vTaskSuspendAll+0x18>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	4a03      	ldr	r2, [pc, #12]	; (8005950 <vTaskSuspendAll+0x18>)
 8005944:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	200004ec 	.word	0x200004ec

08005954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005962:	4b41      	ldr	r3, [pc, #260]	; (8005a68 <xTaskResumeAll+0x114>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <xTaskResumeAll+0x2c>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	603b      	str	r3, [r7, #0]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005980:	f000 fc08 	bl	8006194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005984:	4b38      	ldr	r3, [pc, #224]	; (8005a68 <xTaskResumeAll+0x114>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3b01      	subs	r3, #1
 800598a:	4a37      	ldr	r2, [pc, #220]	; (8005a68 <xTaskResumeAll+0x114>)
 800598c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598e:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <xTaskResumeAll+0x114>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d161      	bne.n	8005a5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005996:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <xTaskResumeAll+0x118>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d05d      	beq.n	8005a5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800599e:	e02e      	b.n	80059fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a0:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <xTaskResumeAll+0x11c>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3318      	adds	r3, #24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fca9 	bl	8005304 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff fca4 	bl	8005304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	2201      	movs	r2, #1
 80059c2:	409a      	lsls	r2, r3
 80059c4:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <xTaskResumeAll+0x120>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	4a2a      	ldr	r2, [pc, #168]	; (8005a74 <xTaskResumeAll+0x120>)
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4a27      	ldr	r2, [pc, #156]	; (8005a78 <xTaskResumeAll+0x124>)
 80059dc:	441a      	add	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f7ff fc30 	bl	800524a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ee:	4b23      	ldr	r3, [pc, #140]	; (8005a7c <xTaskResumeAll+0x128>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d302      	bcc.n	80059fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80059f8:	4b21      	ldr	r3, [pc, #132]	; (8005a80 <xTaskResumeAll+0x12c>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059fe:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <xTaskResumeAll+0x11c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1cc      	bne.n	80059a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a0c:	f000 f9f4 	bl	8005df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a10:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <xTaskResumeAll+0x130>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d010      	beq.n	8005a3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a1c:	f000 f836 	bl	8005a8c <xTaskIncrementTick>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a26:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <xTaskResumeAll+0x12c>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1f1      	bne.n	8005a1c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005a38:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <xTaskResumeAll+0x130>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <xTaskResumeAll+0x12c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a46:	2301      	movs	r3, #1
 8005a48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <xTaskResumeAll+0x134>)
 8005a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a5a:	f000 fbcb 	bl	80061f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	200004ec 	.word	0x200004ec
 8005a6c:	200004c4 	.word	0x200004c4
 8005a70:	20000484 	.word	0x20000484
 8005a74:	200004cc 	.word	0x200004cc
 8005a78:	200003c8 	.word	0x200003c8
 8005a7c:	200003c4 	.word	0x200003c4
 8005a80:	200004d8 	.word	0x200004d8
 8005a84:	200004d4 	.word	0x200004d4
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a96:	4b4e      	ldr	r3, [pc, #312]	; (8005bd0 <xTaskIncrementTick+0x144>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f040 808e 	bne.w	8005bbc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005aa0:	4b4c      	ldr	r3, [pc, #304]	; (8005bd4 <xTaskIncrementTick+0x148>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005aa8:	4a4a      	ldr	r2, [pc, #296]	; (8005bd4 <xTaskIncrementTick+0x148>)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d120      	bne.n	8005af6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ab4:	4b48      	ldr	r3, [pc, #288]	; (8005bd8 <xTaskIncrementTick+0x14c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	603b      	str	r3, [r7, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <xTaskIncrementTick+0x46>
 8005ad4:	4b40      	ldr	r3, [pc, #256]	; (8005bd8 <xTaskIncrementTick+0x14c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	4b40      	ldr	r3, [pc, #256]	; (8005bdc <xTaskIncrementTick+0x150>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a3e      	ldr	r2, [pc, #248]	; (8005bd8 <xTaskIncrementTick+0x14c>)
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4a3e      	ldr	r2, [pc, #248]	; (8005bdc <xTaskIncrementTick+0x150>)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	4b3d      	ldr	r3, [pc, #244]	; (8005be0 <xTaskIncrementTick+0x154>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	4a3c      	ldr	r2, [pc, #240]	; (8005be0 <xTaskIncrementTick+0x154>)
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	f000 f981 	bl	8005df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005af6:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <xTaskIncrementTick+0x158>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d348      	bcc.n	8005b92 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b00:	4b35      	ldr	r3, [pc, #212]	; (8005bd8 <xTaskIncrementTick+0x14c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b0a:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <xTaskIncrementTick+0x158>)
 8005b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b10:	601a      	str	r2, [r3, #0]
					break;
 8005b12:	e03e      	b.n	8005b92 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b14:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <xTaskIncrementTick+0x14c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d203      	bcs.n	8005b34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b2c:	4a2d      	ldr	r2, [pc, #180]	; (8005be4 <xTaskIncrementTick+0x158>)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b32:	e02e      	b.n	8005b92 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fbe3 	bl	8005304 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	3318      	adds	r3, #24
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff fbda 	bl	8005304 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	2201      	movs	r2, #1
 8005b56:	409a      	lsls	r2, r3
 8005b58:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <xTaskIncrementTick+0x15c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	4a22      	ldr	r2, [pc, #136]	; (8005be8 <xTaskIncrementTick+0x15c>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <xTaskIncrementTick+0x160>)
 8005b70:	441a      	add	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f7ff fb66 	bl	800524a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	4b1b      	ldr	r3, [pc, #108]	; (8005bf0 <xTaskIncrementTick+0x164>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d3b9      	bcc.n	8005b00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b90:	e7b6      	b.n	8005b00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b92:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <xTaskIncrementTick+0x164>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b98:	4914      	ldr	r1, [pc, #80]	; (8005bec <xTaskIncrementTick+0x160>)
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d901      	bls.n	8005bae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bae:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <xTaskIncrementTick+0x168>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e004      	b.n	8005bc6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <xTaskIncrementTick+0x16c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	4a0d      	ldr	r2, [pc, #52]	; (8005bf8 <xTaskIncrementTick+0x16c>)
 8005bc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005bc6:	697b      	ldr	r3, [r7, #20]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	200004ec 	.word	0x200004ec
 8005bd4:	200004c8 	.word	0x200004c8
 8005bd8:	2000047c 	.word	0x2000047c
 8005bdc:	20000480 	.word	0x20000480
 8005be0:	200004dc 	.word	0x200004dc
 8005be4:	200004e4 	.word	0x200004e4
 8005be8:	200004cc 	.word	0x200004cc
 8005bec:	200003c8 	.word	0x200003c8
 8005bf0:	200003c4 	.word	0x200003c4
 8005bf4:	200004d8 	.word	0x200004d8
 8005bf8:	200004d4 	.word	0x200004d4

08005bfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c02:	4b29      	ldr	r3, [pc, #164]	; (8005ca8 <vTaskSwitchContext+0xac>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c0a:	4b28      	ldr	r3, [pc, #160]	; (8005cac <vTaskSwitchContext+0xb0>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c10:	e044      	b.n	8005c9c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005c12:	4b26      	ldr	r3, [pc, #152]	; (8005cac <vTaskSwitchContext+0xb0>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <vTaskSwitchContext+0xb4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	fab3 f383 	clz	r3, r3
 8005c24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c26:	7afb      	ldrb	r3, [r7, #11]
 8005c28:	f1c3 031f 	rsb	r3, r3, #31
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	4921      	ldr	r1, [pc, #132]	; (8005cb4 <vTaskSwitchContext+0xb8>)
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	607b      	str	r3, [r7, #4]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <vTaskSwitchContext+0x5a>
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4a14      	ldr	r2, [pc, #80]	; (8005cb4 <vTaskSwitchContext+0xb8>)
 8005c64:	4413      	add	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d104      	bne.n	8005c88 <vTaskSwitchContext+0x8c>
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <vTaskSwitchContext+0xbc>)
 8005c90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <vTaskSwitchContext+0xbc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	334c      	adds	r3, #76	; 0x4c
 8005c98:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <vTaskSwitchContext+0xc0>)
 8005c9a:	6013      	str	r3, [r2, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	200004ec 	.word	0x200004ec
 8005cac:	200004d8 	.word	0x200004d8
 8005cb0:	200004cc 	.word	0x200004cc
 8005cb4:	200003c8 	.word	0x200003c8
 8005cb8:	200003c4 	.word	0x200003c4
 8005cbc:	20000020 	.word	0x20000020

08005cc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cc8:	f000 f852 	bl	8005d70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ccc:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <prvIdleTask+0x28>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d9f9      	bls.n	8005cc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <prvIdleTask+0x2c>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ce4:	e7f0      	b.n	8005cc8 <prvIdleTask+0x8>
 8005ce6:	bf00      	nop
 8005ce8:	200003c8 	.word	0x200003c8
 8005cec:	e000ed04 	.word	0xe000ed04

08005cf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	e00c      	b.n	8005d16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4a12      	ldr	r2, [pc, #72]	; (8005d50 <prvInitialiseTaskLists+0x60>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fa70 	bl	80051f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3301      	adds	r3, #1
 8005d14:	607b      	str	r3, [r7, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b06      	cmp	r3, #6
 8005d1a:	d9ef      	bls.n	8005cfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d1c:	480d      	ldr	r0, [pc, #52]	; (8005d54 <prvInitialiseTaskLists+0x64>)
 8005d1e:	f7ff fa67 	bl	80051f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d22:	480d      	ldr	r0, [pc, #52]	; (8005d58 <prvInitialiseTaskLists+0x68>)
 8005d24:	f7ff fa64 	bl	80051f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d28:	480c      	ldr	r0, [pc, #48]	; (8005d5c <prvInitialiseTaskLists+0x6c>)
 8005d2a:	f7ff fa61 	bl	80051f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d2e:	480c      	ldr	r0, [pc, #48]	; (8005d60 <prvInitialiseTaskLists+0x70>)
 8005d30:	f7ff fa5e 	bl	80051f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d34:	480b      	ldr	r0, [pc, #44]	; (8005d64 <prvInitialiseTaskLists+0x74>)
 8005d36:	f7ff fa5b 	bl	80051f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <prvInitialiseTaskLists+0x78>)
 8005d3c:	4a05      	ldr	r2, [pc, #20]	; (8005d54 <prvInitialiseTaskLists+0x64>)
 8005d3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d40:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <prvInitialiseTaskLists+0x7c>)
 8005d42:	4a05      	ldr	r2, [pc, #20]	; (8005d58 <prvInitialiseTaskLists+0x68>)
 8005d44:	601a      	str	r2, [r3, #0]
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200003c8 	.word	0x200003c8
 8005d54:	20000454 	.word	0x20000454
 8005d58:	20000468 	.word	0x20000468
 8005d5c:	20000484 	.word	0x20000484
 8005d60:	20000498 	.word	0x20000498
 8005d64:	200004b0 	.word	0x200004b0
 8005d68:	2000047c 	.word	0x2000047c
 8005d6c:	20000480 	.word	0x20000480

08005d70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d76:	e019      	b.n	8005dac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d78:	f000 fa0c 	bl	8006194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7c:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <prvCheckTasksWaitingTermination+0x50>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fabb 	bl	8005304 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <prvCheckTasksWaitingTermination+0x54>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	4a0b      	ldr	r2, [pc, #44]	; (8005dc4 <prvCheckTasksWaitingTermination+0x54>)
 8005d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <prvCheckTasksWaitingTermination+0x58>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <prvCheckTasksWaitingTermination+0x58>)
 8005da0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005da2:	f000 fa27 	bl	80061f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f810 	bl	8005dcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <prvCheckTasksWaitingTermination+0x58>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e1      	bne.n	8005d78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000498 	.word	0x20000498
 8005dc4:	200004c4 	.word	0x200004c4
 8005dc8:	200004ac 	.word	0x200004ac

08005dcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	334c      	adds	r3, #76	; 0x4c
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 ff05 	bl	8006be8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fb84 	bl	80064f0 <vPortFree>
			vPortFree( pxTCB );
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fb81 	bl	80064f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <prvResetNextTaskUnblockTime+0x38>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e08:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <prvResetNextTaskUnblockTime+0x3c>)
 8005e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e10:	e008      	b.n	8005e24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <prvResetNextTaskUnblockTime+0x38>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <prvResetNextTaskUnblockTime+0x3c>)
 8005e22:	6013      	str	r3, [r2, #0]
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	2000047c 	.word	0x2000047c
 8005e34:	200004e4 	.word	0x200004e4

08005e38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <xTaskGetSchedulerState+0x34>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d102      	bne.n	8005e4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e46:	2301      	movs	r3, #1
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	e008      	b.n	8005e5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <xTaskGetSchedulerState+0x38>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d102      	bne.n	8005e5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e54:	2302      	movs	r3, #2
 8005e56:	607b      	str	r3, [r7, #4]
 8005e58:	e001      	b.n	8005e5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e5e:	687b      	ldr	r3, [r7, #4]
	}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	200004d0 	.word	0x200004d0
 8005e70:	200004ec 	.word	0x200004ec

08005e74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e7e:	4b29      	ldr	r3, [pc, #164]	; (8005f24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e84:	4b28      	ldr	r3, [pc, #160]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff fa3a 	bl	8005304 <uxListRemove>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e96:	4b24      	ldr	r3, [pc, #144]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43da      	mvns	r2, r3
 8005ea4:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d10a      	bne.n	8005ecc <prvAddCurrentTaskToDelayedList+0x58>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	481a      	ldr	r0, [pc, #104]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ec6:	f7ff f9c0 	bl	800524a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005eca:	e026      	b.n	8005f1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ed4:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d209      	bcs.n	8005ef8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee4:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7ff f9ce 	bl	8005292 <vListInsert>
}
 8005ef6:	e010      	b.n	8005f1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7ff f9c4 	bl	8005292 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d202      	bcs.n	8005f1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f14:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6013      	str	r3, [r2, #0]
}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	200004c8 	.word	0x200004c8
 8005f28:	200003c4 	.word	0x200003c4
 8005f2c:	200004cc 	.word	0x200004cc
 8005f30:	200004b0 	.word	0x200004b0
 8005f34:	20000480 	.word	0x20000480
 8005f38:	2000047c 	.word	0x2000047c
 8005f3c:	200004e4 	.word	0x200004e4

08005f40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3b04      	subs	r3, #4
 8005f50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3b04      	subs	r3, #4
 8005f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3b04      	subs	r3, #4
 8005f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f70:	4a0c      	ldr	r2, [pc, #48]	; (8005fa4 <pxPortInitialiseStack+0x64>)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3b14      	subs	r3, #20
 8005f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b04      	subs	r3, #4
 8005f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f06f 0202 	mvn.w	r2, #2
 8005f8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3b20      	subs	r3, #32
 8005f94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f96:	68fb      	ldr	r3, [r7, #12]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	08005fa9 	.word	0x08005fa9

08005fa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fb2:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <prvTaskExitError+0x54>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d00a      	beq.n	8005fd2 <prvTaskExitError+0x2a>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	60fb      	str	r3, [r7, #12]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <prvTaskExitError+0x28>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	60bb      	str	r3, [r7, #8]
}
 8005fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fe6:	bf00      	nop
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0fc      	beq.n	8005fe8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	2000001c 	.word	0x2000001c

08006000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006000:	4b07      	ldr	r3, [pc, #28]	; (8006020 <pxCurrentTCBConst2>)
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	6808      	ldr	r0, [r1, #0]
 8006006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	f380 8809 	msr	PSP, r0
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8811 	msr	BASEPRI, r0
 800601a:	4770      	bx	lr
 800601c:	f3af 8000 	nop.w

08006020 <pxCurrentTCBConst2>:
 8006020:	200003c4 	.word	0x200003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006028:	4808      	ldr	r0, [pc, #32]	; (800604c <prvPortStartFirstTask+0x24>)
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	6800      	ldr	r0, [r0, #0]
 800602e:	f380 8808 	msr	MSP, r0
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8814 	msr	CONTROL, r0
 800603a:	b662      	cpsie	i
 800603c:	b661      	cpsie	f
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	df00      	svc	0
 8006048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800604a:	bf00      	nop
 800604c:	e000ed08 	.word	0xe000ed08

08006050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006056:	4b46      	ldr	r3, [pc, #280]	; (8006170 <xPortStartScheduler+0x120>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a46      	ldr	r2, [pc, #280]	; (8006174 <xPortStartScheduler+0x124>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10a      	bne.n	8006076 <xPortStartScheduler+0x26>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	613b      	str	r3, [r7, #16]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006076:	4b3e      	ldr	r3, [pc, #248]	; (8006170 <xPortStartScheduler+0x120>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a3f      	ldr	r2, [pc, #252]	; (8006178 <xPortStartScheduler+0x128>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10a      	bne.n	8006096 <xPortStartScheduler+0x46>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	60fb      	str	r3, [r7, #12]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006096:	4b39      	ldr	r3, [pc, #228]	; (800617c <xPortStartScheduler+0x12c>)
 8006098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	22ff      	movs	r2, #255	; 0xff
 80060a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	4b31      	ldr	r3, [pc, #196]	; (8006180 <xPortStartScheduler+0x130>)
 80060bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060be:	4b31      	ldr	r3, [pc, #196]	; (8006184 <xPortStartScheduler+0x134>)
 80060c0:	2207      	movs	r2, #7
 80060c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060c4:	e009      	b.n	80060da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060c6:	4b2f      	ldr	r3, [pc, #188]	; (8006184 <xPortStartScheduler+0x134>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <xPortStartScheduler+0x134>)
 80060ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b80      	cmp	r3, #128	; 0x80
 80060e4:	d0ef      	beq.n	80060c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060e6:	4b27      	ldr	r3, [pc, #156]	; (8006184 <xPortStartScheduler+0x134>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1c3 0307 	rsb	r3, r3, #7
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d00a      	beq.n	8006108 <xPortStartScheduler+0xb8>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	60bb      	str	r3, [r7, #8]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006108:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <xPortStartScheduler+0x134>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <xPortStartScheduler+0x134>)
 8006110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006112:	4b1c      	ldr	r3, [pc, #112]	; (8006184 <xPortStartScheduler+0x134>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800611a:	4a1a      	ldr	r2, [pc, #104]	; (8006184 <xPortStartScheduler+0x134>)
 800611c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006126:	4b18      	ldr	r3, [pc, #96]	; (8006188 <xPortStartScheduler+0x138>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a17      	ldr	r2, [pc, #92]	; (8006188 <xPortStartScheduler+0x138>)
 800612c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <xPortStartScheduler+0x138>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a14      	ldr	r2, [pc, #80]	; (8006188 <xPortStartScheduler+0x138>)
 8006138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800613c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800613e:	f000 f8dd 	bl	80062fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006142:	4b12      	ldr	r3, [pc, #72]	; (800618c <xPortStartScheduler+0x13c>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006148:	f000 f8fc 	bl	8006344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800614c:	4b10      	ldr	r3, [pc, #64]	; (8006190 <xPortStartScheduler+0x140>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <xPortStartScheduler+0x140>)
 8006152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006158:	f7ff ff66 	bl	8006028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800615c:	f7ff fd4e 	bl	8005bfc <vTaskSwitchContext>
	prvTaskExitError();
 8006160:	f7ff ff22 	bl	8005fa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	e000ed00 	.word	0xe000ed00
 8006174:	410fc271 	.word	0x410fc271
 8006178:	410fc270 	.word	0x410fc270
 800617c:	e000e400 	.word	0xe000e400
 8006180:	200004f0 	.word	0x200004f0
 8006184:	200004f4 	.word	0x200004f4
 8006188:	e000ed20 	.word	0xe000ed20
 800618c:	2000001c 	.word	0x2000001c
 8006190:	e000ef34 	.word	0xe000ef34

08006194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	607b      	str	r3, [r7, #4]
}
 80061ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061ae:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <vPortEnterCritical+0x58>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a0d      	ldr	r2, [pc, #52]	; (80061ec <vPortEnterCritical+0x58>)
 80061b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <vPortEnterCritical+0x58>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d10f      	bne.n	80061e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <vPortEnterCritical+0x5c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	603b      	str	r3, [r7, #0]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <vPortEnterCritical+0x4a>
	}
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	2000001c 	.word	0x2000001c
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061fa:	4b12      	ldr	r3, [pc, #72]	; (8006244 <vPortExitCritical+0x50>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <vPortExitCritical+0x24>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	607b      	str	r3, [r7, #4]
}
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <vPortExitCritical+0x50>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3b01      	subs	r3, #1
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <vPortExitCritical+0x50>)
 8006220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <vPortExitCritical+0x50>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d105      	bne.n	8006236 <vPortExitCritical+0x42>
 800622a:	2300      	movs	r3, #0
 800622c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	2000001c 	.word	0x2000001c
	...

08006250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006250:	f3ef 8009 	mrs	r0, PSP
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <pxCurrentTCBConst>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	f01e 0f10 	tst.w	lr, #16
 8006260:	bf08      	it	eq
 8006262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626a:	6010      	str	r0, [r2, #0]
 800626c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006274:	f380 8811 	msr	BASEPRI, r0
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f7ff fcbc 	bl	8005bfc <vTaskSwitchContext>
 8006284:	f04f 0000 	mov.w	r0, #0
 8006288:	f380 8811 	msr	BASEPRI, r0
 800628c:	bc09      	pop	{r0, r3}
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	6808      	ldr	r0, [r1, #0]
 8006292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006296:	f01e 0f10 	tst.w	lr, #16
 800629a:	bf08      	it	eq
 800629c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062a0:	f380 8809 	msr	PSP, r0
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w

080062b0 <pxCurrentTCBConst>:
 80062b0:	200003c4 	.word	0x200003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop

080062b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
}
 80062d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062d2:	f7ff fbdb 	bl	8005a8c <xTaskIncrementTick>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062dc:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <xPortSysTickHandler+0x40>)
 80062de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	2300      	movs	r3, #0
 80062e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f383 8811 	msr	BASEPRI, r3
}
 80062ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <vPortSetupTimerInterrupt+0x34>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <vPortSetupTimerInterrupt+0x38>)
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <vPortSetupTimerInterrupt+0x3c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0a      	ldr	r2, [pc, #40]	; (800633c <vPortSetupTimerInterrupt+0x40>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	099b      	lsrs	r3, r3, #6
 8006318:	4a09      	ldr	r2, [pc, #36]	; (8006340 <vPortSetupTimerInterrupt+0x44>)
 800631a:	3b01      	subs	r3, #1
 800631c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800631e:	4b04      	ldr	r3, [pc, #16]	; (8006330 <vPortSetupTimerInterrupt+0x34>)
 8006320:	2207      	movs	r2, #7
 8006322:	601a      	str	r2, [r3, #0]
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	e000e010 	.word	0xe000e010
 8006334:	e000e018 	.word	0xe000e018
 8006338:	20000010 	.word	0x20000010
 800633c:	10624dd3 	.word	0x10624dd3
 8006340:	e000e014 	.word	0xe000e014

08006344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006354 <vPortEnableVFP+0x10>
 8006348:	6801      	ldr	r1, [r0, #0]
 800634a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800634e:	6001      	str	r1, [r0, #0]
 8006350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006352:	bf00      	nop
 8006354:	e000ed88 	.word	0xe000ed88

08006358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006364:	f7ff fae8 	bl	8005938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006368:	4b5b      	ldr	r3, [pc, #364]	; (80064d8 <pvPortMalloc+0x180>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006370:	f000 f920 	bl	80065b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006374:	4b59      	ldr	r3, [pc, #356]	; (80064dc <pvPortMalloc+0x184>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 8093 	bne.w	80064a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01d      	beq.n	80063c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006388:	2208      	movs	r2, #8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4413      	add	r3, r2
 800638e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2b00      	cmp	r3, #0
 8006398:	d014      	beq.n	80063c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f023 0307 	bic.w	r3, r3, #7
 80063a0:	3308      	adds	r3, #8
 80063a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <pvPortMalloc+0x6c>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	617b      	str	r3, [r7, #20]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d06e      	beq.n	80064a8 <pvPortMalloc+0x150>
 80063ca:	4b45      	ldr	r3, [pc, #276]	; (80064e0 <pvPortMalloc+0x188>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d869      	bhi.n	80064a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063d4:	4b43      	ldr	r3, [pc, #268]	; (80064e4 <pvPortMalloc+0x18c>)
 80063d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063d8:	4b42      	ldr	r3, [pc, #264]	; (80064e4 <pvPortMalloc+0x18c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063de:	e004      	b.n	80063ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d903      	bls.n	80063fc <pvPortMalloc+0xa4>
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f1      	bne.n	80063e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063fc:	4b36      	ldr	r3, [pc, #216]	; (80064d8 <pvPortMalloc+0x180>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	429a      	cmp	r2, r3
 8006404:	d050      	beq.n	80064a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2208      	movs	r2, #8
 800640c:	4413      	add	r3, r2
 800640e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	2308      	movs	r3, #8
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	429a      	cmp	r2, r3
 8006426:	d91f      	bls.n	8006468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <pvPortMalloc+0xf8>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	613b      	str	r3, [r7, #16]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006462:	69b8      	ldr	r0, [r7, #24]
 8006464:	f000 f908 	bl	8006678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006468:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <pvPortMalloc+0x188>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <pvPortMalloc+0x188>)
 8006474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <pvPortMalloc+0x188>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <pvPortMalloc+0x190>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d203      	bcs.n	800648a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006482:	4b17      	ldr	r3, [pc, #92]	; (80064e0 <pvPortMalloc+0x188>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a18      	ldr	r2, [pc, #96]	; (80064e8 <pvPortMalloc+0x190>)
 8006488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	4b13      	ldr	r3, [pc, #76]	; (80064dc <pvPortMalloc+0x184>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	431a      	orrs	r2, r3
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <pvPortMalloc+0x194>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3301      	adds	r3, #1
 80064a4:	4a11      	ldr	r2, [pc, #68]	; (80064ec <pvPortMalloc+0x194>)
 80064a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064a8:	f7ff fa54 	bl	8005954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <pvPortMalloc+0x174>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60fb      	str	r3, [r7, #12]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <pvPortMalloc+0x172>
	return pvReturn;
 80064cc:	69fb      	ldr	r3, [r7, #28]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3728      	adds	r7, #40	; 0x28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20002d00 	.word	0x20002d00
 80064dc:	20002d14 	.word	0x20002d14
 80064e0:	20002d04 	.word	0x20002d04
 80064e4:	20002cf8 	.word	0x20002cf8
 80064e8:	20002d08 	.word	0x20002d08
 80064ec:	20002d0c 	.word	0x20002d0c

080064f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d04d      	beq.n	800659e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006502:	2308      	movs	r3, #8
 8006504:	425b      	negs	r3, r3
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	4b24      	ldr	r3, [pc, #144]	; (80065a8 <vPortFree+0xb8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4013      	ands	r3, r2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <vPortFree+0x44>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60fb      	str	r3, [r7, #12]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <vPortFree+0x62>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60bb      	str	r3, [r7, #8]
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <vPortFree+0xb8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01e      	beq.n	800659e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d11a      	bne.n	800659e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	4b0e      	ldr	r3, [pc, #56]	; (80065a8 <vPortFree+0xb8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	43db      	mvns	r3, r3
 8006572:	401a      	ands	r2, r3
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006578:	f7ff f9de 	bl	8005938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <vPortFree+0xbc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4413      	add	r3, r2
 8006586:	4a09      	ldr	r2, [pc, #36]	; (80065ac <vPortFree+0xbc>)
 8006588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800658a:	6938      	ldr	r0, [r7, #16]
 800658c:	f000 f874 	bl	8006678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <vPortFree+0xc0>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	4a06      	ldr	r2, [pc, #24]	; (80065b0 <vPortFree+0xc0>)
 8006598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800659a:	f7ff f9db 	bl	8005954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20002d14 	.word	0x20002d14
 80065ac:	20002d04 	.word	0x20002d04
 80065b0:	20002d10 	.word	0x20002d10

080065b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80065be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065c0:	4b27      	ldr	r3, [pc, #156]	; (8006660 <prvHeapInit+0xac>)
 80065c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3307      	adds	r3, #7
 80065d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0307 	bic.w	r3, r3, #7
 80065da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <prvHeapInit+0xac>)
 80065e4:	4413      	add	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <prvHeapInit+0xb0>)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065f2:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <prvHeapInit+0xb0>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	4413      	add	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006600:	2208      	movs	r2, #8
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0307 	bic.w	r3, r3, #7
 800660e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a15      	ldr	r2, [pc, #84]	; (8006668 <prvHeapInit+0xb4>)
 8006614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006616:	4b14      	ldr	r3, [pc, #80]	; (8006668 <prvHeapInit+0xb4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2200      	movs	r2, #0
 800661c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800661e:	4b12      	ldr	r3, [pc, #72]	; (8006668 <prvHeapInit+0xb4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006634:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <prvHeapInit+0xb4>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	4a0a      	ldr	r2, [pc, #40]	; (800666c <prvHeapInit+0xb8>)
 8006642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	4a09      	ldr	r2, [pc, #36]	; (8006670 <prvHeapInit+0xbc>)
 800664a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800664c:	4b09      	ldr	r3, [pc, #36]	; (8006674 <prvHeapInit+0xc0>)
 800664e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006652:	601a      	str	r2, [r3, #0]
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	200004f8 	.word	0x200004f8
 8006664:	20002cf8 	.word	0x20002cf8
 8006668:	20002d00 	.word	0x20002d00
 800666c:	20002d08 	.word	0x20002d08
 8006670:	20002d04 	.word	0x20002d04
 8006674:	20002d14 	.word	0x20002d14

08006678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006680:	4b28      	ldr	r3, [pc, #160]	; (8006724 <prvInsertBlockIntoFreeList+0xac>)
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e002      	b.n	800668c <prvInsertBlockIntoFreeList+0x14>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	429a      	cmp	r2, r3
 8006694:	d8f7      	bhi.n	8006686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4413      	add	r3, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d108      	bne.n	80066ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	441a      	add	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	441a      	add	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d118      	bne.n	8006700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4b15      	ldr	r3, [pc, #84]	; (8006728 <prvInsertBlockIntoFreeList+0xb0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d00d      	beq.n	80066f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	e008      	b.n	8006708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <prvInsertBlockIntoFreeList+0xb0>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	e003      	b.n	8006708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d002      	beq.n	8006716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20002cf8 	.word	0x20002cf8
 8006728:	20002d00 	.word	0x20002d00

0800672c <atoi>:
 800672c:	220a      	movs	r2, #10
 800672e:	2100      	movs	r1, #0
 8006730:	f000 bbfe 	b.w	8006f30 <strtol>

08006734 <__errno>:
 8006734:	4b01      	ldr	r3, [pc, #4]	; (800673c <__errno+0x8>)
 8006736:	6818      	ldr	r0, [r3, #0]
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20000020 	.word	0x20000020

08006740 <std>:
 8006740:	2300      	movs	r3, #0
 8006742:	b510      	push	{r4, lr}
 8006744:	4604      	mov	r4, r0
 8006746:	e9c0 3300 	strd	r3, r3, [r0]
 800674a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800674e:	6083      	str	r3, [r0, #8]
 8006750:	8181      	strh	r1, [r0, #12]
 8006752:	6643      	str	r3, [r0, #100]	; 0x64
 8006754:	81c2      	strh	r2, [r0, #14]
 8006756:	6183      	str	r3, [r0, #24]
 8006758:	4619      	mov	r1, r3
 800675a:	2208      	movs	r2, #8
 800675c:	305c      	adds	r0, #92	; 0x5c
 800675e:	f000 f90c 	bl	800697a <memset>
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <std+0x38>)
 8006764:	6263      	str	r3, [r4, #36]	; 0x24
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <std+0x3c>)
 8006768:	62a3      	str	r3, [r4, #40]	; 0x28
 800676a:	4b05      	ldr	r3, [pc, #20]	; (8006780 <std+0x40>)
 800676c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800676e:	4b05      	ldr	r3, [pc, #20]	; (8006784 <std+0x44>)
 8006770:	6224      	str	r4, [r4, #32]
 8006772:	6323      	str	r3, [r4, #48]	; 0x30
 8006774:	bd10      	pop	{r4, pc}
 8006776:	bf00      	nop
 8006778:	08006cc1 	.word	0x08006cc1
 800677c:	08006ce3 	.word	0x08006ce3
 8006780:	08006d1b 	.word	0x08006d1b
 8006784:	08006d3f 	.word	0x08006d3f

08006788 <_cleanup_r>:
 8006788:	4901      	ldr	r1, [pc, #4]	; (8006790 <_cleanup_r+0x8>)
 800678a:	f000 b8af 	b.w	80068ec <_fwalk_reent>
 800678e:	bf00      	nop
 8006790:	08007251 	.word	0x08007251

08006794 <__sfmoreglue>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	2268      	movs	r2, #104	; 0x68
 8006798:	1e4d      	subs	r5, r1, #1
 800679a:	4355      	muls	r5, r2
 800679c:	460e      	mov	r6, r1
 800679e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067a2:	f000 f913 	bl	80069cc <_malloc_r>
 80067a6:	4604      	mov	r4, r0
 80067a8:	b140      	cbz	r0, 80067bc <__sfmoreglue+0x28>
 80067aa:	2100      	movs	r1, #0
 80067ac:	e9c0 1600 	strd	r1, r6, [r0]
 80067b0:	300c      	adds	r0, #12
 80067b2:	60a0      	str	r0, [r4, #8]
 80067b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067b8:	f000 f8df 	bl	800697a <memset>
 80067bc:	4620      	mov	r0, r4
 80067be:	bd70      	pop	{r4, r5, r6, pc}

080067c0 <__sfp_lock_acquire>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__sfp_lock_acquire+0x8>)
 80067c2:	f000 b8d8 	b.w	8006976 <__retarget_lock_acquire_recursive>
 80067c6:	bf00      	nop
 80067c8:	20002d19 	.word	0x20002d19

080067cc <__sfp_lock_release>:
 80067cc:	4801      	ldr	r0, [pc, #4]	; (80067d4 <__sfp_lock_release+0x8>)
 80067ce:	f000 b8d3 	b.w	8006978 <__retarget_lock_release_recursive>
 80067d2:	bf00      	nop
 80067d4:	20002d19 	.word	0x20002d19

080067d8 <__sinit_lock_acquire>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__sinit_lock_acquire+0x8>)
 80067da:	f000 b8cc 	b.w	8006976 <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	20002d1a 	.word	0x20002d1a

080067e4 <__sinit_lock_release>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__sinit_lock_release+0x8>)
 80067e6:	f000 b8c7 	b.w	8006978 <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	20002d1a 	.word	0x20002d1a

080067f0 <__sinit>:
 80067f0:	b510      	push	{r4, lr}
 80067f2:	4604      	mov	r4, r0
 80067f4:	f7ff fff0 	bl	80067d8 <__sinit_lock_acquire>
 80067f8:	69a3      	ldr	r3, [r4, #24]
 80067fa:	b11b      	cbz	r3, 8006804 <__sinit+0x14>
 80067fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006800:	f7ff bff0 	b.w	80067e4 <__sinit_lock_release>
 8006804:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006808:	6523      	str	r3, [r4, #80]	; 0x50
 800680a:	4b13      	ldr	r3, [pc, #76]	; (8006858 <__sinit+0x68>)
 800680c:	4a13      	ldr	r2, [pc, #76]	; (800685c <__sinit+0x6c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	62a2      	str	r2, [r4, #40]	; 0x28
 8006812:	42a3      	cmp	r3, r4
 8006814:	bf04      	itt	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	61a3      	streq	r3, [r4, #24]
 800681a:	4620      	mov	r0, r4
 800681c:	f000 f820 	bl	8006860 <__sfp>
 8006820:	6060      	str	r0, [r4, #4]
 8006822:	4620      	mov	r0, r4
 8006824:	f000 f81c 	bl	8006860 <__sfp>
 8006828:	60a0      	str	r0, [r4, #8]
 800682a:	4620      	mov	r0, r4
 800682c:	f000 f818 	bl	8006860 <__sfp>
 8006830:	2200      	movs	r2, #0
 8006832:	60e0      	str	r0, [r4, #12]
 8006834:	2104      	movs	r1, #4
 8006836:	6860      	ldr	r0, [r4, #4]
 8006838:	f7ff ff82 	bl	8006740 <std>
 800683c:	68a0      	ldr	r0, [r4, #8]
 800683e:	2201      	movs	r2, #1
 8006840:	2109      	movs	r1, #9
 8006842:	f7ff ff7d 	bl	8006740 <std>
 8006846:	68e0      	ldr	r0, [r4, #12]
 8006848:	2202      	movs	r2, #2
 800684a:	2112      	movs	r1, #18
 800684c:	f7ff ff78 	bl	8006740 <std>
 8006850:	2301      	movs	r3, #1
 8006852:	61a3      	str	r3, [r4, #24]
 8006854:	e7d2      	b.n	80067fc <__sinit+0xc>
 8006856:	bf00      	nop
 8006858:	08007d70 	.word	0x08007d70
 800685c:	08006789 	.word	0x08006789

08006860 <__sfp>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	4607      	mov	r7, r0
 8006864:	f7ff ffac 	bl	80067c0 <__sfp_lock_acquire>
 8006868:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <__sfp+0x84>)
 800686a:	681e      	ldr	r6, [r3, #0]
 800686c:	69b3      	ldr	r3, [r6, #24]
 800686e:	b913      	cbnz	r3, 8006876 <__sfp+0x16>
 8006870:	4630      	mov	r0, r6
 8006872:	f7ff ffbd 	bl	80067f0 <__sinit>
 8006876:	3648      	adds	r6, #72	; 0x48
 8006878:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800687c:	3b01      	subs	r3, #1
 800687e:	d503      	bpl.n	8006888 <__sfp+0x28>
 8006880:	6833      	ldr	r3, [r6, #0]
 8006882:	b30b      	cbz	r3, 80068c8 <__sfp+0x68>
 8006884:	6836      	ldr	r6, [r6, #0]
 8006886:	e7f7      	b.n	8006878 <__sfp+0x18>
 8006888:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800688c:	b9d5      	cbnz	r5, 80068c4 <__sfp+0x64>
 800688e:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <__sfp+0x88>)
 8006890:	60e3      	str	r3, [r4, #12]
 8006892:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006896:	6665      	str	r5, [r4, #100]	; 0x64
 8006898:	f000 f86c 	bl	8006974 <__retarget_lock_init_recursive>
 800689c:	f7ff ff96 	bl	80067cc <__sfp_lock_release>
 80068a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068a8:	6025      	str	r5, [r4, #0]
 80068aa:	61a5      	str	r5, [r4, #24]
 80068ac:	2208      	movs	r2, #8
 80068ae:	4629      	mov	r1, r5
 80068b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068b4:	f000 f861 	bl	800697a <memset>
 80068b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068c0:	4620      	mov	r0, r4
 80068c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c4:	3468      	adds	r4, #104	; 0x68
 80068c6:	e7d9      	b.n	800687c <__sfp+0x1c>
 80068c8:	2104      	movs	r1, #4
 80068ca:	4638      	mov	r0, r7
 80068cc:	f7ff ff62 	bl	8006794 <__sfmoreglue>
 80068d0:	4604      	mov	r4, r0
 80068d2:	6030      	str	r0, [r6, #0]
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d1d5      	bne.n	8006884 <__sfp+0x24>
 80068d8:	f7ff ff78 	bl	80067cc <__sfp_lock_release>
 80068dc:	230c      	movs	r3, #12
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	e7ee      	b.n	80068c0 <__sfp+0x60>
 80068e2:	bf00      	nop
 80068e4:	08007d70 	.word	0x08007d70
 80068e8:	ffff0001 	.word	0xffff0001

080068ec <_fwalk_reent>:
 80068ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f0:	4606      	mov	r6, r0
 80068f2:	4688      	mov	r8, r1
 80068f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068f8:	2700      	movs	r7, #0
 80068fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068fe:	f1b9 0901 	subs.w	r9, r9, #1
 8006902:	d505      	bpl.n	8006910 <_fwalk_reent+0x24>
 8006904:	6824      	ldr	r4, [r4, #0]
 8006906:	2c00      	cmp	r4, #0
 8006908:	d1f7      	bne.n	80068fa <_fwalk_reent+0xe>
 800690a:	4638      	mov	r0, r7
 800690c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006910:	89ab      	ldrh	r3, [r5, #12]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d907      	bls.n	8006926 <_fwalk_reent+0x3a>
 8006916:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800691a:	3301      	adds	r3, #1
 800691c:	d003      	beq.n	8006926 <_fwalk_reent+0x3a>
 800691e:	4629      	mov	r1, r5
 8006920:	4630      	mov	r0, r6
 8006922:	47c0      	blx	r8
 8006924:	4307      	orrs	r7, r0
 8006926:	3568      	adds	r5, #104	; 0x68
 8006928:	e7e9      	b.n	80068fe <_fwalk_reent+0x12>
	...

0800692c <__libc_init_array>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4d0d      	ldr	r5, [pc, #52]	; (8006964 <__libc_init_array+0x38>)
 8006930:	4c0d      	ldr	r4, [pc, #52]	; (8006968 <__libc_init_array+0x3c>)
 8006932:	1b64      	subs	r4, r4, r5
 8006934:	10a4      	asrs	r4, r4, #2
 8006936:	2600      	movs	r6, #0
 8006938:	42a6      	cmp	r6, r4
 800693a:	d109      	bne.n	8006950 <__libc_init_array+0x24>
 800693c:	4d0b      	ldr	r5, [pc, #44]	; (800696c <__libc_init_array+0x40>)
 800693e:	4c0c      	ldr	r4, [pc, #48]	; (8006970 <__libc_init_array+0x44>)
 8006940:	f001 f962 	bl	8007c08 <_init>
 8006944:	1b64      	subs	r4, r4, r5
 8006946:	10a4      	asrs	r4, r4, #2
 8006948:	2600      	movs	r6, #0
 800694a:	42a6      	cmp	r6, r4
 800694c:	d105      	bne.n	800695a <__libc_init_array+0x2e>
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	f855 3b04 	ldr.w	r3, [r5], #4
 8006954:	4798      	blx	r3
 8006956:	3601      	adds	r6, #1
 8006958:	e7ee      	b.n	8006938 <__libc_init_array+0xc>
 800695a:	f855 3b04 	ldr.w	r3, [r5], #4
 800695e:	4798      	blx	r3
 8006960:	3601      	adds	r6, #1
 8006962:	e7f2      	b.n	800694a <__libc_init_array+0x1e>
 8006964:	08007f60 	.word	0x08007f60
 8006968:	08007f60 	.word	0x08007f60
 800696c:	08007f60 	.word	0x08007f60
 8006970:	08007f64 	.word	0x08007f64

08006974 <__retarget_lock_init_recursive>:
 8006974:	4770      	bx	lr

08006976 <__retarget_lock_acquire_recursive>:
 8006976:	4770      	bx	lr

08006978 <__retarget_lock_release_recursive>:
 8006978:	4770      	bx	lr

0800697a <memset>:
 800697a:	4402      	add	r2, r0
 800697c:	4603      	mov	r3, r0
 800697e:	4293      	cmp	r3, r2
 8006980:	d100      	bne.n	8006984 <memset+0xa>
 8006982:	4770      	bx	lr
 8006984:	f803 1b01 	strb.w	r1, [r3], #1
 8006988:	e7f9      	b.n	800697e <memset+0x4>
	...

0800698c <sbrk_aligned>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4e0e      	ldr	r6, [pc, #56]	; (80069c8 <sbrk_aligned+0x3c>)
 8006990:	460c      	mov	r4, r1
 8006992:	6831      	ldr	r1, [r6, #0]
 8006994:	4605      	mov	r5, r0
 8006996:	b911      	cbnz	r1, 800699e <sbrk_aligned+0x12>
 8006998:	f000 f982 	bl	8006ca0 <_sbrk_r>
 800699c:	6030      	str	r0, [r6, #0]
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 f97d 	bl	8006ca0 <_sbrk_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d00a      	beq.n	80069c0 <sbrk_aligned+0x34>
 80069aa:	1cc4      	adds	r4, r0, #3
 80069ac:	f024 0403 	bic.w	r4, r4, #3
 80069b0:	42a0      	cmp	r0, r4
 80069b2:	d007      	beq.n	80069c4 <sbrk_aligned+0x38>
 80069b4:	1a21      	subs	r1, r4, r0
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 f972 	bl	8006ca0 <_sbrk_r>
 80069bc:	3001      	adds	r0, #1
 80069be:	d101      	bne.n	80069c4 <sbrk_aligned+0x38>
 80069c0:	f04f 34ff 	mov.w	r4, #4294967295
 80069c4:	4620      	mov	r0, r4
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	20002d20 	.word	0x20002d20

080069cc <_malloc_r>:
 80069cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d0:	1ccd      	adds	r5, r1, #3
 80069d2:	f025 0503 	bic.w	r5, r5, #3
 80069d6:	3508      	adds	r5, #8
 80069d8:	2d0c      	cmp	r5, #12
 80069da:	bf38      	it	cc
 80069dc:	250c      	movcc	r5, #12
 80069de:	2d00      	cmp	r5, #0
 80069e0:	4607      	mov	r7, r0
 80069e2:	db01      	blt.n	80069e8 <_malloc_r+0x1c>
 80069e4:	42a9      	cmp	r1, r5
 80069e6:	d905      	bls.n	80069f4 <_malloc_r+0x28>
 80069e8:	230c      	movs	r3, #12
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	2600      	movs	r6, #0
 80069ee:	4630      	mov	r0, r6
 80069f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f4:	4e2e      	ldr	r6, [pc, #184]	; (8006ab0 <_malloc_r+0xe4>)
 80069f6:	f000 fcf9 	bl	80073ec <__malloc_lock>
 80069fa:	6833      	ldr	r3, [r6, #0]
 80069fc:	461c      	mov	r4, r3
 80069fe:	bb34      	cbnz	r4, 8006a4e <_malloc_r+0x82>
 8006a00:	4629      	mov	r1, r5
 8006a02:	4638      	mov	r0, r7
 8006a04:	f7ff ffc2 	bl	800698c <sbrk_aligned>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	d14d      	bne.n	8006aaa <_malloc_r+0xde>
 8006a0e:	6834      	ldr	r4, [r6, #0]
 8006a10:	4626      	mov	r6, r4
 8006a12:	2e00      	cmp	r6, #0
 8006a14:	d140      	bne.n	8006a98 <_malloc_r+0xcc>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	eb04 0803 	add.w	r8, r4, r3
 8006a20:	f000 f93e 	bl	8006ca0 <_sbrk_r>
 8006a24:	4580      	cmp	r8, r0
 8006a26:	d13a      	bne.n	8006a9e <_malloc_r+0xd2>
 8006a28:	6821      	ldr	r1, [r4, #0]
 8006a2a:	3503      	adds	r5, #3
 8006a2c:	1a6d      	subs	r5, r5, r1
 8006a2e:	f025 0503 	bic.w	r5, r5, #3
 8006a32:	3508      	adds	r5, #8
 8006a34:	2d0c      	cmp	r5, #12
 8006a36:	bf38      	it	cc
 8006a38:	250c      	movcc	r5, #12
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7ff ffa5 	bl	800698c <sbrk_aligned>
 8006a42:	3001      	adds	r0, #1
 8006a44:	d02b      	beq.n	8006a9e <_malloc_r+0xd2>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	442b      	add	r3, r5
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	e00e      	b.n	8006a6c <_malloc_r+0xa0>
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	1b52      	subs	r2, r2, r5
 8006a52:	d41e      	bmi.n	8006a92 <_malloc_r+0xc6>
 8006a54:	2a0b      	cmp	r2, #11
 8006a56:	d916      	bls.n	8006a86 <_malloc_r+0xba>
 8006a58:	1961      	adds	r1, r4, r5
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	6025      	str	r5, [r4, #0]
 8006a5e:	bf18      	it	ne
 8006a60:	6059      	strne	r1, [r3, #4]
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	bf08      	it	eq
 8006a66:	6031      	streq	r1, [r6, #0]
 8006a68:	5162      	str	r2, [r4, r5]
 8006a6a:	604b      	str	r3, [r1, #4]
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f104 060b 	add.w	r6, r4, #11
 8006a72:	f000 fcc1 	bl	80073f8 <__malloc_unlock>
 8006a76:	f026 0607 	bic.w	r6, r6, #7
 8006a7a:	1d23      	adds	r3, r4, #4
 8006a7c:	1af2      	subs	r2, r6, r3
 8006a7e:	d0b6      	beq.n	80069ee <_malloc_r+0x22>
 8006a80:	1b9b      	subs	r3, r3, r6
 8006a82:	50a3      	str	r3, [r4, r2]
 8006a84:	e7b3      	b.n	80069ee <_malloc_r+0x22>
 8006a86:	6862      	ldr	r2, [r4, #4]
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	bf0c      	ite	eq
 8006a8c:	6032      	streq	r2, [r6, #0]
 8006a8e:	605a      	strne	r2, [r3, #4]
 8006a90:	e7ec      	b.n	8006a6c <_malloc_r+0xa0>
 8006a92:	4623      	mov	r3, r4
 8006a94:	6864      	ldr	r4, [r4, #4]
 8006a96:	e7b2      	b.n	80069fe <_malloc_r+0x32>
 8006a98:	4634      	mov	r4, r6
 8006a9a:	6876      	ldr	r6, [r6, #4]
 8006a9c:	e7b9      	b.n	8006a12 <_malloc_r+0x46>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	603b      	str	r3, [r7, #0]
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	f000 fca8 	bl	80073f8 <__malloc_unlock>
 8006aa8:	e7a1      	b.n	80069ee <_malloc_r+0x22>
 8006aaa:	6025      	str	r5, [r4, #0]
 8006aac:	e7de      	b.n	8006a6c <_malloc_r+0xa0>
 8006aae:	bf00      	nop
 8006ab0:	20002d1c 	.word	0x20002d1c

08006ab4 <putchar>:
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <putchar+0x28>)
 8006ab6:	b513      	push	{r0, r1, r4, lr}
 8006ab8:	681c      	ldr	r4, [r3, #0]
 8006aba:	4601      	mov	r1, r0
 8006abc:	b134      	cbz	r4, 8006acc <putchar+0x18>
 8006abe:	69a3      	ldr	r3, [r4, #24]
 8006ac0:	b923      	cbnz	r3, 8006acc <putchar+0x18>
 8006ac2:	9001      	str	r0, [sp, #4]
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f7ff fe93 	bl	80067f0 <__sinit>
 8006aca:	9901      	ldr	r1, [sp, #4]
 8006acc:	68a2      	ldr	r2, [r4, #8]
 8006ace:	4620      	mov	r0, r4
 8006ad0:	b002      	add	sp, #8
 8006ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad6:	f000 bfcf 	b.w	8007a78 <_putc_r>
 8006ada:	bf00      	nop
 8006adc:	20000020 	.word	0x20000020

08006ae0 <_puts_r>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	460e      	mov	r6, r1
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	b118      	cbz	r0, 8006af0 <_puts_r+0x10>
 8006ae8:	6983      	ldr	r3, [r0, #24]
 8006aea:	b90b      	cbnz	r3, 8006af0 <_puts_r+0x10>
 8006aec:	f7ff fe80 	bl	80067f0 <__sinit>
 8006af0:	69ab      	ldr	r3, [r5, #24]
 8006af2:	68ac      	ldr	r4, [r5, #8]
 8006af4:	b913      	cbnz	r3, 8006afc <_puts_r+0x1c>
 8006af6:	4628      	mov	r0, r5
 8006af8:	f7ff fe7a 	bl	80067f0 <__sinit>
 8006afc:	4b2c      	ldr	r3, [pc, #176]	; (8006bb0 <_puts_r+0xd0>)
 8006afe:	429c      	cmp	r4, r3
 8006b00:	d120      	bne.n	8006b44 <_puts_r+0x64>
 8006b02:	686c      	ldr	r4, [r5, #4]
 8006b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b06:	07db      	lsls	r3, r3, #31
 8006b08:	d405      	bmi.n	8006b16 <_puts_r+0x36>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	0598      	lsls	r0, r3, #22
 8006b0e:	d402      	bmi.n	8006b16 <_puts_r+0x36>
 8006b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b12:	f7ff ff30 	bl	8006976 <__retarget_lock_acquire_recursive>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	0719      	lsls	r1, r3, #28
 8006b1a:	d51d      	bpl.n	8006b58 <_puts_r+0x78>
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	b1db      	cbz	r3, 8006b58 <_puts_r+0x78>
 8006b20:	3e01      	subs	r6, #1
 8006b22:	68a3      	ldr	r3, [r4, #8]
 8006b24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	60a3      	str	r3, [r4, #8]
 8006b2c:	bb39      	cbnz	r1, 8006b7e <_puts_r+0x9e>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	da38      	bge.n	8006ba4 <_puts_r+0xc4>
 8006b32:	4622      	mov	r2, r4
 8006b34:	210a      	movs	r1, #10
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 fa04 	bl	8006f44 <__swbuf_r>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d011      	beq.n	8006b64 <_puts_r+0x84>
 8006b40:	250a      	movs	r5, #10
 8006b42:	e011      	b.n	8006b68 <_puts_r+0x88>
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <_puts_r+0xd4>)
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d101      	bne.n	8006b4e <_puts_r+0x6e>
 8006b4a:	68ac      	ldr	r4, [r5, #8]
 8006b4c:	e7da      	b.n	8006b04 <_puts_r+0x24>
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <_puts_r+0xd8>)
 8006b50:	429c      	cmp	r4, r3
 8006b52:	bf08      	it	eq
 8006b54:	68ec      	ldreq	r4, [r5, #12]
 8006b56:	e7d5      	b.n	8006b04 <_puts_r+0x24>
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 fa56 	bl	800700c <__swsetup_r>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d0dd      	beq.n	8006b20 <_puts_r+0x40>
 8006b64:	f04f 35ff 	mov.w	r5, #4294967295
 8006b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b6a:	07da      	lsls	r2, r3, #31
 8006b6c:	d405      	bmi.n	8006b7a <_puts_r+0x9a>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	059b      	lsls	r3, r3, #22
 8006b72:	d402      	bmi.n	8006b7a <_puts_r+0x9a>
 8006b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b76:	f7ff feff 	bl	8006978 <__retarget_lock_release_recursive>
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	bd70      	pop	{r4, r5, r6, pc}
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da04      	bge.n	8006b8c <_puts_r+0xac>
 8006b82:	69a2      	ldr	r2, [r4, #24]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	dc06      	bgt.n	8006b96 <_puts_r+0xb6>
 8006b88:	290a      	cmp	r1, #10
 8006b8a:	d004      	beq.n	8006b96 <_puts_r+0xb6>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	6022      	str	r2, [r4, #0]
 8006b92:	7019      	strb	r1, [r3, #0]
 8006b94:	e7c5      	b.n	8006b22 <_puts_r+0x42>
 8006b96:	4622      	mov	r2, r4
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 f9d3 	bl	8006f44 <__swbuf_r>
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d1bf      	bne.n	8006b22 <_puts_r+0x42>
 8006ba2:	e7df      	b.n	8006b64 <_puts_r+0x84>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	250a      	movs	r5, #10
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	701d      	strb	r5, [r3, #0]
 8006bae:	e7db      	b.n	8006b68 <_puts_r+0x88>
 8006bb0:	08007d30 	.word	0x08007d30
 8006bb4:	08007d50 	.word	0x08007d50
 8006bb8:	08007d10 	.word	0x08007d10

08006bbc <puts>:
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <puts+0xc>)
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	f7ff bf8d 	b.w	8006ae0 <_puts_r>
 8006bc6:	bf00      	nop
 8006bc8:	20000020 	.word	0x20000020

08006bcc <cleanup_glue>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	460c      	mov	r4, r1
 8006bd0:	6809      	ldr	r1, [r1, #0]
 8006bd2:	4605      	mov	r5, r0
 8006bd4:	b109      	cbz	r1, 8006bda <cleanup_glue+0xe>
 8006bd6:	f7ff fff9 	bl	8006bcc <cleanup_glue>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be2:	f000 bc0f 	b.w	8007404 <_free_r>
	...

08006be8 <_reclaim_reent>:
 8006be8:	4b2c      	ldr	r3, [pc, #176]	; (8006c9c <_reclaim_reent+0xb4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4283      	cmp	r3, r0
 8006bee:	b570      	push	{r4, r5, r6, lr}
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	d051      	beq.n	8006c98 <_reclaim_reent+0xb0>
 8006bf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bf6:	b143      	cbz	r3, 8006c0a <_reclaim_reent+0x22>
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d14a      	bne.n	8006c94 <_reclaim_reent+0xac>
 8006bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c00:	6819      	ldr	r1, [r3, #0]
 8006c02:	b111      	cbz	r1, 8006c0a <_reclaim_reent+0x22>
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 fbfd 	bl	8007404 <_free_r>
 8006c0a:	6961      	ldr	r1, [r4, #20]
 8006c0c:	b111      	cbz	r1, 8006c14 <_reclaim_reent+0x2c>
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 fbf8 	bl	8007404 <_free_r>
 8006c14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c16:	b111      	cbz	r1, 8006c1e <_reclaim_reent+0x36>
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fbf3 	bl	8007404 <_free_r>
 8006c1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c20:	b111      	cbz	r1, 8006c28 <_reclaim_reent+0x40>
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 fbee 	bl	8007404 <_free_r>
 8006c28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c2a:	b111      	cbz	r1, 8006c32 <_reclaim_reent+0x4a>
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 fbe9 	bl	8007404 <_free_r>
 8006c32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c34:	b111      	cbz	r1, 8006c3c <_reclaim_reent+0x54>
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 fbe4 	bl	8007404 <_free_r>
 8006c3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c3e:	b111      	cbz	r1, 8006c46 <_reclaim_reent+0x5e>
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 fbdf 	bl	8007404 <_free_r>
 8006c46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c48:	b111      	cbz	r1, 8006c50 <_reclaim_reent+0x68>
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fbda 	bl	8007404 <_free_r>
 8006c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c52:	b111      	cbz	r1, 8006c5a <_reclaim_reent+0x72>
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 fbd5 	bl	8007404 <_free_r>
 8006c5a:	69a3      	ldr	r3, [r4, #24]
 8006c5c:	b1e3      	cbz	r3, 8006c98 <_reclaim_reent+0xb0>
 8006c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c60:	4620      	mov	r0, r4
 8006c62:	4798      	blx	r3
 8006c64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c66:	b1b9      	cbz	r1, 8006c98 <_reclaim_reent+0xb0>
 8006c68:	4620      	mov	r0, r4
 8006c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c6e:	f7ff bfad 	b.w	8006bcc <cleanup_glue>
 8006c72:	5949      	ldr	r1, [r1, r5]
 8006c74:	b941      	cbnz	r1, 8006c88 <_reclaim_reent+0xa0>
 8006c76:	3504      	adds	r5, #4
 8006c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c7a:	2d80      	cmp	r5, #128	; 0x80
 8006c7c:	68d9      	ldr	r1, [r3, #12]
 8006c7e:	d1f8      	bne.n	8006c72 <_reclaim_reent+0x8a>
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fbbf 	bl	8007404 <_free_r>
 8006c86:	e7ba      	b.n	8006bfe <_reclaim_reent+0x16>
 8006c88:	680e      	ldr	r6, [r1, #0]
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fbba 	bl	8007404 <_free_r>
 8006c90:	4631      	mov	r1, r6
 8006c92:	e7ef      	b.n	8006c74 <_reclaim_reent+0x8c>
 8006c94:	2500      	movs	r5, #0
 8006c96:	e7ef      	b.n	8006c78 <_reclaim_reent+0x90>
 8006c98:	bd70      	pop	{r4, r5, r6, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000020 	.word	0x20000020

08006ca0 <_sbrk_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d06      	ldr	r5, [pc, #24]	; (8006cbc <_sbrk_r+0x1c>)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fa f94e 	bl	8000f4c <_sbrk>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_sbrk_r+0x1a>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_sbrk_r+0x1a>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	20002d24 	.word	0x20002d24

08006cc0 <__sread>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	f000 ff1e 	bl	8007b08 <_read_r>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	bfab      	itete	ge
 8006cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cd4:	181b      	addge	r3, r3, r0
 8006cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cda:	bfac      	ite	ge
 8006cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cde:	81a3      	strhlt	r3, [r4, #12]
 8006ce0:	bd10      	pop	{r4, pc}

08006ce2 <__swrite>:
 8006ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce6:	461f      	mov	r7, r3
 8006ce8:	898b      	ldrh	r3, [r1, #12]
 8006cea:	05db      	lsls	r3, r3, #23
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	4616      	mov	r6, r2
 8006cf2:	d505      	bpl.n	8006d00 <__swrite+0x1e>
 8006cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f000 faf6 	bl	80072ec <_lseek_r>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	463b      	mov	r3, r7
 8006d10:	4628      	mov	r0, r5
 8006d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d16:	f000 b967 	b.w	8006fe8 <_write_r>

08006d1a <__sseek>:
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d22:	f000 fae3 	bl	80072ec <_lseek_r>
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	bf15      	itete	ne
 8006d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d36:	81a3      	strheq	r3, [r4, #12]
 8006d38:	bf18      	it	ne
 8006d3a:	81a3      	strhne	r3, [r4, #12]
 8006d3c:	bd10      	pop	{r4, pc}

08006d3e <__sclose>:
 8006d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d42:	f000 b9ef 	b.w	8007124 <_close_r>

08006d46 <strstr>:
 8006d46:	780a      	ldrb	r2, [r1, #0]
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	b96a      	cbnz	r2, 8006d68 <strstr+0x22>
 8006d4c:	bd70      	pop	{r4, r5, r6, pc}
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d109      	bne.n	8006d66 <strstr+0x20>
 8006d52:	460c      	mov	r4, r1
 8006d54:	4605      	mov	r5, r0
 8006d56:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0f6      	beq.n	8006d4c <strstr+0x6>
 8006d5e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006d62:	429e      	cmp	r6, r3
 8006d64:	d0f7      	beq.n	8006d56 <strstr+0x10>
 8006d66:	3001      	adds	r0, #1
 8006d68:	7803      	ldrb	r3, [r0, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1ef      	bne.n	8006d4e <strstr+0x8>
 8006d6e:	4618      	mov	r0, r3
 8006d70:	e7ec      	b.n	8006d4c <strstr+0x6>
	...

08006d74 <strtok>:
 8006d74:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <strtok+0x5c>)
 8006d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d78:	681e      	ldr	r6, [r3, #0]
 8006d7a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	b9fc      	cbnz	r4, 8006dc0 <strtok+0x4c>
 8006d80:	2050      	movs	r0, #80	; 0x50
 8006d82:	9101      	str	r1, [sp, #4]
 8006d84:	f000 fb2a 	bl	80073dc <malloc>
 8006d88:	9901      	ldr	r1, [sp, #4]
 8006d8a:	65b0      	str	r0, [r6, #88]	; 0x58
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	b920      	cbnz	r0, 8006d9a <strtok+0x26>
 8006d90:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <strtok+0x60>)
 8006d92:	4811      	ldr	r0, [pc, #68]	; (8006dd8 <strtok+0x64>)
 8006d94:	2157      	movs	r1, #87	; 0x57
 8006d96:	f000 f9a7 	bl	80070e8 <__assert_func>
 8006d9a:	e9c0 4400 	strd	r4, r4, [r0]
 8006d9e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006da2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006da6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006daa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006dae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006db2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006db6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006dba:	6184      	str	r4, [r0, #24]
 8006dbc:	7704      	strb	r4, [r0, #28]
 8006dbe:	6244      	str	r4, [r0, #36]	; 0x24
 8006dc0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	b002      	add	sp, #8
 8006dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dcc:	f000 b806 	b.w	8006ddc <__strtok_r>
 8006dd0:	20000020 	.word	0x20000020
 8006dd4:	08007d74 	.word	0x08007d74
 8006dd8:	08007d8b 	.word	0x08007d8b

08006ddc <__strtok_r>:
 8006ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dde:	b908      	cbnz	r0, 8006de4 <__strtok_r+0x8>
 8006de0:	6810      	ldr	r0, [r2, #0]
 8006de2:	b188      	cbz	r0, 8006e08 <__strtok_r+0x2c>
 8006de4:	4604      	mov	r4, r0
 8006de6:	4620      	mov	r0, r4
 8006de8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006dec:	460f      	mov	r7, r1
 8006dee:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006df2:	b91e      	cbnz	r6, 8006dfc <__strtok_r+0x20>
 8006df4:	b965      	cbnz	r5, 8006e10 <__strtok_r+0x34>
 8006df6:	6015      	str	r5, [r2, #0]
 8006df8:	4628      	mov	r0, r5
 8006dfa:	e005      	b.n	8006e08 <__strtok_r+0x2c>
 8006dfc:	42b5      	cmp	r5, r6
 8006dfe:	d1f6      	bne.n	8006dee <__strtok_r+0x12>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1f0      	bne.n	8006de6 <__strtok_r+0xa>
 8006e04:	6014      	str	r4, [r2, #0]
 8006e06:	7003      	strb	r3, [r0, #0]
 8006e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e0a:	461c      	mov	r4, r3
 8006e0c:	e00c      	b.n	8006e28 <__strtok_r+0x4c>
 8006e0e:	b915      	cbnz	r5, 8006e16 <__strtok_r+0x3a>
 8006e10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e14:	460e      	mov	r6, r1
 8006e16:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006e1a:	42ab      	cmp	r3, r5
 8006e1c:	d1f7      	bne.n	8006e0e <__strtok_r+0x32>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0f3      	beq.n	8006e0a <__strtok_r+0x2e>
 8006e22:	2300      	movs	r3, #0
 8006e24:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e28:	6014      	str	r4, [r2, #0]
 8006e2a:	e7ed      	b.n	8006e08 <__strtok_r+0x2c>

08006e2c <_strtol_l.constprop.0>:
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e32:	d001      	beq.n	8006e38 <_strtol_l.constprop.0+0xc>
 8006e34:	2b24      	cmp	r3, #36	; 0x24
 8006e36:	d906      	bls.n	8006e46 <_strtol_l.constprop.0+0x1a>
 8006e38:	f7ff fc7c 	bl	8006734 <__errno>
 8006e3c:	2316      	movs	r3, #22
 8006e3e:	6003      	str	r3, [r0, #0]
 8006e40:	2000      	movs	r0, #0
 8006e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f2c <_strtol_l.constprop.0+0x100>
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	462e      	mov	r6, r5
 8006e4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e52:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006e56:	f017 0708 	ands.w	r7, r7, #8
 8006e5a:	d1f7      	bne.n	8006e4c <_strtol_l.constprop.0+0x20>
 8006e5c:	2c2d      	cmp	r4, #45	; 0x2d
 8006e5e:	d132      	bne.n	8006ec6 <_strtol_l.constprop.0+0x9a>
 8006e60:	782c      	ldrb	r4, [r5, #0]
 8006e62:	2701      	movs	r7, #1
 8006e64:	1cb5      	adds	r5, r6, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d05b      	beq.n	8006f22 <_strtol_l.constprop.0+0xf6>
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d109      	bne.n	8006e82 <_strtol_l.constprop.0+0x56>
 8006e6e:	2c30      	cmp	r4, #48	; 0x30
 8006e70:	d107      	bne.n	8006e82 <_strtol_l.constprop.0+0x56>
 8006e72:	782c      	ldrb	r4, [r5, #0]
 8006e74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e78:	2c58      	cmp	r4, #88	; 0x58
 8006e7a:	d14d      	bne.n	8006f18 <_strtol_l.constprop.0+0xec>
 8006e7c:	786c      	ldrb	r4, [r5, #1]
 8006e7e:	2310      	movs	r3, #16
 8006e80:	3502      	adds	r5, #2
 8006e82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e86:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e8a:	f04f 0c00 	mov.w	ip, #0
 8006e8e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e92:	4666      	mov	r6, ip
 8006e94:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e98:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006e9c:	f1be 0f09 	cmp.w	lr, #9
 8006ea0:	d816      	bhi.n	8006ed0 <_strtol_l.constprop.0+0xa4>
 8006ea2:	4674      	mov	r4, lr
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	dd24      	ble.n	8006ef2 <_strtol_l.constprop.0+0xc6>
 8006ea8:	f1bc 0f00 	cmp.w	ip, #0
 8006eac:	db1e      	blt.n	8006eec <_strtol_l.constprop.0+0xc0>
 8006eae:	45b1      	cmp	r9, r6
 8006eb0:	d31c      	bcc.n	8006eec <_strtol_l.constprop.0+0xc0>
 8006eb2:	d101      	bne.n	8006eb8 <_strtol_l.constprop.0+0x8c>
 8006eb4:	45a2      	cmp	sl, r4
 8006eb6:	db19      	blt.n	8006eec <_strtol_l.constprop.0+0xc0>
 8006eb8:	fb06 4603 	mla	r6, r6, r3, r4
 8006ebc:	f04f 0c01 	mov.w	ip, #1
 8006ec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ec4:	e7e8      	b.n	8006e98 <_strtol_l.constprop.0+0x6c>
 8006ec6:	2c2b      	cmp	r4, #43	; 0x2b
 8006ec8:	bf04      	itt	eq
 8006eca:	782c      	ldrbeq	r4, [r5, #0]
 8006ecc:	1cb5      	addeq	r5, r6, #2
 8006ece:	e7ca      	b.n	8006e66 <_strtol_l.constprop.0+0x3a>
 8006ed0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006ed4:	f1be 0f19 	cmp.w	lr, #25
 8006ed8:	d801      	bhi.n	8006ede <_strtol_l.constprop.0+0xb2>
 8006eda:	3c37      	subs	r4, #55	; 0x37
 8006edc:	e7e2      	b.n	8006ea4 <_strtol_l.constprop.0+0x78>
 8006ede:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006ee2:	f1be 0f19 	cmp.w	lr, #25
 8006ee6:	d804      	bhi.n	8006ef2 <_strtol_l.constprop.0+0xc6>
 8006ee8:	3c57      	subs	r4, #87	; 0x57
 8006eea:	e7db      	b.n	8006ea4 <_strtol_l.constprop.0+0x78>
 8006eec:	f04f 3cff 	mov.w	ip, #4294967295
 8006ef0:	e7e6      	b.n	8006ec0 <_strtol_l.constprop.0+0x94>
 8006ef2:	f1bc 0f00 	cmp.w	ip, #0
 8006ef6:	da05      	bge.n	8006f04 <_strtol_l.constprop.0+0xd8>
 8006ef8:	2322      	movs	r3, #34	; 0x22
 8006efa:	6003      	str	r3, [r0, #0]
 8006efc:	4646      	mov	r6, r8
 8006efe:	b942      	cbnz	r2, 8006f12 <_strtol_l.constprop.0+0xe6>
 8006f00:	4630      	mov	r0, r6
 8006f02:	e79e      	b.n	8006e42 <_strtol_l.constprop.0+0x16>
 8006f04:	b107      	cbz	r7, 8006f08 <_strtol_l.constprop.0+0xdc>
 8006f06:	4276      	negs	r6, r6
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	d0f9      	beq.n	8006f00 <_strtol_l.constprop.0+0xd4>
 8006f0c:	f1bc 0f00 	cmp.w	ip, #0
 8006f10:	d000      	beq.n	8006f14 <_strtol_l.constprop.0+0xe8>
 8006f12:	1e69      	subs	r1, r5, #1
 8006f14:	6011      	str	r1, [r2, #0]
 8006f16:	e7f3      	b.n	8006f00 <_strtol_l.constprop.0+0xd4>
 8006f18:	2430      	movs	r4, #48	; 0x30
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1b1      	bne.n	8006e82 <_strtol_l.constprop.0+0x56>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	e7af      	b.n	8006e82 <_strtol_l.constprop.0+0x56>
 8006f22:	2c30      	cmp	r4, #48	; 0x30
 8006f24:	d0a5      	beq.n	8006e72 <_strtol_l.constprop.0+0x46>
 8006f26:	230a      	movs	r3, #10
 8006f28:	e7ab      	b.n	8006e82 <_strtol_l.constprop.0+0x56>
 8006f2a:	bf00      	nop
 8006f2c:	08007e25 	.word	0x08007e25

08006f30 <strtol>:
 8006f30:	4613      	mov	r3, r2
 8006f32:	460a      	mov	r2, r1
 8006f34:	4601      	mov	r1, r0
 8006f36:	4802      	ldr	r0, [pc, #8]	; (8006f40 <strtol+0x10>)
 8006f38:	6800      	ldr	r0, [r0, #0]
 8006f3a:	f7ff bf77 	b.w	8006e2c <_strtol_l.constprop.0>
 8006f3e:	bf00      	nop
 8006f40:	20000020 	.word	0x20000020

08006f44 <__swbuf_r>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	460e      	mov	r6, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	b118      	cbz	r0, 8006f56 <__swbuf_r+0x12>
 8006f4e:	6983      	ldr	r3, [r0, #24]
 8006f50:	b90b      	cbnz	r3, 8006f56 <__swbuf_r+0x12>
 8006f52:	f7ff fc4d 	bl	80067f0 <__sinit>
 8006f56:	4b21      	ldr	r3, [pc, #132]	; (8006fdc <__swbuf_r+0x98>)
 8006f58:	429c      	cmp	r4, r3
 8006f5a:	d12b      	bne.n	8006fb4 <__swbuf_r+0x70>
 8006f5c:	686c      	ldr	r4, [r5, #4]
 8006f5e:	69a3      	ldr	r3, [r4, #24]
 8006f60:	60a3      	str	r3, [r4, #8]
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	071a      	lsls	r2, r3, #28
 8006f66:	d52f      	bpl.n	8006fc8 <__swbuf_r+0x84>
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	b36b      	cbz	r3, 8006fc8 <__swbuf_r+0x84>
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	6820      	ldr	r0, [r4, #0]
 8006f70:	1ac0      	subs	r0, r0, r3
 8006f72:	6963      	ldr	r3, [r4, #20]
 8006f74:	b2f6      	uxtb	r6, r6
 8006f76:	4283      	cmp	r3, r0
 8006f78:	4637      	mov	r7, r6
 8006f7a:	dc04      	bgt.n	8006f86 <__swbuf_r+0x42>
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 f966 	bl	8007250 <_fflush_r>
 8006f84:	bb30      	cbnz	r0, 8006fd4 <__swbuf_r+0x90>
 8006f86:	68a3      	ldr	r3, [r4, #8]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	60a3      	str	r3, [r4, #8]
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	6022      	str	r2, [r4, #0]
 8006f92:	701e      	strb	r6, [r3, #0]
 8006f94:	6963      	ldr	r3, [r4, #20]
 8006f96:	3001      	adds	r0, #1
 8006f98:	4283      	cmp	r3, r0
 8006f9a:	d004      	beq.n	8006fa6 <__swbuf_r+0x62>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	07db      	lsls	r3, r3, #31
 8006fa0:	d506      	bpl.n	8006fb0 <__swbuf_r+0x6c>
 8006fa2:	2e0a      	cmp	r6, #10
 8006fa4:	d104      	bne.n	8006fb0 <__swbuf_r+0x6c>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f000 f951 	bl	8007250 <_fflush_r>
 8006fae:	b988      	cbnz	r0, 8006fd4 <__swbuf_r+0x90>
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <__swbuf_r+0x9c>)
 8006fb6:	429c      	cmp	r4, r3
 8006fb8:	d101      	bne.n	8006fbe <__swbuf_r+0x7a>
 8006fba:	68ac      	ldr	r4, [r5, #8]
 8006fbc:	e7cf      	b.n	8006f5e <__swbuf_r+0x1a>
 8006fbe:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <__swbuf_r+0xa0>)
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	bf08      	it	eq
 8006fc4:	68ec      	ldreq	r4, [r5, #12]
 8006fc6:	e7ca      	b.n	8006f5e <__swbuf_r+0x1a>
 8006fc8:	4621      	mov	r1, r4
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f000 f81e 	bl	800700c <__swsetup_r>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d0cb      	beq.n	8006f6c <__swbuf_r+0x28>
 8006fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fd8:	e7ea      	b.n	8006fb0 <__swbuf_r+0x6c>
 8006fda:	bf00      	nop
 8006fdc:	08007d30 	.word	0x08007d30
 8006fe0:	08007d50 	.word	0x08007d50
 8006fe4:	08007d10 	.word	0x08007d10

08006fe8 <_write_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d07      	ldr	r5, [pc, #28]	; (8007008 <_write_r+0x20>)
 8006fec:	4604      	mov	r4, r0
 8006fee:	4608      	mov	r0, r1
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	602a      	str	r2, [r5, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f7f9 ff57 	bl	8000eaa <_write>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_write_r+0x1e>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_write_r+0x1e>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20002d24 	.word	0x20002d24

0800700c <__swsetup_r>:
 800700c:	4b32      	ldr	r3, [pc, #200]	; (80070d8 <__swsetup_r+0xcc>)
 800700e:	b570      	push	{r4, r5, r6, lr}
 8007010:	681d      	ldr	r5, [r3, #0]
 8007012:	4606      	mov	r6, r0
 8007014:	460c      	mov	r4, r1
 8007016:	b125      	cbz	r5, 8007022 <__swsetup_r+0x16>
 8007018:	69ab      	ldr	r3, [r5, #24]
 800701a:	b913      	cbnz	r3, 8007022 <__swsetup_r+0x16>
 800701c:	4628      	mov	r0, r5
 800701e:	f7ff fbe7 	bl	80067f0 <__sinit>
 8007022:	4b2e      	ldr	r3, [pc, #184]	; (80070dc <__swsetup_r+0xd0>)
 8007024:	429c      	cmp	r4, r3
 8007026:	d10f      	bne.n	8007048 <__swsetup_r+0x3c>
 8007028:	686c      	ldr	r4, [r5, #4]
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007030:	0719      	lsls	r1, r3, #28
 8007032:	d42c      	bmi.n	800708e <__swsetup_r+0x82>
 8007034:	06dd      	lsls	r5, r3, #27
 8007036:	d411      	bmi.n	800705c <__swsetup_r+0x50>
 8007038:	2309      	movs	r3, #9
 800703a:	6033      	str	r3, [r6, #0]
 800703c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007040:	81a3      	strh	r3, [r4, #12]
 8007042:	f04f 30ff 	mov.w	r0, #4294967295
 8007046:	e03e      	b.n	80070c6 <__swsetup_r+0xba>
 8007048:	4b25      	ldr	r3, [pc, #148]	; (80070e0 <__swsetup_r+0xd4>)
 800704a:	429c      	cmp	r4, r3
 800704c:	d101      	bne.n	8007052 <__swsetup_r+0x46>
 800704e:	68ac      	ldr	r4, [r5, #8]
 8007050:	e7eb      	b.n	800702a <__swsetup_r+0x1e>
 8007052:	4b24      	ldr	r3, [pc, #144]	; (80070e4 <__swsetup_r+0xd8>)
 8007054:	429c      	cmp	r4, r3
 8007056:	bf08      	it	eq
 8007058:	68ec      	ldreq	r4, [r5, #12]
 800705a:	e7e6      	b.n	800702a <__swsetup_r+0x1e>
 800705c:	0758      	lsls	r0, r3, #29
 800705e:	d512      	bpl.n	8007086 <__swsetup_r+0x7a>
 8007060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007062:	b141      	cbz	r1, 8007076 <__swsetup_r+0x6a>
 8007064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007068:	4299      	cmp	r1, r3
 800706a:	d002      	beq.n	8007072 <__swsetup_r+0x66>
 800706c:	4630      	mov	r0, r6
 800706e:	f000 f9c9 	bl	8007404 <_free_r>
 8007072:	2300      	movs	r3, #0
 8007074:	6363      	str	r3, [r4, #52]	; 0x34
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800707c:	81a3      	strh	r3, [r4, #12]
 800707e:	2300      	movs	r3, #0
 8007080:	6063      	str	r3, [r4, #4]
 8007082:	6923      	ldr	r3, [r4, #16]
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	f043 0308 	orr.w	r3, r3, #8
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	6923      	ldr	r3, [r4, #16]
 8007090:	b94b      	cbnz	r3, 80070a6 <__swsetup_r+0x9a>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800709c:	d003      	beq.n	80070a6 <__swsetup_r+0x9a>
 800709e:	4621      	mov	r1, r4
 80070a0:	4630      	mov	r0, r6
 80070a2:	f000 f95b 	bl	800735c <__smakebuf_r>
 80070a6:	89a0      	ldrh	r0, [r4, #12]
 80070a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070ac:	f010 0301 	ands.w	r3, r0, #1
 80070b0:	d00a      	beq.n	80070c8 <__swsetup_r+0xbc>
 80070b2:	2300      	movs	r3, #0
 80070b4:	60a3      	str	r3, [r4, #8]
 80070b6:	6963      	ldr	r3, [r4, #20]
 80070b8:	425b      	negs	r3, r3
 80070ba:	61a3      	str	r3, [r4, #24]
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	b943      	cbnz	r3, 80070d2 <__swsetup_r+0xc6>
 80070c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070c4:	d1ba      	bne.n	800703c <__swsetup_r+0x30>
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	0781      	lsls	r1, r0, #30
 80070ca:	bf58      	it	pl
 80070cc:	6963      	ldrpl	r3, [r4, #20]
 80070ce:	60a3      	str	r3, [r4, #8]
 80070d0:	e7f4      	b.n	80070bc <__swsetup_r+0xb0>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e7f7      	b.n	80070c6 <__swsetup_r+0xba>
 80070d6:	bf00      	nop
 80070d8:	20000020 	.word	0x20000020
 80070dc:	08007d30 	.word	0x08007d30
 80070e0:	08007d50 	.word	0x08007d50
 80070e4:	08007d10 	.word	0x08007d10

080070e8 <__assert_func>:
 80070e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ea:	4614      	mov	r4, r2
 80070ec:	461a      	mov	r2, r3
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <__assert_func+0x2c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4605      	mov	r5, r0
 80070f4:	68d8      	ldr	r0, [r3, #12]
 80070f6:	b14c      	cbz	r4, 800710c <__assert_func+0x24>
 80070f8:	4b07      	ldr	r3, [pc, #28]	; (8007118 <__assert_func+0x30>)
 80070fa:	9100      	str	r1, [sp, #0]
 80070fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007100:	4906      	ldr	r1, [pc, #24]	; (800711c <__assert_func+0x34>)
 8007102:	462b      	mov	r3, r5
 8007104:	f000 f8e0 	bl	80072c8 <fiprintf>
 8007108:	f000 fd10 	bl	8007b2c <abort>
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <__assert_func+0x38>)
 800710e:	461c      	mov	r4, r3
 8007110:	e7f3      	b.n	80070fa <__assert_func+0x12>
 8007112:	bf00      	nop
 8007114:	20000020 	.word	0x20000020
 8007118:	08007de8 	.word	0x08007de8
 800711c:	08007df5 	.word	0x08007df5
 8007120:	08007e23 	.word	0x08007e23

08007124 <_close_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4d06      	ldr	r5, [pc, #24]	; (8007140 <_close_r+0x1c>)
 8007128:	2300      	movs	r3, #0
 800712a:	4604      	mov	r4, r0
 800712c:	4608      	mov	r0, r1
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	f7f9 fed7 	bl	8000ee2 <_close>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_close_r+0x1a>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_close_r+0x1a>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	20002d24 	.word	0x20002d24

08007144 <__sflush_r>:
 8007144:	898a      	ldrh	r2, [r1, #12]
 8007146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714a:	4605      	mov	r5, r0
 800714c:	0710      	lsls	r0, r2, #28
 800714e:	460c      	mov	r4, r1
 8007150:	d458      	bmi.n	8007204 <__sflush_r+0xc0>
 8007152:	684b      	ldr	r3, [r1, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	dc05      	bgt.n	8007164 <__sflush_r+0x20>
 8007158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800715a:	2b00      	cmp	r3, #0
 800715c:	dc02      	bgt.n	8007164 <__sflush_r+0x20>
 800715e:	2000      	movs	r0, #0
 8007160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007166:	2e00      	cmp	r6, #0
 8007168:	d0f9      	beq.n	800715e <__sflush_r+0x1a>
 800716a:	2300      	movs	r3, #0
 800716c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007170:	682f      	ldr	r7, [r5, #0]
 8007172:	602b      	str	r3, [r5, #0]
 8007174:	d032      	beq.n	80071dc <__sflush_r+0x98>
 8007176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	075a      	lsls	r2, r3, #29
 800717c:	d505      	bpl.n	800718a <__sflush_r+0x46>
 800717e:	6863      	ldr	r3, [r4, #4]
 8007180:	1ac0      	subs	r0, r0, r3
 8007182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007184:	b10b      	cbz	r3, 800718a <__sflush_r+0x46>
 8007186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007188:	1ac0      	subs	r0, r0, r3
 800718a:	2300      	movs	r3, #0
 800718c:	4602      	mov	r2, r0
 800718e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007190:	6a21      	ldr	r1, [r4, #32]
 8007192:	4628      	mov	r0, r5
 8007194:	47b0      	blx	r6
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	d106      	bne.n	80071aa <__sflush_r+0x66>
 800719c:	6829      	ldr	r1, [r5, #0]
 800719e:	291d      	cmp	r1, #29
 80071a0:	d82c      	bhi.n	80071fc <__sflush_r+0xb8>
 80071a2:	4a2a      	ldr	r2, [pc, #168]	; (800724c <__sflush_r+0x108>)
 80071a4:	40ca      	lsrs	r2, r1
 80071a6:	07d6      	lsls	r6, r2, #31
 80071a8:	d528      	bpl.n	80071fc <__sflush_r+0xb8>
 80071aa:	2200      	movs	r2, #0
 80071ac:	6062      	str	r2, [r4, #4]
 80071ae:	04d9      	lsls	r1, r3, #19
 80071b0:	6922      	ldr	r2, [r4, #16]
 80071b2:	6022      	str	r2, [r4, #0]
 80071b4:	d504      	bpl.n	80071c0 <__sflush_r+0x7c>
 80071b6:	1c42      	adds	r2, r0, #1
 80071b8:	d101      	bne.n	80071be <__sflush_r+0x7a>
 80071ba:	682b      	ldr	r3, [r5, #0]
 80071bc:	b903      	cbnz	r3, 80071c0 <__sflush_r+0x7c>
 80071be:	6560      	str	r0, [r4, #84]	; 0x54
 80071c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071c2:	602f      	str	r7, [r5, #0]
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d0ca      	beq.n	800715e <__sflush_r+0x1a>
 80071c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071cc:	4299      	cmp	r1, r3
 80071ce:	d002      	beq.n	80071d6 <__sflush_r+0x92>
 80071d0:	4628      	mov	r0, r5
 80071d2:	f000 f917 	bl	8007404 <_free_r>
 80071d6:	2000      	movs	r0, #0
 80071d8:	6360      	str	r0, [r4, #52]	; 0x34
 80071da:	e7c1      	b.n	8007160 <__sflush_r+0x1c>
 80071dc:	6a21      	ldr	r1, [r4, #32]
 80071de:	2301      	movs	r3, #1
 80071e0:	4628      	mov	r0, r5
 80071e2:	47b0      	blx	r6
 80071e4:	1c41      	adds	r1, r0, #1
 80071e6:	d1c7      	bne.n	8007178 <__sflush_r+0x34>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0c4      	beq.n	8007178 <__sflush_r+0x34>
 80071ee:	2b1d      	cmp	r3, #29
 80071f0:	d001      	beq.n	80071f6 <__sflush_r+0xb2>
 80071f2:	2b16      	cmp	r3, #22
 80071f4:	d101      	bne.n	80071fa <__sflush_r+0xb6>
 80071f6:	602f      	str	r7, [r5, #0]
 80071f8:	e7b1      	b.n	800715e <__sflush_r+0x1a>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	e7ad      	b.n	8007160 <__sflush_r+0x1c>
 8007204:	690f      	ldr	r7, [r1, #16]
 8007206:	2f00      	cmp	r7, #0
 8007208:	d0a9      	beq.n	800715e <__sflush_r+0x1a>
 800720a:	0793      	lsls	r3, r2, #30
 800720c:	680e      	ldr	r6, [r1, #0]
 800720e:	bf08      	it	eq
 8007210:	694b      	ldreq	r3, [r1, #20]
 8007212:	600f      	str	r7, [r1, #0]
 8007214:	bf18      	it	ne
 8007216:	2300      	movne	r3, #0
 8007218:	eba6 0807 	sub.w	r8, r6, r7
 800721c:	608b      	str	r3, [r1, #8]
 800721e:	f1b8 0f00 	cmp.w	r8, #0
 8007222:	dd9c      	ble.n	800715e <__sflush_r+0x1a>
 8007224:	6a21      	ldr	r1, [r4, #32]
 8007226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007228:	4643      	mov	r3, r8
 800722a:	463a      	mov	r2, r7
 800722c:	4628      	mov	r0, r5
 800722e:	47b0      	blx	r6
 8007230:	2800      	cmp	r0, #0
 8007232:	dc06      	bgt.n	8007242 <__sflush_r+0xfe>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	e78e      	b.n	8007160 <__sflush_r+0x1c>
 8007242:	4407      	add	r7, r0
 8007244:	eba8 0800 	sub.w	r8, r8, r0
 8007248:	e7e9      	b.n	800721e <__sflush_r+0xda>
 800724a:	bf00      	nop
 800724c:	20400001 	.word	0x20400001

08007250 <_fflush_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	690b      	ldr	r3, [r1, #16]
 8007254:	4605      	mov	r5, r0
 8007256:	460c      	mov	r4, r1
 8007258:	b913      	cbnz	r3, 8007260 <_fflush_r+0x10>
 800725a:	2500      	movs	r5, #0
 800725c:	4628      	mov	r0, r5
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	b118      	cbz	r0, 800726a <_fflush_r+0x1a>
 8007262:	6983      	ldr	r3, [r0, #24]
 8007264:	b90b      	cbnz	r3, 800726a <_fflush_r+0x1a>
 8007266:	f7ff fac3 	bl	80067f0 <__sinit>
 800726a:	4b14      	ldr	r3, [pc, #80]	; (80072bc <_fflush_r+0x6c>)
 800726c:	429c      	cmp	r4, r3
 800726e:	d11b      	bne.n	80072a8 <_fflush_r+0x58>
 8007270:	686c      	ldr	r4, [r5, #4]
 8007272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0ef      	beq.n	800725a <_fflush_r+0xa>
 800727a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800727c:	07d0      	lsls	r0, r2, #31
 800727e:	d404      	bmi.n	800728a <_fflush_r+0x3a>
 8007280:	0599      	lsls	r1, r3, #22
 8007282:	d402      	bmi.n	800728a <_fflush_r+0x3a>
 8007284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007286:	f7ff fb76 	bl	8006976 <__retarget_lock_acquire_recursive>
 800728a:	4628      	mov	r0, r5
 800728c:	4621      	mov	r1, r4
 800728e:	f7ff ff59 	bl	8007144 <__sflush_r>
 8007292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007294:	07da      	lsls	r2, r3, #31
 8007296:	4605      	mov	r5, r0
 8007298:	d4e0      	bmi.n	800725c <_fflush_r+0xc>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	059b      	lsls	r3, r3, #22
 800729e:	d4dd      	bmi.n	800725c <_fflush_r+0xc>
 80072a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072a2:	f7ff fb69 	bl	8006978 <__retarget_lock_release_recursive>
 80072a6:	e7d9      	b.n	800725c <_fflush_r+0xc>
 80072a8:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <_fflush_r+0x70>)
 80072aa:	429c      	cmp	r4, r3
 80072ac:	d101      	bne.n	80072b2 <_fflush_r+0x62>
 80072ae:	68ac      	ldr	r4, [r5, #8]
 80072b0:	e7df      	b.n	8007272 <_fflush_r+0x22>
 80072b2:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <_fflush_r+0x74>)
 80072b4:	429c      	cmp	r4, r3
 80072b6:	bf08      	it	eq
 80072b8:	68ec      	ldreq	r4, [r5, #12]
 80072ba:	e7da      	b.n	8007272 <_fflush_r+0x22>
 80072bc:	08007d30 	.word	0x08007d30
 80072c0:	08007d50 	.word	0x08007d50
 80072c4:	08007d10 	.word	0x08007d10

080072c8 <fiprintf>:
 80072c8:	b40e      	push	{r1, r2, r3}
 80072ca:	b503      	push	{r0, r1, lr}
 80072cc:	4601      	mov	r1, r0
 80072ce:	ab03      	add	r3, sp, #12
 80072d0:	4805      	ldr	r0, [pc, #20]	; (80072e8 <fiprintf+0x20>)
 80072d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d6:	6800      	ldr	r0, [r0, #0]
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	f000 f909 	bl	80074f0 <_vfiprintf_r>
 80072de:	b002      	add	sp, #8
 80072e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072e4:	b003      	add	sp, #12
 80072e6:	4770      	bx	lr
 80072e8:	20000020 	.word	0x20000020

080072ec <_lseek_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4d07      	ldr	r5, [pc, #28]	; (800730c <_lseek_r+0x20>)
 80072f0:	4604      	mov	r4, r0
 80072f2:	4608      	mov	r0, r1
 80072f4:	4611      	mov	r1, r2
 80072f6:	2200      	movs	r2, #0
 80072f8:	602a      	str	r2, [r5, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f7f9 fe18 	bl	8000f30 <_lseek>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_lseek_r+0x1e>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_lseek_r+0x1e>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	20002d24 	.word	0x20002d24

08007310 <__swhatbuf_r>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	460e      	mov	r6, r1
 8007314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007318:	2900      	cmp	r1, #0
 800731a:	b096      	sub	sp, #88	; 0x58
 800731c:	4614      	mov	r4, r2
 800731e:	461d      	mov	r5, r3
 8007320:	da08      	bge.n	8007334 <__swhatbuf_r+0x24>
 8007322:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	602a      	str	r2, [r5, #0]
 800732a:	061a      	lsls	r2, r3, #24
 800732c:	d410      	bmi.n	8007350 <__swhatbuf_r+0x40>
 800732e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007332:	e00e      	b.n	8007352 <__swhatbuf_r+0x42>
 8007334:	466a      	mov	r2, sp
 8007336:	f000 fc01 	bl	8007b3c <_fstat_r>
 800733a:	2800      	cmp	r0, #0
 800733c:	dbf1      	blt.n	8007322 <__swhatbuf_r+0x12>
 800733e:	9a01      	ldr	r2, [sp, #4]
 8007340:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007344:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007348:	425a      	negs	r2, r3
 800734a:	415a      	adcs	r2, r3
 800734c:	602a      	str	r2, [r5, #0]
 800734e:	e7ee      	b.n	800732e <__swhatbuf_r+0x1e>
 8007350:	2340      	movs	r3, #64	; 0x40
 8007352:	2000      	movs	r0, #0
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	b016      	add	sp, #88	; 0x58
 8007358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800735c <__smakebuf_r>:
 800735c:	898b      	ldrh	r3, [r1, #12]
 800735e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007360:	079d      	lsls	r5, r3, #30
 8007362:	4606      	mov	r6, r0
 8007364:	460c      	mov	r4, r1
 8007366:	d507      	bpl.n	8007378 <__smakebuf_r+0x1c>
 8007368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	6123      	str	r3, [r4, #16]
 8007370:	2301      	movs	r3, #1
 8007372:	6163      	str	r3, [r4, #20]
 8007374:	b002      	add	sp, #8
 8007376:	bd70      	pop	{r4, r5, r6, pc}
 8007378:	ab01      	add	r3, sp, #4
 800737a:	466a      	mov	r2, sp
 800737c:	f7ff ffc8 	bl	8007310 <__swhatbuf_r>
 8007380:	9900      	ldr	r1, [sp, #0]
 8007382:	4605      	mov	r5, r0
 8007384:	4630      	mov	r0, r6
 8007386:	f7ff fb21 	bl	80069cc <_malloc_r>
 800738a:	b948      	cbnz	r0, 80073a0 <__smakebuf_r+0x44>
 800738c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007390:	059a      	lsls	r2, r3, #22
 8007392:	d4ef      	bmi.n	8007374 <__smakebuf_r+0x18>
 8007394:	f023 0303 	bic.w	r3, r3, #3
 8007398:	f043 0302 	orr.w	r3, r3, #2
 800739c:	81a3      	strh	r3, [r4, #12]
 800739e:	e7e3      	b.n	8007368 <__smakebuf_r+0xc>
 80073a0:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <__smakebuf_r+0x7c>)
 80073a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	6020      	str	r0, [r4, #0]
 80073a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	9b00      	ldr	r3, [sp, #0]
 80073b0:	6163      	str	r3, [r4, #20]
 80073b2:	9b01      	ldr	r3, [sp, #4]
 80073b4:	6120      	str	r0, [r4, #16]
 80073b6:	b15b      	cbz	r3, 80073d0 <__smakebuf_r+0x74>
 80073b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073bc:	4630      	mov	r0, r6
 80073be:	f000 fbcf 	bl	8007b60 <_isatty_r>
 80073c2:	b128      	cbz	r0, 80073d0 <__smakebuf_r+0x74>
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	f023 0303 	bic.w	r3, r3, #3
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	89a0      	ldrh	r0, [r4, #12]
 80073d2:	4305      	orrs	r5, r0
 80073d4:	81a5      	strh	r5, [r4, #12]
 80073d6:	e7cd      	b.n	8007374 <__smakebuf_r+0x18>
 80073d8:	08006789 	.word	0x08006789

080073dc <malloc>:
 80073dc:	4b02      	ldr	r3, [pc, #8]	; (80073e8 <malloc+0xc>)
 80073de:	4601      	mov	r1, r0
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	f7ff baf3 	b.w	80069cc <_malloc_r>
 80073e6:	bf00      	nop
 80073e8:	20000020 	.word	0x20000020

080073ec <__malloc_lock>:
 80073ec:	4801      	ldr	r0, [pc, #4]	; (80073f4 <__malloc_lock+0x8>)
 80073ee:	f7ff bac2 	b.w	8006976 <__retarget_lock_acquire_recursive>
 80073f2:	bf00      	nop
 80073f4:	20002d18 	.word	0x20002d18

080073f8 <__malloc_unlock>:
 80073f8:	4801      	ldr	r0, [pc, #4]	; (8007400 <__malloc_unlock+0x8>)
 80073fa:	f7ff babd 	b.w	8006978 <__retarget_lock_release_recursive>
 80073fe:	bf00      	nop
 8007400:	20002d18 	.word	0x20002d18

08007404 <_free_r>:
 8007404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007406:	2900      	cmp	r1, #0
 8007408:	d044      	beq.n	8007494 <_free_r+0x90>
 800740a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740e:	9001      	str	r0, [sp, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f1a1 0404 	sub.w	r4, r1, #4
 8007416:	bfb8      	it	lt
 8007418:	18e4      	addlt	r4, r4, r3
 800741a:	f7ff ffe7 	bl	80073ec <__malloc_lock>
 800741e:	4a1e      	ldr	r2, [pc, #120]	; (8007498 <_free_r+0x94>)
 8007420:	9801      	ldr	r0, [sp, #4]
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	b933      	cbnz	r3, 8007434 <_free_r+0x30>
 8007426:	6063      	str	r3, [r4, #4]
 8007428:	6014      	str	r4, [r2, #0]
 800742a:	b003      	add	sp, #12
 800742c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007430:	f7ff bfe2 	b.w	80073f8 <__malloc_unlock>
 8007434:	42a3      	cmp	r3, r4
 8007436:	d908      	bls.n	800744a <_free_r+0x46>
 8007438:	6825      	ldr	r5, [r4, #0]
 800743a:	1961      	adds	r1, r4, r5
 800743c:	428b      	cmp	r3, r1
 800743e:	bf01      	itttt	eq
 8007440:	6819      	ldreq	r1, [r3, #0]
 8007442:	685b      	ldreq	r3, [r3, #4]
 8007444:	1949      	addeq	r1, r1, r5
 8007446:	6021      	streq	r1, [r4, #0]
 8007448:	e7ed      	b.n	8007426 <_free_r+0x22>
 800744a:	461a      	mov	r2, r3
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	b10b      	cbz	r3, 8007454 <_free_r+0x50>
 8007450:	42a3      	cmp	r3, r4
 8007452:	d9fa      	bls.n	800744a <_free_r+0x46>
 8007454:	6811      	ldr	r1, [r2, #0]
 8007456:	1855      	adds	r5, r2, r1
 8007458:	42a5      	cmp	r5, r4
 800745a:	d10b      	bne.n	8007474 <_free_r+0x70>
 800745c:	6824      	ldr	r4, [r4, #0]
 800745e:	4421      	add	r1, r4
 8007460:	1854      	adds	r4, r2, r1
 8007462:	42a3      	cmp	r3, r4
 8007464:	6011      	str	r1, [r2, #0]
 8007466:	d1e0      	bne.n	800742a <_free_r+0x26>
 8007468:	681c      	ldr	r4, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	6053      	str	r3, [r2, #4]
 800746e:	4421      	add	r1, r4
 8007470:	6011      	str	r1, [r2, #0]
 8007472:	e7da      	b.n	800742a <_free_r+0x26>
 8007474:	d902      	bls.n	800747c <_free_r+0x78>
 8007476:	230c      	movs	r3, #12
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	e7d6      	b.n	800742a <_free_r+0x26>
 800747c:	6825      	ldr	r5, [r4, #0]
 800747e:	1961      	adds	r1, r4, r5
 8007480:	428b      	cmp	r3, r1
 8007482:	bf04      	itt	eq
 8007484:	6819      	ldreq	r1, [r3, #0]
 8007486:	685b      	ldreq	r3, [r3, #4]
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	bf04      	itt	eq
 800748c:	1949      	addeq	r1, r1, r5
 800748e:	6021      	streq	r1, [r4, #0]
 8007490:	6054      	str	r4, [r2, #4]
 8007492:	e7ca      	b.n	800742a <_free_r+0x26>
 8007494:	b003      	add	sp, #12
 8007496:	bd30      	pop	{r4, r5, pc}
 8007498:	20002d1c 	.word	0x20002d1c

0800749c <__sfputc_r>:
 800749c:	6893      	ldr	r3, [r2, #8]
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	b410      	push	{r4}
 80074a4:	6093      	str	r3, [r2, #8]
 80074a6:	da08      	bge.n	80074ba <__sfputc_r+0x1e>
 80074a8:	6994      	ldr	r4, [r2, #24]
 80074aa:	42a3      	cmp	r3, r4
 80074ac:	db01      	blt.n	80074b2 <__sfputc_r+0x16>
 80074ae:	290a      	cmp	r1, #10
 80074b0:	d103      	bne.n	80074ba <__sfputc_r+0x1e>
 80074b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b6:	f7ff bd45 	b.w	8006f44 <__swbuf_r>
 80074ba:	6813      	ldr	r3, [r2, #0]
 80074bc:	1c58      	adds	r0, r3, #1
 80074be:	6010      	str	r0, [r2, #0]
 80074c0:	7019      	strb	r1, [r3, #0]
 80074c2:	4608      	mov	r0, r1
 80074c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <__sfputs_r>:
 80074ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074cc:	4606      	mov	r6, r0
 80074ce:	460f      	mov	r7, r1
 80074d0:	4614      	mov	r4, r2
 80074d2:	18d5      	adds	r5, r2, r3
 80074d4:	42ac      	cmp	r4, r5
 80074d6:	d101      	bne.n	80074dc <__sfputs_r+0x12>
 80074d8:	2000      	movs	r0, #0
 80074da:	e007      	b.n	80074ec <__sfputs_r+0x22>
 80074dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e0:	463a      	mov	r2, r7
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff ffda 	bl	800749c <__sfputc_r>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d1f3      	bne.n	80074d4 <__sfputs_r+0xa>
 80074ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074f0 <_vfiprintf_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	460d      	mov	r5, r1
 80074f6:	b09d      	sub	sp, #116	; 0x74
 80074f8:	4614      	mov	r4, r2
 80074fa:	4698      	mov	r8, r3
 80074fc:	4606      	mov	r6, r0
 80074fe:	b118      	cbz	r0, 8007508 <_vfiprintf_r+0x18>
 8007500:	6983      	ldr	r3, [r0, #24]
 8007502:	b90b      	cbnz	r3, 8007508 <_vfiprintf_r+0x18>
 8007504:	f7ff f974 	bl	80067f0 <__sinit>
 8007508:	4b89      	ldr	r3, [pc, #548]	; (8007730 <_vfiprintf_r+0x240>)
 800750a:	429d      	cmp	r5, r3
 800750c:	d11b      	bne.n	8007546 <_vfiprintf_r+0x56>
 800750e:	6875      	ldr	r5, [r6, #4]
 8007510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007512:	07d9      	lsls	r1, r3, #31
 8007514:	d405      	bmi.n	8007522 <_vfiprintf_r+0x32>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	059a      	lsls	r2, r3, #22
 800751a:	d402      	bmi.n	8007522 <_vfiprintf_r+0x32>
 800751c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800751e:	f7ff fa2a 	bl	8006976 <__retarget_lock_acquire_recursive>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	071b      	lsls	r3, r3, #28
 8007526:	d501      	bpl.n	800752c <_vfiprintf_r+0x3c>
 8007528:	692b      	ldr	r3, [r5, #16]
 800752a:	b9eb      	cbnz	r3, 8007568 <_vfiprintf_r+0x78>
 800752c:	4629      	mov	r1, r5
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff fd6c 	bl	800700c <__swsetup_r>
 8007534:	b1c0      	cbz	r0, 8007568 <_vfiprintf_r+0x78>
 8007536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007538:	07dc      	lsls	r4, r3, #31
 800753a:	d50e      	bpl.n	800755a <_vfiprintf_r+0x6a>
 800753c:	f04f 30ff 	mov.w	r0, #4294967295
 8007540:	b01d      	add	sp, #116	; 0x74
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	4b7b      	ldr	r3, [pc, #492]	; (8007734 <_vfiprintf_r+0x244>)
 8007548:	429d      	cmp	r5, r3
 800754a:	d101      	bne.n	8007550 <_vfiprintf_r+0x60>
 800754c:	68b5      	ldr	r5, [r6, #8]
 800754e:	e7df      	b.n	8007510 <_vfiprintf_r+0x20>
 8007550:	4b79      	ldr	r3, [pc, #484]	; (8007738 <_vfiprintf_r+0x248>)
 8007552:	429d      	cmp	r5, r3
 8007554:	bf08      	it	eq
 8007556:	68f5      	ldreq	r5, [r6, #12]
 8007558:	e7da      	b.n	8007510 <_vfiprintf_r+0x20>
 800755a:	89ab      	ldrh	r3, [r5, #12]
 800755c:	0598      	lsls	r0, r3, #22
 800755e:	d4ed      	bmi.n	800753c <_vfiprintf_r+0x4c>
 8007560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007562:	f7ff fa09 	bl	8006978 <__retarget_lock_release_recursive>
 8007566:	e7e9      	b.n	800753c <_vfiprintf_r+0x4c>
 8007568:	2300      	movs	r3, #0
 800756a:	9309      	str	r3, [sp, #36]	; 0x24
 800756c:	2320      	movs	r3, #32
 800756e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007572:	f8cd 800c 	str.w	r8, [sp, #12]
 8007576:	2330      	movs	r3, #48	; 0x30
 8007578:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800773c <_vfiprintf_r+0x24c>
 800757c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007580:	f04f 0901 	mov.w	r9, #1
 8007584:	4623      	mov	r3, r4
 8007586:	469a      	mov	sl, r3
 8007588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800758c:	b10a      	cbz	r2, 8007592 <_vfiprintf_r+0xa2>
 800758e:	2a25      	cmp	r2, #37	; 0x25
 8007590:	d1f9      	bne.n	8007586 <_vfiprintf_r+0x96>
 8007592:	ebba 0b04 	subs.w	fp, sl, r4
 8007596:	d00b      	beq.n	80075b0 <_vfiprintf_r+0xc0>
 8007598:	465b      	mov	r3, fp
 800759a:	4622      	mov	r2, r4
 800759c:	4629      	mov	r1, r5
 800759e:	4630      	mov	r0, r6
 80075a0:	f7ff ff93 	bl	80074ca <__sfputs_r>
 80075a4:	3001      	adds	r0, #1
 80075a6:	f000 80aa 	beq.w	80076fe <_vfiprintf_r+0x20e>
 80075aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ac:	445a      	add	r2, fp
 80075ae:	9209      	str	r2, [sp, #36]	; 0x24
 80075b0:	f89a 3000 	ldrb.w	r3, [sl]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80a2 	beq.w	80076fe <_vfiprintf_r+0x20e>
 80075ba:	2300      	movs	r3, #0
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295
 80075c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075c4:	f10a 0a01 	add.w	sl, sl, #1
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	9307      	str	r3, [sp, #28]
 80075cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075d0:	931a      	str	r3, [sp, #104]	; 0x68
 80075d2:	4654      	mov	r4, sl
 80075d4:	2205      	movs	r2, #5
 80075d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075da:	4858      	ldr	r0, [pc, #352]	; (800773c <_vfiprintf_r+0x24c>)
 80075dc:	f7f8 fe20 	bl	8000220 <memchr>
 80075e0:	9a04      	ldr	r2, [sp, #16]
 80075e2:	b9d8      	cbnz	r0, 800761c <_vfiprintf_r+0x12c>
 80075e4:	06d1      	lsls	r1, r2, #27
 80075e6:	bf44      	itt	mi
 80075e8:	2320      	movmi	r3, #32
 80075ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ee:	0713      	lsls	r3, r2, #28
 80075f0:	bf44      	itt	mi
 80075f2:	232b      	movmi	r3, #43	; 0x2b
 80075f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f8:	f89a 3000 	ldrb.w	r3, [sl]
 80075fc:	2b2a      	cmp	r3, #42	; 0x2a
 80075fe:	d015      	beq.n	800762c <_vfiprintf_r+0x13c>
 8007600:	9a07      	ldr	r2, [sp, #28]
 8007602:	4654      	mov	r4, sl
 8007604:	2000      	movs	r0, #0
 8007606:	f04f 0c0a 	mov.w	ip, #10
 800760a:	4621      	mov	r1, r4
 800760c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007610:	3b30      	subs	r3, #48	; 0x30
 8007612:	2b09      	cmp	r3, #9
 8007614:	d94e      	bls.n	80076b4 <_vfiprintf_r+0x1c4>
 8007616:	b1b0      	cbz	r0, 8007646 <_vfiprintf_r+0x156>
 8007618:	9207      	str	r2, [sp, #28]
 800761a:	e014      	b.n	8007646 <_vfiprintf_r+0x156>
 800761c:	eba0 0308 	sub.w	r3, r0, r8
 8007620:	fa09 f303 	lsl.w	r3, r9, r3
 8007624:	4313      	orrs	r3, r2
 8007626:	9304      	str	r3, [sp, #16]
 8007628:	46a2      	mov	sl, r4
 800762a:	e7d2      	b.n	80075d2 <_vfiprintf_r+0xe2>
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	1d19      	adds	r1, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	9103      	str	r1, [sp, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfbb      	ittet	lt
 8007638:	425b      	neglt	r3, r3
 800763a:	f042 0202 	orrlt.w	r2, r2, #2
 800763e:	9307      	strge	r3, [sp, #28]
 8007640:	9307      	strlt	r3, [sp, #28]
 8007642:	bfb8      	it	lt
 8007644:	9204      	strlt	r2, [sp, #16]
 8007646:	7823      	ldrb	r3, [r4, #0]
 8007648:	2b2e      	cmp	r3, #46	; 0x2e
 800764a:	d10c      	bne.n	8007666 <_vfiprintf_r+0x176>
 800764c:	7863      	ldrb	r3, [r4, #1]
 800764e:	2b2a      	cmp	r3, #42	; 0x2a
 8007650:	d135      	bne.n	80076be <_vfiprintf_r+0x1ce>
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	1d1a      	adds	r2, r3, #4
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	9203      	str	r2, [sp, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	bfb8      	it	lt
 800765e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007662:	3402      	adds	r4, #2
 8007664:	9305      	str	r3, [sp, #20]
 8007666:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800774c <_vfiprintf_r+0x25c>
 800766a:	7821      	ldrb	r1, [r4, #0]
 800766c:	2203      	movs	r2, #3
 800766e:	4650      	mov	r0, sl
 8007670:	f7f8 fdd6 	bl	8000220 <memchr>
 8007674:	b140      	cbz	r0, 8007688 <_vfiprintf_r+0x198>
 8007676:	2340      	movs	r3, #64	; 0x40
 8007678:	eba0 000a 	sub.w	r0, r0, sl
 800767c:	fa03 f000 	lsl.w	r0, r3, r0
 8007680:	9b04      	ldr	r3, [sp, #16]
 8007682:	4303      	orrs	r3, r0
 8007684:	3401      	adds	r4, #1
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800768c:	482c      	ldr	r0, [pc, #176]	; (8007740 <_vfiprintf_r+0x250>)
 800768e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007692:	2206      	movs	r2, #6
 8007694:	f7f8 fdc4 	bl	8000220 <memchr>
 8007698:	2800      	cmp	r0, #0
 800769a:	d03f      	beq.n	800771c <_vfiprintf_r+0x22c>
 800769c:	4b29      	ldr	r3, [pc, #164]	; (8007744 <_vfiprintf_r+0x254>)
 800769e:	bb1b      	cbnz	r3, 80076e8 <_vfiprintf_r+0x1f8>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	3307      	adds	r3, #7
 80076a4:	f023 0307 	bic.w	r3, r3, #7
 80076a8:	3308      	adds	r3, #8
 80076aa:	9303      	str	r3, [sp, #12]
 80076ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ae:	443b      	add	r3, r7
 80076b0:	9309      	str	r3, [sp, #36]	; 0x24
 80076b2:	e767      	b.n	8007584 <_vfiprintf_r+0x94>
 80076b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80076b8:	460c      	mov	r4, r1
 80076ba:	2001      	movs	r0, #1
 80076bc:	e7a5      	b.n	800760a <_vfiprintf_r+0x11a>
 80076be:	2300      	movs	r3, #0
 80076c0:	3401      	adds	r4, #1
 80076c2:	9305      	str	r3, [sp, #20]
 80076c4:	4619      	mov	r1, r3
 80076c6:	f04f 0c0a 	mov.w	ip, #10
 80076ca:	4620      	mov	r0, r4
 80076cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076d0:	3a30      	subs	r2, #48	; 0x30
 80076d2:	2a09      	cmp	r2, #9
 80076d4:	d903      	bls.n	80076de <_vfiprintf_r+0x1ee>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0c5      	beq.n	8007666 <_vfiprintf_r+0x176>
 80076da:	9105      	str	r1, [sp, #20]
 80076dc:	e7c3      	b.n	8007666 <_vfiprintf_r+0x176>
 80076de:	fb0c 2101 	mla	r1, ip, r1, r2
 80076e2:	4604      	mov	r4, r0
 80076e4:	2301      	movs	r3, #1
 80076e6:	e7f0      	b.n	80076ca <_vfiprintf_r+0x1da>
 80076e8:	ab03      	add	r3, sp, #12
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	462a      	mov	r2, r5
 80076ee:	4b16      	ldr	r3, [pc, #88]	; (8007748 <_vfiprintf_r+0x258>)
 80076f0:	a904      	add	r1, sp, #16
 80076f2:	4630      	mov	r0, r6
 80076f4:	f3af 8000 	nop.w
 80076f8:	4607      	mov	r7, r0
 80076fa:	1c78      	adds	r0, r7, #1
 80076fc:	d1d6      	bne.n	80076ac <_vfiprintf_r+0x1bc>
 80076fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007700:	07d9      	lsls	r1, r3, #31
 8007702:	d405      	bmi.n	8007710 <_vfiprintf_r+0x220>
 8007704:	89ab      	ldrh	r3, [r5, #12]
 8007706:	059a      	lsls	r2, r3, #22
 8007708:	d402      	bmi.n	8007710 <_vfiprintf_r+0x220>
 800770a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800770c:	f7ff f934 	bl	8006978 <__retarget_lock_release_recursive>
 8007710:	89ab      	ldrh	r3, [r5, #12]
 8007712:	065b      	lsls	r3, r3, #25
 8007714:	f53f af12 	bmi.w	800753c <_vfiprintf_r+0x4c>
 8007718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800771a:	e711      	b.n	8007540 <_vfiprintf_r+0x50>
 800771c:	ab03      	add	r3, sp, #12
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	462a      	mov	r2, r5
 8007722:	4b09      	ldr	r3, [pc, #36]	; (8007748 <_vfiprintf_r+0x258>)
 8007724:	a904      	add	r1, sp, #16
 8007726:	4630      	mov	r0, r6
 8007728:	f000 f880 	bl	800782c <_printf_i>
 800772c:	e7e4      	b.n	80076f8 <_vfiprintf_r+0x208>
 800772e:	bf00      	nop
 8007730:	08007d30 	.word	0x08007d30
 8007734:	08007d50 	.word	0x08007d50
 8007738:	08007d10 	.word	0x08007d10
 800773c:	08007f25 	.word	0x08007f25
 8007740:	08007f2f 	.word	0x08007f2f
 8007744:	00000000 	.word	0x00000000
 8007748:	080074cb 	.word	0x080074cb
 800774c:	08007f2b 	.word	0x08007f2b

08007750 <_printf_common>:
 8007750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007754:	4616      	mov	r6, r2
 8007756:	4699      	mov	r9, r3
 8007758:	688a      	ldr	r2, [r1, #8]
 800775a:	690b      	ldr	r3, [r1, #16]
 800775c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007760:	4293      	cmp	r3, r2
 8007762:	bfb8      	it	lt
 8007764:	4613      	movlt	r3, r2
 8007766:	6033      	str	r3, [r6, #0]
 8007768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800776c:	4607      	mov	r7, r0
 800776e:	460c      	mov	r4, r1
 8007770:	b10a      	cbz	r2, 8007776 <_printf_common+0x26>
 8007772:	3301      	adds	r3, #1
 8007774:	6033      	str	r3, [r6, #0]
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	0699      	lsls	r1, r3, #26
 800777a:	bf42      	ittt	mi
 800777c:	6833      	ldrmi	r3, [r6, #0]
 800777e:	3302      	addmi	r3, #2
 8007780:	6033      	strmi	r3, [r6, #0]
 8007782:	6825      	ldr	r5, [r4, #0]
 8007784:	f015 0506 	ands.w	r5, r5, #6
 8007788:	d106      	bne.n	8007798 <_printf_common+0x48>
 800778a:	f104 0a19 	add.w	sl, r4, #25
 800778e:	68e3      	ldr	r3, [r4, #12]
 8007790:	6832      	ldr	r2, [r6, #0]
 8007792:	1a9b      	subs	r3, r3, r2
 8007794:	42ab      	cmp	r3, r5
 8007796:	dc26      	bgt.n	80077e6 <_printf_common+0x96>
 8007798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800779c:	1e13      	subs	r3, r2, #0
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	bf18      	it	ne
 80077a2:	2301      	movne	r3, #1
 80077a4:	0692      	lsls	r2, r2, #26
 80077a6:	d42b      	bmi.n	8007800 <_printf_common+0xb0>
 80077a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077ac:	4649      	mov	r1, r9
 80077ae:	4638      	mov	r0, r7
 80077b0:	47c0      	blx	r8
 80077b2:	3001      	adds	r0, #1
 80077b4:	d01e      	beq.n	80077f4 <_printf_common+0xa4>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	68e5      	ldr	r5, [r4, #12]
 80077ba:	6832      	ldr	r2, [r6, #0]
 80077bc:	f003 0306 	and.w	r3, r3, #6
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	bf08      	it	eq
 80077c4:	1aad      	subeq	r5, r5, r2
 80077c6:	68a3      	ldr	r3, [r4, #8]
 80077c8:	6922      	ldr	r2, [r4, #16]
 80077ca:	bf0c      	ite	eq
 80077cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077d0:	2500      	movne	r5, #0
 80077d2:	4293      	cmp	r3, r2
 80077d4:	bfc4      	itt	gt
 80077d6:	1a9b      	subgt	r3, r3, r2
 80077d8:	18ed      	addgt	r5, r5, r3
 80077da:	2600      	movs	r6, #0
 80077dc:	341a      	adds	r4, #26
 80077de:	42b5      	cmp	r5, r6
 80077e0:	d11a      	bne.n	8007818 <_printf_common+0xc8>
 80077e2:	2000      	movs	r0, #0
 80077e4:	e008      	b.n	80077f8 <_printf_common+0xa8>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4652      	mov	r2, sl
 80077ea:	4649      	mov	r1, r9
 80077ec:	4638      	mov	r0, r7
 80077ee:	47c0      	blx	r8
 80077f0:	3001      	adds	r0, #1
 80077f2:	d103      	bne.n	80077fc <_printf_common+0xac>
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fc:	3501      	adds	r5, #1
 80077fe:	e7c6      	b.n	800778e <_printf_common+0x3e>
 8007800:	18e1      	adds	r1, r4, r3
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	2030      	movs	r0, #48	; 0x30
 8007806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800780a:	4422      	add	r2, r4
 800780c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007814:	3302      	adds	r3, #2
 8007816:	e7c7      	b.n	80077a8 <_printf_common+0x58>
 8007818:	2301      	movs	r3, #1
 800781a:	4622      	mov	r2, r4
 800781c:	4649      	mov	r1, r9
 800781e:	4638      	mov	r0, r7
 8007820:	47c0      	blx	r8
 8007822:	3001      	adds	r0, #1
 8007824:	d0e6      	beq.n	80077f4 <_printf_common+0xa4>
 8007826:	3601      	adds	r6, #1
 8007828:	e7d9      	b.n	80077de <_printf_common+0x8e>
	...

0800782c <_printf_i>:
 800782c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007830:	7e0f      	ldrb	r7, [r1, #24]
 8007832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007834:	2f78      	cmp	r7, #120	; 0x78
 8007836:	4691      	mov	r9, r2
 8007838:	4680      	mov	r8, r0
 800783a:	460c      	mov	r4, r1
 800783c:	469a      	mov	sl, r3
 800783e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007842:	d807      	bhi.n	8007854 <_printf_i+0x28>
 8007844:	2f62      	cmp	r7, #98	; 0x62
 8007846:	d80a      	bhi.n	800785e <_printf_i+0x32>
 8007848:	2f00      	cmp	r7, #0
 800784a:	f000 80d8 	beq.w	80079fe <_printf_i+0x1d2>
 800784e:	2f58      	cmp	r7, #88	; 0x58
 8007850:	f000 80a3 	beq.w	800799a <_printf_i+0x16e>
 8007854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800785c:	e03a      	b.n	80078d4 <_printf_i+0xa8>
 800785e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007862:	2b15      	cmp	r3, #21
 8007864:	d8f6      	bhi.n	8007854 <_printf_i+0x28>
 8007866:	a101      	add	r1, pc, #4	; (adr r1, 800786c <_printf_i+0x40>)
 8007868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800786c:	080078c5 	.word	0x080078c5
 8007870:	080078d9 	.word	0x080078d9
 8007874:	08007855 	.word	0x08007855
 8007878:	08007855 	.word	0x08007855
 800787c:	08007855 	.word	0x08007855
 8007880:	08007855 	.word	0x08007855
 8007884:	080078d9 	.word	0x080078d9
 8007888:	08007855 	.word	0x08007855
 800788c:	08007855 	.word	0x08007855
 8007890:	08007855 	.word	0x08007855
 8007894:	08007855 	.word	0x08007855
 8007898:	080079e5 	.word	0x080079e5
 800789c:	08007909 	.word	0x08007909
 80078a0:	080079c7 	.word	0x080079c7
 80078a4:	08007855 	.word	0x08007855
 80078a8:	08007855 	.word	0x08007855
 80078ac:	08007a07 	.word	0x08007a07
 80078b0:	08007855 	.word	0x08007855
 80078b4:	08007909 	.word	0x08007909
 80078b8:	08007855 	.word	0x08007855
 80078bc:	08007855 	.word	0x08007855
 80078c0:	080079cf 	.word	0x080079cf
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	1d1a      	adds	r2, r3, #4
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	602a      	str	r2, [r5, #0]
 80078cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d4:	2301      	movs	r3, #1
 80078d6:	e0a3      	b.n	8007a20 <_printf_i+0x1f4>
 80078d8:	6820      	ldr	r0, [r4, #0]
 80078da:	6829      	ldr	r1, [r5, #0]
 80078dc:	0606      	lsls	r6, r0, #24
 80078de:	f101 0304 	add.w	r3, r1, #4
 80078e2:	d50a      	bpl.n	80078fa <_printf_i+0xce>
 80078e4:	680e      	ldr	r6, [r1, #0]
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	2e00      	cmp	r6, #0
 80078ea:	da03      	bge.n	80078f4 <_printf_i+0xc8>
 80078ec:	232d      	movs	r3, #45	; 0x2d
 80078ee:	4276      	negs	r6, r6
 80078f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f4:	485e      	ldr	r0, [pc, #376]	; (8007a70 <_printf_i+0x244>)
 80078f6:	230a      	movs	r3, #10
 80078f8:	e019      	b.n	800792e <_printf_i+0x102>
 80078fa:	680e      	ldr	r6, [r1, #0]
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007902:	bf18      	it	ne
 8007904:	b236      	sxthne	r6, r6
 8007906:	e7ef      	b.n	80078e8 <_printf_i+0xbc>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	6820      	ldr	r0, [r4, #0]
 800790c:	1d19      	adds	r1, r3, #4
 800790e:	6029      	str	r1, [r5, #0]
 8007910:	0601      	lsls	r1, r0, #24
 8007912:	d501      	bpl.n	8007918 <_printf_i+0xec>
 8007914:	681e      	ldr	r6, [r3, #0]
 8007916:	e002      	b.n	800791e <_printf_i+0xf2>
 8007918:	0646      	lsls	r6, r0, #25
 800791a:	d5fb      	bpl.n	8007914 <_printf_i+0xe8>
 800791c:	881e      	ldrh	r6, [r3, #0]
 800791e:	4854      	ldr	r0, [pc, #336]	; (8007a70 <_printf_i+0x244>)
 8007920:	2f6f      	cmp	r7, #111	; 0x6f
 8007922:	bf0c      	ite	eq
 8007924:	2308      	moveq	r3, #8
 8007926:	230a      	movne	r3, #10
 8007928:	2100      	movs	r1, #0
 800792a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800792e:	6865      	ldr	r5, [r4, #4]
 8007930:	60a5      	str	r5, [r4, #8]
 8007932:	2d00      	cmp	r5, #0
 8007934:	bfa2      	ittt	ge
 8007936:	6821      	ldrge	r1, [r4, #0]
 8007938:	f021 0104 	bicge.w	r1, r1, #4
 800793c:	6021      	strge	r1, [r4, #0]
 800793e:	b90e      	cbnz	r6, 8007944 <_printf_i+0x118>
 8007940:	2d00      	cmp	r5, #0
 8007942:	d04d      	beq.n	80079e0 <_printf_i+0x1b4>
 8007944:	4615      	mov	r5, r2
 8007946:	fbb6 f1f3 	udiv	r1, r6, r3
 800794a:	fb03 6711 	mls	r7, r3, r1, r6
 800794e:	5dc7      	ldrb	r7, [r0, r7]
 8007950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007954:	4637      	mov	r7, r6
 8007956:	42bb      	cmp	r3, r7
 8007958:	460e      	mov	r6, r1
 800795a:	d9f4      	bls.n	8007946 <_printf_i+0x11a>
 800795c:	2b08      	cmp	r3, #8
 800795e:	d10b      	bne.n	8007978 <_printf_i+0x14c>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	07de      	lsls	r6, r3, #31
 8007964:	d508      	bpl.n	8007978 <_printf_i+0x14c>
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	6861      	ldr	r1, [r4, #4]
 800796a:	4299      	cmp	r1, r3
 800796c:	bfde      	ittt	le
 800796e:	2330      	movle	r3, #48	; 0x30
 8007970:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007974:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007978:	1b52      	subs	r2, r2, r5
 800797a:	6122      	str	r2, [r4, #16]
 800797c:	f8cd a000 	str.w	sl, [sp]
 8007980:	464b      	mov	r3, r9
 8007982:	aa03      	add	r2, sp, #12
 8007984:	4621      	mov	r1, r4
 8007986:	4640      	mov	r0, r8
 8007988:	f7ff fee2 	bl	8007750 <_printf_common>
 800798c:	3001      	adds	r0, #1
 800798e:	d14c      	bne.n	8007a2a <_printf_i+0x1fe>
 8007990:	f04f 30ff 	mov.w	r0, #4294967295
 8007994:	b004      	add	sp, #16
 8007996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799a:	4835      	ldr	r0, [pc, #212]	; (8007a70 <_printf_i+0x244>)
 800799c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079a0:	6829      	ldr	r1, [r5, #0]
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80079a8:	6029      	str	r1, [r5, #0]
 80079aa:	061d      	lsls	r5, r3, #24
 80079ac:	d514      	bpl.n	80079d8 <_printf_i+0x1ac>
 80079ae:	07df      	lsls	r7, r3, #31
 80079b0:	bf44      	itt	mi
 80079b2:	f043 0320 	orrmi.w	r3, r3, #32
 80079b6:	6023      	strmi	r3, [r4, #0]
 80079b8:	b91e      	cbnz	r6, 80079c2 <_printf_i+0x196>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	f023 0320 	bic.w	r3, r3, #32
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	2310      	movs	r3, #16
 80079c4:	e7b0      	b.n	8007928 <_printf_i+0xfc>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	f043 0320 	orr.w	r3, r3, #32
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	2378      	movs	r3, #120	; 0x78
 80079d0:	4828      	ldr	r0, [pc, #160]	; (8007a74 <_printf_i+0x248>)
 80079d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079d6:	e7e3      	b.n	80079a0 <_printf_i+0x174>
 80079d8:	0659      	lsls	r1, r3, #25
 80079da:	bf48      	it	mi
 80079dc:	b2b6      	uxthmi	r6, r6
 80079de:	e7e6      	b.n	80079ae <_printf_i+0x182>
 80079e0:	4615      	mov	r5, r2
 80079e2:	e7bb      	b.n	800795c <_printf_i+0x130>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	6826      	ldr	r6, [r4, #0]
 80079e8:	6961      	ldr	r1, [r4, #20]
 80079ea:	1d18      	adds	r0, r3, #4
 80079ec:	6028      	str	r0, [r5, #0]
 80079ee:	0635      	lsls	r5, r6, #24
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	d501      	bpl.n	80079f8 <_printf_i+0x1cc>
 80079f4:	6019      	str	r1, [r3, #0]
 80079f6:	e002      	b.n	80079fe <_printf_i+0x1d2>
 80079f8:	0670      	lsls	r0, r6, #25
 80079fa:	d5fb      	bpl.n	80079f4 <_printf_i+0x1c8>
 80079fc:	8019      	strh	r1, [r3, #0]
 80079fe:	2300      	movs	r3, #0
 8007a00:	6123      	str	r3, [r4, #16]
 8007a02:	4615      	mov	r5, r2
 8007a04:	e7ba      	b.n	800797c <_printf_i+0x150>
 8007a06:	682b      	ldr	r3, [r5, #0]
 8007a08:	1d1a      	adds	r2, r3, #4
 8007a0a:	602a      	str	r2, [r5, #0]
 8007a0c:	681d      	ldr	r5, [r3, #0]
 8007a0e:	6862      	ldr	r2, [r4, #4]
 8007a10:	2100      	movs	r1, #0
 8007a12:	4628      	mov	r0, r5
 8007a14:	f7f8 fc04 	bl	8000220 <memchr>
 8007a18:	b108      	cbz	r0, 8007a1e <_printf_i+0x1f2>
 8007a1a:	1b40      	subs	r0, r0, r5
 8007a1c:	6060      	str	r0, [r4, #4]
 8007a1e:	6863      	ldr	r3, [r4, #4]
 8007a20:	6123      	str	r3, [r4, #16]
 8007a22:	2300      	movs	r3, #0
 8007a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a28:	e7a8      	b.n	800797c <_printf_i+0x150>
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	462a      	mov	r2, r5
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4640      	mov	r0, r8
 8007a32:	47d0      	blx	sl
 8007a34:	3001      	adds	r0, #1
 8007a36:	d0ab      	beq.n	8007990 <_printf_i+0x164>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	079b      	lsls	r3, r3, #30
 8007a3c:	d413      	bmi.n	8007a66 <_printf_i+0x23a>
 8007a3e:	68e0      	ldr	r0, [r4, #12]
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	4298      	cmp	r0, r3
 8007a44:	bfb8      	it	lt
 8007a46:	4618      	movlt	r0, r3
 8007a48:	e7a4      	b.n	8007994 <_printf_i+0x168>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4632      	mov	r2, r6
 8007a4e:	4649      	mov	r1, r9
 8007a50:	4640      	mov	r0, r8
 8007a52:	47d0      	blx	sl
 8007a54:	3001      	adds	r0, #1
 8007a56:	d09b      	beq.n	8007990 <_printf_i+0x164>
 8007a58:	3501      	adds	r5, #1
 8007a5a:	68e3      	ldr	r3, [r4, #12]
 8007a5c:	9903      	ldr	r1, [sp, #12]
 8007a5e:	1a5b      	subs	r3, r3, r1
 8007a60:	42ab      	cmp	r3, r5
 8007a62:	dcf2      	bgt.n	8007a4a <_printf_i+0x21e>
 8007a64:	e7eb      	b.n	8007a3e <_printf_i+0x212>
 8007a66:	2500      	movs	r5, #0
 8007a68:	f104 0619 	add.w	r6, r4, #25
 8007a6c:	e7f5      	b.n	8007a5a <_printf_i+0x22e>
 8007a6e:	bf00      	nop
 8007a70:	08007f36 	.word	0x08007f36
 8007a74:	08007f47 	.word	0x08007f47

08007a78 <_putc_r>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	460d      	mov	r5, r1
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	4606      	mov	r6, r0
 8007a80:	b118      	cbz	r0, 8007a8a <_putc_r+0x12>
 8007a82:	6983      	ldr	r3, [r0, #24]
 8007a84:	b90b      	cbnz	r3, 8007a8a <_putc_r+0x12>
 8007a86:	f7fe feb3 	bl	80067f0 <__sinit>
 8007a8a:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <_putc_r+0x84>)
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	d124      	bne.n	8007ada <_putc_r+0x62>
 8007a90:	6874      	ldr	r4, [r6, #4]
 8007a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a94:	07d8      	lsls	r0, r3, #31
 8007a96:	d405      	bmi.n	8007aa4 <_putc_r+0x2c>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	0599      	lsls	r1, r3, #22
 8007a9c:	d402      	bmi.n	8007aa4 <_putc_r+0x2c>
 8007a9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aa0:	f7fe ff69 	bl	8006976 <__retarget_lock_acquire_recursive>
 8007aa4:	68a3      	ldr	r3, [r4, #8]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	60a3      	str	r3, [r4, #8]
 8007aac:	da05      	bge.n	8007aba <_putc_r+0x42>
 8007aae:	69a2      	ldr	r2, [r4, #24]
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	db1c      	blt.n	8007aee <_putc_r+0x76>
 8007ab4:	b2eb      	uxtb	r3, r5
 8007ab6:	2b0a      	cmp	r3, #10
 8007ab8:	d019      	beq.n	8007aee <_putc_r+0x76>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	6022      	str	r2, [r4, #0]
 8007ac0:	701d      	strb	r5, [r3, #0]
 8007ac2:	b2ed      	uxtb	r5, r5
 8007ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ac6:	07da      	lsls	r2, r3, #31
 8007ac8:	d405      	bmi.n	8007ad6 <_putc_r+0x5e>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	059b      	lsls	r3, r3, #22
 8007ace:	d402      	bmi.n	8007ad6 <_putc_r+0x5e>
 8007ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ad2:	f7fe ff51 	bl	8006978 <__retarget_lock_release_recursive>
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
 8007ada:	4b09      	ldr	r3, [pc, #36]	; (8007b00 <_putc_r+0x88>)
 8007adc:	429c      	cmp	r4, r3
 8007ade:	d101      	bne.n	8007ae4 <_putc_r+0x6c>
 8007ae0:	68b4      	ldr	r4, [r6, #8]
 8007ae2:	e7d6      	b.n	8007a92 <_putc_r+0x1a>
 8007ae4:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <_putc_r+0x8c>)
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	bf08      	it	eq
 8007aea:	68f4      	ldreq	r4, [r6, #12]
 8007aec:	e7d1      	b.n	8007a92 <_putc_r+0x1a>
 8007aee:	4629      	mov	r1, r5
 8007af0:	4622      	mov	r2, r4
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7ff fa26 	bl	8006f44 <__swbuf_r>
 8007af8:	4605      	mov	r5, r0
 8007afa:	e7e3      	b.n	8007ac4 <_putc_r+0x4c>
 8007afc:	08007d30 	.word	0x08007d30
 8007b00:	08007d50 	.word	0x08007d50
 8007b04:	08007d10 	.word	0x08007d10

08007b08 <_read_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	; (8007b28 <_read_r+0x20>)
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	602a      	str	r2, [r5, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f7f9 f9aa 	bl	8000e70 <_read>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_read_r+0x1e>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_read_r+0x1e>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20002d24 	.word	0x20002d24

08007b2c <abort>:
 8007b2c:	b508      	push	{r3, lr}
 8007b2e:	2006      	movs	r0, #6
 8007b30:	f000 f84e 	bl	8007bd0 <raise>
 8007b34:	2001      	movs	r0, #1
 8007b36:	f7f9 f991 	bl	8000e5c <_exit>
	...

08007b3c <_fstat_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d07      	ldr	r5, [pc, #28]	; (8007b5c <_fstat_r+0x20>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	4611      	mov	r1, r2
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	f7f9 f9d6 	bl	8000efa <_fstat>
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	d102      	bne.n	8007b58 <_fstat_r+0x1c>
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	b103      	cbz	r3, 8007b58 <_fstat_r+0x1c>
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	bd38      	pop	{r3, r4, r5, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20002d24 	.word	0x20002d24

08007b60 <_isatty_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d06      	ldr	r5, [pc, #24]	; (8007b7c <_isatty_r+0x1c>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	f7f9 f9d5 	bl	8000f1a <_isatty>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_isatty_r+0x1a>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_isatty_r+0x1a>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20002d24 	.word	0x20002d24

08007b80 <_raise_r>:
 8007b80:	291f      	cmp	r1, #31
 8007b82:	b538      	push	{r3, r4, r5, lr}
 8007b84:	4604      	mov	r4, r0
 8007b86:	460d      	mov	r5, r1
 8007b88:	d904      	bls.n	8007b94 <_raise_r+0x14>
 8007b8a:	2316      	movs	r3, #22
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b96:	b112      	cbz	r2, 8007b9e <_raise_r+0x1e>
 8007b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b9c:	b94b      	cbnz	r3, 8007bb2 <_raise_r+0x32>
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f000 f830 	bl	8007c04 <_getpid_r>
 8007ba4:	462a      	mov	r2, r5
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4620      	mov	r0, r4
 8007baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bae:	f000 b817 	b.w	8007be0 <_kill_r>
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d00a      	beq.n	8007bcc <_raise_r+0x4c>
 8007bb6:	1c59      	adds	r1, r3, #1
 8007bb8:	d103      	bne.n	8007bc2 <_raise_r+0x42>
 8007bba:	2316      	movs	r3, #22
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	e7e7      	b.n	8007b92 <_raise_r+0x12>
 8007bc2:	2400      	movs	r4, #0
 8007bc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bc8:	4628      	mov	r0, r5
 8007bca:	4798      	blx	r3
 8007bcc:	2000      	movs	r0, #0
 8007bce:	e7e0      	b.n	8007b92 <_raise_r+0x12>

08007bd0 <raise>:
 8007bd0:	4b02      	ldr	r3, [pc, #8]	; (8007bdc <raise+0xc>)
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	f7ff bfd3 	b.w	8007b80 <_raise_r>
 8007bda:	bf00      	nop
 8007bdc:	20000020 	.word	0x20000020

08007be0 <_kill_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4d07      	ldr	r5, [pc, #28]	; (8007c00 <_kill_r+0x20>)
 8007be4:	2300      	movs	r3, #0
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	602b      	str	r3, [r5, #0]
 8007bee:	f7f9 f925 	bl	8000e3c <_kill>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	d102      	bne.n	8007bfc <_kill_r+0x1c>
 8007bf6:	682b      	ldr	r3, [r5, #0]
 8007bf8:	b103      	cbz	r3, 8007bfc <_kill_r+0x1c>
 8007bfa:	6023      	str	r3, [r4, #0]
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
 8007bfe:	bf00      	nop
 8007c00:	20002d24 	.word	0x20002d24

08007c04 <_getpid_r>:
 8007c04:	f7f9 b912 	b.w	8000e2c <_getpid>

08007c08 <_init>:
 8007c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0a:	bf00      	nop
 8007c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0e:	bc08      	pop	{r3}
 8007c10:	469e      	mov	lr, r3
 8007c12:	4770      	bx	lr

08007c14 <_fini>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	bf00      	nop
 8007c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1a:	bc08      	pop	{r3}
 8007c1c:	469e      	mov	lr, r3
 8007c1e:	4770      	bx	lr

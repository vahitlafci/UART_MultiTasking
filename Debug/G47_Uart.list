
G47_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008140  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008650  08008650  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008650  08008650  00018650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008658  08008658  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008658  08008658  00018658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800865c  0800865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cf4  20000084  080086e4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d78  080086e4  00022d78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a64b  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f2  00000000  00000000  0003a6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  0003f718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298b7  00000000  00000000  00040bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a351  00000000  00000000  0006a467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105aa5  00000000  00000000  000847b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018a25d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066e0  00000000  00000000  0018a2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008308 	.word	0x08008308

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08008308 	.word	0x08008308

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, LedTask_func, osPriorityNormal, 0, 256);
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_FREERTOS_Init+0x70>)
 80005cc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	682b      	ldr	r3, [r5, #0]
 80005d8:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80005da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 f964 	bl	80058ae <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_FREERTOS_Init+0x74>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, UartTask_Func, osPriorityIdle, 0, 1500);
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_FREERTOS_Init+0x78>)
 80005ee:	f107 0418 	add.w	r4, r7, #24
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	6023      	str	r3, [r4, #0]
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 f953 	bl	80058ae <osThreadCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <MX_FREERTOS_Init+0x7c>)
 800060c:	6013      	str	r3, [r2, #0]

  /* definition and creation of echoTask */
  osThreadDef(echoTask, echoTask_Func, osPriorityIdle, 0, 256);
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_FREERTOS_Init+0x80>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	682b      	ldr	r3, [r5, #0]
 800061a:	6023      	str	r3, [r4, #0]
  echoTaskHandle = osThreadCreate(osThread(echoTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f005 f944 	bl	80058ae <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <MX_FREERTOS_Init+0x84>)
 800062a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800062c:	bf00      	nop
 800062e:	3740      	adds	r7, #64	; 0x40
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08008340 	.word	0x08008340
 8000638:	20000110 	.word	0x20000110
 800063c:	08008354 	.word	0x08008354
 8000640:	20000114 	.word	0x20000114
 8000644:	08008368 	.word	0x08008368
 8000648:	20000118 	.word	0x20000118

0800064c <LedTask_func>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LedTask_func */
void LedTask_func(void const * argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask_func */
	/* Infinite loop */
	for (;;)
	{
		if (ledEvent == 1)
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <LedTask_func+0xbc>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d105      	bne.n	8000668 <LedTask_func+0x1c>
		{
			ledEvent = 0;
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <LedTask_func+0xbc>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
			led_state = STATE_LED_ON_INITIAL;
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <LedTask_func+0xc0>)
 8000664:	2202      	movs	r2, #2
 8000666:	701a      	strb	r2, [r3, #0]
		}
		switch (led_state)
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <LedTask_func+0xc0>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	2b03      	cmp	r3, #3
 8000670:	d845      	bhi.n	80006fe <LedTask_func+0xb2>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <LedTask_func+0x2c>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	080006d3 	.word	0x080006d3
 800067c:	08000689 	.word	0x08000689
 8000680:	080006ad 	.word	0x080006ad
 8000684:	0800069b 	.word	0x0800069b
		{
		case STATE_LED_ON_INITIAL:
			ledCounter = ledOnTime;
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <LedTask_func+0xc4>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <LedTask_func+0xc8>)
 8000690:	601a      	str	r2, [r3, #0]
			led_state = STATE_LED_ON_ONGOING;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <LedTask_func+0xc0>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
			break;
 8000698:	e031      	b.n	80006fe <LedTask_func+0xb2>
		case STATE_LED_OFF_INITIAL:
			ledCounter = ledOffTime;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <LedTask_func+0xcc>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <LedTask_func+0xc8>)
 80006a2:	601a      	str	r2, [r3, #0]
			led_state = STATE_LED_OFF_ONGOING;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <LedTask_func+0xc0>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	701a      	strb	r2, [r3, #0]
			break;
 80006aa:	e028      	b.n	80006fe <LedTask_func+0xb2>
		case STATE_LED_OFF_ONGOING:
			ledCounter--;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <LedTask_func+0xc8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <LedTask_func+0xc8>)
 80006b4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f001 fa4f 	bl	8001b60 <HAL_GPIO_WritePin>
			if (ledCounter == 0)
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <LedTask_func+0xc8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d116      	bne.n	80006f8 <LedTask_func+0xac>
			{
				led_state = STATE_LED_ON_INITIAL;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <LedTask_func+0xc0>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006d0:	e012      	b.n	80006f8 <LedTask_func+0xac>
		case STATE_LED_ON_ONGOING:
			ledCounter--;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <LedTask_func+0xc8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <LedTask_func+0xc8>)
 80006da:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f001 fa3c 	bl	8001b60 <HAL_GPIO_WritePin>
			if (ledCounter == 0)
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <LedTask_func+0xc8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d105      	bne.n	80006fc <LedTask_func+0xb0>
			{
				led_state = STATE_LED_OFF_INITIAL;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <LedTask_func+0xc0>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006f6:	e001      	b.n	80006fc <LedTask_func+0xb0>
			break;
 80006f8:	bf00      	nop
 80006fa:	e000      	b.n	80006fe <LedTask_func+0xb2>
			break;
 80006fc:	bf00      	nop
		}
		osDelay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f005 f8fc 	bl	80058fc <osDelay>
		if (ledEvent == 1)
 8000704:	e7a6      	b.n	8000654 <LedTask_func+0x8>
 8000706:	bf00      	nop
 8000708:	200000a0 	.word	0x200000a0
 800070c:	2000000c 	.word	0x2000000c
 8000710:	20000002 	.word	0x20000002
 8000714:	200000a4 	.word	0x200000a4
 8000718:	20000004 	.word	0x20000004

0800071c <UartTask_Func>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UartTask_Func */
void UartTask_Func(void const * argument)
{
 800071c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000720:	b089      	sub	sp, #36	; 0x24
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartTask_Func */
	/* Infinite loop */
	for (;;)
	{
		if (uartItFlag)
 8000726:	4b70      	ldr	r3, [pc, #448]	; (80008e8 <UartTask_Func+0x1cc>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d031      	beq.n	8000792 <UartTask_Func+0x76>
		{
			uartItFlag = 0;
 800072e:	4b6e      	ldr	r3, [pc, #440]	; (80008e8 <UartTask_Func+0x1cc>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
			start = cntr;
 8000734:	4b6d      	ldr	r3, [pc, #436]	; (80008ec <UartTask_Func+0x1d0>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	4b6d      	ldr	r3, [pc, #436]	; (80008f0 <UartTask_Func+0x1d4>)
 800073a:	701a      	strb	r2, [r3, #0]
			for (int i = start; i < start + BUFFER_LENGTH; i++)
 800073c:	4b6c      	ldr	r3, [pc, #432]	; (80008f0 <UartTask_Func+0x1d4>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	e020      	b.n	8000786 <UartTask_Func+0x6a>
			{
				rcvd_data = buffer[i];
 8000744:	4a6b      	ldr	r2, [pc, #428]	; (80008f4 <UartTask_Func+0x1d8>)
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	4413      	add	r3, r2
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <UartTask_Func+0x1dc>)
 800074e:	701a      	strb	r2, [r3, #0]
				if (rcvd_data == 10)
 8000750:	4b69      	ldr	r3, [pc, #420]	; (80008f8 <UartTask_Func+0x1dc>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b0a      	cmp	r3, #10
 8000756:	d10d      	bne.n	8000774 <UartTask_Func+0x58>
				{
					rcvd_complete = 1;
 8000758:	4b68      	ldr	r3, [pc, #416]	; (80008fc <UartTask_Func+0x1e0>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
					end = cntr;
 800075e:	4b63      	ldr	r3, [pc, #396]	; (80008ec <UartTask_Func+0x1d0>)
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	4b67      	ldr	r3, [pc, #412]	; (8000900 <UartTask_Func+0x1e4>)
 8000764:	701a      	strb	r2, [r3, #0]
					cntr++;
 8000766:	4b61      	ldr	r3, [pc, #388]	; (80008ec <UartTask_Func+0x1d0>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b5f      	ldr	r3, [pc, #380]	; (80008ec <UartTask_Func+0x1d0>)
 8000770:	701a      	strb	r2, [r3, #0]
					break;
 8000772:	e00e      	b.n	8000792 <UartTask_Func+0x76>
				}
				cntr++;
 8000774:	4b5d      	ldr	r3, [pc, #372]	; (80008ec <UartTask_Func+0x1d0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b5b      	ldr	r3, [pc, #364]	; (80008ec <UartTask_Func+0x1d0>)
 800077e:	701a      	strb	r2, [r3, #0]
			for (int i = start; i < start + BUFFER_LENGTH; i++)
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	3301      	adds	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b5a      	ldr	r3, [pc, #360]	; (80008f0 <UartTask_Func+0x1d4>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3331      	adds	r3, #49	; 0x31
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	429a      	cmp	r2, r3
 8000790:	ddd8      	ble.n	8000744 <UartTask_Func+0x28>
			}
		}

		if (rcvd_complete)
 8000792:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <UartTask_Func+0x1e0>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	f000 80a1 	beq.w	80008de <UartTask_Func+0x1c2>
		{
 800079c:	466b      	mov	r3, sp
 800079e:	461e      	mov	r6, r3
			uint8_t length = end - start;
 80007a0:	4b57      	ldr	r3, [pc, #348]	; (8000900 <UartTask_Func+0x1e4>)
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	4b52      	ldr	r3, [pc, #328]	; (80008f0 <UartTask_Func+0x1d4>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	75fb      	strb	r3, [r7, #23]
			uint8_t tmpData[length];
 80007ac:	7df9      	ldrb	r1, [r7, #23]
 80007ae:	460b      	mov	r3, r1
 80007b0:	3b01      	subs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	b2cb      	uxtb	r3, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	461c      	mov	r4, r3
 80007ba:	4615      	mov	r5, r2
 80007bc:	f04f 0200 	mov.w	r2, #0
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	00eb      	lsls	r3, r5, #3
 80007c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007ca:	00e2      	lsls	r2, r4, #3
 80007cc:	b2cb      	uxtb	r3, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	4698      	mov	r8, r3
 80007d2:	4691      	mov	r9, r2
 80007d4:	f04f 0200 	mov.w	r2, #0
 80007d8:	f04f 0300 	mov.w	r3, #0
 80007dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007e8:	460b      	mov	r3, r1
 80007ea:	3307      	adds	r3, #7
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	ebad 0d03 	sub.w	sp, sp, r3
 80007f4:	466b      	mov	r3, sp
 80007f6:	3300      	adds	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < length; i++)
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
 80007fe:	e01a      	b.n	8000836 <UartTask_Func+0x11a>
			{
				tmpData[i] = buffer[start + i];
 8000800:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <UartTask_Func+0x1d4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	4413      	add	r3, r2
 800080a:	4a3a      	ldr	r2, [pc, #232]	; (80008f4 <UartTask_Func+0x1d8>)
 800080c:	5cd1      	ldrb	r1, [r2, r3]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	4413      	add	r3, r2
 8000814:	460a      	mov	r2, r1
 8000816:	701a      	strb	r2, [r3, #0]
				echoData[i] = buffer[start + i];
 8000818:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <UartTask_Func+0x1d4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	4413      	add	r3, r2
 8000822:	4a34      	ldr	r2, [pc, #208]	; (80008f4 <UartTask_Func+0x1d8>)
 8000824:	5cd1      	ldrb	r1, [r2, r3]
 8000826:	4a37      	ldr	r2, [pc, #220]	; (8000904 <UartTask_Func+0x1e8>)
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	4413      	add	r3, r2
 800082c:	460a      	mov	r2, r1
 800082e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < length; i++)
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	3301      	adds	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	7dfb      	ldrb	r3, [r7, #23]
 8000838:	69fa      	ldr	r2, [r7, #28]
 800083a:	429a      	cmp	r2, r3
 800083c:	dbe0      	blt.n	8000800 <UartTask_Func+0xe4>
			}
			echoLength = length;
 800083e:	4a32      	ldr	r2, [pc, #200]	; (8000908 <UartTask_Func+0x1ec>)
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	7013      	strb	r3, [r2, #0]
			rcvd_complete = 0;
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <UartTask_Func+0x1e0>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
			strOp(&tmpData);
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 fa74 	bl	8000d38 <strOp>
			echoFlag = 1;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <UartTask_Func+0x1f0>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]

			switch (current_operation)
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <UartTask_Func+0x1f4>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2bff      	cmp	r3, #255	; 0xff
 800085c:	d016      	beq.n	800088c <UartTask_Func+0x170>
 800085e:	2bff      	cmp	r3, #255	; 0xff
 8000860:	dc37      	bgt.n	80008d2 <UartTask_Func+0x1b6>
 8000862:	2b05      	cmp	r3, #5
 8000864:	d025      	beq.n	80008b2 <UartTask_Func+0x196>
 8000866:	2b05      	cmp	r3, #5
 8000868:	dc33      	bgt.n	80008d2 <UartTask_Func+0x1b6>
 800086a:	2b03      	cmp	r3, #3
 800086c:	d012      	beq.n	8000894 <UartTask_Func+0x178>
 800086e:	2b04      	cmp	r3, #4
 8000870:	d12f      	bne.n	80008d2 <UartTask_Func+0x1b6>
			{
			case OP_STOP:
				if (!taskStopped)
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <UartTask_Func+0x1f8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d12f      	bne.n	80008da <UartTask_Func+0x1be>
				{
					vTaskSuspend(echoTaskHandle);
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <UartTask_Func+0x1fc>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f005 fa82 	bl	8005d88 <vTaskSuspend>
					taskStopped = 1;
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <UartTask_Func+0x1f8>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
				}
				break;
 800088a:	e026      	b.n	80008da <UartTask_Func+0x1be>
			case OP_INVALID:
				printf("E_N_OK\n");
 800088c:	4823      	ldr	r0, [pc, #140]	; (800091c <UartTask_Func+0x200>)
 800088e:	f006 fd15 	bl	80072bc <puts>
				break;
 8000892:	e023      	b.n	80008dc <UartTask_Func+0x1c0>
			case OP_START:
				if (taskStopped)
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <UartTask_Func+0x1f8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d007      	beq.n	80008ac <UartTask_Func+0x190>
				{
					vTaskResume(echoTaskHandle);
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <UartTask_Func+0x1fc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f005 fb35 	bl	8005f10 <vTaskResume>
					taskStopped = 0;
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <UartTask_Func+0x1f8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
				}
				echoFlag = 1;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <UartTask_Func+0x1f0>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
			case OP_BAUD:
				echoFlag = 1;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <UartTask_Func+0x1f0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Abort_IT(&hlpuart1);
 80008b8:	4819      	ldr	r0, [pc, #100]	; (8000920 <UartTask_Func+0x204>)
 80008ba:	f002 fedd 	bl	8003678 <HAL_UART_Abort_IT>
				HAL_UART_DeInit(&hlpuart1);
 80008be:	4818      	ldr	r0, [pc, #96]	; (8000920 <UartTask_Func+0x204>)
 80008c0:	f002 fdb2 	bl	8003428 <HAL_UART_DeInit>
				MX_LPUART1_UART_Init();
 80008c4:	f000 fbec 	bl	80010a0 <MX_LPUART1_UART_Init>
				HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 80008c8:	2232      	movs	r2, #50	; 0x32
 80008ca:	490a      	ldr	r1, [pc, #40]	; (80008f4 <UartTask_Func+0x1d8>)
 80008cc:	4814      	ldr	r0, [pc, #80]	; (8000920 <UartTask_Func+0x204>)
 80008ce:	f002 fe7d 	bl	80035cc <HAL_UART_Receive_IT>
			default:
				echoFlag = 1;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <UartTask_Func+0x1f0>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
				break;
 80008d8:	e000      	b.n	80008dc <UartTask_Func+0x1c0>
				break;
 80008da:	bf00      	nop
 80008dc:	46b5      	mov	sp, r6
			}
		}
		osDelay(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f005 f80c 	bl	80058fc <osDelay>
		if (uartItFlag)
 80008e4:	e71f      	b.n	8000726 <UartTask_Func+0xa>
 80008e6:	bf00      	nop
 80008e8:	2000011c 	.word	0x2000011c
 80008ec:	20000321 	.word	0x20000321
 80008f0:	20000323 	.word	0x20000323
 80008f4:	20000120 	.word	0x20000120
 80008f8:	20000320 	.word	0x20000320
 80008fc:	20000322 	.word	0x20000322
 8000900:	20000324 	.word	0x20000324
 8000904:	200000a8 	.word	0x200000a8
 8000908:	2000010c 	.word	0x2000010c
 800090c:	2000010d 	.word	0x2000010d
 8000910:	20000000 	.word	0x20000000
 8000914:	2000000d 	.word	0x2000000d
 8000918:	20000118 	.word	0x20000118
 800091c:	0800837c 	.word	0x0800837c
 8000920:	20000380 	.word	0x20000380

08000924 <echoTask_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_echoTask_Func */
void echoTask_Func(void const * argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN echoTask_Func */
  /* Infinite loop */
  for(;;)
  {
	if(echoFlag) {
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <echoTask_Func+0x38>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00e      	beq.n	8000952 <echoTask_Func+0x2e>
		echoFlag = 0;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <echoTask_Func+0x38>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1,echoData, echoLength, 0xFFFF);
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <echoTask_Func+0x3c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b29a      	uxth	r2, r3
 8000940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <echoTask_Func+0x40>)
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <echoTask_Func+0x44>)
 8000948:	f002 fdaa 	bl	80034a0 <HAL_UART_Transmit>
		printf("\n");
 800094c:	200a      	movs	r0, #10
 800094e:	f006 fc31 	bl	80071b4 <putchar>
	}
    osDelay(20);
 8000952:	2014      	movs	r0, #20
 8000954:	f004 ffd2 	bl	80058fc <osDelay>
	if(echoFlag) {
 8000958:	e7e8      	b.n	800092c <echoTask_Func+0x8>
 800095a:	bf00      	nop
 800095c:	2000010d 	.word	0x2000010d
 8000960:	2000010c 	.word	0x2000010c
 8000964:	200000a8 	.word	0x200000a8
 8000968:	20000380 	.word	0x20000380

0800096c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a2e      	ldr	r2, [pc, #184]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099a:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MX_GPIO_Init+0xd4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f001 f8b9 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_GPIO_Init+0xd8>)
 8000a06:	f000 fe47 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a24:	f000 fe38 	bl	8001698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f000 fd3d 	bl	80014ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f000 fd54 	bl	80014e0 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	48000800 	.word	0x48000800

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 fc1b 	bl	8001286 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f814 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f7ff ff8a 	bl	800096c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000a58:	f000 fb22 	bl	80010a0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 8000a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a60:	4904      	ldr	r1, [pc, #16]	; (8000a74 <main+0x2c>)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <main+0x30>)
 8000a64:	f002 fdb2 	bl	80035cc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a68:	f7ff fdac 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a6c:	f004 ff18 	bl	80058a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <main+0x28>
 8000a72:	bf00      	nop
 8000a74:	20000120 	.word	0x20000120
 8000a78:	20000380 	.word	0x20000380

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	2238      	movs	r2, #56	; 0x38
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f006 faf5 	bl	800707a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f001 f89a 	bl	8001bd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000abe:	2355      	movs	r3, #85	; 0x55
 8000ac0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f934 	bl	8001d40 <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ade:	f000 f855 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2104      	movs	r1, #4
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fc38 	bl	8002370 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b06:	f000 f841 	bl	8000b8c <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&hlpuart1, buffer, BUFFER_LENGTH);
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	4905      	ldr	r1, [pc, #20]	; (8000b38 <HAL_UART_RxCpltCallback+0x24>)
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <HAL_UART_RxCpltCallback+0x28>)
 8000b24:	f002 fd52 	bl	80035cc <HAL_UART_Receive_IT>
	  uartItFlag = 1;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_UART_RxCpltCallback+0x2c>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]

}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000120 	.word	0x20000120
 8000b3c:	20000380 	.word	0x20000380
 8000b40:	2000011c 	.word	0x2000011c

08000b44 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000b4c:	1d39      	adds	r1, r7, #4
 8000b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b52:	2201      	movs	r2, #1
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <__io_putchar+0x20>)
 8000b56:	f002 fca3 	bl	80034a0 <HAL_UART_Transmit>

  return ch;
 8000b5a:	687b      	ldr	r3, [r7, #4]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000380 	.word	0x20000380

08000b68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b7a:	f000 fb9d 	bl	80012b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012c00 	.word	0x40012c00

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_MspInit+0x50>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <HAL_MspInit+0x50>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_MspInit+0x50>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_MspInit+0x50>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <HAL_MspInit+0x50>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x50>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	f06f 0001 	mvn.w	r0, #1
 8000bd6:	f000 fc69 	bl	80014ac <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bda:	f001 f8a1 	bl	8001d20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c02:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <HAL_InitTick+0xcc>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a2c      	ldr	r2, [pc, #176]	; (8000cb8 <HAL_InitTick+0xcc>)
 8000c08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <HAL_InitTick+0xcc>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1a:	f107 020c 	add.w	r2, r7, #12
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fd79 	bl	800271c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c2a:	f001 fd61 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8000c2e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c32:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	0c9b      	lsrs	r3, r3, #18
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_InitTick+0xd4>)
 8000c40:	4a20      	ldr	r2, [pc, #128]	; (8000cc4 <HAL_InitTick+0xd8>)
 8000c42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <HAL_InitTick+0xd4>)
 8000c46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c4a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <HAL_InitTick+0xd4>)
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_InitTick+0xd4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_InitTick+0xd4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <HAL_InitTick+0xd4>)
 8000c60:	f002 f822 	bl	8002ca8 <HAL_TIM_Base_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d11b      	bne.n	8000caa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c72:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <HAL_InitTick+0xd4>)
 8000c74:	f002 f87a 	bl	8002d6c <HAL_TIM_Base_Start_IT>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d111      	bne.n	8000caa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c86:	2019      	movs	r0, #25
 8000c88:	f000 fc2a 	bl	80014e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b0f      	cmp	r3, #15
 8000c90:	d808      	bhi.n	8000ca4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c92:	2200      	movs	r2, #0
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	2019      	movs	r0, #25
 8000c98:	f000 fc08 	bl	80014ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_InitTick+0xdc>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e002      	b.n	8000caa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3730      	adds	r7, #48	; 0x30
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	431bde83 	.word	0x431bde83
 8000cc0:	20000328 	.word	0x20000328
 8000cc4:	40012c00 	.word	0x40012c00
 8000cc8:	20000014 	.word	0x20000014

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cfe:	f002 f8ad 	bl	8002e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000328 	.word	0x20000328

08000d0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d14:	f000 ff3c 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <LPUART1_IRQHandler+0x14>)
 8000d22:	f002 fddf 	bl	80038e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */
  uartItFlag=1;
 8000d26:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <LPUART1_IRQHandler+0x18>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END LPUART1_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000380 	.word	0x20000380
 8000d34:	2000011c 	.word	0x2000011c

08000d38 <strOp>:
    printf("%s\n", data);
    return;
}

void strOp(uint8_t *input)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    previous_operation = current_operation;
 8000d40:	4b5a      	ldr	r3, [pc, #360]	; (8000eac <strOp+0x174>)
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	4b5a      	ldr	r3, [pc, #360]	; (8000eb0 <strOp+0x178>)
 8000d46:	701a      	strb	r2, [r3, #0]
    int i = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
    char *p = strtok(input, "=");
 8000d4c:	4959      	ldr	r1, [pc, #356]	; (8000eb4 <strOp+0x17c>)
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f006 fb90 	bl	8007474 <strtok>
 8000d54:	6138      	str	r0, [r7, #16]
    char *array[2];

    while (p != NULL)
 8000d56:	e00d      	b.n	8000d74 <strOp+0x3c>
    {
        array[i++] = p;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	617a      	str	r2, [r7, #20]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	3318      	adds	r3, #24
 8000d62:	443b      	add	r3, r7
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	f843 2c10 	str.w	r2, [r3, #-16]
        p = strtok(NULL, "/");
 8000d6a:	4953      	ldr	r1, [pc, #332]	; (8000eb8 <strOp+0x180>)
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f006 fb81 	bl	8007474 <strtok>
 8000d72:	6138      	str	r0, [r7, #16]
    while (p != NULL)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1ee      	bne.n	8000d58 <strOp+0x20>
    }

    if (strstr(array[0], "ledon"))
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	494f      	ldr	r1, [pc, #316]	; (8000ebc <strOp+0x184>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f006 fb61 	bl	8007446 <strstr>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d013      	beq.n	8000db2 <strOp+0x7a>
    {
        if (previous_operation != OP_STOP)
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <strOp+0x178>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	f000 8087 	beq.w	8000ea2 <strOp+0x16a>
        {
            current_operation = OP_LED_ON;
 8000d94:	4b45      	ldr	r3, [pc, #276]	; (8000eac <strOp+0x174>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
            ledEvent = 1;
 8000d9a:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <strOp+0x188>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
            ledOnTime = atoi(array[1]);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 f842 	bl	8006e2c <atoi>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <strOp+0x18c>)
 8000dae:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        current_operation = OP_INVALID;
    }
    return;
 8000db0:	e077      	b.n	8000ea2 <strOp+0x16a>
    else if (strstr(array[0], "ledoff"))
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	4944      	ldr	r1, [pc, #272]	; (8000ec8 <strOp+0x190>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	f006 fb45 	bl	8007446 <strstr>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d012      	beq.n	8000de8 <strOp+0xb0>
        if (previous_operation != OP_STOP)
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <strOp+0x178>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d06b      	beq.n	8000ea2 <strOp+0x16a>
            current_operation = OP_LED_OFF;
 8000dca:	4b38      	ldr	r3, [pc, #224]	; (8000eac <strOp+0x174>)
 8000dcc:	2202      	movs	r2, #2
 8000dce:	701a      	strb	r2, [r3, #0]
            ledEvent = 1;
 8000dd0:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <strOp+0x188>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
            ledOffTime = atoi(array[1]);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 f827 	bl	8006e2c <atoi>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b3a      	ldr	r3, [pc, #232]	; (8000ecc <strOp+0x194>)
 8000de4:	801a      	strh	r2, [r3, #0]
    return;
 8000de6:	e05c      	b.n	8000ea2 <strOp+0x16a>
    else if (strstr(array[0], "start"))
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4939      	ldr	r1, [pc, #228]	; (8000ed0 <strOp+0x198>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f006 fb2a 	bl	8007446 <strstr>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00e      	beq.n	8000e16 <strOp+0xde>
        current_operation = OP_START;
 8000df8:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <strOp+0x174>)
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8000dfe:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <strOp+0x188>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
        ledOnTime = ledOnTime_previous;
 8000e04:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <strOp+0x19c>)
 8000e06:	881a      	ldrh	r2, [r3, #0]
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <strOp+0x18c>)
 8000e0a:	801a      	strh	r2, [r3, #0]
        ledOffTime = ledOffTime_previous;
 8000e0c:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <strOp+0x1a0>)
 8000e0e:	881a      	ldrh	r2, [r3, #0]
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <strOp+0x194>)
 8000e12:	801a      	strh	r2, [r3, #0]
    return;
 8000e14:	e045      	b.n	8000ea2 <strOp+0x16a>
    else if (strstr(array[0], "stop"))
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	4930      	ldr	r1, [pc, #192]	; (8000edc <strOp+0x1a4>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f006 fb13 	bl	8007446 <strstr>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d016      	beq.n	8000e54 <strOp+0x11c>
        current_operation = OP_STOP;
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <strOp+0x174>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	701a      	strb	r2, [r3, #0]
        ledEvent = 1;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <strOp+0x188>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
        ledOffTime_previous = ledOffTime;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <strOp+0x194>)
 8000e34:	881a      	ldrh	r2, [r3, #0]
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <strOp+0x1a0>)
 8000e38:	801a      	strh	r2, [r3, #0]
        ledOnTime_previous = ledOnTime;
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <strOp+0x18c>)
 8000e3c:	881a      	ldrh	r2, [r3, #0]
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <strOp+0x19c>)
 8000e40:	801a      	strh	r2, [r3, #0]
        ledOnTime = 1000;
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <strOp+0x18c>)
 8000e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e48:	801a      	strh	r2, [r3, #0]
        ledOffTime = 1000;
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <strOp+0x194>)
 8000e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e50:	801a      	strh	r2, [r3, #0]
    return;
 8000e52:	e026      	b.n	8000ea2 <strOp+0x16a>
    else if (strstr(array[0], "baud"))
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <strOp+0x1a8>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f006 faf4 	bl	8007446 <strstr>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00e      	beq.n	8000e82 <strOp+0x14a>
        current_operation = OP_BAUD;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <strOp+0x174>)
 8000e66:	2205      	movs	r2, #5
 8000e68:	701a      	strb	r2, [r3, #0]
        uartEvent = 1;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <strOp+0x1ac>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
        baud = atoi(array[1]);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 ffda 	bl	8006e2c <atoi>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <strOp+0x1b0>)
 8000e7e:	601a      	str	r2, [r3, #0]
    return;
 8000e80:	e00f      	b.n	8000ea2 <strOp+0x16a>
    else if (strstr(array[0], "wordlength"))
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	4919      	ldr	r1, [pc, #100]	; (8000eec <strOp+0x1b4>)
 8000e86:	4618      	mov	r0, r3
 8000e88:	f006 fadd 	bl	8007446 <strstr>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <strOp+0x162>
        current_operation = OP_INVALID; //  TODO(VahitL)
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <strOp+0x174>)
 8000e94:	22ff      	movs	r2, #255	; 0xff
 8000e96:	701a      	strb	r2, [r3, #0]
    return;
 8000e98:	e003      	b.n	8000ea2 <strOp+0x16a>
        current_operation = OP_INVALID;
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <strOp+0x174>)
 8000e9c:	22ff      	movs	r2, #255	; 0xff
 8000e9e:	701a      	strb	r2, [r3, #0]
    return;
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
}
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000378 	.word	0x20000378
 8000eb4:	08008384 	.word	0x08008384
 8000eb8:	08008388 	.word	0x08008388
 8000ebc:	0800838c 	.word	0x0800838c
 8000ec0:	200000a0 	.word	0x200000a0
 8000ec4:	20000002 	.word	0x20000002
 8000ec8:	08008394 	.word	0x08008394
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	0800839c 	.word	0x0800839c
 8000ed4:	20000374 	.word	0x20000374
 8000ed8:	20000376 	.word	0x20000376
 8000edc:	080083a4 	.word	0x080083a4
 8000ee0:	080083ac 	.word	0x080083ac
 8000ee4:	200000a1 	.word	0x200000a1
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	080083b4 	.word	0x080083b4

08000ef0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return 1;
 8000ef4:	2301      	movs	r3, #1
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_kill>:

int _kill(int pid, int sig)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f0a:	f005 ff93 	bl	8006e34 <__errno>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2216      	movs	r2, #22
 8000f12:	601a      	str	r2, [r3, #0]
  return -1;
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_exit>:

void _exit (int status)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ffe7 	bl	8000f00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f32:	e7fe      	b.n	8000f32 <_exit+0x12>

08000f34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e00a      	b.n	8000f5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f46:	f3af 8000 	nop.w
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	60ba      	str	r2, [r7, #8]
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf0      	blt.n	8000f46 <_read+0x12>
  }

  return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	e009      	b.n	8000f94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fddb 	bl	8000b44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbf1      	blt.n	8000f80 <_write+0x12>
  }
  return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_close>:

int _close(int file)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fce:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_isatty>:

int _isatty(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f005 fef8 	bl	8006e34 <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20020000 	.word	0x20020000
 8001070:	00000400 	.word	0x00000400
 8001074:	2000037c 	.word	0x2000037c
 8001078:	20002d78 	.word	0x20002d78

0800107c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010a6:	4a22      	ldr	r2, [pc, #136]	; (8001130 <MX_LPUART1_UART_Init+0x90>)
 80010a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010e4:	f002 f950 	bl	8003388 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010ee:	f7ff fd4d 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 80010f6:	f004 faf0 	bl	80056da <HAL_UARTEx_SetTxFifoThreshold>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001100:	f7ff fd44 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 8001108:	f004 fb25 	bl	8005756 <HAL_UARTEx_SetRxFifoThreshold>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001112:	f7ff fd3b 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_LPUART1_UART_Init+0x8c>)
 8001118:	f004 faa6 	bl	8005668 <HAL_UARTEx_DisableFifoMode>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001122:	f7ff fd33 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000380 	.word	0x20000380
 8001130:	40008000 	.word	0x40008000

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09e      	sub	sp, #120	; 0x78
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	2254      	movs	r2, #84	; 0x54
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f005 ff90 	bl	800707a <memset>
  if(uartHandle->Instance==LPUART1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <HAL_UART_MspInit+0xb8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d13e      	bne.n	80011e2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001164:	2320      	movs	r3, #32
 8001166:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fb4b 	bl	800280c <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800117c:	f7ff fd06 	bl	8000b8c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_UART_MspInit+0xbc>)
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <HAL_UART_MspInit+0xbc>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_UART_MspInit+0xbc>)
 800118e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_UART_MspInit+0xbc>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <HAL_UART_MspInit+0xbc>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_UART_MspInit+0xbc>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80011b0:	230c      	movs	r3, #12
 80011b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011c0:	230c      	movs	r3, #12
 80011c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ce:	f000 fa63 	bl	8001698 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2105      	movs	r1, #5
 80011d6:	205b      	movs	r0, #91	; 0x5b
 80011d8:	f000 f968 	bl	80014ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80011dc:	205b      	movs	r0, #91	; 0x5b
 80011de:	f000 f97f 	bl	80014e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80011e2:	bf00      	nop
 80011e4:	3778      	adds	r7, #120	; 0x78
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40008000 	.word	0x40008000
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_UART_MspDeInit+0x38>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10d      	bne.n	8001222 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_UART_MspDeInit+0x3c>)
 8001208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_UART_MspDeInit+0x3c>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, LPUART1_TX_Pin|LPUART1_RX_Pin);
 8001212:	210c      	movs	r1, #12
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f000 fbc0 	bl	800199c <HAL_GPIO_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800121c:	205b      	movs	r0, #91	; 0x5b
 800121e:	f000 f96d 	bl	80014fc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40008000 	.word	0x40008000
 8001230:	40021000 	.word	0x40021000

08001234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001236:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <LoopForever+0x6>)
  ldr r1, =_edata
 800123a:	490e      	ldr	r1, [pc, #56]	; (8001274 <LoopForever+0xa>)
  ldr r2, =_sidata
 800123c:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <LoopForever+0xe>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001250:	4c0b      	ldr	r4, [pc, #44]	; (8001280 <LoopForever+0x16>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800125e:	f7ff ff0d 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001262:	f005 fee3 	bl	800702c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001266:	f7ff fbef 	bl	8000a48 <main>

0800126a <LoopForever>:

LoopForever:
    b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   r0, =_estack
 800126c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001278:	08008660 	.word	0x08008660
  ldr r2, =_sbss
 800127c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001280:	20002d78 	.word	0x20002d78

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>

08001286 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 f900 	bl	8001496 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001296:	200f      	movs	r0, #15
 8001298:	f7ff fca8 	bl	8000bec <HAL_InitTick>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	e001      	b.n	80012ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a8:	f7ff fc76 	bl	8000b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ac:	79fb      	ldrb	r3, [r7, #7]

}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_IncTick+0x1c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_IncTick+0x20>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <HAL_IncTick+0x1c>)
 80012c8:	6013      	str	r3, [r2, #0]
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	20000410 	.word	0x20000410
 80012d8:	20000018 	.word	0x20000018

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000410 	.word	0x20000410

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db12      	blt.n	80013cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	490a      	ldr	r1, [pc, #40]	; (80013d8 <__NVIC_DisableIRQ+0x44>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	3320      	adds	r3, #32
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013c0:	f3bf 8f4f 	dsb	sy
}
 80013c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c6:	f3bf 8f6f 	isb	sy
}
 80013ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff28 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ba:	f7ff ff3f 	bl	800133c <__NVIC_GetPriorityGrouping>
 80014be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	6978      	ldr	r0, [r7, #20]
 80014c6:	f7ff ffb3 	bl	8001430 <NVIC_EncodePriority>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff82 	bl	80013dc <__NVIC_SetPriority>
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff32 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff42 	bl	8001394 <__NVIC_DisableIRQ>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d005      	beq.n	800153c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2204      	movs	r2, #4
 8001534:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	e037      	b.n	80015ac <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 020e 	bic.w	r2, r2, #14
 800154a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800155a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	2101      	movs	r1, #1
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001588:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00c      	beq.n	80015ac <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015aa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d00d      	beq.n	80015fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2204      	movs	r2, #4
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e047      	b.n	800168e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020e 	bic.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800162c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 021f 	and.w	r2, r3, #31
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800164a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00c      	beq.n	800166e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001662:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800166c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	4798      	blx	r3
    }
  }
  return status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016a6:	e15a      	b.n	800195e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 814c 	beq.w	8001958 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d005      	beq.n	80016d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d130      	bne.n	800173a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800170e:	2201      	movs	r2, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	f003 0201 	and.w	r2, r3, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b03      	cmp	r3, #3
 8001744:	d017      	beq.n	8001776 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d123      	bne.n	80017ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	6939      	ldr	r1, [r7, #16]
 80017c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0203 	and.w	r2, r3, #3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80a6 	beq.w	8001958 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180c:	4b5b      	ldr	r3, [pc, #364]	; (800197c <HAL_GPIO_Init+0x2e4>)
 800180e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001810:	4a5a      	ldr	r2, [pc, #360]	; (800197c <HAL_GPIO_Init+0x2e4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6613      	str	r3, [r2, #96]	; 0x60
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_GPIO_Init+0x2e4>)
 800181a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001824:	4a56      	ldr	r2, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184e:	d01f      	beq.n	8001890 <HAL_GPIO_Init+0x1f8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d019      	beq.n	800188c <HAL_GPIO_Init+0x1f4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a4b      	ldr	r2, [pc, #300]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d013      	beq.n	8001888 <HAL_GPIO_Init+0x1f0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a4a      	ldr	r2, [pc, #296]	; (800198c <HAL_GPIO_Init+0x2f4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1ec>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a49      	ldr	r2, [pc, #292]	; (8001990 <HAL_GPIO_Init+0x2f8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1e8>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a48      	ldr	r2, [pc, #288]	; (8001994 <HAL_GPIO_Init+0x2fc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1e4>
 8001878:	2305      	movs	r3, #5
 800187a:	e00a      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 800187c:	2306      	movs	r3, #6
 800187e:	e008      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001880:	2304      	movs	r3, #4
 8001882:	e006      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001884:	2303      	movs	r3, #3
 8001886:	e004      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001888:	2302      	movs	r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001890:	2300      	movs	r3, #0
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	f002 0203 	and.w	r2, r2, #3
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	4093      	lsls	r3, r2
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a2:	4937      	ldr	r1, [pc, #220]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b0:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_GPIO_Init+0x300>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d4:	4a30      	ldr	r2, [pc, #192]	; (8001998 <HAL_GPIO_Init+0x300>)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_GPIO_Init+0x300>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018fe:	4a26      	ldr	r2, [pc, #152]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_GPIO_Init+0x300>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f47f ae9d 	bne.w	80016a8 <HAL_GPIO_Init+0x10>
  }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000
 8001984:	48000400 	.word	0x48000400
 8001988:	48000800 	.word	0x48000800
 800198c:	48000c00 	.word	0x48000c00
 8001990:	48001000 	.word	0x48001000
 8001994:	48001400 	.word	0x48001400
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80019aa:	e0bd      	b.n	8001b28 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80019ac:	2201      	movs	r2, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80b0 	beq.w	8001b22 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80019c2:	4a60      	ldr	r2, [pc, #384]	; (8001b44 <HAL_GPIO_DeInit+0x1a8>)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ea:	d01f      	beq.n	8001a2c <HAL_GPIO_DeInit+0x90>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a56      	ldr	r2, [pc, #344]	; (8001b48 <HAL_GPIO_DeInit+0x1ac>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d019      	beq.n	8001a28 <HAL_GPIO_DeInit+0x8c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a55      	ldr	r2, [pc, #340]	; (8001b4c <HAL_GPIO_DeInit+0x1b0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d013      	beq.n	8001a24 <HAL_GPIO_DeInit+0x88>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a54      	ldr	r2, [pc, #336]	; (8001b50 <HAL_GPIO_DeInit+0x1b4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_GPIO_DeInit+0x84>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a53      	ldr	r2, [pc, #332]	; (8001b54 <HAL_GPIO_DeInit+0x1b8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_DeInit+0x80>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <HAL_GPIO_DeInit+0x1bc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_GPIO_DeInit+0x7c>
 8001a14:	2305      	movs	r3, #5
 8001a16:	e00a      	b.n	8001a2e <HAL_GPIO_DeInit+0x92>
 8001a18:	2306      	movs	r3, #6
 8001a1a:	e008      	b.n	8001a2e <HAL_GPIO_DeInit+0x92>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_DeInit+0x92>
 8001a20:	2303      	movs	r3, #3
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_DeInit+0x92>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_DeInit+0x92>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_DeInit+0x92>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d132      	bne.n	8001aa4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_GPIO_DeInit+0x1c0>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	4945      	ldr	r1, [pc, #276]	; (8001b5c <HAL_GPIO_DeInit+0x1c0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <HAL_GPIO_DeInit+0x1c0>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	4941      	ldr	r1, [pc, #260]	; (8001b5c <HAL_GPIO_DeInit+0x1c0>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001a5a:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <HAL_GPIO_DeInit+0x1c0>)
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	493e      	ldr	r1, [pc, #248]	; (8001b5c <HAL_GPIO_DeInit+0x1c0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001a68:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <HAL_GPIO_DeInit+0x1c0>)
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	493a      	ldr	r1, [pc, #232]	; (8001b5c <HAL_GPIO_DeInit+0x1c0>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001a86:	4a2f      	ldr	r2, [pc, #188]	; (8001b44 <HAL_GPIO_DeInit+0x1a8>)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	482b      	ldr	r0, [pc, #172]	; (8001b44 <HAL_GPIO_DeInit+0x1a8>)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2103      	movs	r1, #3
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	08d2      	lsrs	r2, r2, #3
 8001ad8:	4019      	ands	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2103      	movs	r1, #3
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	401a      	ands	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2101      	movs	r1, #1
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2103      	movs	r1, #3
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f47f af3b 	bne.w	80019ac <HAL_GPIO_DeInit+0x10>
  }
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40010000 	.word	0x40010000
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48001000 	.word	0x48001000
 8001b58:	48001400 	.word	0x48001400
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f806 	bl	8001bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d141      	bne.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be6:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf2:	d131      	bne.n	8001c58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf4:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfa:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c0c:	4a41      	ldr	r2, [pc, #260]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c14:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2232      	movs	r2, #50	; 0x32
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	4a3f      	ldr	r2, [pc, #252]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2a:	e002      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3e:	d102      	bne.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f2      	bne.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c46:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c52:	d158      	bne.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e057      	b.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c58:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c5e:	4a2d      	ldr	r2, [pc, #180]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c68:	e04d      	b.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c70:	d141      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7e:	d131      	bne.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c86:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c98:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2232      	movs	r2, #50	; 0x32
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	0c9b      	lsrs	r3, r3, #18
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb6:	e002      	b.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d102      	bne.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f2      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cde:	d112      	bne.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e011      	b.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cf4:	e007      	b.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40007000 	.word	0x40007000
 8001d18:	20000010 	.word	0x20000010
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2e:	6093      	str	r3, [r2, #8]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40007000 	.word	0x40007000

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e306      	b.n	8002360 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d075      	beq.n	8001e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5e:	4b97      	ldr	r3, [pc, #604]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d68:	4b94      	ldr	r3, [pc, #592]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3e>
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d002      	beq.n	8001d84 <HAL_RCC_OscConfig+0x44>
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d05b      	beq.n	8001e48 <HAL_RCC_OscConfig+0x108>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d157      	bne.n	8001e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e2e1      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_OscConfig+0x74>
 8001da6:	4b85      	ldr	r3, [pc, #532]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a84      	ldr	r2, [pc, #528]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01d      	b.n	8001df0 <HAL_RCC_OscConfig+0xb0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x98>
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a7e      	ldr	r2, [pc, #504]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7b      	ldr	r2, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0xb0>
 8001dd8:	4b78      	ldr	r3, [pc, #480]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a77      	ldr	r2, [pc, #476]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b75      	ldr	r3, [pc, #468]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a74      	ldr	r2, [pc, #464]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fa70 	bl	80012dc <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fa6c 	bl	80012dc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e2a6      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e12:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0xc0>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff fa5c 	bl	80012dc <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fa58 	bl	80012dc <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e292      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3a:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0xe8>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d075      	beq.n	8001f42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e56:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e60:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d102      	bne.n	8001e76 <HAL_RCC_OscConfig+0x136>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d002      	beq.n	8001e7c <HAL_RCC_OscConfig+0x13c>
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d11f      	bne.n	8001ebc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_OscConfig+0x154>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e265      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	4946      	ldr	r1, [pc, #280]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ea8:	4b45      	ldr	r3, [pc, #276]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fe9d 	bl	8000bec <HAL_InitTick>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d043      	beq.n	8001f40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e251      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3c      	ldr	r2, [pc, #240]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fa04 	bl	80012dc <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fa00 	bl	80012dc <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e23a      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	061b      	lsls	r3, r3, #24
 8001f04:	492d      	ldr	r1, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
 8001f0a:	e01a      	b.n	8001f42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f9e0 	bl	80012dc <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff f9dc 	bl	80012dc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e216      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x1e0>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d041      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5c:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff f9b9 	bl	80012dc <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f9b5 	bl	80012dc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1ef      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0ef      	beq.n	8001f6e <HAL_RCC_OscConfig+0x22e>
 8001f8e:	e020      	b.n	8001fd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7ff f99c 	bl	80012dc <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa6:	e00d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7ff f998 	bl	80012dc <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d906      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1d2      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc4:	4b8c      	ldr	r3, [pc, #560]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ea      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80a6 	beq.w	800212c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fe4:	4b84      	ldr	r3, [pc, #528]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2b4>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x2b6>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00d      	beq.n	8002016 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	4a7e      	ldr	r2, [pc, #504]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6593      	str	r3, [r2, #88]	; 0x58
 8002006:	4b7c      	ldr	r3, [pc, #496]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002016:	4b79      	ldr	r3, [pc, #484]	; (80021fc <HAL_RCC_OscConfig+0x4bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d118      	bne.n	8002054 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002022:	4b76      	ldr	r3, [pc, #472]	; (80021fc <HAL_RCC_OscConfig+0x4bc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a75      	ldr	r2, [pc, #468]	; (80021fc <HAL_RCC_OscConfig+0x4bc>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202e:	f7ff f955 	bl	80012dc <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002036:	f7ff f951 	bl	80012dc <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e18b      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002048:	4b6c      	ldr	r3, [pc, #432]	; (80021fc <HAL_RCC_OscConfig+0x4bc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d108      	bne.n	800206e <HAL_RCC_OscConfig+0x32e>
 800205c:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a65      	ldr	r2, [pc, #404]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206c:	e024      	b.n	80020b8 <HAL_RCC_OscConfig+0x378>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d110      	bne.n	8002098 <HAL_RCC_OscConfig+0x358>
 8002076:	4b60      	ldr	r3, [pc, #384]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	4a5e      	ldr	r2, [pc, #376]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002086:	4b5c      	ldr	r3, [pc, #368]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	4a5a      	ldr	r2, [pc, #360]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002096:	e00f      	b.n	80020b8 <HAL_RCC_OscConfig+0x378>
 8002098:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	4a56      	ldr	r2, [pc, #344]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d016      	beq.n	80020ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7ff f90c 	bl	80012dc <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7ff f908 	bl	80012dc <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e140      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020de:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ed      	beq.n	80020c8 <HAL_RCC_OscConfig+0x388>
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ee:	f7ff f8f5 	bl	80012dc <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7ff f8f1 	bl	80012dc <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e129      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800210c:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ed      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800211a:	7ffb      	ldrb	r3, [r7, #31]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002120:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a34      	ldr	r2, [pc, #208]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d03c      	beq.n	80021b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01c      	beq.n	800217a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002146:	4a2c      	ldr	r2, [pc, #176]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7ff f8c4 	bl	80012dc <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002158:	f7ff f8c0 	bl	80012dc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0fa      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 800216c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ef      	beq.n	8002158 <HAL_RCC_OscConfig+0x418>
 8002178:	e01b      	b.n	80021b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 800217c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002180:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7ff f8a7 	bl	80012dc <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002192:	f7ff f8a3 	bl	80012dc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0dd      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1ef      	bne.n	8002192 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80d1 	beq.w	800235e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	f000 808b 	beq.w	80022e0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d15e      	bne.n	8002290 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_RCC_OscConfig+0x4b8>)
 80021d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff f87d 	bl	80012dc <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e4:	e00c      	b.n	8002200 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7ff f879 	bl	80012dc <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d905      	bls.n	8002200 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0b3      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ec      	bne.n	80021e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220c:	4b56      	ldr	r3, [pc, #344]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4b56      	ldr	r3, [pc, #344]	; (800236c <HAL_RCC_OscConfig+0x62c>)
 8002212:	4013      	ands	r3, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6a11      	ldr	r1, [r2, #32]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800221c:	3a01      	subs	r2, #1
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	4311      	orrs	r1, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002226:	0212      	lsls	r2, r2, #8
 8002228:	4311      	orrs	r1, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800222e:	0852      	lsrs	r2, r2, #1
 8002230:	3a01      	subs	r2, #1
 8002232:	0552      	lsls	r2, r2, #21
 8002234:	4311      	orrs	r1, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800223a:	0852      	lsrs	r2, r2, #1
 800223c:	3a01      	subs	r2, #1
 800223e:	0652      	lsls	r2, r2, #25
 8002240:	4311      	orrs	r1, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002246:	06d2      	lsls	r2, r2, #27
 8002248:	430a      	orrs	r2, r1
 800224a:	4947      	ldr	r1, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 800224c:	4313      	orrs	r3, r2
 800224e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b45      	ldr	r3, [pc, #276]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a44      	ldr	r2, [pc, #272]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a41      	ldr	r2, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002266:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff f838 	bl	80012dc <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002270:	f7ff f834 	bl	80012dc <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e06e      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x530>
 800228e:	e066      	b.n	800235e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a34      	ldr	r2, [pc, #208]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 8002296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800229a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a31      	ldr	r2, [pc, #196]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a2e      	ldr	r2, [pc, #184]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 80022ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff f810 	bl	80012dc <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff f80c 	bl	80012dc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e046      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x580>
 80022de:	e03e      	b.n	800235e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e039      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_RCC_OscConfig+0x628>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d12c      	bne.n	800235a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	3b01      	subs	r3, #1
 800230c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d123      	bne.n	800235a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d11b      	bne.n	800235a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d113      	bne.n	800235a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d109      	bne.n	800235a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	3b01      	subs	r3, #1
 8002354:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	019f800c 	.word	0x019f800c

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e11e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b91      	ldr	r3, [pc, #580]	; (80025d0 <HAL_RCC_ClockConfig+0x260>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b8e      	ldr	r3, [pc, #568]	; (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 020f 	bic.w	r2, r3, #15
 800239e:	498c      	ldr	r1, [pc, #560]	; (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b8a      	ldr	r3, [pc, #552]	; (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e106      	b.n	80025c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d073      	beq.n	80024ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d129      	bne.n	8002420 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023cc:	4b81      	ldr	r3, [pc, #516]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0f4      	b.n	80025c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023dc:	f000 f9d0 	bl	8002780 <RCC_GetSysClockFreqFromPLLSource>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4a7c      	ldr	r2, [pc, #496]	; (80025d8 <HAL_RCC_ClockConfig+0x268>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d93f      	bls.n	800246a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023ea:	4b7a      	ldr	r3, [pc, #488]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d033      	beq.n	800246a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	d12f      	bne.n	800246a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800240a:	4b72      	ldr	r3, [pc, #456]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002412:	4a70      	ldr	r2, [pc, #448]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e024      	b.n	800246a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002428:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0c6      	b.n	80025c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002438:	4b66      	ldr	r3, [pc, #408]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0be      	b.n	80025c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002448:	f000 f8ce 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800244c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4a61      	ldr	r2, [pc, #388]	; (80025d8 <HAL_RCC_ClockConfig+0x268>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d909      	bls.n	800246a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002456:	4b5f      	ldr	r3, [pc, #380]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245e:	4a5d      	ldr	r2, [pc, #372]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002464:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b5a      	ldr	r3, [pc, #360]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4957      	ldr	r1, [pc, #348]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247c:	f7fe ff2e 	bl	80012dc <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe ff2a 	bl	80012dc <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e095      	b.n	80025c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b4e      	ldr	r3, [pc, #312]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d023      	beq.n	8002500 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a42      	ldr	r2, [pc, #264]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80024ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024dc:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024e4:	4a3b      	ldr	r2, [pc, #236]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80024e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4936      	ldr	r1, [pc, #216]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
 80024fe:	e008      	b.n	8002512 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b80      	cmp	r3, #128	; 0x80
 8002504:	d105      	bne.n	8002512 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002506:	4b33      	ldr	r3, [pc, #204]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4a32      	ldr	r2, [pc, #200]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 800250c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002510:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002512:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d21d      	bcs.n	800255c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002520:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 020f 	bic.w	r2, r3, #15
 8002528:	4929      	ldr	r1, [pc, #164]	; (80025d0 <HAL_RCC_ClockConfig+0x260>)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002530:	f7fe fed4 	bl	80012dc <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fed0 	bl	80012dc <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e03b      	b.n	80025c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d1ed      	bne.n	8002538 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4917      	ldr	r1, [pc, #92]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	490f      	ldr	r1, [pc, #60]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800259a:	f000 f825 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800259e:	4602      	mov	r2, r0
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	490c      	ldr	r1, [pc, #48]	; (80025dc <HAL_RCC_ClockConfig+0x26c>)
 80025ac:	5ccb      	ldrb	r3, [r1, r3]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x270>)
 80025b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_RCC_ClockConfig+0x274>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fb14 	bl	8000bec <HAL_InitTick>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	04c4b400 	.word	0x04c4b400
 80025dc:	080083c8 	.word	0x080083c8
 80025e0:	20000010 	.word	0x20000010
 80025e4:	20000014 	.word	0x20000014

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025ee:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025fa:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	e047      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d102      	bne.n	8002612 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800260c:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	e03e      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002612:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d136      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3301      	adds	r3, #1
 8002634:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d10c      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	4a16      	ldr	r2, [pc, #88]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002646:	68d2      	ldr	r2, [r2, #12]
 8002648:	0a12      	lsrs	r2, r2, #8
 800264a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	617b      	str	r3, [r7, #20]
      break;
 8002654:	e00c      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002656:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	0a12      	lsrs	r2, r2, #8
 8002664:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002668:	fb02 f303 	mul.w	r3, r2, r3
 800266c:	617b      	str	r3, [r7, #20]
      break;
 800266e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0e5b      	lsrs	r3, r3, #25
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e001      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002690:	693b      	ldr	r3, [r7, #16]
}
 8002692:	4618      	mov	r0, r3
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	016e3600 	.word	0x016e3600

080026ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000010 	.word	0x20000010

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c8:	f7ff fff0 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4904      	ldr	r1, [pc, #16]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	080083d8 	.word	0x080083d8

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f4:	f7ff ffda 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0adb      	lsrs	r3, r3, #11
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	080083d8 	.word	0x080083d8

0800271c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	220f      	movs	r2, #15
 800272a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_GetClockConfig+0x5c>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0203 	and.w	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_RCC_GetClockConfig+0x5c>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCC_GetClockConfig+0x5c>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCC_GetClockConfig+0x5c>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	08db      	lsrs	r3, r3, #3
 8002756:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <HAL_RCC_GetClockConfig+0x60>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 020f 	and.w	r2, r3, #15
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	601a      	str	r2, [r3, #0]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40022000 	.word	0x40022000

08002780 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3301      	adds	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d10c      	bne.n	80027be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ae:	68d2      	ldr	r2, [r2, #12]
 80027b0:	0a12      	lsrs	r2, r2, #8
 80027b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	617b      	str	r3, [r7, #20]
    break;
 80027bc:	e00c      	b.n	80027d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027be:	4a12      	ldr	r2, [pc, #72]	; (8002808 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	0a12      	lsrs	r2, r2, #8
 80027cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
    break;
 80027d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0e5b      	lsrs	r3, r3, #25
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	3301      	adds	r3, #1
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027f2:	687b      	ldr	r3, [r7, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40021000 	.word	0x40021000
 8002804:	016e3600 	.word	0x016e3600
 8002808:	00f42400 	.word	0x00f42400

0800280c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002814:	2300      	movs	r3, #0
 8002816:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002818:	2300      	movs	r3, #0
 800281a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8098 	beq.w	800295a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282e:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10d      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	4b40      	ldr	r3, [pc, #256]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a3f      	ldr	r2, [pc, #252]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002852:	2301      	movs	r3, #1
 8002854:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002856:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a39      	ldr	r2, [pc, #228]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002862:	f7fe fd3b 	bl	80012dc <HAL_GetTick>
 8002866:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002868:	e009      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286a:	f7fe fd37 	bl	80012dc <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d902      	bls.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	74fb      	strb	r3, [r7, #19]
        break;
 800287c:	e005      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ef      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d159      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01e      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d019      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d8:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe fcf7 	bl	80012dc <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f0:	e00b      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe fcf3 	bl	80012dc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d902      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	74fb      	strb	r3, [r7, #19]
            break;
 8002908:	e006      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ec      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10b      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292c:	4903      	ldr	r1, [pc, #12]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002934:	e008      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	74bb      	strb	r3, [r7, #18]
 800293a:	e005      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002948:	7c7b      	ldrb	r3, [r7, #17]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d105      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294e:	4ba7      	ldr	r3, [pc, #668]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	4aa6      	ldr	r2, [pc, #664]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002958:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002966:	4ba1      	ldr	r3, [pc, #644]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f023 0203 	bic.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	499d      	ldr	r1, [pc, #628]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002988:	4b98      	ldr	r3, [pc, #608]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f023 020c 	bic.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4995      	ldr	r1, [pc, #596]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029aa:	4b90      	ldr	r3, [pc, #576]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	498c      	ldr	r1, [pc, #560]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029cc:	4b87      	ldr	r3, [pc, #540]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	4984      	ldr	r1, [pc, #528]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ee:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	497b      	ldr	r1, [pc, #492]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a10:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4973      	ldr	r1, [pc, #460]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a32:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	496a      	ldr	r1, [pc, #424]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a54:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4962      	ldr	r1, [pc, #392]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a76:	4b5d      	ldr	r3, [pc, #372]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	4959      	ldr	r1, [pc, #356]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a98:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	4951      	ldr	r1, [pc, #324]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aba:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	4948      	ldr	r1, [pc, #288]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d015      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002adc:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4940      	ldr	r1, [pc, #256]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002afa:	d105      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002afc:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a3a      	ldr	r2, [pc, #232]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b14:	4b35      	ldr	r3, [pc, #212]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b22:	4932      	ldr	r1, [pc, #200]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b32:	d105      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b3e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b4c:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	4924      	ldr	r1, [pc, #144]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d015      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	4916      	ldr	r1, [pc, #88]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a10      	ldr	r2, [pc, #64]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d019      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4908      	ldr	r1, [pc, #32]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bda:	d109      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a02      	ldr	r2, [pc, #8]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be6:	60d3      	str	r3, [r2, #12]
 8002be8:	e002      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bfc:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4926      	ldr	r1, [pc, #152]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	4918      	ldr	r1, [pc, #96]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d105      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	490a      	ldr	r1, [pc, #40]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e049      	b.n	8002d4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f841 	bl	8002d56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 fa60 	bl	80031ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d001      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e054      	b.n	8002e2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d022      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dae:	d01d      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d018      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00e      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <HAL_TIM_Base_Start_IT+0xe0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <HAL_TIM_Base_Start_IT+0xe4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <HAL_TIM_Base_Start_IT+0xe8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d115      	bne.n	8002e18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_TIM_Base_Start_IT+0xec>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d015      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0xbe>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d011      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	e008      	b.n	8002e2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e000      	b.n	8002e2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800
 8002e48:	40000c00 	.word	0x40000c00
 8002e4c:	40013400 	.word	0x40013400
 8002e50:	40014000 	.word	0x40014000
 8002e54:	40015000 	.word	0x40015000
 8002e58:	00010007 	.word	0x00010007

08002e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d122      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0202 	mvn.w	r2, #2
 8002e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f965 	bl	800316e <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f957 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f968 	bl	8003182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d122      	bne.n	8002f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d11b      	bne.n	8002f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0204 	mvn.w	r2, #4
 8002edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f93b 	bl	800316e <HAL_TIM_IC_CaptureCallback>
 8002ef8:	e005      	b.n	8002f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f92d 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f93e 	bl	8003182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d11b      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0208 	mvn.w	r2, #8
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f911 	bl	800316e <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f903 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f914 	bl	8003182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0210 	mvn.w	r2, #16
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f8e7 	bl	800316e <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8d9 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8ea 	bl	8003182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0201 	mvn.w	r2, #1
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fdc4 	bl	8000b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d10e      	bne.n	800300c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d107      	bne.n	800300c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f982 	bl	8003310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301a:	d10e      	bne.n	800303a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d107      	bne.n	800303a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f975 	bl	8003324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d10e      	bne.n	8003066 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d107      	bne.n	8003066 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800305e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f898 	bl	8003196 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b20      	cmp	r3, #32
 8003072:	d10e      	bne.n	8003092 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b20      	cmp	r3, #32
 8003080:	d107      	bne.n	8003092 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f06f 0220 	mvn.w	r2, #32
 800308a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f935 	bl	80032fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a0:	d10f      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b0:	d107      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80030ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f93b 	bl	8003338 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030d0:	d10f      	bne.n	80030f2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e0:	d107      	bne.n	80030f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80030ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f92d 	bl	800334c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003100:	d10f      	bne.n	8003122 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003110:	d107      	bne.n	8003122 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800311a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f91f 	bl	8003360 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800312c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003130:	d10f      	bne.n	8003152 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800313c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003140:	d107      	bne.n	8003152 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800314a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f911 	bl	8003374 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a46      	ldr	r2, [pc, #280]	; (80032d8 <TIM_Base_SetConfig+0x12c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d017      	beq.n	80031f4 <TIM_Base_SetConfig+0x48>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d013      	beq.n	80031f4 <TIM_Base_SetConfig+0x48>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a43      	ldr	r2, [pc, #268]	; (80032dc <TIM_Base_SetConfig+0x130>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00f      	beq.n	80031f4 <TIM_Base_SetConfig+0x48>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a42      	ldr	r2, [pc, #264]	; (80032e0 <TIM_Base_SetConfig+0x134>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <TIM_Base_SetConfig+0x48>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a41      	ldr	r2, [pc, #260]	; (80032e4 <TIM_Base_SetConfig+0x138>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_Base_SetConfig+0x48>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a40      	ldr	r2, [pc, #256]	; (80032e8 <TIM_Base_SetConfig+0x13c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0x48>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a3f      	ldr	r2, [pc, #252]	; (80032ec <TIM_Base_SetConfig+0x140>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d108      	bne.n	8003206 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <TIM_Base_SetConfig+0x12c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d023      	beq.n	8003256 <TIM_Base_SetConfig+0xaa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d01f      	beq.n	8003256 <TIM_Base_SetConfig+0xaa>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a30      	ldr	r2, [pc, #192]	; (80032dc <TIM_Base_SetConfig+0x130>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01b      	beq.n	8003256 <TIM_Base_SetConfig+0xaa>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a2f      	ldr	r2, [pc, #188]	; (80032e0 <TIM_Base_SetConfig+0x134>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d017      	beq.n	8003256 <TIM_Base_SetConfig+0xaa>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <TIM_Base_SetConfig+0x138>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <TIM_Base_SetConfig+0xaa>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <TIM_Base_SetConfig+0x13c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00f      	beq.n	8003256 <TIM_Base_SetConfig+0xaa>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a2d      	ldr	r2, [pc, #180]	; (80032f0 <TIM_Base_SetConfig+0x144>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00b      	beq.n	8003256 <TIM_Base_SetConfig+0xaa>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <TIM_Base_SetConfig+0x148>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <TIM_Base_SetConfig+0xaa>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <TIM_Base_SetConfig+0x14c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <TIM_Base_SetConfig+0xaa>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a26      	ldr	r2, [pc, #152]	; (80032ec <TIM_Base_SetConfig+0x140>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d108      	bne.n	8003268 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <TIM_Base_SetConfig+0x12c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <TIM_Base_SetConfig+0x110>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <TIM_Base_SetConfig+0x13c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00f      	beq.n	80032bc <TIM_Base_SetConfig+0x110>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <TIM_Base_SetConfig+0x144>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_Base_SetConfig+0x110>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <TIM_Base_SetConfig+0x148>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <TIM_Base_SetConfig+0x110>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <TIM_Base_SetConfig+0x14c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0x110>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <TIM_Base_SetConfig+0x140>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	615a      	str	r2, [r3, #20]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800
 80032e4:	40000c00 	.word	0x40000c00
 80032e8:	40013400 	.word	0x40013400
 80032ec:	40015000 	.word	0x40015000
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40014400 	.word	0x40014400
 80032f8:	40014800 	.word	0x40014800

080032fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e042      	b.n	8003420 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d106      	bne.n	80033b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fd fec1 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2224      	movs	r2, #36	; 0x24
 80033b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fdcc 	bl	8003f68 <UART_SetConfig>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f001 f8bc 	bl	8004560 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f001 f943 	bl	80046a4 <UART_CheckIdleState>
 800341e:	4603      	mov	r3, r0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e02e      	b.n	8003498 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2224      	movs	r2, #36	; 0x24
 800343e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fec2 	bl	80011f4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	f040 8083 	bne.w	80035c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_UART_Transmit+0x28>
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e07b      	b.n	80035c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_UART_Transmit+0x3a>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e074      	b.n	80035c4 <HAL_UART_Transmit+0x124>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2221      	movs	r2, #33	; 0x21
 80034ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f2:	f7fd fef3 	bl	80012dc <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d108      	bne.n	8003524 <HAL_UART_Transmit+0x84>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003534:	e02c      	b.n	8003590 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	2180      	movs	r1, #128	; 0x80
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f001 f8fa 	bl	800473a <UART_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e039      	b.n	80035c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3302      	adds	r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	e007      	b.n	800357e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3301      	adds	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1cc      	bne.n	8003536 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2140      	movs	r1, #64	; 0x40
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f001 f8c7 	bl	800473a <UART_WaitOnFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e006      	b.n	80035c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e000      	b.n	80035c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	; 0x28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d142      	bne.n	800366a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_UART_Receive_IT+0x24>
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e03b      	b.n	800366c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Receive_IT+0x36>
 80035fe:	2302      	movs	r3, #2
 8003600:	e034      	b.n	800366c <HAL_UART_Receive_IT+0xa0>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_UART_Receive_IT+0xa8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01f      	beq.n	800365a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d018      	beq.n	800365a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	613b      	str	r3, [r7, #16]
   return(result);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	623b      	str	r3, [r7, #32]
 8003648:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	69f9      	ldr	r1, [r7, #28]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	61bb      	str	r3, [r7, #24]
   return(result);
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e6      	bne.n	8003628 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	461a      	mov	r2, r3
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f001 f933 	bl	80048cc <UART_Start_Receive_IT>
 8003666:	4603      	mov	r3, r0
 8003668:	e000      	b.n	800366c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
  }
}
 800366c:	4618      	mov	r0, r3
 800366e:	3728      	adds	r7, #40	; 0x28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40008000 	.word	0x40008000

08003678 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b0a2      	sub	sp, #136	; 0x88
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8003680:	2301      	movs	r3, #1
 8003682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003696:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800369a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036aa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e4      	bne.n	8003686 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3308      	adds	r3, #8
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ce:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3308      	adds	r3, #8
 80036de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80036e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e3      	bne.n	80036bc <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d118      	bne.n	800372e <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	f023 0310 	bic.w	r3, r3, #16
 8003710:	67bb      	str	r3, [r7, #120]	; 0x78
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800371a:	647b      	str	r3, [r7, #68]	; 0x44
 800371c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e6      	bne.n	80036fc <HAL_UART_Abort_IT+0x84>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00f      	beq.n	8003756 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d104      	bne.n	800374e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003748:	4a64      	ldr	r2, [pc, #400]	; (80038dc <HAL_UART_Abort_IT+0x264>)
 800374a:	639a      	str	r2, [r3, #56]	; 0x38
 800374c:	e003      	b.n	8003756 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003752:	2200      	movs	r2, #0
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00f      	beq.n	800377e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d104      	bne.n	8003776 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003770:	4a5b      	ldr	r2, [pc, #364]	; (80038e0 <HAL_UART_Abort_IT+0x268>)
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
 8003774:	e003      	b.n	800377e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377a:	2200      	movs	r2, #0
 800377c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b80      	cmp	r3, #128	; 0x80
 800378a:	d12d      	bne.n	80037e8 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3308      	adds	r3, #8
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	623b      	str	r3, [r7, #32]
   return(result);
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a2:	677b      	str	r3, [r7, #116]	; 0x74
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3308      	adds	r3, #8
 80037aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037ac:	633a      	str	r2, [r7, #48]	; 0x30
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e5      	bne.n	800378c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00f      	beq.n	80037e8 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd fefc 	bl	80015ca <HAL_DMA_Abort_IT>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037dc:	2200      	movs	r2, #0
 80037de:	639a      	str	r2, [r3, #56]	; 0x38
 80037e0:	e002      	b.n	80037e8 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        abortcplt = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d130      	bne.n	8003858 <HAL_UART_Abort_IT+0x1e0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3308      	adds	r3, #8
 80037fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	60fb      	str	r3, [r7, #12]
   return(result);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380c:	673b      	str	r3, [r7, #112]	; 0x70
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3308      	adds	r3, #8
 8003814:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003816:	61fa      	str	r2, [r7, #28]
 8003818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	617b      	str	r3, [r7, #20]
   return(result);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e5      	bne.n	80037f6 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d012      	beq.n	8003858 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fec7 	bl	80015ca <HAL_DMA_Abort_IT>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003846:	2200      	movs	r2, #0
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 800384a:	2301      	movs	r3, #1
 800384c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003850:	e002      	b.n	8003858 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        abortcplt = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8003858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800385c:	2b01      	cmp	r3, #1
 800385e:	d138      	bne.n	80038d2 <HAL_UART_Abort_IT+0x25a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->RxXferCount = 0U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	220f      	movs	r2, #15
 800388a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003894:	d107      	bne.n	80038a6 <HAL_UART_Abort_IT+0x22e>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0210 	orr.w	r2, r2, #16
 80038a4:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0208 	orr.w	r2, r2, #8
 80038b4:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fb35 	bl	8003f3c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3788      	adds	r7, #136	; 0x88
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	08004c19 	.word	0x08004c19
 80038e0:	08004ca1 	.word	0x08004ca1

080038e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b0ba      	sub	sp, #232	; 0xe8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800390a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800390e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003912:	4013      	ands	r3, r2
 8003914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d11b      	bne.n	8003958 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d015      	beq.n	8003958 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 82d6 	beq.w	8003efa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
      }
      return;
 8003956:	e2d0      	b.n	8003efa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 811f 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003962:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003966:	4b8b      	ldr	r3, [pc, #556]	; (8003b94 <HAL_UART_IRQHandler+0x2b0>)
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800396e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003972:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <HAL_UART_IRQHandler+0x2b4>)
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8112 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800397c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d011      	beq.n	80039ac <HAL_UART_IRQHandler+0xc8>
 8003988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2201      	movs	r2, #1
 800399a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d011      	beq.n	80039dc <HAL_UART_IRQHandler+0xf8>
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2202      	movs	r2, #2
 80039ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d2:	f043 0204 	orr.w	r2, r3, #4
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d011      	beq.n	8003a0c <HAL_UART_IRQHandler+0x128>
 80039e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2204      	movs	r2, #4
 80039fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d017      	beq.n	8003a48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003a24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003a28:	4b5a      	ldr	r3, [pc, #360]	; (8003b94 <HAL_UART_IRQHandler+0x2b0>)
 8003a2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00b      	beq.n	8003a48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2208      	movs	r2, #8
 8003a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3e:	f043 0208 	orr.w	r2, r3, #8
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d012      	beq.n	8003a7a <HAL_UART_IRQHandler+0x196>
 8003a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00c      	beq.n	8003a7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 823c 	beq.w	8003efe <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d013      	beq.n	8003aba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d005      	beq.n	8003ade <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04f      	beq.n	8003b7e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f001 f81e 	bl	8004b20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d141      	bne.n	8003b76 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1d9      	bne.n	8003af2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d013      	beq.n	8003b6e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b4a:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <HAL_UART_IRQHandler+0x2b8>)
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd fd39 	bl	80015ca <HAL_DMA_Abort_IT>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d017      	beq.n	8003b8e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	e00f      	b.n	8003b8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f9da 	bl	8003f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	e00b      	b.n	8003b8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f9d6 	bl	8003f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e007      	b.n	8003b8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9d2 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003b8c:	e1b7      	b.n	8003efe <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8e:	bf00      	nop
    return;
 8003b90:	e1b5      	b.n	8003efe <HAL_UART_IRQHandler+0x61a>
 8003b92:	bf00      	nop
 8003b94:	10000001 	.word	0x10000001
 8003b98:	04000120 	.word	0x04000120
 8003b9c:	08004bed 	.word	0x08004bed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 814a 	bne.w	8003e3e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8143 	beq.w	8003e3e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 813c 	beq.w	8003e3e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2210      	movs	r2, #16
 8003bcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	f040 80b5 	bne.w	8003d48 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8187 	beq.w	8003f02 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	f080 817f 	bcs.w	8003f02 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 8086 	bne.w	8003d2c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1da      	bne.n	8003c20 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e1      	bne.n	8003c6a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e3      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfc:	f023 0310 	bic.w	r3, r3, #16
 8003d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e4      	bne.n	8003cec <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fd fbf6 	bl	8001518 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f905 	bl	8003f50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d46:	e0dc      	b.n	8003f02 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80ce 	beq.w	8003f06 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003d6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80c9 	beq.w	8003f06 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d96:	647b      	str	r3, [r7, #68]	; 0x44
 8003d98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e4      	bne.n	8003d74 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3308      	adds	r3, #8
 8003dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e1      	bne.n	8003daa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0310 	bic.w	r3, r3, #16
 8003e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	69b9      	ldr	r1, [r7, #24]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e4      	bne.n	8003dfa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f88a 	bl	8003f50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e3c:	e063      	b.n	8003f06 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00e      	beq.n	8003e68 <HAL_UART_IRQHandler+0x584>
 8003e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 fbe3 	bl	800562c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e66:	e051      	b.n	8003f0c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d014      	beq.n	8003e9e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d03a      	beq.n	8003f0a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
    }
    return;
 8003e9c:	e035      	b.n	8003f0a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_UART_IRQHandler+0x5da>
 8003eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 ff31 	bl	8004d1e <UART_EndTransmit_IT>
    return;
 8003ebc:	e026      	b.n	8003f0c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_UART_IRQHandler+0x5fa>
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ece:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f001 fbbc 	bl	8005654 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003edc:	e016      	b.n	8003f0c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_UART_IRQHandler+0x628>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da0c      	bge.n	8003f0c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f001 fba4 	bl	8005640 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ef8:	e008      	b.n	8003f0c <HAL_UART_IRQHandler+0x628>
      return;
 8003efa:	bf00      	nop
 8003efc:	e006      	b.n	8003f0c <HAL_UART_IRQHandler+0x628>
    return;
 8003efe:	bf00      	nop
 8003f00:	e004      	b.n	8003f0c <HAL_UART_IRQHandler+0x628>
      return;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <HAL_UART_IRQHandler+0x628>
      return;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <HAL_UART_IRQHandler+0x628>
    return;
 8003f0a:	bf00      	nop
  }
}
 8003f0c:	37e8      	adds	r7, #232	; 0xe8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop

08003f14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b08c      	sub	sp, #48	; 0x30
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4baa      	ldr	r3, [pc, #680]	; (8004240 <UART_SetConfig+0x2d8>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a9f      	ldr	r2, [pc, #636]	; (8004244 <UART_SetConfig+0x2dc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	f023 010f 	bic.w	r1, r3, #15
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a90      	ldr	r2, [pc, #576]	; (8004248 <UART_SetConfig+0x2e0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d125      	bne.n	8004058 <UART_SetConfig+0xf0>
 800400c:	4b8f      	ldr	r3, [pc, #572]	; (800424c <UART_SetConfig+0x2e4>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b03      	cmp	r3, #3
 8004018:	d81a      	bhi.n	8004050 <UART_SetConfig+0xe8>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0xb8>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004031 	.word	0x08004031
 8004024:	08004041 	.word	0x08004041
 8004028:	08004039 	.word	0x08004039
 800402c:	08004049 	.word	0x08004049
 8004030:	2301      	movs	r3, #1
 8004032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004036:	e116      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004038:	2302      	movs	r3, #2
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403e:	e112      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004040:	2304      	movs	r3, #4
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004046:	e10e      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004048:	2308      	movs	r3, #8
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404e:	e10a      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004050:	2310      	movs	r3, #16
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e106      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a7c      	ldr	r2, [pc, #496]	; (8004250 <UART_SetConfig+0x2e8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d138      	bne.n	80040d4 <UART_SetConfig+0x16c>
 8004062:	4b7a      	ldr	r3, [pc, #488]	; (800424c <UART_SetConfig+0x2e4>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d82d      	bhi.n	80040cc <UART_SetConfig+0x164>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0x110>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	080040ad 	.word	0x080040ad
 800407c:	080040cd 	.word	0x080040cd
 8004080:	080040cd 	.word	0x080040cd
 8004084:	080040cd 	.word	0x080040cd
 8004088:	080040bd 	.word	0x080040bd
 800408c:	080040cd 	.word	0x080040cd
 8004090:	080040cd 	.word	0x080040cd
 8004094:	080040cd 	.word	0x080040cd
 8004098:	080040b5 	.word	0x080040b5
 800409c:	080040cd 	.word	0x080040cd
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	080040cd 	.word	0x080040cd
 80040a8:	080040c5 	.word	0x080040c5
 80040ac:	2300      	movs	r3, #0
 80040ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b2:	e0d8      	b.n	8004266 <UART_SetConfig+0x2fe>
 80040b4:	2302      	movs	r3, #2
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ba:	e0d4      	b.n	8004266 <UART_SetConfig+0x2fe>
 80040bc:	2304      	movs	r3, #4
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c2:	e0d0      	b.n	8004266 <UART_SetConfig+0x2fe>
 80040c4:	2308      	movs	r3, #8
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ca:	e0cc      	b.n	8004266 <UART_SetConfig+0x2fe>
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d2:	e0c8      	b.n	8004266 <UART_SetConfig+0x2fe>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5e      	ldr	r2, [pc, #376]	; (8004254 <UART_SetConfig+0x2ec>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d125      	bne.n	800412a <UART_SetConfig+0x1c2>
 80040de:	4b5b      	ldr	r3, [pc, #364]	; (800424c <UART_SetConfig+0x2e4>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040e8:	2b30      	cmp	r3, #48	; 0x30
 80040ea:	d016      	beq.n	800411a <UART_SetConfig+0x1b2>
 80040ec:	2b30      	cmp	r3, #48	; 0x30
 80040ee:	d818      	bhi.n	8004122 <UART_SetConfig+0x1ba>
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d00a      	beq.n	800410a <UART_SetConfig+0x1a2>
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d814      	bhi.n	8004122 <UART_SetConfig+0x1ba>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <UART_SetConfig+0x19a>
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d008      	beq.n	8004112 <UART_SetConfig+0x1aa>
 8004100:	e00f      	b.n	8004122 <UART_SetConfig+0x1ba>
 8004102:	2300      	movs	r3, #0
 8004104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004108:	e0ad      	b.n	8004266 <UART_SetConfig+0x2fe>
 800410a:	2302      	movs	r3, #2
 800410c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004110:	e0a9      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004112:	2304      	movs	r3, #4
 8004114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004118:	e0a5      	b.n	8004266 <UART_SetConfig+0x2fe>
 800411a:	2308      	movs	r3, #8
 800411c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004120:	e0a1      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004122:	2310      	movs	r3, #16
 8004124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004128:	e09d      	b.n	8004266 <UART_SetConfig+0x2fe>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4a      	ldr	r2, [pc, #296]	; (8004258 <UART_SetConfig+0x2f0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d125      	bne.n	8004180 <UART_SetConfig+0x218>
 8004134:	4b45      	ldr	r3, [pc, #276]	; (800424c <UART_SetConfig+0x2e4>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800413e:	2bc0      	cmp	r3, #192	; 0xc0
 8004140:	d016      	beq.n	8004170 <UART_SetConfig+0x208>
 8004142:	2bc0      	cmp	r3, #192	; 0xc0
 8004144:	d818      	bhi.n	8004178 <UART_SetConfig+0x210>
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d00a      	beq.n	8004160 <UART_SetConfig+0x1f8>
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d814      	bhi.n	8004178 <UART_SetConfig+0x210>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <UART_SetConfig+0x1f0>
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d008      	beq.n	8004168 <UART_SetConfig+0x200>
 8004156:	e00f      	b.n	8004178 <UART_SetConfig+0x210>
 8004158:	2300      	movs	r3, #0
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415e:	e082      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004160:	2302      	movs	r3, #2
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004166:	e07e      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004168:	2304      	movs	r3, #4
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800416e:	e07a      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004170:	2308      	movs	r3, #8
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004176:	e076      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004178:	2310      	movs	r3, #16
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417e:	e072      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a35      	ldr	r2, [pc, #212]	; (800425c <UART_SetConfig+0x2f4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d12a      	bne.n	80041e0 <UART_SetConfig+0x278>
 800418a:	4b30      	ldr	r3, [pc, #192]	; (800424c <UART_SetConfig+0x2e4>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004198:	d01a      	beq.n	80041d0 <UART_SetConfig+0x268>
 800419a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800419e:	d81b      	bhi.n	80041d8 <UART_SetConfig+0x270>
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a4:	d00c      	beq.n	80041c0 <UART_SetConfig+0x258>
 80041a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041aa:	d815      	bhi.n	80041d8 <UART_SetConfig+0x270>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <UART_SetConfig+0x250>
 80041b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b4:	d008      	beq.n	80041c8 <UART_SetConfig+0x260>
 80041b6:	e00f      	b.n	80041d8 <UART_SetConfig+0x270>
 80041b8:	2300      	movs	r3, #0
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041be:	e052      	b.n	8004266 <UART_SetConfig+0x2fe>
 80041c0:	2302      	movs	r3, #2
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c6:	e04e      	b.n	8004266 <UART_SetConfig+0x2fe>
 80041c8:	2304      	movs	r3, #4
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ce:	e04a      	b.n	8004266 <UART_SetConfig+0x2fe>
 80041d0:	2308      	movs	r3, #8
 80041d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d6:	e046      	b.n	8004266 <UART_SetConfig+0x2fe>
 80041d8:	2310      	movs	r3, #16
 80041da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041de:	e042      	b.n	8004266 <UART_SetConfig+0x2fe>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a17      	ldr	r2, [pc, #92]	; (8004244 <UART_SetConfig+0x2dc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d13a      	bne.n	8004260 <UART_SetConfig+0x2f8>
 80041ea:	4b18      	ldr	r3, [pc, #96]	; (800424c <UART_SetConfig+0x2e4>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041f8:	d01a      	beq.n	8004230 <UART_SetConfig+0x2c8>
 80041fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041fe:	d81b      	bhi.n	8004238 <UART_SetConfig+0x2d0>
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004204:	d00c      	beq.n	8004220 <UART_SetConfig+0x2b8>
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420a:	d815      	bhi.n	8004238 <UART_SetConfig+0x2d0>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <UART_SetConfig+0x2b0>
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004214:	d008      	beq.n	8004228 <UART_SetConfig+0x2c0>
 8004216:	e00f      	b.n	8004238 <UART_SetConfig+0x2d0>
 8004218:	2300      	movs	r3, #0
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800421e:	e022      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004220:	2302      	movs	r3, #2
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004226:	e01e      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004228:	2304      	movs	r3, #4
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800422e:	e01a      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004230:	2308      	movs	r3, #8
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004236:	e016      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004238:	2310      	movs	r3, #16
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423e:	e012      	b.n	8004266 <UART_SetConfig+0x2fe>
 8004240:	cfff69f3 	.word	0xcfff69f3
 8004244:	40008000 	.word	0x40008000
 8004248:	40013800 	.word	0x40013800
 800424c:	40021000 	.word	0x40021000
 8004250:	40004400 	.word	0x40004400
 8004254:	40004800 	.word	0x40004800
 8004258:	40004c00 	.word	0x40004c00
 800425c:	40005000 	.word	0x40005000
 8004260:	2310      	movs	r3, #16
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4aae      	ldr	r2, [pc, #696]	; (8004524 <UART_SetConfig+0x5bc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	f040 8097 	bne.w	80043a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004272:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004276:	2b08      	cmp	r3, #8
 8004278:	d823      	bhi.n	80042c2 <UART_SetConfig+0x35a>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <UART_SetConfig+0x318>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042c3 	.word	0x080042c3
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042c3 	.word	0x080042c3
 8004290:	080042b3 	.word	0x080042b3
 8004294:	080042c3 	.word	0x080042c3
 8004298:	080042c3 	.word	0x080042c3
 800429c:	080042c3 	.word	0x080042c3
 80042a0:	080042bb 	.word	0x080042bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a4:	f7fe fa0e 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 80042a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042aa:	e010      	b.n	80042ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042ac:	4b9e      	ldr	r3, [pc, #632]	; (8004528 <UART_SetConfig+0x5c0>)
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042b0:	e00d      	b.n	80042ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b2:	f7fe f999 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80042b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042b8:	e009      	b.n	80042ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042c0:	e005      	b.n	80042ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8130 	beq.w	8004536 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	4a94      	ldr	r2, [pc, #592]	; (800452c <UART_SetConfig+0x5c4>)
 80042dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4413      	add	r3, r2
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d305      	bcc.n	8004306 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	429a      	cmp	r2, r3
 8004304:	d903      	bls.n	800430e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800430c:	e113      	b.n	8004536 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	2200      	movs	r2, #0
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	60fa      	str	r2, [r7, #12]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	4a84      	ldr	r2, [pc, #528]	; (800452c <UART_SetConfig+0x5c4>)
 800431c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004320:	b29b      	uxth	r3, r3
 8004322:	2200      	movs	r2, #0
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004330:	f7fb ffc6 	bl	80002c0 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	020b      	lsls	r3, r1, #8
 8004346:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800434a:	0202      	lsls	r2, r0, #8
 800434c:	6979      	ldr	r1, [r7, #20]
 800434e:	6849      	ldr	r1, [r1, #4]
 8004350:	0849      	lsrs	r1, r1, #1
 8004352:	2000      	movs	r0, #0
 8004354:	460c      	mov	r4, r1
 8004356:	4605      	mov	r5, r0
 8004358:	eb12 0804 	adds.w	r8, r2, r4
 800435c:	eb43 0905 	adc.w	r9, r3, r5
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	469a      	mov	sl, r3
 8004368:	4693      	mov	fp, r2
 800436a:	4652      	mov	r2, sl
 800436c:	465b      	mov	r3, fp
 800436e:	4640      	mov	r0, r8
 8004370:	4649      	mov	r1, r9
 8004372:	f7fb ffa5 	bl	80002c0 <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4613      	mov	r3, r2
 800437c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004384:	d308      	bcc.n	8004398 <UART_SetConfig+0x430>
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438c:	d204      	bcs.n	8004398 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	e0ce      	b.n	8004536 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800439e:	e0ca      	b.n	8004536 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a8:	d166      	bne.n	8004478 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80043aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d827      	bhi.n	8004402 <UART_SetConfig+0x49a>
 80043b2:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <UART_SetConfig+0x450>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	080043dd 	.word	0x080043dd
 80043bc:	080043e5 	.word	0x080043e5
 80043c0:	080043ed 	.word	0x080043ed
 80043c4:	08004403 	.word	0x08004403
 80043c8:	080043f3 	.word	0x080043f3
 80043cc:	08004403 	.word	0x08004403
 80043d0:	08004403 	.word	0x08004403
 80043d4:	08004403 	.word	0x08004403
 80043d8:	080043fb 	.word	0x080043fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043dc:	f7fe f972 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 80043e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043e2:	e014      	b.n	800440e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e4:	f7fe f984 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 80043e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043ea:	e010      	b.n	800440e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ec:	4b4e      	ldr	r3, [pc, #312]	; (8004528 <UART_SetConfig+0x5c0>)
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043f0:	e00d      	b.n	800440e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f2:	f7fe f8f9 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80043f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043f8:	e009      	b.n	800440e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004400:	e005      	b.n	800440e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800440c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8090 	beq.w	8004536 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	4a44      	ldr	r2, [pc, #272]	; (800452c <UART_SetConfig+0x5c4>)
 800441c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004420:	461a      	mov	r2, r3
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	fbb3 f3f2 	udiv	r3, r3, r2
 8004428:	005a      	lsls	r2, r3, #1
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	441a      	add	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	d916      	bls.n	8004470 <UART_SetConfig+0x508>
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004448:	d212      	bcs.n	8004470 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	b29b      	uxth	r3, r3
 800444e:	f023 030f 	bic.w	r3, r3, #15
 8004452:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	b29b      	uxth	r3, r3
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	b29a      	uxth	r2, r3
 8004460:	8bfb      	ldrh	r3, [r7, #30]
 8004462:	4313      	orrs	r3, r2
 8004464:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	8bfa      	ldrh	r2, [r7, #30]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	e062      	b.n	8004536 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004476:	e05e      	b.n	8004536 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004478:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800447c:	2b08      	cmp	r3, #8
 800447e:	d828      	bhi.n	80044d2 <UART_SetConfig+0x56a>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x520>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044bd 	.word	0x080044bd
 8004494:	080044d3 	.word	0x080044d3
 8004498:	080044c3 	.word	0x080044c3
 800449c:	080044d3 	.word	0x080044d3
 80044a0:	080044d3 	.word	0x080044d3
 80044a4:	080044d3 	.word	0x080044d3
 80044a8:	080044cb 	.word	0x080044cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe f90a 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 80044b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044b2:	e014      	b.n	80044de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7fe f91c 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 80044b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044ba:	e010      	b.n	80044de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044bc:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <UART_SetConfig+0x5c0>)
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044c0:	e00d      	b.n	80044de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c2:	f7fe f891 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044c8:	e009      	b.n	80044de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044d0:	e005      	b.n	80044de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044dc:	bf00      	nop
    }

    if (pclk != 0U)
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d028      	beq.n	8004536 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	4a10      	ldr	r2, [pc, #64]	; (800452c <UART_SetConfig+0x5c4>)
 80044ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ee:	461a      	mov	r2, r3
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	441a      	add	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	d910      	bls.n	8004530 <UART_SetConfig+0x5c8>
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d20c      	bcs.n	8004530 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	b29a      	uxth	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
 8004520:	e009      	b.n	8004536 <UART_SetConfig+0x5ce>
 8004522:	bf00      	nop
 8004524:	40008000 	.word	0x40008000
 8004528:	00f42400 	.word	0x00f42400
 800452c:	080083e0 	.word	0x080083e0
      }
      else
      {
        ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2201      	movs	r2, #1
 800453a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2201      	movs	r2, #1
 8004542:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2200      	movs	r2, #0
 800454a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2200      	movs	r2, #0
 8004550:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004552:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004556:	4618      	mov	r0, r3
 8004558:	3730      	adds	r7, #48	; 0x30
 800455a:	46bd      	mov	sp, r7
 800455c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01a      	beq.n	8004676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465e:	d10a      	bne.n	8004676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046b4:	f7fc fe12 	bl	80012dc <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d10e      	bne.n	80046e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f82f 	bl	800473a <UART_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e025      	b.n	8004732 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d10e      	bne.n	8004712 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f819 	bl	800473a <UART_WaitOnFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e00f      	b.n	8004732 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b09c      	sub	sp, #112	; 0x70
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	4613      	mov	r3, r2
 8004748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474a:	e0a9      	b.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	f000 80a5 	beq.w	80048a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fc fdc1 	bl	80012dc <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <UART_WaitOnFlagUntilTimeout+0x32>
 8004766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004768:	2b00      	cmp	r3, #0
 800476a:	d140      	bne.n	80047ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004780:	667b      	str	r3, [r7, #100]	; 0x64
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800478a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800478c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004790:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e6      	bne.n	800476c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	663b      	str	r3, [r7, #96]	; 0x60
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3308      	adds	r3, #8
 80047bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047be:	64ba      	str	r2, [r7, #72]	; 0x48
 80047c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e5      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e069      	b.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d051      	beq.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480a:	d149      	bne.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004814:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800482a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
 8004836:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800483a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e6      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3308      	adds	r3, #8
 800484e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	613b      	str	r3, [r7, #16]
   return(result);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004868:	623a      	str	r2, [r7, #32]
 800486a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	69f9      	ldr	r1, [r7, #28]
 800486e:	6a3a      	ldr	r2, [r7, #32]
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	61bb      	str	r3, [r7, #24]
   return(result);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e010      	b.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69da      	ldr	r2, [r3, #28]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	f43f af46 	beq.w	800474c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3770      	adds	r7, #112	; 0x70
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b0a3      	sub	sp, #140	; 0x8c
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fe:	d10e      	bne.n	800491e <UART_Start_Receive_IT+0x52>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d105      	bne.n	8004914 <UART_Start_Receive_IT+0x48>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800490e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004912:	e02d      	b.n	8004970 <UART_Start_Receive_IT+0xa4>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	22ff      	movs	r2, #255	; 0xff
 8004918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800491c:	e028      	b.n	8004970 <UART_Start_Receive_IT+0xa4>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10d      	bne.n	8004942 <UART_Start_Receive_IT+0x76>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d104      	bne.n	8004938 <UART_Start_Receive_IT+0x6c>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	22ff      	movs	r2, #255	; 0xff
 8004932:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004936:	e01b      	b.n	8004970 <UART_Start_Receive_IT+0xa4>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	227f      	movs	r2, #127	; 0x7f
 800493c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004940:	e016      	b.n	8004970 <UART_Start_Receive_IT+0xa4>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800494a:	d10d      	bne.n	8004968 <UART_Start_Receive_IT+0x9c>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <UART_Start_Receive_IT+0x92>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	227f      	movs	r2, #127	; 0x7f
 8004958:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800495c:	e008      	b.n	8004970 <UART_Start_Receive_IT+0xa4>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	223f      	movs	r2, #63	; 0x3f
 8004962:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004966:	e003      	b.n	8004970 <UART_Start_Receive_IT+0xa4>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2222      	movs	r2, #34	; 0x22
 800497c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3308      	adds	r3, #8
 80049a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80049a4:	673a      	str	r2, [r7, #112]	; 0x70
 80049a6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80049aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80049b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e3      	bne.n	8004980 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c0:	d153      	bne.n	8004a6a <UART_Start_Receive_IT+0x19e>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d34d      	bcc.n	8004a6a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d6:	d107      	bne.n	80049e8 <UART_Start_Receive_IT+0x11c>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d103      	bne.n	80049e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a4b      	ldr	r2, [pc, #300]	; (8004b10 <UART_Start_Receive_IT+0x244>)
 80049e4:	671a      	str	r2, [r3, #112]	; 0x70
 80049e6:	e002      	b.n	80049ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a4a      	ldr	r2, [pc, #296]	; (8004b14 <UART_Start_Receive_IT+0x248>)
 80049ec:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01a      	beq.n	8004a34 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a22:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e4      	bne.n	80049fe <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a54:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e5      	bne.n	8004a34 <UART_Start_Receive_IT+0x168>
 8004a68:	e04a      	b.n	8004b00 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d107      	bne.n	8004a84 <UART_Start_Receive_IT+0x1b8>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d103      	bne.n	8004a84 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <UART_Start_Receive_IT+0x24c>)
 8004a80:	671a      	str	r2, [r3, #112]	; 0x70
 8004a82:	e002      	b.n	8004a8a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a25      	ldr	r2, [pc, #148]	; (8004b1c <UART_Start_Receive_IT+0x250>)
 8004a88:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d019      	beq.n	8004ace <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004aae:	677b      	str	r3, [r7, #116]	; 0x74
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e6      	bne.n	8004a9a <UART_Start_Receive_IT+0x1ce>
 8004acc:	e018      	b.n	8004b00 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	613b      	str	r3, [r7, #16]
   return(result);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f043 0320 	orr.w	r3, r3, #32
 8004ae2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aec:	623b      	str	r3, [r7, #32]
 8004aee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	69f9      	ldr	r1, [r7, #28]
 8004af2:	6a3a      	ldr	r2, [r7, #32]
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e6      	bne.n	8004ace <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	378c      	adds	r7, #140	; 0x8c
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	0800532d 	.word	0x0800532d
 8004b14:	08005035 	.word	0x08005035
 8004b18:	08004ed5 	.word	0x08004ed5
 8004b1c:	08004d75 	.word	0x08004d75

08004b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b095      	sub	sp, #84	; 0x54
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b46:	643b      	str	r3, [r7, #64]	; 0x40
 8004b48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e3      	bne.n	8004b5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d118      	bne.n	8004bcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0310 	bic.w	r3, r3, #16
 8004bae:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004be0:	bf00      	nop
 8004be2:	3754      	adds	r7, #84	; 0x54
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff f98c 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d12b      	bne.n	8004c98 <UART_DMATxAbortCallback+0x80>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c68:	d107      	bne.n	8004c7a <UART_DMATxAbortCallback+0x62>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0210 	orr.w	r2, r2, #16
 8004c78:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff f953 	bl	8003f3c <HAL_UART_AbortCpltCallback>
 8004c96:	e000      	b.n	8004c9a <UART_DMATxAbortCallback+0x82>
      return;
 8004c98:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d126      	bne.n	8004d16 <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	220f      	movs	r2, #15
 8004ce6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0208 	orr.w	r2, r2, #8
 8004cf6:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff f914 	bl	8003f3c <HAL_UART_AbortCpltCallback>
 8004d14:	e000      	b.n	8004d18 <UART_DMARxAbortCallback+0x78>
      return;
 8004d16:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b088      	sub	sp, #32
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6979      	ldr	r1, [r7, #20]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	613b      	str	r3, [r7, #16]
   return(result);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e6      	bne.n	8004d26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff f8d4 	bl	8003f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d6c:	bf00      	nop
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b096      	sub	sp, #88	; 0x58
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	2b22      	cmp	r3, #34	; 0x22
 8004d8e:	f040 8095 	bne.w	8004ebc <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d9c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004da0:	b2d9      	uxtb	r1, r3
 8004da2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	400a      	ands	r2, r1
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d178      	bne.n	8004ecc <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dee:	653b      	str	r3, [r7, #80]	; 0x50
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e6      	bne.n	8004dda <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3308      	adds	r3, #8
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e2c:	633a      	str	r2, [r7, #48]	; 0x30
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e5      	bne.n	8004e0c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d12e      	bne.n	8004eb4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f023 0310 	bic.w	r3, r3, #16
 8004e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	69b9      	ldr	r1, [r7, #24]
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	617b      	str	r3, [r7, #20]
   return(result);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d103      	bne.n	8004ea4 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff f84f 	bl	8003f50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004eb2:	e00b      	b.n	8004ecc <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fb fe2d 	bl	8000b14 <HAL_UART_RxCpltCallback>
}
 8004eba:	e007      	b.n	8004ecc <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0208 	orr.w	r2, r2, #8
 8004eca:	619a      	str	r2, [r3, #24]
}
 8004ecc:	bf00      	nop
 8004ece:	3758      	adds	r7, #88	; 0x58
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b096      	sub	sp, #88	; 0x58
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ee2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	2b22      	cmp	r3, #34	; 0x22
 8004eee:	f040 8095 	bne.w	800501c <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f02:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004f06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d178      	bne.n	800502c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	643b      	str	r3, [r7, #64]	; 0x40
 8004f5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e6      	bne.n	8004f3a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d12e      	bne.n	8005014 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f023 0310 	bic.w	r3, r3, #16
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fda:	61bb      	str	r3, [r7, #24]
 8004fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6979      	ldr	r1, [r7, #20]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e6      	bne.n	8004fbc <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d103      	bne.n	8005004 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2210      	movs	r2, #16
 8005002:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7fe ff9f 	bl	8003f50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005012:	e00b      	b.n	800502c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fb fd7d 	bl	8000b14 <HAL_UART_RxCpltCallback>
}
 800501a:	e007      	b.n	800502c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0208 	orr.w	r2, r2, #8
 800502a:	619a      	str	r2, [r3, #24]
}
 800502c:	bf00      	nop
 800502e:	3758      	adds	r7, #88	; 0x58
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b0a6      	sub	sp, #152	; 0x98
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005042:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	2b22      	cmp	r3, #34	; 0x22
 800506c:	f040 814f 	bne.w	800530e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005076:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800507a:	e0f6      	b.n	800526a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005086:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800508a:	b2d9      	uxtb	r1, r3
 800508c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005090:	b2da      	uxtb	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	400a      	ands	r2, r1
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d053      	beq.n	8005176 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d011      	beq.n	80050fe <UART_RxISR_8BIT_FIFOEN+0xca>
 80050da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f4:	f043 0201 	orr.w	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d011      	beq.n	800512e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800510a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2202      	movs	r2, #2
 800511c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005124:	f043 0204 	orr.w	r2, r3, #4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800512e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d011      	beq.n	800515e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800513a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2204      	movs	r2, #4
 800514c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005154:	f043 0202 	orr.w	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d006      	beq.n	8005176 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fe fedd 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d173      	bne.n	800526a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80051aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80051b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e4      	bne.n	8005182 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051dc:	657a      	str	r2, [r7, #84]	; 0x54
 80051de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e3      	bne.n	80051b8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d12e      	bne.n	8005264 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	f023 0310 	bic.w	r3, r3, #16
 8005220:	67bb      	str	r3, [r7, #120]	; 0x78
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800522a:	643b      	str	r3, [r7, #64]	; 0x40
 800522c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005230:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e6      	bne.n	800520c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b10      	cmp	r3, #16
 800524a:	d103      	bne.n	8005254 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2210      	movs	r2, #16
 8005252:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fe fe77 	bl	8003f50 <HAL_UARTEx_RxEventCallback>
 8005262:	e002      	b.n	800526a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fb fc55 	bl	8000b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800526a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800526e:	2b00      	cmp	r3, #0
 8005270:	d006      	beq.n	8005280 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005272:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	f47f aefe 	bne.w	800507c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005286:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800528a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800528e:	2b00      	cmp	r3, #0
 8005290:	d045      	beq.n	800531e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005298:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800529c:	429a      	cmp	r2, r3
 800529e:	d23e      	bcs.n	800531e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3308      	adds	r3, #8
 80052a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b6:	673b      	str	r3, [r7, #112]	; 0x70
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80052c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a14      	ldr	r2, [pc, #80]	; (8005328 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80052d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f043 0320 	orr.w	r3, r3, #32
 80052ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	613b      	str	r3, [r7, #16]
   return(result);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e6      	bne.n	80052da <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800530c:	e007      	b.n	800531e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0208 	orr.w	r2, r2, #8
 800531c:	619a      	str	r2, [r3, #24]
}
 800531e:	bf00      	nop
 8005320:	3798      	adds	r7, #152	; 0x98
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	08004d75 	.word	0x08004d75

0800532c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b0a8      	sub	sp, #160	; 0xa0
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800533a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	2b22      	cmp	r3, #34	; 0x22
 8005364:	f040 8153 	bne.w	800560e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800536e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005372:	e0fa      	b.n	800556a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005386:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800538a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800538e:	4013      	ands	r3, r2
 8005390:	b29a      	uxth	r2, r3
 8005392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005396:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80053be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d053      	beq.n	8005472 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d011      	beq.n	80053fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80053d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f0:	f043 0201 	orr.w	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d011      	beq.n	800542a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2202      	movs	r2, #2
 8005418:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005420:	f043 0204 	orr.w	r2, r3, #4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800542a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d011      	beq.n	800545a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2204      	movs	r2, #4
 8005448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005450:	f043 0202 	orr.w	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fe fd5f 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d175      	bne.n	800556a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800548c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e4      	bne.n	800547e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3308      	adds	r3, #8
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3308      	adds	r3, #8
 80054d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80054de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e1      	bne.n	80054b4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d12e      	bne.n	8005564 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	f023 0310 	bic.w	r3, r3, #16
 8005520:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800552a:	647b      	str	r3, [r7, #68]	; 0x44
 800552c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e6      	bne.n	800550c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d103      	bne.n	8005554 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2210      	movs	r2, #16
 8005552:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fe fcf7 	bl	8003f50 <HAL_UARTEx_RxEventCallback>
 8005562:	e002      	b.n	800556a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fb fad5 	bl	8000b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800556a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005572:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	f47f aefa 	bne.w	8005374 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005586:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800558a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800558e:	2b00      	cmp	r3, #0
 8005590:	d045      	beq.n	800561e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005598:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800559c:	429a      	cmp	r2, r3
 800559e:	d23e      	bcs.n	800561e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	623b      	str	r3, [r7, #32]
   return(result);
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b6:	677b      	str	r3, [r7, #116]	; 0x74
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80055c0:	633a      	str	r2, [r7, #48]	; 0x30
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a14      	ldr	r2, [pc, #80]	; (8005628 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80055d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f043 0320 	orr.w	r3, r3, #32
 80055ee:	673b      	str	r3, [r7, #112]	; 0x70
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	617b      	str	r3, [r7, #20]
   return(result);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e6      	bne.n	80055da <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800560c:	e007      	b.n	800561e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0208 	orr.w	r2, r2, #8
 800561c:	619a      	str	r2, [r3, #24]
}
 800561e:	bf00      	nop
 8005620:	37a0      	adds	r7, #160	; 0xa0
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	08004ed5 	.word	0x08004ed5

0800562c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_UARTEx_DisableFifoMode+0x16>
 800567a:	2302      	movs	r3, #2
 800567c:	e027      	b.n	80056ce <HAL_UARTEx_DisableFifoMode+0x66>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2224      	movs	r2, #36	; 0x24
 800568a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e02d      	b.n	800574e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2224      	movs	r2, #36	; 0x24
 80056fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f850 	bl	80057d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800576a:	2302      	movs	r3, #2
 800576c:	e02d      	b.n	80057ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2224      	movs	r2, #36	; 0x24
 800577a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f812 	bl	80057d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d108      	bne.n	80057f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057f4:	e031      	b.n	800585a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057f6:	2308      	movs	r3, #8
 80057f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057fa:	2308      	movs	r3, #8
 80057fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	0e5b      	lsrs	r3, r3, #25
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	0f5b      	lsrs	r3, r3, #29
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800581e:	7bbb      	ldrb	r3, [r7, #14]
 8005820:	7b3a      	ldrb	r2, [r7, #12]
 8005822:	4911      	ldr	r1, [pc, #68]	; (8005868 <UARTEx_SetNbDataToProcess+0x94>)
 8005824:	5c8a      	ldrb	r2, [r1, r2]
 8005826:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800582a:	7b3a      	ldrb	r2, [r7, #12]
 800582c:	490f      	ldr	r1, [pc, #60]	; (800586c <UARTEx_SetNbDataToProcess+0x98>)
 800582e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005830:	fb93 f3f2 	sdiv	r3, r3, r2
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	7b7a      	ldrb	r2, [r7, #13]
 8005840:	4909      	ldr	r1, [pc, #36]	; (8005868 <UARTEx_SetNbDataToProcess+0x94>)
 8005842:	5c8a      	ldrb	r2, [r1, r2]
 8005844:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005848:	7b7a      	ldrb	r2, [r7, #13]
 800584a:	4908      	ldr	r1, [pc, #32]	; (800586c <UARTEx_SetNbDataToProcess+0x98>)
 800584c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800584e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005852:	b29a      	uxth	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	080083f8 	.word	0x080083f8
 800586c:	08008400 	.word	0x08008400

08005870 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800587e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005882:	2b84      	cmp	r3, #132	; 0x84
 8005884:	d005      	beq.n	8005892 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005886:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	3303      	adds	r3, #3
 8005890:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058a4:	f000 fb92 	bl	8005fcc <vTaskStartScheduler>
  
  return osOK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	bd80      	pop	{r7, pc}

080058ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b0:	b087      	sub	sp, #28
 80058b2:	af02      	add	r7, sp, #8
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685c      	ldr	r4, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058c4:	b29e      	uxth	r6, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ffcf 	bl	8005870 <makeFreeRtosPriority>
 80058d2:	4602      	mov	r2, r0
 80058d4:	f107 030c 	add.w	r3, r7, #12
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	9200      	str	r2, [sp, #0]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	4632      	mov	r2, r6
 80058e0:	4629      	mov	r1, r5
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 f8d2 	bl	8005a8c <xTaskCreate>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e000      	b.n	80058f4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80058f2:	68fb      	ldr	r3, [r7, #12]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <osDelay+0x16>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	e000      	b.n	8005914 <osDelay+0x18>
 8005912:	2301      	movs	r3, #1
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fa03 	bl	8005d20 <vTaskDelay>
  
  return osOK;
 800591a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f103 0208 	add.w	r2, r3, #8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f04f 32ff 	mov.w	r2, #4294967295
 800593c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f103 0208 	add.w	r2, r3, #8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f103 0208 	add.w	r2, r3, #8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	601a      	str	r2, [r3, #0]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d103      	bne.n	80059e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	e00c      	b.n	8005a00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3308      	adds	r3, #8
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e002      	b.n	80059f4 <vListInsert+0x2e>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d2f6      	bcs.n	80059ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	601a      	str	r2, [r3, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6892      	ldr	r2, [r2, #8]
 8005a4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6852      	ldr	r2, [r2, #4]
 8005a58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d103      	bne.n	8005a6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08c      	sub	sp, #48	; 0x30
 8005a90:	af04      	add	r7, sp, #16
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 ffd9 	bl	8006a58 <pvPortMalloc>
 8005aa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005aae:	20b4      	movs	r0, #180	; 0xb4
 8005ab0:	f000 ffd2 	bl	8006a58 <pvPortMalloc>
 8005ab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ac2:	e005      	b.n	8005ad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ac4:	6978      	ldr	r0, [r7, #20]
 8005ac6:	f001 f893 	bl	8006bf0 <vPortFree>
 8005aca:	e001      	b.n	8005ad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9303      	str	r3, [sp, #12]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	9302      	str	r3, [sp, #8]
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f80f 	bl	8005b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005af2:	69f8      	ldr	r0, [r7, #28]
 8005af4:	f000 f8aa 	bl	8005c4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005af8:	2301      	movs	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	e002      	b.n	8005b04 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005afe:	f04f 33ff 	mov.w	r3, #4294967295
 8005b02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b04:	69bb      	ldr	r3, [r7, #24]
	}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f023 0307 	bic.w	r3, r3, #7
 8005b36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01f      	beq.n	8005b9e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	e012      	b.n	8005b8a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	7819      	ldrb	r1, [r3, #0]
 8005b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	3334      	adds	r3, #52	; 0x34
 8005b74:	460a      	mov	r2, r1
 8005b76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d006      	beq.n	8005b92 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	2b0f      	cmp	r3, #15
 8005b8e:	d9e9      	bls.n	8005b64 <prvInitialiseNewTask+0x54>
 8005b90:	e000      	b.n	8005b94 <prvInitialiseNewTask+0x84>
			{
				break;
 8005b92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b9c:	e003      	b.n	8005ba6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	2b06      	cmp	r3, #6
 8005baa:	d901      	bls.n	8005bb0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bac:	2306      	movs	r3, #6
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fecc 	bl	8005964 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	3318      	adds	r3, #24
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff fec7 	bl	8005964 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	f1c3 0207 	rsb	r2, r3, #7
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	334c      	adds	r3, #76	; 0x4c
 8005c00:	2260      	movs	r2, #96	; 0x60
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 fa38 	bl	800707a <memset>
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <prvInitialiseNewTask+0x130>)
 8005c0e:	651a      	str	r2, [r3, #80]	; 0x50
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <prvInitialiseNewTask+0x134>)
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <prvInitialiseNewTask+0x138>)
 8005c1a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	69b8      	ldr	r0, [r7, #24]
 8005c22:	f000 fd09 	bl	8006638 <pxPortInitialiseStack>
 8005c26:	4602      	mov	r2, r0
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c38:	bf00      	nop
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	08008428 	.word	0x08008428
 8005c44:	08008448 	.word	0x08008448
 8005c48:	08008408 	.word	0x08008408

08005c4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c54:	f000 fe1e 	bl	8006894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c58:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <prvAddNewTaskToReadyList+0xb8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	4a29      	ldr	r2, [pc, #164]	; (8005d04 <prvAddNewTaskToReadyList+0xb8>)
 8005c60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c62:	4b29      	ldr	r3, [pc, #164]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c6a:	4a27      	ldr	r2, [pc, #156]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c70:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <prvAddNewTaskToReadyList+0xb8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d110      	bne.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c78:	f000 fbd4 	bl	8006424 <prvInitialiseTaskLists>
 8005c7c:	e00d      	b.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c7e:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <prvAddNewTaskToReadyList+0xc0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c86:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d802      	bhi.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c94:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c9a:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <prvAddNewTaskToReadyList+0xc4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <prvAddNewTaskToReadyList+0xc4>)
 8005ca2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	2201      	movs	r2, #1
 8005caa:	409a      	lsls	r2, r3
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <prvAddNewTaskToReadyList+0xc8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	4a18      	ldr	r2, [pc, #96]	; (8005d14 <prvAddNewTaskToReadyList+0xc8>)
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <prvAddNewTaskToReadyList+0xcc>)
 8005cc4:	441a      	add	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f7ff fe56 	bl	800597e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cd2:	f000 fe0f 	bl	80068f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <prvAddNewTaskToReadyList+0xc0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d207      	bcs.n	8005cfc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <prvAddNewTaskToReadyList+0xd0>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000514 	.word	0x20000514
 8005d08:	20000414 	.word	0x20000414
 8005d0c:	20000520 	.word	0x20000520
 8005d10:	20000530 	.word	0x20000530
 8005d14:	2000051c 	.word	0x2000051c
 8005d18:	20000418 	.word	0x20000418
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d017      	beq.n	8005d62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <vTaskDelay+0x60>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <vTaskDelay+0x30>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	60bb      	str	r3, [r7, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d50:	f000 f98c 	bl	800606c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d54:	2100      	movs	r1, #0
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fc08 	bl	800656c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d5c:	f000 f994 	bl	8006088 <xTaskResumeAll>
 8005d60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d107      	bne.n	8005d78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d68:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <vTaskDelay+0x64>)
 8005d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	2000053c 	.word	0x2000053c
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005d90:	f000 fd80 	bl	8006894 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <vTaskSuspend+0x18>
 8005d9a:	4b3c      	ldr	r3, [pc, #240]	; (8005e8c <vTaskSuspend+0x104>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	e000      	b.n	8005da2 <vTaskSuspend+0x1a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fe45 	bl	8005a38 <uxListRemove>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d115      	bne.n	8005de0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db8:	4935      	ldr	r1, [pc, #212]	; (8005e90 <vTaskSuspend+0x108>)
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <vTaskSuspend+0x58>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	2201      	movs	r2, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	43da      	mvns	r2, r3
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <vTaskSuspend+0x10c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	4a2d      	ldr	r2, [pc, #180]	; (8005e94 <vTaskSuspend+0x10c>)
 8005dde:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3318      	adds	r3, #24
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fe23 	bl	8005a38 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4827      	ldr	r0, [pc, #156]	; (8005e98 <vTaskSuspend+0x110>)
 8005dfa:	f7ff fdc0 	bl	800597e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d103      	bne.n	8005e12 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005e12:	f000 fd6f 	bl	80068f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005e16:	4b21      	ldr	r3, [pc, #132]	; (8005e9c <vTaskSuspend+0x114>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005e1e:	f000 fd39 	bl	8006894 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005e22:	f000 fb83 	bl	800652c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005e26:	f000 fd65 	bl	80068f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <vTaskSuspend+0x104>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d127      	bne.n	8005e84 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005e34:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <vTaskSuspend+0x114>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d017      	beq.n	8005e6c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005e3c:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <vTaskSuspend+0x118>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <vTaskSuspend+0xd2>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	60bb      	str	r3, [r7, #8]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8005e5a:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <vTaskSuspend+0x11c>)
 8005e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e6a:	e00b      	b.n	8005e84 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <vTaskSuspend+0x110>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <vTaskSuspend+0x120>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d103      	bne.n	8005e80 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005e78:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <vTaskSuspend+0x104>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
	}
 8005e7e:	e001      	b.n	8005e84 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8005e80:	f000 fa56 	bl	8006330 <vTaskSwitchContext>
	}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20000414 	.word	0x20000414
 8005e90:	20000418 	.word	0x20000418
 8005e94:	2000051c 	.word	0x2000051c
 8005e98:	20000500 	.word	0x20000500
 8005e9c:	20000520 	.word	0x20000520
 8005ea0:	2000053c 	.word	0x2000053c
 8005ea4:	e000ed04 	.word	0xe000ed04
 8005ea8:	20000514 	.word	0x20000514

08005eac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60fb      	str	r3, [r7, #12]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <prvTaskIsTaskSuspended+0x5c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10a      	bne.n	8005ef8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <prvTaskIsTaskSuspended+0x60>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d005      	beq.n	8005ef8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ef8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005efa:	4618      	mov	r0, r3
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000500 	.word	0x20000500
 8005f0c:	200004d4 	.word	0x200004d4

08005f10 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <vTaskResume+0x28>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60bb      	str	r3, [r7, #8]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005f38:	4b20      	ldr	r3, [pc, #128]	; (8005fbc <vTaskResume+0xac>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d037      	beq.n	8005fb2 <vTaskResume+0xa2>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d034      	beq.n	8005fb2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8005f48:	f000 fca4 	bl	8006894 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7ff ffad 	bl	8005eac <prvTaskIsTaskSuspended>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02a      	beq.n	8005fae <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fd6b 	bl	8005a38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	2201      	movs	r2, #1
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <vTaskResume+0xb0>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	4a13      	ldr	r2, [pc, #76]	; (8005fc0 <vTaskResume+0xb0>)
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	4613      	mov	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4a10      	ldr	r2, [pc, #64]	; (8005fc4 <vTaskResume+0xb4>)
 8005f82:	441a      	add	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f7ff fcf7 	bl	800597e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f94:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <vTaskResume+0xac>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d307      	bcc.n	8005fae <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005f9e:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <vTaskResume+0xb8>)
 8005fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005fae:	f000 fca1 	bl	80068f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000414 	.word	0x20000414
 8005fc0:	2000051c 	.word	0x2000051c
 8005fc4:	20000418 	.word	0x20000418
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005fd2:	4b1e      	ldr	r3, [pc, #120]	; (800604c <vTaskStartScheduler+0x80>)
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2280      	movs	r2, #128	; 0x80
 8005fde:	491c      	ldr	r1, [pc, #112]	; (8006050 <vTaskStartScheduler+0x84>)
 8005fe0:	481c      	ldr	r0, [pc, #112]	; (8006054 <vTaskStartScheduler+0x88>)
 8005fe2:	f7ff fd53 	bl	8005a8c <xTaskCreate>
 8005fe6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d11b      	bne.n	8006026 <vTaskStartScheduler+0x5a>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	60bb      	str	r3, [r7, #8]
}
 8006000:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006002:	4b15      	ldr	r3, [pc, #84]	; (8006058 <vTaskStartScheduler+0x8c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	334c      	adds	r3, #76	; 0x4c
 8006008:	4a14      	ldr	r2, [pc, #80]	; (800605c <vTaskStartScheduler+0x90>)
 800600a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800600c:	4b14      	ldr	r3, [pc, #80]	; (8006060 <vTaskStartScheduler+0x94>)
 800600e:	f04f 32ff 	mov.w	r2, #4294967295
 8006012:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <vTaskStartScheduler+0x98>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800601a:	4b13      	ldr	r3, [pc, #76]	; (8006068 <vTaskStartScheduler+0x9c>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006020:	f000 fb96 	bl	8006750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006024:	e00e      	b.n	8006044 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d10a      	bne.n	8006044 <vTaskStartScheduler+0x78>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	607b      	str	r3, [r7, #4]
}
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <vTaskStartScheduler+0x76>
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000538 	.word	0x20000538
 8006050:	080083c0 	.word	0x080083c0
 8006054:	080063f5 	.word	0x080063f5
 8006058:	20000414 	.word	0x20000414
 800605c:	20000020 	.word	0x20000020
 8006060:	20000534 	.word	0x20000534
 8006064:	20000520 	.word	0x20000520
 8006068:	20000518 	.word	0x20000518

0800606c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006070:	4b04      	ldr	r3, [pc, #16]	; (8006084 <vTaskSuspendAll+0x18>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	4a03      	ldr	r2, [pc, #12]	; (8006084 <vTaskSuspendAll+0x18>)
 8006078:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800607a:	bf00      	nop
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	2000053c 	.word	0x2000053c

08006088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006096:	4b41      	ldr	r3, [pc, #260]	; (800619c <xTaskResumeAll+0x114>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	603b      	str	r3, [r7, #0]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060b4:	f000 fbee 	bl	8006894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060b8:	4b38      	ldr	r3, [pc, #224]	; (800619c <xTaskResumeAll+0x114>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3b01      	subs	r3, #1
 80060be:	4a37      	ldr	r2, [pc, #220]	; (800619c <xTaskResumeAll+0x114>)
 80060c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c2:	4b36      	ldr	r3, [pc, #216]	; (800619c <xTaskResumeAll+0x114>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d161      	bne.n	800618e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060ca:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <xTaskResumeAll+0x118>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d05d      	beq.n	800618e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060d2:	e02e      	b.n	8006132 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d4:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <xTaskResumeAll+0x11c>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3318      	adds	r3, #24
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fca9 	bl	8005a38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fca4 	bl	8005a38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	2201      	movs	r2, #1
 80060f6:	409a      	lsls	r2, r3
 80060f8:	4b2b      	ldr	r3, [pc, #172]	; (80061a8 <xTaskResumeAll+0x120>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <xTaskResumeAll+0x120>)
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4a27      	ldr	r2, [pc, #156]	; (80061ac <xTaskResumeAll+0x124>)
 8006110:	441a      	add	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7ff fc30 	bl	800597e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006122:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <xTaskResumeAll+0x128>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800612c:	4b21      	ldr	r3, [pc, #132]	; (80061b4 <xTaskResumeAll+0x12c>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006132:	4b1c      	ldr	r3, [pc, #112]	; (80061a4 <xTaskResumeAll+0x11c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1cc      	bne.n	80060d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006140:	f000 f9f4 	bl	800652c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006144:	4b1c      	ldr	r3, [pc, #112]	; (80061b8 <xTaskResumeAll+0x130>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006150:	f000 f836 	bl	80061c0 <xTaskIncrementTick>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800615a:	4b16      	ldr	r3, [pc, #88]	; (80061b4 <xTaskResumeAll+0x12c>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3b01      	subs	r3, #1
 8006164:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f1      	bne.n	8006150 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800616c:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <xTaskResumeAll+0x130>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <xTaskResumeAll+0x12c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800617a:	2301      	movs	r3, #1
 800617c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <xTaskResumeAll+0x134>)
 8006180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800618e:	f000 fbb1 	bl	80068f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006192:	68bb      	ldr	r3, [r7, #8]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	2000053c 	.word	0x2000053c
 80061a0:	20000514 	.word	0x20000514
 80061a4:	200004d4 	.word	0x200004d4
 80061a8:	2000051c 	.word	0x2000051c
 80061ac:	20000418 	.word	0x20000418
 80061b0:	20000414 	.word	0x20000414
 80061b4:	20000528 	.word	0x20000528
 80061b8:	20000524 	.word	0x20000524
 80061bc:	e000ed04 	.word	0xe000ed04

080061c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ca:	4b4e      	ldr	r3, [pc, #312]	; (8006304 <xTaskIncrementTick+0x144>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 808e 	bne.w	80062f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061d4:	4b4c      	ldr	r3, [pc, #304]	; (8006308 <xTaskIncrementTick+0x148>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3301      	adds	r3, #1
 80061da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061dc:	4a4a      	ldr	r2, [pc, #296]	; (8006308 <xTaskIncrementTick+0x148>)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d120      	bne.n	800622a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80061e8:	4b48      	ldr	r3, [pc, #288]	; (800630c <xTaskIncrementTick+0x14c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <xTaskIncrementTick+0x48>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	603b      	str	r3, [r7, #0]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <xTaskIncrementTick+0x46>
 8006208:	4b40      	ldr	r3, [pc, #256]	; (800630c <xTaskIncrementTick+0x14c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	4b40      	ldr	r3, [pc, #256]	; (8006310 <xTaskIncrementTick+0x150>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a3e      	ldr	r2, [pc, #248]	; (800630c <xTaskIncrementTick+0x14c>)
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4a3e      	ldr	r2, [pc, #248]	; (8006310 <xTaskIncrementTick+0x150>)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	4b3d      	ldr	r3, [pc, #244]	; (8006314 <xTaskIncrementTick+0x154>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	4a3c      	ldr	r2, [pc, #240]	; (8006314 <xTaskIncrementTick+0x154>)
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	f000 f981 	bl	800652c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800622a:	4b3b      	ldr	r3, [pc, #236]	; (8006318 <xTaskIncrementTick+0x158>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d348      	bcc.n	80062c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006234:	4b35      	ldr	r3, [pc, #212]	; (800630c <xTaskIncrementTick+0x14c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <xTaskIncrementTick+0x158>)
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	601a      	str	r2, [r3, #0]
					break;
 8006246:	e03e      	b.n	80062c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006248:	4b30      	ldr	r3, [pc, #192]	; (800630c <xTaskIncrementTick+0x14c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	d203      	bcs.n	8006268 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006260:	4a2d      	ldr	r2, [pc, #180]	; (8006318 <xTaskIncrementTick+0x158>)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006266:	e02e      	b.n	80062c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fbe3 	bl	8005a38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	3318      	adds	r3, #24
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff fbda 	bl	8005a38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	2201      	movs	r2, #1
 800628a:	409a      	lsls	r2, r3
 800628c:	4b23      	ldr	r3, [pc, #140]	; (800631c <xTaskIncrementTick+0x15c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4313      	orrs	r3, r2
 8006292:	4a22      	ldr	r2, [pc, #136]	; (800631c <xTaskIncrementTick+0x15c>)
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <xTaskIncrementTick+0x160>)
 80062a4:	441a      	add	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7ff fb66 	bl	800597e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <xTaskIncrementTick+0x164>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	429a      	cmp	r2, r3
 80062be:	d3b9      	bcc.n	8006234 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c4:	e7b6      	b.n	8006234 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062c6:	4b17      	ldr	r3, [pc, #92]	; (8006324 <xTaskIncrementTick+0x164>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	4914      	ldr	r1, [pc, #80]	; (8006320 <xTaskIncrementTick+0x160>)
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d901      	bls.n	80062e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80062de:	2301      	movs	r3, #1
 80062e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062e2:	4b11      	ldr	r3, [pc, #68]	; (8006328 <xTaskIncrementTick+0x168>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80062ea:	2301      	movs	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e004      	b.n	80062fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80062f0:	4b0e      	ldr	r3, [pc, #56]	; (800632c <xTaskIncrementTick+0x16c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a0d      	ldr	r2, [pc, #52]	; (800632c <xTaskIncrementTick+0x16c>)
 80062f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062fa:	697b      	ldr	r3, [r7, #20]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	2000053c 	.word	0x2000053c
 8006308:	20000518 	.word	0x20000518
 800630c:	200004cc 	.word	0x200004cc
 8006310:	200004d0 	.word	0x200004d0
 8006314:	2000052c 	.word	0x2000052c
 8006318:	20000534 	.word	0x20000534
 800631c:	2000051c 	.word	0x2000051c
 8006320:	20000418 	.word	0x20000418
 8006324:	20000414 	.word	0x20000414
 8006328:	20000528 	.word	0x20000528
 800632c:	20000524 	.word	0x20000524

08006330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006336:	4b29      	ldr	r3, [pc, #164]	; (80063dc <vTaskSwitchContext+0xac>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800633e:	4b28      	ldr	r3, [pc, #160]	; (80063e0 <vTaskSwitchContext+0xb0>)
 8006340:	2201      	movs	r2, #1
 8006342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006344:	e044      	b.n	80063d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006346:	4b26      	ldr	r3, [pc, #152]	; (80063e0 <vTaskSwitchContext+0xb0>)
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800634c:	4b25      	ldr	r3, [pc, #148]	; (80063e4 <vTaskSwitchContext+0xb4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	fab3 f383 	clz	r3, r3
 8006358:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	f1c3 031f 	rsb	r3, r3, #31
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	4921      	ldr	r1, [pc, #132]	; (80063e8 <vTaskSwitchContext+0xb8>)
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	607b      	str	r3, [r7, #4]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <vTaskSwitchContext+0x5a>
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <vTaskSwitchContext+0xb8>)
 8006398:	4413      	add	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3308      	adds	r3, #8
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d104      	bne.n	80063bc <vTaskSwitchContext+0x8c>
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	605a      	str	r2, [r3, #4]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	4a0a      	ldr	r2, [pc, #40]	; (80063ec <vTaskSwitchContext+0xbc>)
 80063c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <vTaskSwitchContext+0xbc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	334c      	adds	r3, #76	; 0x4c
 80063cc:	4a08      	ldr	r2, [pc, #32]	; (80063f0 <vTaskSwitchContext+0xc0>)
 80063ce:	6013      	str	r3, [r2, #0]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	2000053c 	.word	0x2000053c
 80063e0:	20000528 	.word	0x20000528
 80063e4:	2000051c 	.word	0x2000051c
 80063e8:	20000418 	.word	0x20000418
 80063ec:	20000414 	.word	0x20000414
 80063f0:	20000020 	.word	0x20000020

080063f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063fc:	f000 f852 	bl	80064a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006400:	4b06      	ldr	r3, [pc, #24]	; (800641c <prvIdleTask+0x28>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d9f9      	bls.n	80063fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <prvIdleTask+0x2c>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006418:	e7f0      	b.n	80063fc <prvIdleTask+0x8>
 800641a:	bf00      	nop
 800641c:	20000418 	.word	0x20000418
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800642a:	2300      	movs	r3, #0
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	e00c      	b.n	800644a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4a12      	ldr	r2, [pc, #72]	; (8006484 <prvInitialiseTaskLists+0x60>)
 800643c:	4413      	add	r3, r2
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff fa70 	bl	8005924 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3301      	adds	r3, #1
 8006448:	607b      	str	r3, [r7, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b06      	cmp	r3, #6
 800644e:	d9ef      	bls.n	8006430 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006450:	480d      	ldr	r0, [pc, #52]	; (8006488 <prvInitialiseTaskLists+0x64>)
 8006452:	f7ff fa67 	bl	8005924 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006456:	480d      	ldr	r0, [pc, #52]	; (800648c <prvInitialiseTaskLists+0x68>)
 8006458:	f7ff fa64 	bl	8005924 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800645c:	480c      	ldr	r0, [pc, #48]	; (8006490 <prvInitialiseTaskLists+0x6c>)
 800645e:	f7ff fa61 	bl	8005924 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006462:	480c      	ldr	r0, [pc, #48]	; (8006494 <prvInitialiseTaskLists+0x70>)
 8006464:	f7ff fa5e 	bl	8005924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006468:	480b      	ldr	r0, [pc, #44]	; (8006498 <prvInitialiseTaskLists+0x74>)
 800646a:	f7ff fa5b 	bl	8005924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800646e:	4b0b      	ldr	r3, [pc, #44]	; (800649c <prvInitialiseTaskLists+0x78>)
 8006470:	4a05      	ldr	r2, [pc, #20]	; (8006488 <prvInitialiseTaskLists+0x64>)
 8006472:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006474:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <prvInitialiseTaskLists+0x7c>)
 8006476:	4a05      	ldr	r2, [pc, #20]	; (800648c <prvInitialiseTaskLists+0x68>)
 8006478:	601a      	str	r2, [r3, #0]
}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000418 	.word	0x20000418
 8006488:	200004a4 	.word	0x200004a4
 800648c:	200004b8 	.word	0x200004b8
 8006490:	200004d4 	.word	0x200004d4
 8006494:	200004e8 	.word	0x200004e8
 8006498:	20000500 	.word	0x20000500
 800649c:	200004cc 	.word	0x200004cc
 80064a0:	200004d0 	.word	0x200004d0

080064a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064aa:	e019      	b.n	80064e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064ac:	f000 f9f2 	bl	8006894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b0:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <prvCheckTasksWaitingTermination+0x50>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fabb 	bl	8005a38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064c2:	4b0d      	ldr	r3, [pc, #52]	; (80064f8 <prvCheckTasksWaitingTermination+0x54>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	4a0b      	ldr	r2, [pc, #44]	; (80064f8 <prvCheckTasksWaitingTermination+0x54>)
 80064ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064cc:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <prvCheckTasksWaitingTermination+0x58>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <prvCheckTasksWaitingTermination+0x58>)
 80064d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064d6:	f000 fa0d 	bl	80068f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f810 	bl	8006500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <prvCheckTasksWaitingTermination+0x58>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e1      	bne.n	80064ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200004e8 	.word	0x200004e8
 80064f8:	20000514 	.word	0x20000514
 80064fc:	200004fc 	.word	0x200004fc

08006500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	334c      	adds	r3, #76	; 0x4c
 800650c:	4618      	mov	r0, r3
 800650e:	f000 feeb 	bl	80072e8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fb6a 	bl	8006bf0 <vPortFree>
			vPortFree( pxTCB );
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fb67 	bl	8006bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <prvResetNextTaskUnblockTime+0x38>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800653c:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <prvResetNextTaskUnblockTime+0x3c>)
 800653e:	f04f 32ff 	mov.w	r2, #4294967295
 8006542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006544:	e008      	b.n	8006558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006546:	4b07      	ldr	r3, [pc, #28]	; (8006564 <prvResetNextTaskUnblockTime+0x38>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4a04      	ldr	r2, [pc, #16]	; (8006568 <prvResetNextTaskUnblockTime+0x3c>)
 8006556:	6013      	str	r3, [r2, #0]
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	200004cc 	.word	0x200004cc
 8006568:	20000534 	.word	0x20000534

0800656c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006576:	4b29      	ldr	r3, [pc, #164]	; (800661c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800657c:	4b28      	ldr	r3, [pc, #160]	; (8006620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3304      	adds	r3, #4
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fa58 	bl	8005a38 <uxListRemove>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800658e:	4b24      	ldr	r3, [pc, #144]	; (8006620 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	2201      	movs	r2, #1
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43da      	mvns	r2, r3
 800659c:	4b21      	ldr	r3, [pc, #132]	; (8006624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4013      	ands	r3, r2
 80065a2:	4a20      	ldr	r2, [pc, #128]	; (8006624 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d10a      	bne.n	80065c4 <prvAddCurrentTaskToDelayedList+0x58>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065b4:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4619      	mov	r1, r3
 80065bc:	481a      	ldr	r0, [pc, #104]	; (8006628 <prvAddCurrentTaskToDelayedList+0xbc>)
 80065be:	f7ff f9de 	bl	800597e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065c2:	e026      	b.n	8006612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4413      	add	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065cc:	4b14      	ldr	r3, [pc, #80]	; (8006620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d209      	bcs.n	80065f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065dc:	4b13      	ldr	r3, [pc, #76]	; (800662c <prvAddCurrentTaskToDelayedList+0xc0>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f7ff f9ec 	bl	80059c6 <vListInsert>
}
 80065ee:	e010      	b.n	8006612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <prvAddCurrentTaskToDelayedList+0xc4>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f7ff f9e2 	bl	80059c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	d202      	bcs.n	8006612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800660c:	4a09      	ldr	r2, [pc, #36]	; (8006634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6013      	str	r3, [r2, #0]
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000518 	.word	0x20000518
 8006620:	20000414 	.word	0x20000414
 8006624:	2000051c 	.word	0x2000051c
 8006628:	20000500 	.word	0x20000500
 800662c:	200004d0 	.word	0x200004d0
 8006630:	200004cc 	.word	0x200004cc
 8006634:	20000534 	.word	0x20000534

08006638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3b04      	subs	r3, #4
 8006648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3b04      	subs	r3, #4
 8006656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3b04      	subs	r3, #4
 8006666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006668:	4a0c      	ldr	r2, [pc, #48]	; (800669c <pxPortInitialiseStack+0x64>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3b14      	subs	r3, #20
 8006672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3b04      	subs	r3, #4
 800667e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f06f 0202 	mvn.w	r2, #2
 8006686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3b20      	subs	r3, #32
 800668c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800668e:	68fb      	ldr	r3, [r7, #12]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	080066a1 	.word	0x080066a1

080066a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066aa:	4b12      	ldr	r3, [pc, #72]	; (80066f4 <prvTaskExitError+0x54>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d00a      	beq.n	80066ca <prvTaskExitError+0x2a>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	60fb      	str	r3, [r7, #12]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <prvTaskExitError+0x28>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	60bb      	str	r3, [r7, #8]
}
 80066dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066de:	bf00      	nop
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0fc      	beq.n	80066e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	2000001c 	.word	0x2000001c
	...

08006700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <pxCurrentTCBConst2>)
 8006702:	6819      	ldr	r1, [r3, #0]
 8006704:	6808      	ldr	r0, [r1, #0]
 8006706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670a:	f380 8809 	msr	PSP, r0
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f04f 0000 	mov.w	r0, #0
 8006716:	f380 8811 	msr	BASEPRI, r0
 800671a:	4770      	bx	lr
 800671c:	f3af 8000 	nop.w

08006720 <pxCurrentTCBConst2>:
 8006720:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop

08006728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006728:	4808      	ldr	r0, [pc, #32]	; (800674c <prvPortStartFirstTask+0x24>)
 800672a:	6800      	ldr	r0, [r0, #0]
 800672c:	6800      	ldr	r0, [r0, #0]
 800672e:	f380 8808 	msr	MSP, r0
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f380 8814 	msr	CONTROL, r0
 800673a:	b662      	cpsie	i
 800673c:	b661      	cpsie	f
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	df00      	svc	0
 8006748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800674a:	bf00      	nop
 800674c:	e000ed08 	.word	0xe000ed08

08006750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006756:	4b46      	ldr	r3, [pc, #280]	; (8006870 <xPortStartScheduler+0x120>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a46      	ldr	r2, [pc, #280]	; (8006874 <xPortStartScheduler+0x124>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d10a      	bne.n	8006776 <xPortStartScheduler+0x26>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	613b      	str	r3, [r7, #16]
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006776:	4b3e      	ldr	r3, [pc, #248]	; (8006870 <xPortStartScheduler+0x120>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a3f      	ldr	r2, [pc, #252]	; (8006878 <xPortStartScheduler+0x128>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10a      	bne.n	8006796 <xPortStartScheduler+0x46>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60fb      	str	r3, [r7, #12]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006796:	4b39      	ldr	r3, [pc, #228]	; (800687c <xPortStartScheduler+0x12c>)
 8006798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	22ff      	movs	r2, #255	; 0xff
 80067a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	4b31      	ldr	r3, [pc, #196]	; (8006880 <xPortStartScheduler+0x130>)
 80067bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067be:	4b31      	ldr	r3, [pc, #196]	; (8006884 <xPortStartScheduler+0x134>)
 80067c0:	2207      	movs	r2, #7
 80067c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067c4:	e009      	b.n	80067da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067c6:	4b2f      	ldr	r3, [pc, #188]	; (8006884 <xPortStartScheduler+0x134>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	4a2d      	ldr	r2, [pc, #180]	; (8006884 <xPortStartScheduler+0x134>)
 80067ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d0ef      	beq.n	80067c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067e6:	4b27      	ldr	r3, [pc, #156]	; (8006884 <xPortStartScheduler+0x134>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f1c3 0307 	rsb	r3, r3, #7
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d00a      	beq.n	8006808 <xPortStartScheduler+0xb8>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	60bb      	str	r3, [r7, #8]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006808:	4b1e      	ldr	r3, [pc, #120]	; (8006884 <xPortStartScheduler+0x134>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <xPortStartScheduler+0x134>)
 8006810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006812:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <xPortStartScheduler+0x134>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800681a:	4a1a      	ldr	r2, [pc, #104]	; (8006884 <xPortStartScheduler+0x134>)
 800681c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	b2da      	uxtb	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006826:	4b18      	ldr	r3, [pc, #96]	; (8006888 <xPortStartScheduler+0x138>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a17      	ldr	r2, [pc, #92]	; (8006888 <xPortStartScheduler+0x138>)
 800682c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <xPortStartScheduler+0x138>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a14      	ldr	r2, [pc, #80]	; (8006888 <xPortStartScheduler+0x138>)
 8006838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800683c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800683e:	f000 f8dd 	bl	80069fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006842:	4b12      	ldr	r3, [pc, #72]	; (800688c <xPortStartScheduler+0x13c>)
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006848:	f000 f8fc 	bl	8006a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800684c:	4b10      	ldr	r3, [pc, #64]	; (8006890 <xPortStartScheduler+0x140>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a0f      	ldr	r2, [pc, #60]	; (8006890 <xPortStartScheduler+0x140>)
 8006852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006858:	f7ff ff66 	bl	8006728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800685c:	f7ff fd68 	bl	8006330 <vTaskSwitchContext>
	prvTaskExitError();
 8006860:	f7ff ff1e 	bl	80066a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	e000ed00 	.word	0xe000ed00
 8006874:	410fc271 	.word	0x410fc271
 8006878:	410fc270 	.word	0x410fc270
 800687c:	e000e400 	.word	0xe000e400
 8006880:	20000540 	.word	0x20000540
 8006884:	20000544 	.word	0x20000544
 8006888:	e000ed20 	.word	0xe000ed20
 800688c:	2000001c 	.word	0x2000001c
 8006890:	e000ef34 	.word	0xe000ef34

08006894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	607b      	str	r3, [r7, #4]
}
 80068ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <vPortEnterCritical+0x58>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3301      	adds	r3, #1
 80068b4:	4a0d      	ldr	r2, [pc, #52]	; (80068ec <vPortEnterCritical+0x58>)
 80068b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068b8:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <vPortEnterCritical+0x58>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d10f      	bne.n	80068e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <vPortEnterCritical+0x5c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	603b      	str	r3, [r7, #0]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <vPortEnterCritical+0x4a>
	}
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	2000001c 	.word	0x2000001c
 80068f0:	e000ed04 	.word	0xe000ed04

080068f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068fa:	4b12      	ldr	r3, [pc, #72]	; (8006944 <vPortExitCritical+0x50>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <vPortExitCritical+0x24>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	607b      	str	r3, [r7, #4]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <vPortExitCritical+0x50>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3b01      	subs	r3, #1
 800691e:	4a09      	ldr	r2, [pc, #36]	; (8006944 <vPortExitCritical+0x50>)
 8006920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006922:	4b08      	ldr	r3, [pc, #32]	; (8006944 <vPortExitCritical+0x50>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d105      	bne.n	8006936 <vPortExitCritical+0x42>
 800692a:	2300      	movs	r3, #0
 800692c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	2000001c 	.word	0x2000001c
	...

08006950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006950:	f3ef 8009 	mrs	r0, PSP
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <pxCurrentTCBConst>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	f01e 0f10 	tst.w	lr, #16
 8006960:	bf08      	it	eq
 8006962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696a:	6010      	str	r0, [r2, #0]
 800696c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006974:	f380 8811 	msr	BASEPRI, r0
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f7ff fcd6 	bl	8006330 <vTaskSwitchContext>
 8006984:	f04f 0000 	mov.w	r0, #0
 8006988:	f380 8811 	msr	BASEPRI, r0
 800698c:	bc09      	pop	{r0, r3}
 800698e:	6819      	ldr	r1, [r3, #0]
 8006990:	6808      	ldr	r0, [r1, #0]
 8006992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006996:	f01e 0f10 	tst.w	lr, #16
 800699a:	bf08      	it	eq
 800699c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069a0:	f380 8809 	msr	PSP, r0
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	f3af 8000 	nop.w

080069b0 <pxCurrentTCBConst>:
 80069b0:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop

080069b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	607b      	str	r3, [r7, #4]
}
 80069d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069d2:	f7ff fbf5 	bl	80061c0 <xTaskIncrementTick>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069dc:	4b06      	ldr	r3, [pc, #24]	; (80069f8 <SysTick_Handler+0x40>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	2300      	movs	r3, #0
 80069e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f383 8811 	msr	BASEPRI, r3
}
 80069ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortSetupTimerInterrupt+0x34>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a06:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <vPortSetupTimerInterrupt+0x38>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <vPortSetupTimerInterrupt+0x3c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <vPortSetupTimerInterrupt+0x40>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	099b      	lsrs	r3, r3, #6
 8006a18:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <vPortSetupTimerInterrupt+0x44>)
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <vPortSetupTimerInterrupt+0x34>)
 8006a20:	2207      	movs	r2, #7
 8006a22:	601a      	str	r2, [r3, #0]
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	e000e010 	.word	0xe000e010
 8006a34:	e000e018 	.word	0xe000e018
 8006a38:	20000010 	.word	0x20000010
 8006a3c:	10624dd3 	.word	0x10624dd3
 8006a40:	e000e014 	.word	0xe000e014

08006a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a54 <vPortEnableVFP+0x10>
 8006a48:	6801      	ldr	r1, [r0, #0]
 8006a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a4e:	6001      	str	r1, [r0, #0]
 8006a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a52:	bf00      	nop
 8006a54:	e000ed88 	.word	0xe000ed88

08006a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a64:	f7ff fb02 	bl	800606c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a68:	4b5b      	ldr	r3, [pc, #364]	; (8006bd8 <pvPortMalloc+0x180>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a70:	f000 f920 	bl	8006cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a74:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <pvPortMalloc+0x184>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f040 8093 	bne.w	8006ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01d      	beq.n	8006ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a88:	2208      	movs	r2, #8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d014      	beq.n	8006ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f023 0307 	bic.w	r3, r3, #7
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	617b      	str	r3, [r7, #20]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d06e      	beq.n	8006ba8 <pvPortMalloc+0x150>
 8006aca:	4b45      	ldr	r3, [pc, #276]	; (8006be0 <pvPortMalloc+0x188>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d869      	bhi.n	8006ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ad4:	4b43      	ldr	r3, [pc, #268]	; (8006be4 <pvPortMalloc+0x18c>)
 8006ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ad8:	4b42      	ldr	r3, [pc, #264]	; (8006be4 <pvPortMalloc+0x18c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ade:	e004      	b.n	8006aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d903      	bls.n	8006afc <pvPortMalloc+0xa4>
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1f1      	bne.n	8006ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006afc:	4b36      	ldr	r3, [pc, #216]	; (8006bd8 <pvPortMalloc+0x180>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d050      	beq.n	8006ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	4413      	add	r3, r2
 8006b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	2308      	movs	r3, #8
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d91f      	bls.n	8006b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <pvPortMalloc+0xf8>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	613b      	str	r3, [r7, #16]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	1ad2      	subs	r2, r2, r3
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b62:	69b8      	ldr	r0, [r7, #24]
 8006b64:	f000 f908 	bl	8006d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <pvPortMalloc+0x188>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	4a1b      	ldr	r2, [pc, #108]	; (8006be0 <pvPortMalloc+0x188>)
 8006b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b76:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <pvPortMalloc+0x188>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <pvPortMalloc+0x190>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d203      	bcs.n	8006b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b82:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <pvPortMalloc+0x188>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <pvPortMalloc+0x190>)
 8006b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <pvPortMalloc+0x184>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <pvPortMalloc+0x194>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a11      	ldr	r2, [pc, #68]	; (8006bec <pvPortMalloc+0x194>)
 8006ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ba8:	f7ff fa6e 	bl	8006088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <pvPortMalloc+0x174>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60fb      	str	r3, [r7, #12]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <pvPortMalloc+0x172>
	return pvReturn;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3728      	adds	r7, #40	; 0x28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20002d50 	.word	0x20002d50
 8006bdc:	20002d64 	.word	0x20002d64
 8006be0:	20002d54 	.word	0x20002d54
 8006be4:	20002d48 	.word	0x20002d48
 8006be8:	20002d58 	.word	0x20002d58
 8006bec:	20002d5c 	.word	0x20002d5c

08006bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d04d      	beq.n	8006c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c02:	2308      	movs	r3, #8
 8006c04:	425b      	negs	r3, r3
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4413      	add	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <vPortFree+0xb8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <vPortFree+0x44>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	60fb      	str	r3, [r7, #12]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <vPortFree+0x62>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	60bb      	str	r3, [r7, #8]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <vPortFree+0xb8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01e      	beq.n	8006c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11a      	bne.n	8006c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <vPortFree+0xb8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	401a      	ands	r2, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c78:	f7ff f9f8 	bl	800606c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <vPortFree+0xbc>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4413      	add	r3, r2
 8006c86:	4a09      	ldr	r2, [pc, #36]	; (8006cac <vPortFree+0xbc>)
 8006c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c8a:	6938      	ldr	r0, [r7, #16]
 8006c8c:	f000 f874 	bl	8006d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c90:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <vPortFree+0xc0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	4a06      	ldr	r2, [pc, #24]	; (8006cb0 <vPortFree+0xc0>)
 8006c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c9a:	f7ff f9f5 	bl	8006088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c9e:	bf00      	nop
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20002d64 	.word	0x20002d64
 8006cac:	20002d54 	.word	0x20002d54
 8006cb0:	20002d60 	.word	0x20002d60

08006cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cc0:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <prvHeapInit+0xac>)
 8006cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00c      	beq.n	8006ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3307      	adds	r3, #7
 8006cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0307 	bic.w	r3, r3, #7
 8006cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	4a1f      	ldr	r2, [pc, #124]	; (8006d60 <prvHeapInit+0xac>)
 8006ce4:	4413      	add	r3, r2
 8006ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <prvHeapInit+0xb0>)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cf2:	4b1c      	ldr	r3, [pc, #112]	; (8006d64 <prvHeapInit+0xb0>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d00:	2208      	movs	r2, #8
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1a9b      	subs	r3, r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0307 	bic.w	r3, r3, #7
 8006d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <prvHeapInit+0xb4>)
 8006d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <prvHeapInit+0xb4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <prvHeapInit+0xb4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d34:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <prvHeapInit+0xb4>)
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <prvHeapInit+0xb8>)
 8006d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <prvHeapInit+0xbc>)
 8006d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <prvHeapInit+0xc0>)
 8006d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d52:	601a      	str	r2, [r3, #0]
}
 8006d54:	bf00      	nop
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	20000548 	.word	0x20000548
 8006d64:	20002d48 	.word	0x20002d48
 8006d68:	20002d50 	.word	0x20002d50
 8006d6c:	20002d58 	.word	0x20002d58
 8006d70:	20002d54 	.word	0x20002d54
 8006d74:	20002d64 	.word	0x20002d64

08006d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d80:	4b28      	ldr	r3, [pc, #160]	; (8006e24 <prvInsertBlockIntoFreeList+0xac>)
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e002      	b.n	8006d8c <prvInsertBlockIntoFreeList+0x14>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d8f7      	bhi.n	8006d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d108      	bne.n	8006dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	441a      	add	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	441a      	add	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d118      	bne.n	8006e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <prvInsertBlockIntoFreeList+0xb0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d00d      	beq.n	8006df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	441a      	add	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e008      	b.n	8006e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <prvInsertBlockIntoFreeList+0xb0>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e003      	b.n	8006e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d002      	beq.n	8006e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20002d48 	.word	0x20002d48
 8006e28:	20002d50 	.word	0x20002d50

08006e2c <atoi>:
 8006e2c:	220a      	movs	r2, #10
 8006e2e:	2100      	movs	r1, #0
 8006e30:	f000 bbfe 	b.w	8007630 <strtol>

08006e34 <__errno>:
 8006e34:	4b01      	ldr	r3, [pc, #4]	; (8006e3c <__errno+0x8>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000020 	.word	0x20000020

08006e40 <std>:
 8006e40:	2300      	movs	r3, #0
 8006e42:	b510      	push	{r4, lr}
 8006e44:	4604      	mov	r4, r0
 8006e46:	e9c0 3300 	strd	r3, r3, [r0]
 8006e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e4e:	6083      	str	r3, [r0, #8]
 8006e50:	8181      	strh	r1, [r0, #12]
 8006e52:	6643      	str	r3, [r0, #100]	; 0x64
 8006e54:	81c2      	strh	r2, [r0, #14]
 8006e56:	6183      	str	r3, [r0, #24]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	2208      	movs	r2, #8
 8006e5c:	305c      	adds	r0, #92	; 0x5c
 8006e5e:	f000 f90c 	bl	800707a <memset>
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <std+0x38>)
 8006e64:	6263      	str	r3, [r4, #36]	; 0x24
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <std+0x3c>)
 8006e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <std+0x40>)
 8006e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <std+0x44>)
 8006e70:	6224      	str	r4, [r4, #32]
 8006e72:	6323      	str	r3, [r4, #48]	; 0x30
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	bf00      	nop
 8006e78:	080073c1 	.word	0x080073c1
 8006e7c:	080073e3 	.word	0x080073e3
 8006e80:	0800741b 	.word	0x0800741b
 8006e84:	0800743f 	.word	0x0800743f

08006e88 <_cleanup_r>:
 8006e88:	4901      	ldr	r1, [pc, #4]	; (8006e90 <_cleanup_r+0x8>)
 8006e8a:	f000 b8af 	b.w	8006fec <_fwalk_reent>
 8006e8e:	bf00      	nop
 8006e90:	08007951 	.word	0x08007951

08006e94 <__sfmoreglue>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	2268      	movs	r2, #104	; 0x68
 8006e98:	1e4d      	subs	r5, r1, #1
 8006e9a:	4355      	muls	r5, r2
 8006e9c:	460e      	mov	r6, r1
 8006e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ea2:	f000 f913 	bl	80070cc <_malloc_r>
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	b140      	cbz	r0, 8006ebc <__sfmoreglue+0x28>
 8006eaa:	2100      	movs	r1, #0
 8006eac:	e9c0 1600 	strd	r1, r6, [r0]
 8006eb0:	300c      	adds	r0, #12
 8006eb2:	60a0      	str	r0, [r4, #8]
 8006eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eb8:	f000 f8df 	bl	800707a <memset>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}

08006ec0 <__sfp_lock_acquire>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__sfp_lock_acquire+0x8>)
 8006ec2:	f000 b8d8 	b.w	8007076 <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	20002d69 	.word	0x20002d69

08006ecc <__sfp_lock_release>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__sfp_lock_release+0x8>)
 8006ece:	f000 b8d3 	b.w	8007078 <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	20002d69 	.word	0x20002d69

08006ed8 <__sinit_lock_acquire>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__sinit_lock_acquire+0x8>)
 8006eda:	f000 b8cc 	b.w	8007076 <__retarget_lock_acquire_recursive>
 8006ede:	bf00      	nop
 8006ee0:	20002d6a 	.word	0x20002d6a

08006ee4 <__sinit_lock_release>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__sinit_lock_release+0x8>)
 8006ee6:	f000 b8c7 	b.w	8007078 <__retarget_lock_release_recursive>
 8006eea:	bf00      	nop
 8006eec:	20002d6a 	.word	0x20002d6a

08006ef0 <__sinit>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	f7ff fff0 	bl	8006ed8 <__sinit_lock_acquire>
 8006ef8:	69a3      	ldr	r3, [r4, #24]
 8006efa:	b11b      	cbz	r3, 8006f04 <__sinit+0x14>
 8006efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f00:	f7ff bff0 	b.w	8006ee4 <__sinit_lock_release>
 8006f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f08:	6523      	str	r3, [r4, #80]	; 0x50
 8006f0a:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <__sinit+0x68>)
 8006f0c:	4a13      	ldr	r2, [pc, #76]	; (8006f5c <__sinit+0x6c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	bf04      	itt	eq
 8006f16:	2301      	moveq	r3, #1
 8006f18:	61a3      	streq	r3, [r4, #24]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 f820 	bl	8006f60 <__sfp>
 8006f20:	6060      	str	r0, [r4, #4]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f81c 	bl	8006f60 <__sfp>
 8006f28:	60a0      	str	r0, [r4, #8]
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 f818 	bl	8006f60 <__sfp>
 8006f30:	2200      	movs	r2, #0
 8006f32:	60e0      	str	r0, [r4, #12]
 8006f34:	2104      	movs	r1, #4
 8006f36:	6860      	ldr	r0, [r4, #4]
 8006f38:	f7ff ff82 	bl	8006e40 <std>
 8006f3c:	68a0      	ldr	r0, [r4, #8]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	2109      	movs	r1, #9
 8006f42:	f7ff ff7d 	bl	8006e40 <std>
 8006f46:	68e0      	ldr	r0, [r4, #12]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	2112      	movs	r1, #18
 8006f4c:	f7ff ff78 	bl	8006e40 <std>
 8006f50:	2301      	movs	r3, #1
 8006f52:	61a3      	str	r3, [r4, #24]
 8006f54:	e7d2      	b.n	8006efc <__sinit+0xc>
 8006f56:	bf00      	nop
 8006f58:	08008468 	.word	0x08008468
 8006f5c:	08006e89 	.word	0x08006e89

08006f60 <__sfp>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	4607      	mov	r7, r0
 8006f64:	f7ff ffac 	bl	8006ec0 <__sfp_lock_acquire>
 8006f68:	4b1e      	ldr	r3, [pc, #120]	; (8006fe4 <__sfp+0x84>)
 8006f6a:	681e      	ldr	r6, [r3, #0]
 8006f6c:	69b3      	ldr	r3, [r6, #24]
 8006f6e:	b913      	cbnz	r3, 8006f76 <__sfp+0x16>
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7ff ffbd 	bl	8006ef0 <__sinit>
 8006f76:	3648      	adds	r6, #72	; 0x48
 8006f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	d503      	bpl.n	8006f88 <__sfp+0x28>
 8006f80:	6833      	ldr	r3, [r6, #0]
 8006f82:	b30b      	cbz	r3, 8006fc8 <__sfp+0x68>
 8006f84:	6836      	ldr	r6, [r6, #0]
 8006f86:	e7f7      	b.n	8006f78 <__sfp+0x18>
 8006f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f8c:	b9d5      	cbnz	r5, 8006fc4 <__sfp+0x64>
 8006f8e:	4b16      	ldr	r3, [pc, #88]	; (8006fe8 <__sfp+0x88>)
 8006f90:	60e3      	str	r3, [r4, #12]
 8006f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f96:	6665      	str	r5, [r4, #100]	; 0x64
 8006f98:	f000 f86c 	bl	8007074 <__retarget_lock_init_recursive>
 8006f9c:	f7ff ff96 	bl	8006ecc <__sfp_lock_release>
 8006fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fa8:	6025      	str	r5, [r4, #0]
 8006faa:	61a5      	str	r5, [r4, #24]
 8006fac:	2208      	movs	r2, #8
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fb4:	f000 f861 	bl	800707a <memset>
 8006fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc4:	3468      	adds	r4, #104	; 0x68
 8006fc6:	e7d9      	b.n	8006f7c <__sfp+0x1c>
 8006fc8:	2104      	movs	r1, #4
 8006fca:	4638      	mov	r0, r7
 8006fcc:	f7ff ff62 	bl	8006e94 <__sfmoreglue>
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	6030      	str	r0, [r6, #0]
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d1d5      	bne.n	8006f84 <__sfp+0x24>
 8006fd8:	f7ff ff78 	bl	8006ecc <__sfp_lock_release>
 8006fdc:	230c      	movs	r3, #12
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	e7ee      	b.n	8006fc0 <__sfp+0x60>
 8006fe2:	bf00      	nop
 8006fe4:	08008468 	.word	0x08008468
 8006fe8:	ffff0001 	.word	0xffff0001

08006fec <_fwalk_reent>:
 8006fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	4688      	mov	r8, r1
 8006ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ff8:	2700      	movs	r7, #0
 8006ffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ffe:	f1b9 0901 	subs.w	r9, r9, #1
 8007002:	d505      	bpl.n	8007010 <_fwalk_reent+0x24>
 8007004:	6824      	ldr	r4, [r4, #0]
 8007006:	2c00      	cmp	r4, #0
 8007008:	d1f7      	bne.n	8006ffa <_fwalk_reent+0xe>
 800700a:	4638      	mov	r0, r7
 800700c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007010:	89ab      	ldrh	r3, [r5, #12]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d907      	bls.n	8007026 <_fwalk_reent+0x3a>
 8007016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800701a:	3301      	adds	r3, #1
 800701c:	d003      	beq.n	8007026 <_fwalk_reent+0x3a>
 800701e:	4629      	mov	r1, r5
 8007020:	4630      	mov	r0, r6
 8007022:	47c0      	blx	r8
 8007024:	4307      	orrs	r7, r0
 8007026:	3568      	adds	r5, #104	; 0x68
 8007028:	e7e9      	b.n	8006ffe <_fwalk_reent+0x12>
	...

0800702c <__libc_init_array>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	4d0d      	ldr	r5, [pc, #52]	; (8007064 <__libc_init_array+0x38>)
 8007030:	4c0d      	ldr	r4, [pc, #52]	; (8007068 <__libc_init_array+0x3c>)
 8007032:	1b64      	subs	r4, r4, r5
 8007034:	10a4      	asrs	r4, r4, #2
 8007036:	2600      	movs	r6, #0
 8007038:	42a6      	cmp	r6, r4
 800703a:	d109      	bne.n	8007050 <__libc_init_array+0x24>
 800703c:	4d0b      	ldr	r5, [pc, #44]	; (800706c <__libc_init_array+0x40>)
 800703e:	4c0c      	ldr	r4, [pc, #48]	; (8007070 <__libc_init_array+0x44>)
 8007040:	f001 f962 	bl	8008308 <_init>
 8007044:	1b64      	subs	r4, r4, r5
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	2600      	movs	r6, #0
 800704a:	42a6      	cmp	r6, r4
 800704c:	d105      	bne.n	800705a <__libc_init_array+0x2e>
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	f855 3b04 	ldr.w	r3, [r5], #4
 8007054:	4798      	blx	r3
 8007056:	3601      	adds	r6, #1
 8007058:	e7ee      	b.n	8007038 <__libc_init_array+0xc>
 800705a:	f855 3b04 	ldr.w	r3, [r5], #4
 800705e:	4798      	blx	r3
 8007060:	3601      	adds	r6, #1
 8007062:	e7f2      	b.n	800704a <__libc_init_array+0x1e>
 8007064:	08008658 	.word	0x08008658
 8007068:	08008658 	.word	0x08008658
 800706c:	08008658 	.word	0x08008658
 8007070:	0800865c 	.word	0x0800865c

08007074 <__retarget_lock_init_recursive>:
 8007074:	4770      	bx	lr

08007076 <__retarget_lock_acquire_recursive>:
 8007076:	4770      	bx	lr

08007078 <__retarget_lock_release_recursive>:
 8007078:	4770      	bx	lr

0800707a <memset>:
 800707a:	4402      	add	r2, r0
 800707c:	4603      	mov	r3, r0
 800707e:	4293      	cmp	r3, r2
 8007080:	d100      	bne.n	8007084 <memset+0xa>
 8007082:	4770      	bx	lr
 8007084:	f803 1b01 	strb.w	r1, [r3], #1
 8007088:	e7f9      	b.n	800707e <memset+0x4>
	...

0800708c <sbrk_aligned>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	4e0e      	ldr	r6, [pc, #56]	; (80070c8 <sbrk_aligned+0x3c>)
 8007090:	460c      	mov	r4, r1
 8007092:	6831      	ldr	r1, [r6, #0]
 8007094:	4605      	mov	r5, r0
 8007096:	b911      	cbnz	r1, 800709e <sbrk_aligned+0x12>
 8007098:	f000 f982 	bl	80073a0 <_sbrk_r>
 800709c:	6030      	str	r0, [r6, #0]
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 f97d 	bl	80073a0 <_sbrk_r>
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	d00a      	beq.n	80070c0 <sbrk_aligned+0x34>
 80070aa:	1cc4      	adds	r4, r0, #3
 80070ac:	f024 0403 	bic.w	r4, r4, #3
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d007      	beq.n	80070c4 <sbrk_aligned+0x38>
 80070b4:	1a21      	subs	r1, r4, r0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f972 	bl	80073a0 <_sbrk_r>
 80070bc:	3001      	adds	r0, #1
 80070be:	d101      	bne.n	80070c4 <sbrk_aligned+0x38>
 80070c0:	f04f 34ff 	mov.w	r4, #4294967295
 80070c4:	4620      	mov	r0, r4
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	20002d70 	.word	0x20002d70

080070cc <_malloc_r>:
 80070cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	1ccd      	adds	r5, r1, #3
 80070d2:	f025 0503 	bic.w	r5, r5, #3
 80070d6:	3508      	adds	r5, #8
 80070d8:	2d0c      	cmp	r5, #12
 80070da:	bf38      	it	cc
 80070dc:	250c      	movcc	r5, #12
 80070de:	2d00      	cmp	r5, #0
 80070e0:	4607      	mov	r7, r0
 80070e2:	db01      	blt.n	80070e8 <_malloc_r+0x1c>
 80070e4:	42a9      	cmp	r1, r5
 80070e6:	d905      	bls.n	80070f4 <_malloc_r+0x28>
 80070e8:	230c      	movs	r3, #12
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	2600      	movs	r6, #0
 80070ee:	4630      	mov	r0, r6
 80070f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f4:	4e2e      	ldr	r6, [pc, #184]	; (80071b0 <_malloc_r+0xe4>)
 80070f6:	f000 fcf9 	bl	8007aec <__malloc_lock>
 80070fa:	6833      	ldr	r3, [r6, #0]
 80070fc:	461c      	mov	r4, r3
 80070fe:	bb34      	cbnz	r4, 800714e <_malloc_r+0x82>
 8007100:	4629      	mov	r1, r5
 8007102:	4638      	mov	r0, r7
 8007104:	f7ff ffc2 	bl	800708c <sbrk_aligned>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	4604      	mov	r4, r0
 800710c:	d14d      	bne.n	80071aa <_malloc_r+0xde>
 800710e:	6834      	ldr	r4, [r6, #0]
 8007110:	4626      	mov	r6, r4
 8007112:	2e00      	cmp	r6, #0
 8007114:	d140      	bne.n	8007198 <_malloc_r+0xcc>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	4631      	mov	r1, r6
 800711a:	4638      	mov	r0, r7
 800711c:	eb04 0803 	add.w	r8, r4, r3
 8007120:	f000 f93e 	bl	80073a0 <_sbrk_r>
 8007124:	4580      	cmp	r8, r0
 8007126:	d13a      	bne.n	800719e <_malloc_r+0xd2>
 8007128:	6821      	ldr	r1, [r4, #0]
 800712a:	3503      	adds	r5, #3
 800712c:	1a6d      	subs	r5, r5, r1
 800712e:	f025 0503 	bic.w	r5, r5, #3
 8007132:	3508      	adds	r5, #8
 8007134:	2d0c      	cmp	r5, #12
 8007136:	bf38      	it	cc
 8007138:	250c      	movcc	r5, #12
 800713a:	4629      	mov	r1, r5
 800713c:	4638      	mov	r0, r7
 800713e:	f7ff ffa5 	bl	800708c <sbrk_aligned>
 8007142:	3001      	adds	r0, #1
 8007144:	d02b      	beq.n	800719e <_malloc_r+0xd2>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	442b      	add	r3, r5
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	e00e      	b.n	800716c <_malloc_r+0xa0>
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	1b52      	subs	r2, r2, r5
 8007152:	d41e      	bmi.n	8007192 <_malloc_r+0xc6>
 8007154:	2a0b      	cmp	r2, #11
 8007156:	d916      	bls.n	8007186 <_malloc_r+0xba>
 8007158:	1961      	adds	r1, r4, r5
 800715a:	42a3      	cmp	r3, r4
 800715c:	6025      	str	r5, [r4, #0]
 800715e:	bf18      	it	ne
 8007160:	6059      	strne	r1, [r3, #4]
 8007162:	6863      	ldr	r3, [r4, #4]
 8007164:	bf08      	it	eq
 8007166:	6031      	streq	r1, [r6, #0]
 8007168:	5162      	str	r2, [r4, r5]
 800716a:	604b      	str	r3, [r1, #4]
 800716c:	4638      	mov	r0, r7
 800716e:	f104 060b 	add.w	r6, r4, #11
 8007172:	f000 fcc1 	bl	8007af8 <__malloc_unlock>
 8007176:	f026 0607 	bic.w	r6, r6, #7
 800717a:	1d23      	adds	r3, r4, #4
 800717c:	1af2      	subs	r2, r6, r3
 800717e:	d0b6      	beq.n	80070ee <_malloc_r+0x22>
 8007180:	1b9b      	subs	r3, r3, r6
 8007182:	50a3      	str	r3, [r4, r2]
 8007184:	e7b3      	b.n	80070ee <_malloc_r+0x22>
 8007186:	6862      	ldr	r2, [r4, #4]
 8007188:	42a3      	cmp	r3, r4
 800718a:	bf0c      	ite	eq
 800718c:	6032      	streq	r2, [r6, #0]
 800718e:	605a      	strne	r2, [r3, #4]
 8007190:	e7ec      	b.n	800716c <_malloc_r+0xa0>
 8007192:	4623      	mov	r3, r4
 8007194:	6864      	ldr	r4, [r4, #4]
 8007196:	e7b2      	b.n	80070fe <_malloc_r+0x32>
 8007198:	4634      	mov	r4, r6
 800719a:	6876      	ldr	r6, [r6, #4]
 800719c:	e7b9      	b.n	8007112 <_malloc_r+0x46>
 800719e:	230c      	movs	r3, #12
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	4638      	mov	r0, r7
 80071a4:	f000 fca8 	bl	8007af8 <__malloc_unlock>
 80071a8:	e7a1      	b.n	80070ee <_malloc_r+0x22>
 80071aa:	6025      	str	r5, [r4, #0]
 80071ac:	e7de      	b.n	800716c <_malloc_r+0xa0>
 80071ae:	bf00      	nop
 80071b0:	20002d6c 	.word	0x20002d6c

080071b4 <putchar>:
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <putchar+0x28>)
 80071b6:	b513      	push	{r0, r1, r4, lr}
 80071b8:	681c      	ldr	r4, [r3, #0]
 80071ba:	4601      	mov	r1, r0
 80071bc:	b134      	cbz	r4, 80071cc <putchar+0x18>
 80071be:	69a3      	ldr	r3, [r4, #24]
 80071c0:	b923      	cbnz	r3, 80071cc <putchar+0x18>
 80071c2:	9001      	str	r0, [sp, #4]
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7ff fe93 	bl	8006ef0 <__sinit>
 80071ca:	9901      	ldr	r1, [sp, #4]
 80071cc:	68a2      	ldr	r2, [r4, #8]
 80071ce:	4620      	mov	r0, r4
 80071d0:	b002      	add	sp, #8
 80071d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d6:	f000 bfcf 	b.w	8008178 <_putc_r>
 80071da:	bf00      	nop
 80071dc:	20000020 	.word	0x20000020

080071e0 <_puts_r>:
 80071e0:	b570      	push	{r4, r5, r6, lr}
 80071e2:	460e      	mov	r6, r1
 80071e4:	4605      	mov	r5, r0
 80071e6:	b118      	cbz	r0, 80071f0 <_puts_r+0x10>
 80071e8:	6983      	ldr	r3, [r0, #24]
 80071ea:	b90b      	cbnz	r3, 80071f0 <_puts_r+0x10>
 80071ec:	f7ff fe80 	bl	8006ef0 <__sinit>
 80071f0:	69ab      	ldr	r3, [r5, #24]
 80071f2:	68ac      	ldr	r4, [r5, #8]
 80071f4:	b913      	cbnz	r3, 80071fc <_puts_r+0x1c>
 80071f6:	4628      	mov	r0, r5
 80071f8:	f7ff fe7a 	bl	8006ef0 <__sinit>
 80071fc:	4b2c      	ldr	r3, [pc, #176]	; (80072b0 <_puts_r+0xd0>)
 80071fe:	429c      	cmp	r4, r3
 8007200:	d120      	bne.n	8007244 <_puts_r+0x64>
 8007202:	686c      	ldr	r4, [r5, #4]
 8007204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007206:	07db      	lsls	r3, r3, #31
 8007208:	d405      	bmi.n	8007216 <_puts_r+0x36>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	0598      	lsls	r0, r3, #22
 800720e:	d402      	bmi.n	8007216 <_puts_r+0x36>
 8007210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007212:	f7ff ff30 	bl	8007076 <__retarget_lock_acquire_recursive>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	0719      	lsls	r1, r3, #28
 800721a:	d51d      	bpl.n	8007258 <_puts_r+0x78>
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	b1db      	cbz	r3, 8007258 <_puts_r+0x78>
 8007220:	3e01      	subs	r6, #1
 8007222:	68a3      	ldr	r3, [r4, #8]
 8007224:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007228:	3b01      	subs	r3, #1
 800722a:	60a3      	str	r3, [r4, #8]
 800722c:	bb39      	cbnz	r1, 800727e <_puts_r+0x9e>
 800722e:	2b00      	cmp	r3, #0
 8007230:	da38      	bge.n	80072a4 <_puts_r+0xc4>
 8007232:	4622      	mov	r2, r4
 8007234:	210a      	movs	r1, #10
 8007236:	4628      	mov	r0, r5
 8007238:	f000 fa04 	bl	8007644 <__swbuf_r>
 800723c:	3001      	adds	r0, #1
 800723e:	d011      	beq.n	8007264 <_puts_r+0x84>
 8007240:	250a      	movs	r5, #10
 8007242:	e011      	b.n	8007268 <_puts_r+0x88>
 8007244:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <_puts_r+0xd4>)
 8007246:	429c      	cmp	r4, r3
 8007248:	d101      	bne.n	800724e <_puts_r+0x6e>
 800724a:	68ac      	ldr	r4, [r5, #8]
 800724c:	e7da      	b.n	8007204 <_puts_r+0x24>
 800724e:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <_puts_r+0xd8>)
 8007250:	429c      	cmp	r4, r3
 8007252:	bf08      	it	eq
 8007254:	68ec      	ldreq	r4, [r5, #12]
 8007256:	e7d5      	b.n	8007204 <_puts_r+0x24>
 8007258:	4621      	mov	r1, r4
 800725a:	4628      	mov	r0, r5
 800725c:	f000 fa56 	bl	800770c <__swsetup_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	d0dd      	beq.n	8007220 <_puts_r+0x40>
 8007264:	f04f 35ff 	mov.w	r5, #4294967295
 8007268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800726a:	07da      	lsls	r2, r3, #31
 800726c:	d405      	bmi.n	800727a <_puts_r+0x9a>
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	059b      	lsls	r3, r3, #22
 8007272:	d402      	bmi.n	800727a <_puts_r+0x9a>
 8007274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007276:	f7ff feff 	bl	8007078 <__retarget_lock_release_recursive>
 800727a:	4628      	mov	r0, r5
 800727c:	bd70      	pop	{r4, r5, r6, pc}
 800727e:	2b00      	cmp	r3, #0
 8007280:	da04      	bge.n	800728c <_puts_r+0xac>
 8007282:	69a2      	ldr	r2, [r4, #24]
 8007284:	429a      	cmp	r2, r3
 8007286:	dc06      	bgt.n	8007296 <_puts_r+0xb6>
 8007288:	290a      	cmp	r1, #10
 800728a:	d004      	beq.n	8007296 <_puts_r+0xb6>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	6022      	str	r2, [r4, #0]
 8007292:	7019      	strb	r1, [r3, #0]
 8007294:	e7c5      	b.n	8007222 <_puts_r+0x42>
 8007296:	4622      	mov	r2, r4
 8007298:	4628      	mov	r0, r5
 800729a:	f000 f9d3 	bl	8007644 <__swbuf_r>
 800729e:	3001      	adds	r0, #1
 80072a0:	d1bf      	bne.n	8007222 <_puts_r+0x42>
 80072a2:	e7df      	b.n	8007264 <_puts_r+0x84>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	250a      	movs	r5, #10
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	6022      	str	r2, [r4, #0]
 80072ac:	701d      	strb	r5, [r3, #0]
 80072ae:	e7db      	b.n	8007268 <_puts_r+0x88>
 80072b0:	08008428 	.word	0x08008428
 80072b4:	08008448 	.word	0x08008448
 80072b8:	08008408 	.word	0x08008408

080072bc <puts>:
 80072bc:	4b02      	ldr	r3, [pc, #8]	; (80072c8 <puts+0xc>)
 80072be:	4601      	mov	r1, r0
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f7ff bf8d 	b.w	80071e0 <_puts_r>
 80072c6:	bf00      	nop
 80072c8:	20000020 	.word	0x20000020

080072cc <cleanup_glue>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	460c      	mov	r4, r1
 80072d0:	6809      	ldr	r1, [r1, #0]
 80072d2:	4605      	mov	r5, r0
 80072d4:	b109      	cbz	r1, 80072da <cleanup_glue+0xe>
 80072d6:	f7ff fff9 	bl	80072cc <cleanup_glue>
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e2:	f000 bc0f 	b.w	8007b04 <_free_r>
	...

080072e8 <_reclaim_reent>:
 80072e8:	4b2c      	ldr	r3, [pc, #176]	; (800739c <_reclaim_reent+0xb4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4283      	cmp	r3, r0
 80072ee:	b570      	push	{r4, r5, r6, lr}
 80072f0:	4604      	mov	r4, r0
 80072f2:	d051      	beq.n	8007398 <_reclaim_reent+0xb0>
 80072f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072f6:	b143      	cbz	r3, 800730a <_reclaim_reent+0x22>
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d14a      	bne.n	8007394 <_reclaim_reent+0xac>
 80072fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007300:	6819      	ldr	r1, [r3, #0]
 8007302:	b111      	cbz	r1, 800730a <_reclaim_reent+0x22>
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fbfd 	bl	8007b04 <_free_r>
 800730a:	6961      	ldr	r1, [r4, #20]
 800730c:	b111      	cbz	r1, 8007314 <_reclaim_reent+0x2c>
 800730e:	4620      	mov	r0, r4
 8007310:	f000 fbf8 	bl	8007b04 <_free_r>
 8007314:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007316:	b111      	cbz	r1, 800731e <_reclaim_reent+0x36>
 8007318:	4620      	mov	r0, r4
 800731a:	f000 fbf3 	bl	8007b04 <_free_r>
 800731e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007320:	b111      	cbz	r1, 8007328 <_reclaim_reent+0x40>
 8007322:	4620      	mov	r0, r4
 8007324:	f000 fbee 	bl	8007b04 <_free_r>
 8007328:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800732a:	b111      	cbz	r1, 8007332 <_reclaim_reent+0x4a>
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fbe9 	bl	8007b04 <_free_r>
 8007332:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007334:	b111      	cbz	r1, 800733c <_reclaim_reent+0x54>
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fbe4 	bl	8007b04 <_free_r>
 800733c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800733e:	b111      	cbz	r1, 8007346 <_reclaim_reent+0x5e>
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fbdf 	bl	8007b04 <_free_r>
 8007346:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007348:	b111      	cbz	r1, 8007350 <_reclaim_reent+0x68>
 800734a:	4620      	mov	r0, r4
 800734c:	f000 fbda 	bl	8007b04 <_free_r>
 8007350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007352:	b111      	cbz	r1, 800735a <_reclaim_reent+0x72>
 8007354:	4620      	mov	r0, r4
 8007356:	f000 fbd5 	bl	8007b04 <_free_r>
 800735a:	69a3      	ldr	r3, [r4, #24]
 800735c:	b1e3      	cbz	r3, 8007398 <_reclaim_reent+0xb0>
 800735e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007360:	4620      	mov	r0, r4
 8007362:	4798      	blx	r3
 8007364:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007366:	b1b9      	cbz	r1, 8007398 <_reclaim_reent+0xb0>
 8007368:	4620      	mov	r0, r4
 800736a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800736e:	f7ff bfad 	b.w	80072cc <cleanup_glue>
 8007372:	5949      	ldr	r1, [r1, r5]
 8007374:	b941      	cbnz	r1, 8007388 <_reclaim_reent+0xa0>
 8007376:	3504      	adds	r5, #4
 8007378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800737a:	2d80      	cmp	r5, #128	; 0x80
 800737c:	68d9      	ldr	r1, [r3, #12]
 800737e:	d1f8      	bne.n	8007372 <_reclaim_reent+0x8a>
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fbbf 	bl	8007b04 <_free_r>
 8007386:	e7ba      	b.n	80072fe <_reclaim_reent+0x16>
 8007388:	680e      	ldr	r6, [r1, #0]
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fbba 	bl	8007b04 <_free_r>
 8007390:	4631      	mov	r1, r6
 8007392:	e7ef      	b.n	8007374 <_reclaim_reent+0x8c>
 8007394:	2500      	movs	r5, #0
 8007396:	e7ef      	b.n	8007378 <_reclaim_reent+0x90>
 8007398:	bd70      	pop	{r4, r5, r6, pc}
 800739a:	bf00      	nop
 800739c:	20000020 	.word	0x20000020

080073a0 <_sbrk_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d06      	ldr	r5, [pc, #24]	; (80073bc <_sbrk_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f7f9 fe30 	bl	8001010 <_sbrk>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_sbrk_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_sbrk_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20002d74 	.word	0x20002d74

080073c0 <__sread>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	460c      	mov	r4, r1
 80073c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c8:	f000 ff1e 	bl	8008208 <_read_r>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	bfab      	itete	ge
 80073d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073d2:	89a3      	ldrhlt	r3, [r4, #12]
 80073d4:	181b      	addge	r3, r3, r0
 80073d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073da:	bfac      	ite	ge
 80073dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073de:	81a3      	strhlt	r3, [r4, #12]
 80073e0:	bd10      	pop	{r4, pc}

080073e2 <__swrite>:
 80073e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e6:	461f      	mov	r7, r3
 80073e8:	898b      	ldrh	r3, [r1, #12]
 80073ea:	05db      	lsls	r3, r3, #23
 80073ec:	4605      	mov	r5, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	4616      	mov	r6, r2
 80073f2:	d505      	bpl.n	8007400 <__swrite+0x1e>
 80073f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f8:	2302      	movs	r3, #2
 80073fa:	2200      	movs	r2, #0
 80073fc:	f000 faf6 	bl	80079ec <_lseek_r>
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	4632      	mov	r2, r6
 800740e:	463b      	mov	r3, r7
 8007410:	4628      	mov	r0, r5
 8007412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	f000 b967 	b.w	80076e8 <_write_r>

0800741a <__sseek>:
 800741a:	b510      	push	{r4, lr}
 800741c:	460c      	mov	r4, r1
 800741e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007422:	f000 fae3 	bl	80079ec <_lseek_r>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	bf15      	itete	ne
 800742c:	6560      	strne	r0, [r4, #84]	; 0x54
 800742e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007436:	81a3      	strheq	r3, [r4, #12]
 8007438:	bf18      	it	ne
 800743a:	81a3      	strhne	r3, [r4, #12]
 800743c:	bd10      	pop	{r4, pc}

0800743e <__sclose>:
 800743e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007442:	f000 b9ef 	b.w	8007824 <_close_r>

08007446 <strstr>:
 8007446:	780a      	ldrb	r2, [r1, #0]
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	b96a      	cbnz	r2, 8007468 <strstr+0x22>
 800744c:	bd70      	pop	{r4, r5, r6, pc}
 800744e:	429a      	cmp	r2, r3
 8007450:	d109      	bne.n	8007466 <strstr+0x20>
 8007452:	460c      	mov	r4, r1
 8007454:	4605      	mov	r5, r0
 8007456:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f6      	beq.n	800744c <strstr+0x6>
 800745e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007462:	429e      	cmp	r6, r3
 8007464:	d0f7      	beq.n	8007456 <strstr+0x10>
 8007466:	3001      	adds	r0, #1
 8007468:	7803      	ldrb	r3, [r0, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1ef      	bne.n	800744e <strstr+0x8>
 800746e:	4618      	mov	r0, r3
 8007470:	e7ec      	b.n	800744c <strstr+0x6>
	...

08007474 <strtok>:
 8007474:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <strtok+0x5c>)
 8007476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007478:	681e      	ldr	r6, [r3, #0]
 800747a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800747c:	4605      	mov	r5, r0
 800747e:	b9fc      	cbnz	r4, 80074c0 <strtok+0x4c>
 8007480:	2050      	movs	r0, #80	; 0x50
 8007482:	9101      	str	r1, [sp, #4]
 8007484:	f000 fb2a 	bl	8007adc <malloc>
 8007488:	9901      	ldr	r1, [sp, #4]
 800748a:	65b0      	str	r0, [r6, #88]	; 0x58
 800748c:	4602      	mov	r2, r0
 800748e:	b920      	cbnz	r0, 800749a <strtok+0x26>
 8007490:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <strtok+0x60>)
 8007492:	4811      	ldr	r0, [pc, #68]	; (80074d8 <strtok+0x64>)
 8007494:	2157      	movs	r1, #87	; 0x57
 8007496:	f000 f9a7 	bl	80077e8 <__assert_func>
 800749a:	e9c0 4400 	strd	r4, r4, [r0]
 800749e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80074a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80074a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80074aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80074ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80074b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80074b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80074ba:	6184      	str	r4, [r0, #24]
 80074bc:	7704      	strb	r4, [r0, #28]
 80074be:	6244      	str	r4, [r0, #36]	; 0x24
 80074c0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80074c2:	2301      	movs	r3, #1
 80074c4:	4628      	mov	r0, r5
 80074c6:	b002      	add	sp, #8
 80074c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80074cc:	f000 b806 	b.w	80074dc <__strtok_r>
 80074d0:	20000020 	.word	0x20000020
 80074d4:	0800846c 	.word	0x0800846c
 80074d8:	08008483 	.word	0x08008483

080074dc <__strtok_r>:
 80074dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074de:	b908      	cbnz	r0, 80074e4 <__strtok_r+0x8>
 80074e0:	6810      	ldr	r0, [r2, #0]
 80074e2:	b188      	cbz	r0, 8007508 <__strtok_r+0x2c>
 80074e4:	4604      	mov	r4, r0
 80074e6:	4620      	mov	r0, r4
 80074e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80074ec:	460f      	mov	r7, r1
 80074ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80074f2:	b91e      	cbnz	r6, 80074fc <__strtok_r+0x20>
 80074f4:	b965      	cbnz	r5, 8007510 <__strtok_r+0x34>
 80074f6:	6015      	str	r5, [r2, #0]
 80074f8:	4628      	mov	r0, r5
 80074fa:	e005      	b.n	8007508 <__strtok_r+0x2c>
 80074fc:	42b5      	cmp	r5, r6
 80074fe:	d1f6      	bne.n	80074ee <__strtok_r+0x12>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f0      	bne.n	80074e6 <__strtok_r+0xa>
 8007504:	6014      	str	r4, [r2, #0]
 8007506:	7003      	strb	r3, [r0, #0]
 8007508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800750a:	461c      	mov	r4, r3
 800750c:	e00c      	b.n	8007528 <__strtok_r+0x4c>
 800750e:	b915      	cbnz	r5, 8007516 <__strtok_r+0x3a>
 8007510:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007514:	460e      	mov	r6, r1
 8007516:	f816 5b01 	ldrb.w	r5, [r6], #1
 800751a:	42ab      	cmp	r3, r5
 800751c:	d1f7      	bne.n	800750e <__strtok_r+0x32>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f3      	beq.n	800750a <__strtok_r+0x2e>
 8007522:	2300      	movs	r3, #0
 8007524:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007528:	6014      	str	r4, [r2, #0]
 800752a:	e7ed      	b.n	8007508 <__strtok_r+0x2c>

0800752c <_strtol_l.constprop.0>:
 800752c:	2b01      	cmp	r3, #1
 800752e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007532:	d001      	beq.n	8007538 <_strtol_l.constprop.0+0xc>
 8007534:	2b24      	cmp	r3, #36	; 0x24
 8007536:	d906      	bls.n	8007546 <_strtol_l.constprop.0+0x1a>
 8007538:	f7ff fc7c 	bl	8006e34 <__errno>
 800753c:	2316      	movs	r3, #22
 800753e:	6003      	str	r3, [r0, #0]
 8007540:	2000      	movs	r0, #0
 8007542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007546:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800762c <_strtol_l.constprop.0+0x100>
 800754a:	460d      	mov	r5, r1
 800754c:	462e      	mov	r6, r5
 800754e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007552:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007556:	f017 0708 	ands.w	r7, r7, #8
 800755a:	d1f7      	bne.n	800754c <_strtol_l.constprop.0+0x20>
 800755c:	2c2d      	cmp	r4, #45	; 0x2d
 800755e:	d132      	bne.n	80075c6 <_strtol_l.constprop.0+0x9a>
 8007560:	782c      	ldrb	r4, [r5, #0]
 8007562:	2701      	movs	r7, #1
 8007564:	1cb5      	adds	r5, r6, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d05b      	beq.n	8007622 <_strtol_l.constprop.0+0xf6>
 800756a:	2b10      	cmp	r3, #16
 800756c:	d109      	bne.n	8007582 <_strtol_l.constprop.0+0x56>
 800756e:	2c30      	cmp	r4, #48	; 0x30
 8007570:	d107      	bne.n	8007582 <_strtol_l.constprop.0+0x56>
 8007572:	782c      	ldrb	r4, [r5, #0]
 8007574:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007578:	2c58      	cmp	r4, #88	; 0x58
 800757a:	d14d      	bne.n	8007618 <_strtol_l.constprop.0+0xec>
 800757c:	786c      	ldrb	r4, [r5, #1]
 800757e:	2310      	movs	r3, #16
 8007580:	3502      	adds	r5, #2
 8007582:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007586:	f108 38ff 	add.w	r8, r8, #4294967295
 800758a:	f04f 0c00 	mov.w	ip, #0
 800758e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007592:	4666      	mov	r6, ip
 8007594:	fb03 8a19 	mls	sl, r3, r9, r8
 8007598:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800759c:	f1be 0f09 	cmp.w	lr, #9
 80075a0:	d816      	bhi.n	80075d0 <_strtol_l.constprop.0+0xa4>
 80075a2:	4674      	mov	r4, lr
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	dd24      	ble.n	80075f2 <_strtol_l.constprop.0+0xc6>
 80075a8:	f1bc 0f00 	cmp.w	ip, #0
 80075ac:	db1e      	blt.n	80075ec <_strtol_l.constprop.0+0xc0>
 80075ae:	45b1      	cmp	r9, r6
 80075b0:	d31c      	bcc.n	80075ec <_strtol_l.constprop.0+0xc0>
 80075b2:	d101      	bne.n	80075b8 <_strtol_l.constprop.0+0x8c>
 80075b4:	45a2      	cmp	sl, r4
 80075b6:	db19      	blt.n	80075ec <_strtol_l.constprop.0+0xc0>
 80075b8:	fb06 4603 	mla	r6, r6, r3, r4
 80075bc:	f04f 0c01 	mov.w	ip, #1
 80075c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075c4:	e7e8      	b.n	8007598 <_strtol_l.constprop.0+0x6c>
 80075c6:	2c2b      	cmp	r4, #43	; 0x2b
 80075c8:	bf04      	itt	eq
 80075ca:	782c      	ldrbeq	r4, [r5, #0]
 80075cc:	1cb5      	addeq	r5, r6, #2
 80075ce:	e7ca      	b.n	8007566 <_strtol_l.constprop.0+0x3a>
 80075d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80075d4:	f1be 0f19 	cmp.w	lr, #25
 80075d8:	d801      	bhi.n	80075de <_strtol_l.constprop.0+0xb2>
 80075da:	3c37      	subs	r4, #55	; 0x37
 80075dc:	e7e2      	b.n	80075a4 <_strtol_l.constprop.0+0x78>
 80075de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80075e2:	f1be 0f19 	cmp.w	lr, #25
 80075e6:	d804      	bhi.n	80075f2 <_strtol_l.constprop.0+0xc6>
 80075e8:	3c57      	subs	r4, #87	; 0x57
 80075ea:	e7db      	b.n	80075a4 <_strtol_l.constprop.0+0x78>
 80075ec:	f04f 3cff 	mov.w	ip, #4294967295
 80075f0:	e7e6      	b.n	80075c0 <_strtol_l.constprop.0+0x94>
 80075f2:	f1bc 0f00 	cmp.w	ip, #0
 80075f6:	da05      	bge.n	8007604 <_strtol_l.constprop.0+0xd8>
 80075f8:	2322      	movs	r3, #34	; 0x22
 80075fa:	6003      	str	r3, [r0, #0]
 80075fc:	4646      	mov	r6, r8
 80075fe:	b942      	cbnz	r2, 8007612 <_strtol_l.constprop.0+0xe6>
 8007600:	4630      	mov	r0, r6
 8007602:	e79e      	b.n	8007542 <_strtol_l.constprop.0+0x16>
 8007604:	b107      	cbz	r7, 8007608 <_strtol_l.constprop.0+0xdc>
 8007606:	4276      	negs	r6, r6
 8007608:	2a00      	cmp	r2, #0
 800760a:	d0f9      	beq.n	8007600 <_strtol_l.constprop.0+0xd4>
 800760c:	f1bc 0f00 	cmp.w	ip, #0
 8007610:	d000      	beq.n	8007614 <_strtol_l.constprop.0+0xe8>
 8007612:	1e69      	subs	r1, r5, #1
 8007614:	6011      	str	r1, [r2, #0]
 8007616:	e7f3      	b.n	8007600 <_strtol_l.constprop.0+0xd4>
 8007618:	2430      	movs	r4, #48	; 0x30
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1b1      	bne.n	8007582 <_strtol_l.constprop.0+0x56>
 800761e:	2308      	movs	r3, #8
 8007620:	e7af      	b.n	8007582 <_strtol_l.constprop.0+0x56>
 8007622:	2c30      	cmp	r4, #48	; 0x30
 8007624:	d0a5      	beq.n	8007572 <_strtol_l.constprop.0+0x46>
 8007626:	230a      	movs	r3, #10
 8007628:	e7ab      	b.n	8007582 <_strtol_l.constprop.0+0x56>
 800762a:	bf00      	nop
 800762c:	0800851d 	.word	0x0800851d

08007630 <strtol>:
 8007630:	4613      	mov	r3, r2
 8007632:	460a      	mov	r2, r1
 8007634:	4601      	mov	r1, r0
 8007636:	4802      	ldr	r0, [pc, #8]	; (8007640 <strtol+0x10>)
 8007638:	6800      	ldr	r0, [r0, #0]
 800763a:	f7ff bf77 	b.w	800752c <_strtol_l.constprop.0>
 800763e:	bf00      	nop
 8007640:	20000020 	.word	0x20000020

08007644 <__swbuf_r>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	460e      	mov	r6, r1
 8007648:	4614      	mov	r4, r2
 800764a:	4605      	mov	r5, r0
 800764c:	b118      	cbz	r0, 8007656 <__swbuf_r+0x12>
 800764e:	6983      	ldr	r3, [r0, #24]
 8007650:	b90b      	cbnz	r3, 8007656 <__swbuf_r+0x12>
 8007652:	f7ff fc4d 	bl	8006ef0 <__sinit>
 8007656:	4b21      	ldr	r3, [pc, #132]	; (80076dc <__swbuf_r+0x98>)
 8007658:	429c      	cmp	r4, r3
 800765a:	d12b      	bne.n	80076b4 <__swbuf_r+0x70>
 800765c:	686c      	ldr	r4, [r5, #4]
 800765e:	69a3      	ldr	r3, [r4, #24]
 8007660:	60a3      	str	r3, [r4, #8]
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	071a      	lsls	r2, r3, #28
 8007666:	d52f      	bpl.n	80076c8 <__swbuf_r+0x84>
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	b36b      	cbz	r3, 80076c8 <__swbuf_r+0x84>
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	6820      	ldr	r0, [r4, #0]
 8007670:	1ac0      	subs	r0, r0, r3
 8007672:	6963      	ldr	r3, [r4, #20]
 8007674:	b2f6      	uxtb	r6, r6
 8007676:	4283      	cmp	r3, r0
 8007678:	4637      	mov	r7, r6
 800767a:	dc04      	bgt.n	8007686 <__swbuf_r+0x42>
 800767c:	4621      	mov	r1, r4
 800767e:	4628      	mov	r0, r5
 8007680:	f000 f966 	bl	8007950 <_fflush_r>
 8007684:	bb30      	cbnz	r0, 80076d4 <__swbuf_r+0x90>
 8007686:	68a3      	ldr	r3, [r4, #8]
 8007688:	3b01      	subs	r3, #1
 800768a:	60a3      	str	r3, [r4, #8]
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	6022      	str	r2, [r4, #0]
 8007692:	701e      	strb	r6, [r3, #0]
 8007694:	6963      	ldr	r3, [r4, #20]
 8007696:	3001      	adds	r0, #1
 8007698:	4283      	cmp	r3, r0
 800769a:	d004      	beq.n	80076a6 <__swbuf_r+0x62>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	07db      	lsls	r3, r3, #31
 80076a0:	d506      	bpl.n	80076b0 <__swbuf_r+0x6c>
 80076a2:	2e0a      	cmp	r6, #10
 80076a4:	d104      	bne.n	80076b0 <__swbuf_r+0x6c>
 80076a6:	4621      	mov	r1, r4
 80076a8:	4628      	mov	r0, r5
 80076aa:	f000 f951 	bl	8007950 <_fflush_r>
 80076ae:	b988      	cbnz	r0, 80076d4 <__swbuf_r+0x90>
 80076b0:	4638      	mov	r0, r7
 80076b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <__swbuf_r+0x9c>)
 80076b6:	429c      	cmp	r4, r3
 80076b8:	d101      	bne.n	80076be <__swbuf_r+0x7a>
 80076ba:	68ac      	ldr	r4, [r5, #8]
 80076bc:	e7cf      	b.n	800765e <__swbuf_r+0x1a>
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <__swbuf_r+0xa0>)
 80076c0:	429c      	cmp	r4, r3
 80076c2:	bf08      	it	eq
 80076c4:	68ec      	ldreq	r4, [r5, #12]
 80076c6:	e7ca      	b.n	800765e <__swbuf_r+0x1a>
 80076c8:	4621      	mov	r1, r4
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 f81e 	bl	800770c <__swsetup_r>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d0cb      	beq.n	800766c <__swbuf_r+0x28>
 80076d4:	f04f 37ff 	mov.w	r7, #4294967295
 80076d8:	e7ea      	b.n	80076b0 <__swbuf_r+0x6c>
 80076da:	bf00      	nop
 80076dc:	08008428 	.word	0x08008428
 80076e0:	08008448 	.word	0x08008448
 80076e4:	08008408 	.word	0x08008408

080076e8 <_write_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d07      	ldr	r5, [pc, #28]	; (8007708 <_write_r+0x20>)
 80076ec:	4604      	mov	r4, r0
 80076ee:	4608      	mov	r0, r1
 80076f0:	4611      	mov	r1, r2
 80076f2:	2200      	movs	r2, #0
 80076f4:	602a      	str	r2, [r5, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f7f9 fc39 	bl	8000f6e <_write>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d102      	bne.n	8007706 <_write_r+0x1e>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	b103      	cbz	r3, 8007706 <_write_r+0x1e>
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	20002d74 	.word	0x20002d74

0800770c <__swsetup_r>:
 800770c:	4b32      	ldr	r3, [pc, #200]	; (80077d8 <__swsetup_r+0xcc>)
 800770e:	b570      	push	{r4, r5, r6, lr}
 8007710:	681d      	ldr	r5, [r3, #0]
 8007712:	4606      	mov	r6, r0
 8007714:	460c      	mov	r4, r1
 8007716:	b125      	cbz	r5, 8007722 <__swsetup_r+0x16>
 8007718:	69ab      	ldr	r3, [r5, #24]
 800771a:	b913      	cbnz	r3, 8007722 <__swsetup_r+0x16>
 800771c:	4628      	mov	r0, r5
 800771e:	f7ff fbe7 	bl	8006ef0 <__sinit>
 8007722:	4b2e      	ldr	r3, [pc, #184]	; (80077dc <__swsetup_r+0xd0>)
 8007724:	429c      	cmp	r4, r3
 8007726:	d10f      	bne.n	8007748 <__swsetup_r+0x3c>
 8007728:	686c      	ldr	r4, [r5, #4]
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007730:	0719      	lsls	r1, r3, #28
 8007732:	d42c      	bmi.n	800778e <__swsetup_r+0x82>
 8007734:	06dd      	lsls	r5, r3, #27
 8007736:	d411      	bmi.n	800775c <__swsetup_r+0x50>
 8007738:	2309      	movs	r3, #9
 800773a:	6033      	str	r3, [r6, #0]
 800773c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007740:	81a3      	strh	r3, [r4, #12]
 8007742:	f04f 30ff 	mov.w	r0, #4294967295
 8007746:	e03e      	b.n	80077c6 <__swsetup_r+0xba>
 8007748:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <__swsetup_r+0xd4>)
 800774a:	429c      	cmp	r4, r3
 800774c:	d101      	bne.n	8007752 <__swsetup_r+0x46>
 800774e:	68ac      	ldr	r4, [r5, #8]
 8007750:	e7eb      	b.n	800772a <__swsetup_r+0x1e>
 8007752:	4b24      	ldr	r3, [pc, #144]	; (80077e4 <__swsetup_r+0xd8>)
 8007754:	429c      	cmp	r4, r3
 8007756:	bf08      	it	eq
 8007758:	68ec      	ldreq	r4, [r5, #12]
 800775a:	e7e6      	b.n	800772a <__swsetup_r+0x1e>
 800775c:	0758      	lsls	r0, r3, #29
 800775e:	d512      	bpl.n	8007786 <__swsetup_r+0x7a>
 8007760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007762:	b141      	cbz	r1, 8007776 <__swsetup_r+0x6a>
 8007764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007768:	4299      	cmp	r1, r3
 800776a:	d002      	beq.n	8007772 <__swsetup_r+0x66>
 800776c:	4630      	mov	r0, r6
 800776e:	f000 f9c9 	bl	8007b04 <_free_r>
 8007772:	2300      	movs	r3, #0
 8007774:	6363      	str	r3, [r4, #52]	; 0x34
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800777c:	81a3      	strh	r3, [r4, #12]
 800777e:	2300      	movs	r3, #0
 8007780:	6063      	str	r3, [r4, #4]
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f043 0308 	orr.w	r3, r3, #8
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	b94b      	cbnz	r3, 80077a6 <__swsetup_r+0x9a>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800779c:	d003      	beq.n	80077a6 <__swsetup_r+0x9a>
 800779e:	4621      	mov	r1, r4
 80077a0:	4630      	mov	r0, r6
 80077a2:	f000 f95b 	bl	8007a5c <__smakebuf_r>
 80077a6:	89a0      	ldrh	r0, [r4, #12]
 80077a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077ac:	f010 0301 	ands.w	r3, r0, #1
 80077b0:	d00a      	beq.n	80077c8 <__swsetup_r+0xbc>
 80077b2:	2300      	movs	r3, #0
 80077b4:	60a3      	str	r3, [r4, #8]
 80077b6:	6963      	ldr	r3, [r4, #20]
 80077b8:	425b      	negs	r3, r3
 80077ba:	61a3      	str	r3, [r4, #24]
 80077bc:	6923      	ldr	r3, [r4, #16]
 80077be:	b943      	cbnz	r3, 80077d2 <__swsetup_r+0xc6>
 80077c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077c4:	d1ba      	bne.n	800773c <__swsetup_r+0x30>
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	0781      	lsls	r1, r0, #30
 80077ca:	bf58      	it	pl
 80077cc:	6963      	ldrpl	r3, [r4, #20]
 80077ce:	60a3      	str	r3, [r4, #8]
 80077d0:	e7f4      	b.n	80077bc <__swsetup_r+0xb0>
 80077d2:	2000      	movs	r0, #0
 80077d4:	e7f7      	b.n	80077c6 <__swsetup_r+0xba>
 80077d6:	bf00      	nop
 80077d8:	20000020 	.word	0x20000020
 80077dc:	08008428 	.word	0x08008428
 80077e0:	08008448 	.word	0x08008448
 80077e4:	08008408 	.word	0x08008408

080077e8 <__assert_func>:
 80077e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ea:	4614      	mov	r4, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <__assert_func+0x2c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4605      	mov	r5, r0
 80077f4:	68d8      	ldr	r0, [r3, #12]
 80077f6:	b14c      	cbz	r4, 800780c <__assert_func+0x24>
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <__assert_func+0x30>)
 80077fa:	9100      	str	r1, [sp, #0]
 80077fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007800:	4906      	ldr	r1, [pc, #24]	; (800781c <__assert_func+0x34>)
 8007802:	462b      	mov	r3, r5
 8007804:	f000 f8e0 	bl	80079c8 <fiprintf>
 8007808:	f000 fd10 	bl	800822c <abort>
 800780c:	4b04      	ldr	r3, [pc, #16]	; (8007820 <__assert_func+0x38>)
 800780e:	461c      	mov	r4, r3
 8007810:	e7f3      	b.n	80077fa <__assert_func+0x12>
 8007812:	bf00      	nop
 8007814:	20000020 	.word	0x20000020
 8007818:	080084e0 	.word	0x080084e0
 800781c:	080084ed 	.word	0x080084ed
 8007820:	0800851b 	.word	0x0800851b

08007824 <_close_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d06      	ldr	r5, [pc, #24]	; (8007840 <_close_r+0x1c>)
 8007828:	2300      	movs	r3, #0
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7f9 fbb9 	bl	8000fa6 <_close>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_close_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_close_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	20002d74 	.word	0x20002d74

08007844 <__sflush_r>:
 8007844:	898a      	ldrh	r2, [r1, #12]
 8007846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784a:	4605      	mov	r5, r0
 800784c:	0710      	lsls	r0, r2, #28
 800784e:	460c      	mov	r4, r1
 8007850:	d458      	bmi.n	8007904 <__sflush_r+0xc0>
 8007852:	684b      	ldr	r3, [r1, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dc05      	bgt.n	8007864 <__sflush_r+0x20>
 8007858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	dc02      	bgt.n	8007864 <__sflush_r+0x20>
 800785e:	2000      	movs	r0, #0
 8007860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007866:	2e00      	cmp	r6, #0
 8007868:	d0f9      	beq.n	800785e <__sflush_r+0x1a>
 800786a:	2300      	movs	r3, #0
 800786c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007870:	682f      	ldr	r7, [r5, #0]
 8007872:	602b      	str	r3, [r5, #0]
 8007874:	d032      	beq.n	80078dc <__sflush_r+0x98>
 8007876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	075a      	lsls	r2, r3, #29
 800787c:	d505      	bpl.n	800788a <__sflush_r+0x46>
 800787e:	6863      	ldr	r3, [r4, #4]
 8007880:	1ac0      	subs	r0, r0, r3
 8007882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007884:	b10b      	cbz	r3, 800788a <__sflush_r+0x46>
 8007886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007888:	1ac0      	subs	r0, r0, r3
 800788a:	2300      	movs	r3, #0
 800788c:	4602      	mov	r2, r0
 800788e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007890:	6a21      	ldr	r1, [r4, #32]
 8007892:	4628      	mov	r0, r5
 8007894:	47b0      	blx	r6
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	d106      	bne.n	80078aa <__sflush_r+0x66>
 800789c:	6829      	ldr	r1, [r5, #0]
 800789e:	291d      	cmp	r1, #29
 80078a0:	d82c      	bhi.n	80078fc <__sflush_r+0xb8>
 80078a2:	4a2a      	ldr	r2, [pc, #168]	; (800794c <__sflush_r+0x108>)
 80078a4:	40ca      	lsrs	r2, r1
 80078a6:	07d6      	lsls	r6, r2, #31
 80078a8:	d528      	bpl.n	80078fc <__sflush_r+0xb8>
 80078aa:	2200      	movs	r2, #0
 80078ac:	6062      	str	r2, [r4, #4]
 80078ae:	04d9      	lsls	r1, r3, #19
 80078b0:	6922      	ldr	r2, [r4, #16]
 80078b2:	6022      	str	r2, [r4, #0]
 80078b4:	d504      	bpl.n	80078c0 <__sflush_r+0x7c>
 80078b6:	1c42      	adds	r2, r0, #1
 80078b8:	d101      	bne.n	80078be <__sflush_r+0x7a>
 80078ba:	682b      	ldr	r3, [r5, #0]
 80078bc:	b903      	cbnz	r3, 80078c0 <__sflush_r+0x7c>
 80078be:	6560      	str	r0, [r4, #84]	; 0x54
 80078c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078c2:	602f      	str	r7, [r5, #0]
 80078c4:	2900      	cmp	r1, #0
 80078c6:	d0ca      	beq.n	800785e <__sflush_r+0x1a>
 80078c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078cc:	4299      	cmp	r1, r3
 80078ce:	d002      	beq.n	80078d6 <__sflush_r+0x92>
 80078d0:	4628      	mov	r0, r5
 80078d2:	f000 f917 	bl	8007b04 <_free_r>
 80078d6:	2000      	movs	r0, #0
 80078d8:	6360      	str	r0, [r4, #52]	; 0x34
 80078da:	e7c1      	b.n	8007860 <__sflush_r+0x1c>
 80078dc:	6a21      	ldr	r1, [r4, #32]
 80078de:	2301      	movs	r3, #1
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b0      	blx	r6
 80078e4:	1c41      	adds	r1, r0, #1
 80078e6:	d1c7      	bne.n	8007878 <__sflush_r+0x34>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0c4      	beq.n	8007878 <__sflush_r+0x34>
 80078ee:	2b1d      	cmp	r3, #29
 80078f0:	d001      	beq.n	80078f6 <__sflush_r+0xb2>
 80078f2:	2b16      	cmp	r3, #22
 80078f4:	d101      	bne.n	80078fa <__sflush_r+0xb6>
 80078f6:	602f      	str	r7, [r5, #0]
 80078f8:	e7b1      	b.n	800785e <__sflush_r+0x1a>
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	e7ad      	b.n	8007860 <__sflush_r+0x1c>
 8007904:	690f      	ldr	r7, [r1, #16]
 8007906:	2f00      	cmp	r7, #0
 8007908:	d0a9      	beq.n	800785e <__sflush_r+0x1a>
 800790a:	0793      	lsls	r3, r2, #30
 800790c:	680e      	ldr	r6, [r1, #0]
 800790e:	bf08      	it	eq
 8007910:	694b      	ldreq	r3, [r1, #20]
 8007912:	600f      	str	r7, [r1, #0]
 8007914:	bf18      	it	ne
 8007916:	2300      	movne	r3, #0
 8007918:	eba6 0807 	sub.w	r8, r6, r7
 800791c:	608b      	str	r3, [r1, #8]
 800791e:	f1b8 0f00 	cmp.w	r8, #0
 8007922:	dd9c      	ble.n	800785e <__sflush_r+0x1a>
 8007924:	6a21      	ldr	r1, [r4, #32]
 8007926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007928:	4643      	mov	r3, r8
 800792a:	463a      	mov	r2, r7
 800792c:	4628      	mov	r0, r5
 800792e:	47b0      	blx	r6
 8007930:	2800      	cmp	r0, #0
 8007932:	dc06      	bgt.n	8007942 <__sflush_r+0xfe>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	e78e      	b.n	8007860 <__sflush_r+0x1c>
 8007942:	4407      	add	r7, r0
 8007944:	eba8 0800 	sub.w	r8, r8, r0
 8007948:	e7e9      	b.n	800791e <__sflush_r+0xda>
 800794a:	bf00      	nop
 800794c:	20400001 	.word	0x20400001

08007950 <_fflush_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	690b      	ldr	r3, [r1, #16]
 8007954:	4605      	mov	r5, r0
 8007956:	460c      	mov	r4, r1
 8007958:	b913      	cbnz	r3, 8007960 <_fflush_r+0x10>
 800795a:	2500      	movs	r5, #0
 800795c:	4628      	mov	r0, r5
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	b118      	cbz	r0, 800796a <_fflush_r+0x1a>
 8007962:	6983      	ldr	r3, [r0, #24]
 8007964:	b90b      	cbnz	r3, 800796a <_fflush_r+0x1a>
 8007966:	f7ff fac3 	bl	8006ef0 <__sinit>
 800796a:	4b14      	ldr	r3, [pc, #80]	; (80079bc <_fflush_r+0x6c>)
 800796c:	429c      	cmp	r4, r3
 800796e:	d11b      	bne.n	80079a8 <_fflush_r+0x58>
 8007970:	686c      	ldr	r4, [r5, #4]
 8007972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0ef      	beq.n	800795a <_fflush_r+0xa>
 800797a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800797c:	07d0      	lsls	r0, r2, #31
 800797e:	d404      	bmi.n	800798a <_fflush_r+0x3a>
 8007980:	0599      	lsls	r1, r3, #22
 8007982:	d402      	bmi.n	800798a <_fflush_r+0x3a>
 8007984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007986:	f7ff fb76 	bl	8007076 <__retarget_lock_acquire_recursive>
 800798a:	4628      	mov	r0, r5
 800798c:	4621      	mov	r1, r4
 800798e:	f7ff ff59 	bl	8007844 <__sflush_r>
 8007992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007994:	07da      	lsls	r2, r3, #31
 8007996:	4605      	mov	r5, r0
 8007998:	d4e0      	bmi.n	800795c <_fflush_r+0xc>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	059b      	lsls	r3, r3, #22
 800799e:	d4dd      	bmi.n	800795c <_fflush_r+0xc>
 80079a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079a2:	f7ff fb69 	bl	8007078 <__retarget_lock_release_recursive>
 80079a6:	e7d9      	b.n	800795c <_fflush_r+0xc>
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <_fflush_r+0x70>)
 80079aa:	429c      	cmp	r4, r3
 80079ac:	d101      	bne.n	80079b2 <_fflush_r+0x62>
 80079ae:	68ac      	ldr	r4, [r5, #8]
 80079b0:	e7df      	b.n	8007972 <_fflush_r+0x22>
 80079b2:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <_fflush_r+0x74>)
 80079b4:	429c      	cmp	r4, r3
 80079b6:	bf08      	it	eq
 80079b8:	68ec      	ldreq	r4, [r5, #12]
 80079ba:	e7da      	b.n	8007972 <_fflush_r+0x22>
 80079bc:	08008428 	.word	0x08008428
 80079c0:	08008448 	.word	0x08008448
 80079c4:	08008408 	.word	0x08008408

080079c8 <fiprintf>:
 80079c8:	b40e      	push	{r1, r2, r3}
 80079ca:	b503      	push	{r0, r1, lr}
 80079cc:	4601      	mov	r1, r0
 80079ce:	ab03      	add	r3, sp, #12
 80079d0:	4805      	ldr	r0, [pc, #20]	; (80079e8 <fiprintf+0x20>)
 80079d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079d6:	6800      	ldr	r0, [r0, #0]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	f000 f909 	bl	8007bf0 <_vfiprintf_r>
 80079de:	b002      	add	sp, #8
 80079e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079e4:	b003      	add	sp, #12
 80079e6:	4770      	bx	lr
 80079e8:	20000020 	.word	0x20000020

080079ec <_lseek_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d07      	ldr	r5, [pc, #28]	; (8007a0c <_lseek_r+0x20>)
 80079f0:	4604      	mov	r4, r0
 80079f2:	4608      	mov	r0, r1
 80079f4:	4611      	mov	r1, r2
 80079f6:	2200      	movs	r2, #0
 80079f8:	602a      	str	r2, [r5, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f7f9 fafa 	bl	8000ff4 <_lseek>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_lseek_r+0x1e>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_lseek_r+0x1e>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	20002d74 	.word	0x20002d74

08007a10 <__swhatbuf_r>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	460e      	mov	r6, r1
 8007a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a18:	2900      	cmp	r1, #0
 8007a1a:	b096      	sub	sp, #88	; 0x58
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	461d      	mov	r5, r3
 8007a20:	da08      	bge.n	8007a34 <__swhatbuf_r+0x24>
 8007a22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	061a      	lsls	r2, r3, #24
 8007a2c:	d410      	bmi.n	8007a50 <__swhatbuf_r+0x40>
 8007a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a32:	e00e      	b.n	8007a52 <__swhatbuf_r+0x42>
 8007a34:	466a      	mov	r2, sp
 8007a36:	f000 fc01 	bl	800823c <_fstat_r>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	dbf1      	blt.n	8007a22 <__swhatbuf_r+0x12>
 8007a3e:	9a01      	ldr	r2, [sp, #4]
 8007a40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a48:	425a      	negs	r2, r3
 8007a4a:	415a      	adcs	r2, r3
 8007a4c:	602a      	str	r2, [r5, #0]
 8007a4e:	e7ee      	b.n	8007a2e <__swhatbuf_r+0x1e>
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	2000      	movs	r0, #0
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	b016      	add	sp, #88	; 0x58
 8007a58:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a5c <__smakebuf_r>:
 8007a5c:	898b      	ldrh	r3, [r1, #12]
 8007a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a60:	079d      	lsls	r5, r3, #30
 8007a62:	4606      	mov	r6, r0
 8007a64:	460c      	mov	r4, r1
 8007a66:	d507      	bpl.n	8007a78 <__smakebuf_r+0x1c>
 8007a68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	2301      	movs	r3, #1
 8007a72:	6163      	str	r3, [r4, #20]
 8007a74:	b002      	add	sp, #8
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	ab01      	add	r3, sp, #4
 8007a7a:	466a      	mov	r2, sp
 8007a7c:	f7ff ffc8 	bl	8007a10 <__swhatbuf_r>
 8007a80:	9900      	ldr	r1, [sp, #0]
 8007a82:	4605      	mov	r5, r0
 8007a84:	4630      	mov	r0, r6
 8007a86:	f7ff fb21 	bl	80070cc <_malloc_r>
 8007a8a:	b948      	cbnz	r0, 8007aa0 <__smakebuf_r+0x44>
 8007a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a90:	059a      	lsls	r2, r3, #22
 8007a92:	d4ef      	bmi.n	8007a74 <__smakebuf_r+0x18>
 8007a94:	f023 0303 	bic.w	r3, r3, #3
 8007a98:	f043 0302 	orr.w	r3, r3, #2
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	e7e3      	b.n	8007a68 <__smakebuf_r+0xc>
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	; (8007ad8 <__smakebuf_r+0x7c>)
 8007aa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	6020      	str	r0, [r4, #0]
 8007aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aac:	81a3      	strh	r3, [r4, #12]
 8007aae:	9b00      	ldr	r3, [sp, #0]
 8007ab0:	6163      	str	r3, [r4, #20]
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	6120      	str	r0, [r4, #16]
 8007ab6:	b15b      	cbz	r3, 8007ad0 <__smakebuf_r+0x74>
 8007ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007abc:	4630      	mov	r0, r6
 8007abe:	f000 fbcf 	bl	8008260 <_isatty_r>
 8007ac2:	b128      	cbz	r0, 8007ad0 <__smakebuf_r+0x74>
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	f023 0303 	bic.w	r3, r3, #3
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	89a0      	ldrh	r0, [r4, #12]
 8007ad2:	4305      	orrs	r5, r0
 8007ad4:	81a5      	strh	r5, [r4, #12]
 8007ad6:	e7cd      	b.n	8007a74 <__smakebuf_r+0x18>
 8007ad8:	08006e89 	.word	0x08006e89

08007adc <malloc>:
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <malloc+0xc>)
 8007ade:	4601      	mov	r1, r0
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f7ff baf3 	b.w	80070cc <_malloc_r>
 8007ae6:	bf00      	nop
 8007ae8:	20000020 	.word	0x20000020

08007aec <__malloc_lock>:
 8007aec:	4801      	ldr	r0, [pc, #4]	; (8007af4 <__malloc_lock+0x8>)
 8007aee:	f7ff bac2 	b.w	8007076 <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	20002d68 	.word	0x20002d68

08007af8 <__malloc_unlock>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__malloc_unlock+0x8>)
 8007afa:	f7ff babd 	b.w	8007078 <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	20002d68 	.word	0x20002d68

08007b04 <_free_r>:
 8007b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b06:	2900      	cmp	r1, #0
 8007b08:	d044      	beq.n	8007b94 <_free_r+0x90>
 8007b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b0e:	9001      	str	r0, [sp, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f1a1 0404 	sub.w	r4, r1, #4
 8007b16:	bfb8      	it	lt
 8007b18:	18e4      	addlt	r4, r4, r3
 8007b1a:	f7ff ffe7 	bl	8007aec <__malloc_lock>
 8007b1e:	4a1e      	ldr	r2, [pc, #120]	; (8007b98 <_free_r+0x94>)
 8007b20:	9801      	ldr	r0, [sp, #4]
 8007b22:	6813      	ldr	r3, [r2, #0]
 8007b24:	b933      	cbnz	r3, 8007b34 <_free_r+0x30>
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	6014      	str	r4, [r2, #0]
 8007b2a:	b003      	add	sp, #12
 8007b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b30:	f7ff bfe2 	b.w	8007af8 <__malloc_unlock>
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	d908      	bls.n	8007b4a <_free_r+0x46>
 8007b38:	6825      	ldr	r5, [r4, #0]
 8007b3a:	1961      	adds	r1, r4, r5
 8007b3c:	428b      	cmp	r3, r1
 8007b3e:	bf01      	itttt	eq
 8007b40:	6819      	ldreq	r1, [r3, #0]
 8007b42:	685b      	ldreq	r3, [r3, #4]
 8007b44:	1949      	addeq	r1, r1, r5
 8007b46:	6021      	streq	r1, [r4, #0]
 8007b48:	e7ed      	b.n	8007b26 <_free_r+0x22>
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	b10b      	cbz	r3, 8007b54 <_free_r+0x50>
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	d9fa      	bls.n	8007b4a <_free_r+0x46>
 8007b54:	6811      	ldr	r1, [r2, #0]
 8007b56:	1855      	adds	r5, r2, r1
 8007b58:	42a5      	cmp	r5, r4
 8007b5a:	d10b      	bne.n	8007b74 <_free_r+0x70>
 8007b5c:	6824      	ldr	r4, [r4, #0]
 8007b5e:	4421      	add	r1, r4
 8007b60:	1854      	adds	r4, r2, r1
 8007b62:	42a3      	cmp	r3, r4
 8007b64:	6011      	str	r1, [r2, #0]
 8007b66:	d1e0      	bne.n	8007b2a <_free_r+0x26>
 8007b68:	681c      	ldr	r4, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	6053      	str	r3, [r2, #4]
 8007b6e:	4421      	add	r1, r4
 8007b70:	6011      	str	r1, [r2, #0]
 8007b72:	e7da      	b.n	8007b2a <_free_r+0x26>
 8007b74:	d902      	bls.n	8007b7c <_free_r+0x78>
 8007b76:	230c      	movs	r3, #12
 8007b78:	6003      	str	r3, [r0, #0]
 8007b7a:	e7d6      	b.n	8007b2a <_free_r+0x26>
 8007b7c:	6825      	ldr	r5, [r4, #0]
 8007b7e:	1961      	adds	r1, r4, r5
 8007b80:	428b      	cmp	r3, r1
 8007b82:	bf04      	itt	eq
 8007b84:	6819      	ldreq	r1, [r3, #0]
 8007b86:	685b      	ldreq	r3, [r3, #4]
 8007b88:	6063      	str	r3, [r4, #4]
 8007b8a:	bf04      	itt	eq
 8007b8c:	1949      	addeq	r1, r1, r5
 8007b8e:	6021      	streq	r1, [r4, #0]
 8007b90:	6054      	str	r4, [r2, #4]
 8007b92:	e7ca      	b.n	8007b2a <_free_r+0x26>
 8007b94:	b003      	add	sp, #12
 8007b96:	bd30      	pop	{r4, r5, pc}
 8007b98:	20002d6c 	.word	0x20002d6c

08007b9c <__sfputc_r>:
 8007b9c:	6893      	ldr	r3, [r2, #8]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	b410      	push	{r4}
 8007ba4:	6093      	str	r3, [r2, #8]
 8007ba6:	da08      	bge.n	8007bba <__sfputc_r+0x1e>
 8007ba8:	6994      	ldr	r4, [r2, #24]
 8007baa:	42a3      	cmp	r3, r4
 8007bac:	db01      	blt.n	8007bb2 <__sfputc_r+0x16>
 8007bae:	290a      	cmp	r1, #10
 8007bb0:	d103      	bne.n	8007bba <__sfputc_r+0x1e>
 8007bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bb6:	f7ff bd45 	b.w	8007644 <__swbuf_r>
 8007bba:	6813      	ldr	r3, [r2, #0]
 8007bbc:	1c58      	adds	r0, r3, #1
 8007bbe:	6010      	str	r0, [r2, #0]
 8007bc0:	7019      	strb	r1, [r3, #0]
 8007bc2:	4608      	mov	r0, r1
 8007bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <__sfputs_r>:
 8007bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bcc:	4606      	mov	r6, r0
 8007bce:	460f      	mov	r7, r1
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	18d5      	adds	r5, r2, r3
 8007bd4:	42ac      	cmp	r4, r5
 8007bd6:	d101      	bne.n	8007bdc <__sfputs_r+0x12>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	e007      	b.n	8007bec <__sfputs_r+0x22>
 8007bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be0:	463a      	mov	r2, r7
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7ff ffda 	bl	8007b9c <__sfputc_r>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d1f3      	bne.n	8007bd4 <__sfputs_r+0xa>
 8007bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bf0 <_vfiprintf_r>:
 8007bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	460d      	mov	r5, r1
 8007bf6:	b09d      	sub	sp, #116	; 0x74
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	4698      	mov	r8, r3
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	b118      	cbz	r0, 8007c08 <_vfiprintf_r+0x18>
 8007c00:	6983      	ldr	r3, [r0, #24]
 8007c02:	b90b      	cbnz	r3, 8007c08 <_vfiprintf_r+0x18>
 8007c04:	f7ff f974 	bl	8006ef0 <__sinit>
 8007c08:	4b89      	ldr	r3, [pc, #548]	; (8007e30 <_vfiprintf_r+0x240>)
 8007c0a:	429d      	cmp	r5, r3
 8007c0c:	d11b      	bne.n	8007c46 <_vfiprintf_r+0x56>
 8007c0e:	6875      	ldr	r5, [r6, #4]
 8007c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c12:	07d9      	lsls	r1, r3, #31
 8007c14:	d405      	bmi.n	8007c22 <_vfiprintf_r+0x32>
 8007c16:	89ab      	ldrh	r3, [r5, #12]
 8007c18:	059a      	lsls	r2, r3, #22
 8007c1a:	d402      	bmi.n	8007c22 <_vfiprintf_r+0x32>
 8007c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c1e:	f7ff fa2a 	bl	8007076 <__retarget_lock_acquire_recursive>
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	071b      	lsls	r3, r3, #28
 8007c26:	d501      	bpl.n	8007c2c <_vfiprintf_r+0x3c>
 8007c28:	692b      	ldr	r3, [r5, #16]
 8007c2a:	b9eb      	cbnz	r3, 8007c68 <_vfiprintf_r+0x78>
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff fd6c 	bl	800770c <__swsetup_r>
 8007c34:	b1c0      	cbz	r0, 8007c68 <_vfiprintf_r+0x78>
 8007c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c38:	07dc      	lsls	r4, r3, #31
 8007c3a:	d50e      	bpl.n	8007c5a <_vfiprintf_r+0x6a>
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c40:	b01d      	add	sp, #116	; 0x74
 8007c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c46:	4b7b      	ldr	r3, [pc, #492]	; (8007e34 <_vfiprintf_r+0x244>)
 8007c48:	429d      	cmp	r5, r3
 8007c4a:	d101      	bne.n	8007c50 <_vfiprintf_r+0x60>
 8007c4c:	68b5      	ldr	r5, [r6, #8]
 8007c4e:	e7df      	b.n	8007c10 <_vfiprintf_r+0x20>
 8007c50:	4b79      	ldr	r3, [pc, #484]	; (8007e38 <_vfiprintf_r+0x248>)
 8007c52:	429d      	cmp	r5, r3
 8007c54:	bf08      	it	eq
 8007c56:	68f5      	ldreq	r5, [r6, #12]
 8007c58:	e7da      	b.n	8007c10 <_vfiprintf_r+0x20>
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	0598      	lsls	r0, r3, #22
 8007c5e:	d4ed      	bmi.n	8007c3c <_vfiprintf_r+0x4c>
 8007c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c62:	f7ff fa09 	bl	8007078 <__retarget_lock_release_recursive>
 8007c66:	e7e9      	b.n	8007c3c <_vfiprintf_r+0x4c>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c6c:	2320      	movs	r3, #32
 8007c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c76:	2330      	movs	r3, #48	; 0x30
 8007c78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e3c <_vfiprintf_r+0x24c>
 8007c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c80:	f04f 0901 	mov.w	r9, #1
 8007c84:	4623      	mov	r3, r4
 8007c86:	469a      	mov	sl, r3
 8007c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c8c:	b10a      	cbz	r2, 8007c92 <_vfiprintf_r+0xa2>
 8007c8e:	2a25      	cmp	r2, #37	; 0x25
 8007c90:	d1f9      	bne.n	8007c86 <_vfiprintf_r+0x96>
 8007c92:	ebba 0b04 	subs.w	fp, sl, r4
 8007c96:	d00b      	beq.n	8007cb0 <_vfiprintf_r+0xc0>
 8007c98:	465b      	mov	r3, fp
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7ff ff93 	bl	8007bca <__sfputs_r>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f000 80aa 	beq.w	8007dfe <_vfiprintf_r+0x20e>
 8007caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cac:	445a      	add	r2, fp
 8007cae:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80a2 	beq.w	8007dfe <_vfiprintf_r+0x20e>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cc4:	f10a 0a01 	add.w	sl, sl, #1
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	9307      	str	r3, [sp, #28]
 8007ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007cd2:	4654      	mov	r4, sl
 8007cd4:	2205      	movs	r2, #5
 8007cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cda:	4858      	ldr	r0, [pc, #352]	; (8007e3c <_vfiprintf_r+0x24c>)
 8007cdc:	f7f8 faa0 	bl	8000220 <memchr>
 8007ce0:	9a04      	ldr	r2, [sp, #16]
 8007ce2:	b9d8      	cbnz	r0, 8007d1c <_vfiprintf_r+0x12c>
 8007ce4:	06d1      	lsls	r1, r2, #27
 8007ce6:	bf44      	itt	mi
 8007ce8:	2320      	movmi	r3, #32
 8007cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cee:	0713      	lsls	r3, r2, #28
 8007cf0:	bf44      	itt	mi
 8007cf2:	232b      	movmi	r3, #43	; 0x2b
 8007cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8007cfe:	d015      	beq.n	8007d2c <_vfiprintf_r+0x13c>
 8007d00:	9a07      	ldr	r2, [sp, #28]
 8007d02:	4654      	mov	r4, sl
 8007d04:	2000      	movs	r0, #0
 8007d06:	f04f 0c0a 	mov.w	ip, #10
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d10:	3b30      	subs	r3, #48	; 0x30
 8007d12:	2b09      	cmp	r3, #9
 8007d14:	d94e      	bls.n	8007db4 <_vfiprintf_r+0x1c4>
 8007d16:	b1b0      	cbz	r0, 8007d46 <_vfiprintf_r+0x156>
 8007d18:	9207      	str	r2, [sp, #28]
 8007d1a:	e014      	b.n	8007d46 <_vfiprintf_r+0x156>
 8007d1c:	eba0 0308 	sub.w	r3, r0, r8
 8007d20:	fa09 f303 	lsl.w	r3, r9, r3
 8007d24:	4313      	orrs	r3, r2
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	46a2      	mov	sl, r4
 8007d2a:	e7d2      	b.n	8007cd2 <_vfiprintf_r+0xe2>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	1d19      	adds	r1, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	9103      	str	r1, [sp, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bfbb      	ittet	lt
 8007d38:	425b      	neglt	r3, r3
 8007d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d3e:	9307      	strge	r3, [sp, #28]
 8007d40:	9307      	strlt	r3, [sp, #28]
 8007d42:	bfb8      	it	lt
 8007d44:	9204      	strlt	r2, [sp, #16]
 8007d46:	7823      	ldrb	r3, [r4, #0]
 8007d48:	2b2e      	cmp	r3, #46	; 0x2e
 8007d4a:	d10c      	bne.n	8007d66 <_vfiprintf_r+0x176>
 8007d4c:	7863      	ldrb	r3, [r4, #1]
 8007d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d50:	d135      	bne.n	8007dbe <_vfiprintf_r+0x1ce>
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	1d1a      	adds	r2, r3, #4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	9203      	str	r2, [sp, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfb8      	it	lt
 8007d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d62:	3402      	adds	r4, #2
 8007d64:	9305      	str	r3, [sp, #20]
 8007d66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e4c <_vfiprintf_r+0x25c>
 8007d6a:	7821      	ldrb	r1, [r4, #0]
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	4650      	mov	r0, sl
 8007d70:	f7f8 fa56 	bl	8000220 <memchr>
 8007d74:	b140      	cbz	r0, 8007d88 <_vfiprintf_r+0x198>
 8007d76:	2340      	movs	r3, #64	; 0x40
 8007d78:	eba0 000a 	sub.w	r0, r0, sl
 8007d7c:	fa03 f000 	lsl.w	r0, r3, r0
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	4303      	orrs	r3, r0
 8007d84:	3401      	adds	r4, #1
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8c:	482c      	ldr	r0, [pc, #176]	; (8007e40 <_vfiprintf_r+0x250>)
 8007d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d92:	2206      	movs	r2, #6
 8007d94:	f7f8 fa44 	bl	8000220 <memchr>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d03f      	beq.n	8007e1c <_vfiprintf_r+0x22c>
 8007d9c:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <_vfiprintf_r+0x254>)
 8007d9e:	bb1b      	cbnz	r3, 8007de8 <_vfiprintf_r+0x1f8>
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	3307      	adds	r3, #7
 8007da4:	f023 0307 	bic.w	r3, r3, #7
 8007da8:	3308      	adds	r3, #8
 8007daa:	9303      	str	r3, [sp, #12]
 8007dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dae:	443b      	add	r3, r7
 8007db0:	9309      	str	r3, [sp, #36]	; 0x24
 8007db2:	e767      	b.n	8007c84 <_vfiprintf_r+0x94>
 8007db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007db8:	460c      	mov	r4, r1
 8007dba:	2001      	movs	r0, #1
 8007dbc:	e7a5      	b.n	8007d0a <_vfiprintf_r+0x11a>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	3401      	adds	r4, #1
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f04f 0c0a 	mov.w	ip, #10
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd0:	3a30      	subs	r2, #48	; 0x30
 8007dd2:	2a09      	cmp	r2, #9
 8007dd4:	d903      	bls.n	8007dde <_vfiprintf_r+0x1ee>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0c5      	beq.n	8007d66 <_vfiprintf_r+0x176>
 8007dda:	9105      	str	r1, [sp, #20]
 8007ddc:	e7c3      	b.n	8007d66 <_vfiprintf_r+0x176>
 8007dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de2:	4604      	mov	r4, r0
 8007de4:	2301      	movs	r3, #1
 8007de6:	e7f0      	b.n	8007dca <_vfiprintf_r+0x1da>
 8007de8:	ab03      	add	r3, sp, #12
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	462a      	mov	r2, r5
 8007dee:	4b16      	ldr	r3, [pc, #88]	; (8007e48 <_vfiprintf_r+0x258>)
 8007df0:	a904      	add	r1, sp, #16
 8007df2:	4630      	mov	r0, r6
 8007df4:	f3af 8000 	nop.w
 8007df8:	4607      	mov	r7, r0
 8007dfa:	1c78      	adds	r0, r7, #1
 8007dfc:	d1d6      	bne.n	8007dac <_vfiprintf_r+0x1bc>
 8007dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e00:	07d9      	lsls	r1, r3, #31
 8007e02:	d405      	bmi.n	8007e10 <_vfiprintf_r+0x220>
 8007e04:	89ab      	ldrh	r3, [r5, #12]
 8007e06:	059a      	lsls	r2, r3, #22
 8007e08:	d402      	bmi.n	8007e10 <_vfiprintf_r+0x220>
 8007e0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e0c:	f7ff f934 	bl	8007078 <__retarget_lock_release_recursive>
 8007e10:	89ab      	ldrh	r3, [r5, #12]
 8007e12:	065b      	lsls	r3, r3, #25
 8007e14:	f53f af12 	bmi.w	8007c3c <_vfiprintf_r+0x4c>
 8007e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e1a:	e711      	b.n	8007c40 <_vfiprintf_r+0x50>
 8007e1c:	ab03      	add	r3, sp, #12
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	462a      	mov	r2, r5
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <_vfiprintf_r+0x258>)
 8007e24:	a904      	add	r1, sp, #16
 8007e26:	4630      	mov	r0, r6
 8007e28:	f000 f880 	bl	8007f2c <_printf_i>
 8007e2c:	e7e4      	b.n	8007df8 <_vfiprintf_r+0x208>
 8007e2e:	bf00      	nop
 8007e30:	08008428 	.word	0x08008428
 8007e34:	08008448 	.word	0x08008448
 8007e38:	08008408 	.word	0x08008408
 8007e3c:	0800861d 	.word	0x0800861d
 8007e40:	08008627 	.word	0x08008627
 8007e44:	00000000 	.word	0x00000000
 8007e48:	08007bcb 	.word	0x08007bcb
 8007e4c:	08008623 	.word	0x08008623

08007e50 <_printf_common>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	4616      	mov	r6, r2
 8007e56:	4699      	mov	r9, r3
 8007e58:	688a      	ldr	r2, [r1, #8]
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	bfb8      	it	lt
 8007e64:	4613      	movlt	r3, r2
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	b10a      	cbz	r2, 8007e76 <_printf_common+0x26>
 8007e72:	3301      	adds	r3, #1
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	0699      	lsls	r1, r3, #26
 8007e7a:	bf42      	ittt	mi
 8007e7c:	6833      	ldrmi	r3, [r6, #0]
 8007e7e:	3302      	addmi	r3, #2
 8007e80:	6033      	strmi	r3, [r6, #0]
 8007e82:	6825      	ldr	r5, [r4, #0]
 8007e84:	f015 0506 	ands.w	r5, r5, #6
 8007e88:	d106      	bne.n	8007e98 <_printf_common+0x48>
 8007e8a:	f104 0a19 	add.w	sl, r4, #25
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	6832      	ldr	r2, [r6, #0]
 8007e92:	1a9b      	subs	r3, r3, r2
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dc26      	bgt.n	8007ee6 <_printf_common+0x96>
 8007e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e9c:	1e13      	subs	r3, r2, #0
 8007e9e:	6822      	ldr	r2, [r4, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	0692      	lsls	r2, r2, #26
 8007ea6:	d42b      	bmi.n	8007f00 <_printf_common+0xb0>
 8007ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eac:	4649      	mov	r1, r9
 8007eae:	4638      	mov	r0, r7
 8007eb0:	47c0      	blx	r8
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d01e      	beq.n	8007ef4 <_printf_common+0xa4>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	68e5      	ldr	r5, [r4, #12]
 8007eba:	6832      	ldr	r2, [r6, #0]
 8007ebc:	f003 0306 	and.w	r3, r3, #6
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	bf08      	it	eq
 8007ec4:	1aad      	subeq	r5, r5, r2
 8007ec6:	68a3      	ldr	r3, [r4, #8]
 8007ec8:	6922      	ldr	r2, [r4, #16]
 8007eca:	bf0c      	ite	eq
 8007ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed0:	2500      	movne	r5, #0
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bfc4      	itt	gt
 8007ed6:	1a9b      	subgt	r3, r3, r2
 8007ed8:	18ed      	addgt	r5, r5, r3
 8007eda:	2600      	movs	r6, #0
 8007edc:	341a      	adds	r4, #26
 8007ede:	42b5      	cmp	r5, r6
 8007ee0:	d11a      	bne.n	8007f18 <_printf_common+0xc8>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e008      	b.n	8007ef8 <_printf_common+0xa8>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4652      	mov	r2, sl
 8007eea:	4649      	mov	r1, r9
 8007eec:	4638      	mov	r0, r7
 8007eee:	47c0      	blx	r8
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d103      	bne.n	8007efc <_printf_common+0xac>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efc:	3501      	adds	r5, #1
 8007efe:	e7c6      	b.n	8007e8e <_printf_common+0x3e>
 8007f00:	18e1      	adds	r1, r4, r3
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	2030      	movs	r0, #48	; 0x30
 8007f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f0a:	4422      	add	r2, r4
 8007f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f14:	3302      	adds	r3, #2
 8007f16:	e7c7      	b.n	8007ea8 <_printf_common+0x58>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	4638      	mov	r0, r7
 8007f20:	47c0      	blx	r8
 8007f22:	3001      	adds	r0, #1
 8007f24:	d0e6      	beq.n	8007ef4 <_printf_common+0xa4>
 8007f26:	3601      	adds	r6, #1
 8007f28:	e7d9      	b.n	8007ede <_printf_common+0x8e>
	...

08007f2c <_printf_i>:
 8007f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	7e0f      	ldrb	r7, [r1, #24]
 8007f32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f34:	2f78      	cmp	r7, #120	; 0x78
 8007f36:	4691      	mov	r9, r2
 8007f38:	4680      	mov	r8, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	469a      	mov	sl, r3
 8007f3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f42:	d807      	bhi.n	8007f54 <_printf_i+0x28>
 8007f44:	2f62      	cmp	r7, #98	; 0x62
 8007f46:	d80a      	bhi.n	8007f5e <_printf_i+0x32>
 8007f48:	2f00      	cmp	r7, #0
 8007f4a:	f000 80d8 	beq.w	80080fe <_printf_i+0x1d2>
 8007f4e:	2f58      	cmp	r7, #88	; 0x58
 8007f50:	f000 80a3 	beq.w	800809a <_printf_i+0x16e>
 8007f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f5c:	e03a      	b.n	8007fd4 <_printf_i+0xa8>
 8007f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f62:	2b15      	cmp	r3, #21
 8007f64:	d8f6      	bhi.n	8007f54 <_printf_i+0x28>
 8007f66:	a101      	add	r1, pc, #4	; (adr r1, 8007f6c <_printf_i+0x40>)
 8007f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fd9 	.word	0x08007fd9
 8007f74:	08007f55 	.word	0x08007f55
 8007f78:	08007f55 	.word	0x08007f55
 8007f7c:	08007f55 	.word	0x08007f55
 8007f80:	08007f55 	.word	0x08007f55
 8007f84:	08007fd9 	.word	0x08007fd9
 8007f88:	08007f55 	.word	0x08007f55
 8007f8c:	08007f55 	.word	0x08007f55
 8007f90:	08007f55 	.word	0x08007f55
 8007f94:	08007f55 	.word	0x08007f55
 8007f98:	080080e5 	.word	0x080080e5
 8007f9c:	08008009 	.word	0x08008009
 8007fa0:	080080c7 	.word	0x080080c7
 8007fa4:	08007f55 	.word	0x08007f55
 8007fa8:	08007f55 	.word	0x08007f55
 8007fac:	08008107 	.word	0x08008107
 8007fb0:	08007f55 	.word	0x08007f55
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	08007f55 	.word	0x08007f55
 8007fbc:	08007f55 	.word	0x08007f55
 8007fc0:	080080cf 	.word	0x080080cf
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	1d1a      	adds	r2, r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	602a      	str	r2, [r5, #0]
 8007fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e0a3      	b.n	8008120 <_printf_i+0x1f4>
 8007fd8:	6820      	ldr	r0, [r4, #0]
 8007fda:	6829      	ldr	r1, [r5, #0]
 8007fdc:	0606      	lsls	r6, r0, #24
 8007fde:	f101 0304 	add.w	r3, r1, #4
 8007fe2:	d50a      	bpl.n	8007ffa <_printf_i+0xce>
 8007fe4:	680e      	ldr	r6, [r1, #0]
 8007fe6:	602b      	str	r3, [r5, #0]
 8007fe8:	2e00      	cmp	r6, #0
 8007fea:	da03      	bge.n	8007ff4 <_printf_i+0xc8>
 8007fec:	232d      	movs	r3, #45	; 0x2d
 8007fee:	4276      	negs	r6, r6
 8007ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff4:	485e      	ldr	r0, [pc, #376]	; (8008170 <_printf_i+0x244>)
 8007ff6:	230a      	movs	r3, #10
 8007ff8:	e019      	b.n	800802e <_printf_i+0x102>
 8007ffa:	680e      	ldr	r6, [r1, #0]
 8007ffc:	602b      	str	r3, [r5, #0]
 8007ffe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008002:	bf18      	it	ne
 8008004:	b236      	sxthne	r6, r6
 8008006:	e7ef      	b.n	8007fe8 <_printf_i+0xbc>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	6820      	ldr	r0, [r4, #0]
 800800c:	1d19      	adds	r1, r3, #4
 800800e:	6029      	str	r1, [r5, #0]
 8008010:	0601      	lsls	r1, r0, #24
 8008012:	d501      	bpl.n	8008018 <_printf_i+0xec>
 8008014:	681e      	ldr	r6, [r3, #0]
 8008016:	e002      	b.n	800801e <_printf_i+0xf2>
 8008018:	0646      	lsls	r6, r0, #25
 800801a:	d5fb      	bpl.n	8008014 <_printf_i+0xe8>
 800801c:	881e      	ldrh	r6, [r3, #0]
 800801e:	4854      	ldr	r0, [pc, #336]	; (8008170 <_printf_i+0x244>)
 8008020:	2f6f      	cmp	r7, #111	; 0x6f
 8008022:	bf0c      	ite	eq
 8008024:	2308      	moveq	r3, #8
 8008026:	230a      	movne	r3, #10
 8008028:	2100      	movs	r1, #0
 800802a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800802e:	6865      	ldr	r5, [r4, #4]
 8008030:	60a5      	str	r5, [r4, #8]
 8008032:	2d00      	cmp	r5, #0
 8008034:	bfa2      	ittt	ge
 8008036:	6821      	ldrge	r1, [r4, #0]
 8008038:	f021 0104 	bicge.w	r1, r1, #4
 800803c:	6021      	strge	r1, [r4, #0]
 800803e:	b90e      	cbnz	r6, 8008044 <_printf_i+0x118>
 8008040:	2d00      	cmp	r5, #0
 8008042:	d04d      	beq.n	80080e0 <_printf_i+0x1b4>
 8008044:	4615      	mov	r5, r2
 8008046:	fbb6 f1f3 	udiv	r1, r6, r3
 800804a:	fb03 6711 	mls	r7, r3, r1, r6
 800804e:	5dc7      	ldrb	r7, [r0, r7]
 8008050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008054:	4637      	mov	r7, r6
 8008056:	42bb      	cmp	r3, r7
 8008058:	460e      	mov	r6, r1
 800805a:	d9f4      	bls.n	8008046 <_printf_i+0x11a>
 800805c:	2b08      	cmp	r3, #8
 800805e:	d10b      	bne.n	8008078 <_printf_i+0x14c>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	07de      	lsls	r6, r3, #31
 8008064:	d508      	bpl.n	8008078 <_printf_i+0x14c>
 8008066:	6923      	ldr	r3, [r4, #16]
 8008068:	6861      	ldr	r1, [r4, #4]
 800806a:	4299      	cmp	r1, r3
 800806c:	bfde      	ittt	le
 800806e:	2330      	movle	r3, #48	; 0x30
 8008070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008078:	1b52      	subs	r2, r2, r5
 800807a:	6122      	str	r2, [r4, #16]
 800807c:	f8cd a000 	str.w	sl, [sp]
 8008080:	464b      	mov	r3, r9
 8008082:	aa03      	add	r2, sp, #12
 8008084:	4621      	mov	r1, r4
 8008086:	4640      	mov	r0, r8
 8008088:	f7ff fee2 	bl	8007e50 <_printf_common>
 800808c:	3001      	adds	r0, #1
 800808e:	d14c      	bne.n	800812a <_printf_i+0x1fe>
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	b004      	add	sp, #16
 8008096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809a:	4835      	ldr	r0, [pc, #212]	; (8008170 <_printf_i+0x244>)
 800809c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080a0:	6829      	ldr	r1, [r5, #0]
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80080a8:	6029      	str	r1, [r5, #0]
 80080aa:	061d      	lsls	r5, r3, #24
 80080ac:	d514      	bpl.n	80080d8 <_printf_i+0x1ac>
 80080ae:	07df      	lsls	r7, r3, #31
 80080b0:	bf44      	itt	mi
 80080b2:	f043 0320 	orrmi.w	r3, r3, #32
 80080b6:	6023      	strmi	r3, [r4, #0]
 80080b8:	b91e      	cbnz	r6, 80080c2 <_printf_i+0x196>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	f023 0320 	bic.w	r3, r3, #32
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	2310      	movs	r3, #16
 80080c4:	e7b0      	b.n	8008028 <_printf_i+0xfc>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	f043 0320 	orr.w	r3, r3, #32
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	2378      	movs	r3, #120	; 0x78
 80080d0:	4828      	ldr	r0, [pc, #160]	; (8008174 <_printf_i+0x248>)
 80080d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080d6:	e7e3      	b.n	80080a0 <_printf_i+0x174>
 80080d8:	0659      	lsls	r1, r3, #25
 80080da:	bf48      	it	mi
 80080dc:	b2b6      	uxthmi	r6, r6
 80080de:	e7e6      	b.n	80080ae <_printf_i+0x182>
 80080e0:	4615      	mov	r5, r2
 80080e2:	e7bb      	b.n	800805c <_printf_i+0x130>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	6826      	ldr	r6, [r4, #0]
 80080e8:	6961      	ldr	r1, [r4, #20]
 80080ea:	1d18      	adds	r0, r3, #4
 80080ec:	6028      	str	r0, [r5, #0]
 80080ee:	0635      	lsls	r5, r6, #24
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	d501      	bpl.n	80080f8 <_printf_i+0x1cc>
 80080f4:	6019      	str	r1, [r3, #0]
 80080f6:	e002      	b.n	80080fe <_printf_i+0x1d2>
 80080f8:	0670      	lsls	r0, r6, #25
 80080fa:	d5fb      	bpl.n	80080f4 <_printf_i+0x1c8>
 80080fc:	8019      	strh	r1, [r3, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	4615      	mov	r5, r2
 8008104:	e7ba      	b.n	800807c <_printf_i+0x150>
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	602a      	str	r2, [r5, #0]
 800810c:	681d      	ldr	r5, [r3, #0]
 800810e:	6862      	ldr	r2, [r4, #4]
 8008110:	2100      	movs	r1, #0
 8008112:	4628      	mov	r0, r5
 8008114:	f7f8 f884 	bl	8000220 <memchr>
 8008118:	b108      	cbz	r0, 800811e <_printf_i+0x1f2>
 800811a:	1b40      	subs	r0, r0, r5
 800811c:	6060      	str	r0, [r4, #4]
 800811e:	6863      	ldr	r3, [r4, #4]
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	2300      	movs	r3, #0
 8008124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008128:	e7a8      	b.n	800807c <_printf_i+0x150>
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	462a      	mov	r2, r5
 800812e:	4649      	mov	r1, r9
 8008130:	4640      	mov	r0, r8
 8008132:	47d0      	blx	sl
 8008134:	3001      	adds	r0, #1
 8008136:	d0ab      	beq.n	8008090 <_printf_i+0x164>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	079b      	lsls	r3, r3, #30
 800813c:	d413      	bmi.n	8008166 <_printf_i+0x23a>
 800813e:	68e0      	ldr	r0, [r4, #12]
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	4298      	cmp	r0, r3
 8008144:	bfb8      	it	lt
 8008146:	4618      	movlt	r0, r3
 8008148:	e7a4      	b.n	8008094 <_printf_i+0x168>
 800814a:	2301      	movs	r3, #1
 800814c:	4632      	mov	r2, r6
 800814e:	4649      	mov	r1, r9
 8008150:	4640      	mov	r0, r8
 8008152:	47d0      	blx	sl
 8008154:	3001      	adds	r0, #1
 8008156:	d09b      	beq.n	8008090 <_printf_i+0x164>
 8008158:	3501      	adds	r5, #1
 800815a:	68e3      	ldr	r3, [r4, #12]
 800815c:	9903      	ldr	r1, [sp, #12]
 800815e:	1a5b      	subs	r3, r3, r1
 8008160:	42ab      	cmp	r3, r5
 8008162:	dcf2      	bgt.n	800814a <_printf_i+0x21e>
 8008164:	e7eb      	b.n	800813e <_printf_i+0x212>
 8008166:	2500      	movs	r5, #0
 8008168:	f104 0619 	add.w	r6, r4, #25
 800816c:	e7f5      	b.n	800815a <_printf_i+0x22e>
 800816e:	bf00      	nop
 8008170:	0800862e 	.word	0x0800862e
 8008174:	0800863f 	.word	0x0800863f

08008178 <_putc_r>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	460d      	mov	r5, r1
 800817c:	4614      	mov	r4, r2
 800817e:	4606      	mov	r6, r0
 8008180:	b118      	cbz	r0, 800818a <_putc_r+0x12>
 8008182:	6983      	ldr	r3, [r0, #24]
 8008184:	b90b      	cbnz	r3, 800818a <_putc_r+0x12>
 8008186:	f7fe feb3 	bl	8006ef0 <__sinit>
 800818a:	4b1c      	ldr	r3, [pc, #112]	; (80081fc <_putc_r+0x84>)
 800818c:	429c      	cmp	r4, r3
 800818e:	d124      	bne.n	80081da <_putc_r+0x62>
 8008190:	6874      	ldr	r4, [r6, #4]
 8008192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008194:	07d8      	lsls	r0, r3, #31
 8008196:	d405      	bmi.n	80081a4 <_putc_r+0x2c>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	0599      	lsls	r1, r3, #22
 800819c:	d402      	bmi.n	80081a4 <_putc_r+0x2c>
 800819e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a0:	f7fe ff69 	bl	8007076 <__retarget_lock_acquire_recursive>
 80081a4:	68a3      	ldr	r3, [r4, #8]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	60a3      	str	r3, [r4, #8]
 80081ac:	da05      	bge.n	80081ba <_putc_r+0x42>
 80081ae:	69a2      	ldr	r2, [r4, #24]
 80081b0:	4293      	cmp	r3, r2
 80081b2:	db1c      	blt.n	80081ee <_putc_r+0x76>
 80081b4:	b2eb      	uxtb	r3, r5
 80081b6:	2b0a      	cmp	r3, #10
 80081b8:	d019      	beq.n	80081ee <_putc_r+0x76>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	701d      	strb	r5, [r3, #0]
 80081c2:	b2ed      	uxtb	r5, r5
 80081c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081c6:	07da      	lsls	r2, r3, #31
 80081c8:	d405      	bmi.n	80081d6 <_putc_r+0x5e>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	059b      	lsls	r3, r3, #22
 80081ce:	d402      	bmi.n	80081d6 <_putc_r+0x5e>
 80081d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081d2:	f7fe ff51 	bl	8007078 <__retarget_lock_release_recursive>
 80081d6:	4628      	mov	r0, r5
 80081d8:	bd70      	pop	{r4, r5, r6, pc}
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <_putc_r+0x88>)
 80081dc:	429c      	cmp	r4, r3
 80081de:	d101      	bne.n	80081e4 <_putc_r+0x6c>
 80081e0:	68b4      	ldr	r4, [r6, #8]
 80081e2:	e7d6      	b.n	8008192 <_putc_r+0x1a>
 80081e4:	4b07      	ldr	r3, [pc, #28]	; (8008204 <_putc_r+0x8c>)
 80081e6:	429c      	cmp	r4, r3
 80081e8:	bf08      	it	eq
 80081ea:	68f4      	ldreq	r4, [r6, #12]
 80081ec:	e7d1      	b.n	8008192 <_putc_r+0x1a>
 80081ee:	4629      	mov	r1, r5
 80081f0:	4622      	mov	r2, r4
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff fa26 	bl	8007644 <__swbuf_r>
 80081f8:	4605      	mov	r5, r0
 80081fa:	e7e3      	b.n	80081c4 <_putc_r+0x4c>
 80081fc:	08008428 	.word	0x08008428
 8008200:	08008448 	.word	0x08008448
 8008204:	08008408 	.word	0x08008408

08008208 <_read_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d07      	ldr	r5, [pc, #28]	; (8008228 <_read_r+0x20>)
 800820c:	4604      	mov	r4, r0
 800820e:	4608      	mov	r0, r1
 8008210:	4611      	mov	r1, r2
 8008212:	2200      	movs	r2, #0
 8008214:	602a      	str	r2, [r5, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	f7f8 fe8c 	bl	8000f34 <_read>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_read_r+0x1e>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_read_r+0x1e>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	20002d74 	.word	0x20002d74

0800822c <abort>:
 800822c:	b508      	push	{r3, lr}
 800822e:	2006      	movs	r0, #6
 8008230:	f000 f84e 	bl	80082d0 <raise>
 8008234:	2001      	movs	r0, #1
 8008236:	f7f8 fe73 	bl	8000f20 <_exit>
	...

0800823c <_fstat_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d07      	ldr	r5, [pc, #28]	; (800825c <_fstat_r+0x20>)
 8008240:	2300      	movs	r3, #0
 8008242:	4604      	mov	r4, r0
 8008244:	4608      	mov	r0, r1
 8008246:	4611      	mov	r1, r2
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	f7f8 feb8 	bl	8000fbe <_fstat>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	d102      	bne.n	8008258 <_fstat_r+0x1c>
 8008252:	682b      	ldr	r3, [r5, #0]
 8008254:	b103      	cbz	r3, 8008258 <_fstat_r+0x1c>
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	bd38      	pop	{r3, r4, r5, pc}
 800825a:	bf00      	nop
 800825c:	20002d74 	.word	0x20002d74

08008260 <_isatty_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d06      	ldr	r5, [pc, #24]	; (800827c <_isatty_r+0x1c>)
 8008264:	2300      	movs	r3, #0
 8008266:	4604      	mov	r4, r0
 8008268:	4608      	mov	r0, r1
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	f7f8 feb7 	bl	8000fde <_isatty>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <_isatty_r+0x1a>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	b103      	cbz	r3, 800827a <_isatty_r+0x1a>
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	20002d74 	.word	0x20002d74

08008280 <_raise_r>:
 8008280:	291f      	cmp	r1, #31
 8008282:	b538      	push	{r3, r4, r5, lr}
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	d904      	bls.n	8008294 <_raise_r+0x14>
 800828a:	2316      	movs	r3, #22
 800828c:	6003      	str	r3, [r0, #0]
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008296:	b112      	cbz	r2, 800829e <_raise_r+0x1e>
 8008298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800829c:	b94b      	cbnz	r3, 80082b2 <_raise_r+0x32>
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 f830 	bl	8008304 <_getpid_r>
 80082a4:	462a      	mov	r2, r5
 80082a6:	4601      	mov	r1, r0
 80082a8:	4620      	mov	r0, r4
 80082aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ae:	f000 b817 	b.w	80082e0 <_kill_r>
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d00a      	beq.n	80082cc <_raise_r+0x4c>
 80082b6:	1c59      	adds	r1, r3, #1
 80082b8:	d103      	bne.n	80082c2 <_raise_r+0x42>
 80082ba:	2316      	movs	r3, #22
 80082bc:	6003      	str	r3, [r0, #0]
 80082be:	2001      	movs	r0, #1
 80082c0:	e7e7      	b.n	8008292 <_raise_r+0x12>
 80082c2:	2400      	movs	r4, #0
 80082c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082c8:	4628      	mov	r0, r5
 80082ca:	4798      	blx	r3
 80082cc:	2000      	movs	r0, #0
 80082ce:	e7e0      	b.n	8008292 <_raise_r+0x12>

080082d0 <raise>:
 80082d0:	4b02      	ldr	r3, [pc, #8]	; (80082dc <raise+0xc>)
 80082d2:	4601      	mov	r1, r0
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	f7ff bfd3 	b.w	8008280 <_raise_r>
 80082da:	bf00      	nop
 80082dc:	20000020 	.word	0x20000020

080082e0 <_kill_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	; (8008300 <_kill_r+0x20>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	f7f8 fe07 	bl	8000f00 <_kill>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d102      	bne.n	80082fc <_kill_r+0x1c>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	b103      	cbz	r3, 80082fc <_kill_r+0x1c>
 80082fa:	6023      	str	r3, [r4, #0]
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	bf00      	nop
 8008300:	20002d74 	.word	0x20002d74

08008304 <_getpid_r>:
 8008304:	f7f8 bdf4 	b.w	8000ef0 <_getpid>

08008308 <_init>:
 8008308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830a:	bf00      	nop
 800830c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830e:	bc08      	pop	{r3}
 8008310:	469e      	mov	lr, r3
 8008312:	4770      	bx	lr

08008314 <_fini>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr
